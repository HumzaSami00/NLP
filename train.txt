module AND_1(inp_X,inp_N,inp_V,out_J); input [1:0]inp_X,inp_N,inp_V; output [1:0]out_J; assign out_J=inp_X & inp_N & inp_V; endmodule
module AND_6(inp_F,inp_X,out_B); input [6:0]inp_F,inp_X; output [6:0]out_B; assign out_B=inp_F & inp_X
module AND_4(P,V,Z,J); input [4:0]P,V,Z; output [4:0]J; assign J=P & V & Z; endmodule
module AND_7(inp_O,inp_N,out_B); input [7:0]inp_O,inp_N; output [7:0]out_B; assign out_B=inp_O & inp_N; endmodule
module AND_5(L,E,J); input [5:0]L,E; output [5:0]J; assign J=L & E
module AND_4(B,T,G); input [4:0]B,T; output [4:0]G; assign G=B & T; endmodule
module AND_5(U,W,I,B); input [5:0]U,W,I; output [5:0]B; assign B=U & W & I; endmodule
module AND_2(T,A,Q,C); input [2:0]T,A,Q; output [2:0]C; assign C=T & A & Q
module AND_6(X,Z,O); input [6:0]X,Z; output [6:0]O; assign O=X & Z
module AND_6(P,W,L); input [6:0]P,W; output [6:0]L; assign L=P & W
module AND_7(R,S,O,W); input [7:0]R,S,O; output [7:0]W; assign W=R & S & O
module AND_6(S,I,O,D); input [6:0]S,I,O; output [6:0]D; assign D=S & I & O; endmodule
module AND_2(W,G,A,J); input [2:0]W,G,A; output [2:0]J; assign J=W & G & A
module AND_5(R,U,W,L); input [5:0]R,U,W; output [5:0]L; assign L=R & U & W; endmodule
module AND_4(inp_C,inp_A,out_H); input [4:0]inp_C,inp_A; output [4:0]out_H; assign out_H=inp_C & inp_A; endmodule
module AND_5(inp_R,inp_P,out_N); input [5:0]inp_R,inp_P; output [5:0]out_N; assign out_N=inp_R & inp_P; endmodule
module AND_4(F,M,Z); input [4:0]F,M; output [4:0]Z; assign Z=F & M
module AND_7(inp_V,inp_X,inp_P,out_P); input [7:0]inp_V,inp_X,inp_P; output [7:0]out_P; assign out_P=inp_V & inp_X & inp_P; endmodule
module AND_1(R,T,N,X); input [1:0]R,T,N; output [1:0]X; assign X=R & T & N
module AND_2(A,X,Z,J); input [2:0]A,X,Z; output [2:0]J; assign J=A & X & Z
module AND_1(inp_A,inp_B,out_S); input [1:0]inp_A,inp_B; output [1:0]out_S; assign out_S=inp_A & inp_B; endmodule
module AND_3(U,V,I,E); input [3:0]U,V,I; output [3:0]E; assign E=U & V & I; endmodule
module AND_5(O,U,I,H); input [5:0]O,U,I; output [5:0]H; assign H=O & U & I; endmodule
module AND_6(U,E,K,L); input [6:0]U,E,K; output [6:0]L; assign L=U & E & K; endmodule
module AND_1(U,I,N,K); input [1:0]U,I,N; output [1:0]K; assign K=U & I & N; endmodule
module AND_7(J,S,O,L); input [7:0]J,S,O; output [7:0]L; assign L=J & S & O
module AND_2(inp_X,inp_U,out_J); input [2:0]inp_X,inp_U; output [2:0]out_J; assign out_J=inp_X & inp_U
module AND_5(inp_Z,inp_L,out_A); input [5:0]inp_Z,inp_L; output [5:0]out_A; assign out_A=inp_Z & inp_L
module AND_6(W,P,N); input [6:0]W,P; output [6:0]N; assign N=W & P; endmodule
module AND_5(inp_J,inp_B,out_U); input [5:0]inp_J,inp_B; output [5:0]out_U; assign out_U=inp_J & inp_B
module AND_7(V,D,Z); input [7:0]V,D; output [7:0]Z; assign Z=V & D; endmodule
module AND_7(inp_E,inp_V,inp_U,out_D); input [7:0]inp_E,inp_V,inp_U; output [7:0]out_D; assign out_D=inp_E & inp_V & inp_U
module AND_6(inp_W,inp_J,inp_R,out_N); input [6:0]inp_W,inp_J,inp_R; output [6:0]out_N; assign out_N=inp_W & inp_J & inp_R
module AND_2(W,O,X); input [2:0]W,O; output [2:0]X; assign X=W & O
module AND_6(inp_V,inp_P,inp_D,out_J); input [6:0]inp_V,inp_P,inp_D; output [6:0]out_J; assign out_J=inp_V & inp_P & inp_D
module AND_6(inp_C,inp_M,inp_X,out_U); input [6:0]inp_C,inp_M,inp_X; output [6:0]out_U; assign out_U=inp_C & inp_M & inp_X
module AND_7(T,F,K,K); input [7:0]T,F,K; output [7:0]K; assign K=T & F & K
module AND_2(inp_A,inp_D,inp_O,out_D); input [2:0]inp_A,inp_D,inp_O; output [2:0]out_D; assign out_D=inp_A & inp_D & inp_O
module AND_5(inp_D,inp_T,inp_J,out_G); input [5:0]inp_D,inp_T,inp_J; output [5:0]out_G; assign out_G=inp_D & inp_T & inp_J
module AND_7(G,M,H); input [7:0]G,M; output [7:0]H; assign H=G & M
module AND_7(inp_Q,inp_U,inp_Y,out_B); input [7:0]inp_Q,inp_U,inp_Y; output [7:0]out_B; assign out_B=inp_Q & inp_U & inp_Y
module AND_7(N,P,T,W); input [7:0]N,P,T; output [7:0]W; assign W=N & P & T
module AND_7(inp_J,inp_H,inp_F,out_Z); input [7:0]inp_J,inp_H,inp_F; output [7:0]out_Z; assign out_Z=inp_J & inp_H & inp_F; endmodule
module AND_3(W,K,Q); input [3:0]W,K; output [3:0]Q; assign Q=W & K
module AND_3(F,O,B); input [3:0]F,O; output [3:0]B; assign B=F & O
module AND_2(inp_P,inp_E,inp_R,out_C); input [2:0]inp_P,inp_E,inp_R; output [2:0]out_C; assign out_C=inp_P & inp_E & inp_R; endmodule
module AND_1(B,E,C); input [1:0]B,E; output [1:0]C; assign C=B & E
module AND_2(inp_R,inp_K,inp_J,out_R); input [2:0]inp_R,inp_K,inp_J; output [2:0]out_R; assign out_R=inp_R & inp_K & inp_J; endmodule
module AND_5(F,K,O,R); input [5:0]F,K,O; output [5:0]R; assign R=F & K & O
module AND_5(T,U,R); input [5:0]T,U; output [5:0]R; assign R=T & U
module AND_4(inp_S,inp_U,out_X); input [4:0]inp_S,inp_U; output [4:0]out_X; assign out_X=inp_S & inp_U
module AND_5(M,V,L,Z); input [5:0]M,V,L; output [5:0]Z; assign Z=M & V & L; endmodule
module AND_3(X,H,I); input [3:0]X,H; output [3:0]I; assign I=X & H; endmodule
module AND_7(inp_D,inp_K,inp_L,out_V); input [7:0]inp_D,inp_K,inp_L; output [7:0]out_V; assign out_V=inp_D & inp_K & inp_L; endmodule
module AND_2(X,E,U,P); input [2:0]X,E,U; output [2:0]P; assign P=X & E & U
module AND_4(inp_D,inp_O,out_X); input [4:0]inp_D,inp_O; output [4:0]out_X; assign out_X=inp_D & inp_O
module AND_3(inp_X,inp_O,inp_L,out_O); input [3:0]inp_X,inp_O,inp_L; output [3:0]out_O; assign out_O=inp_X & inp_O & inp_L; endmodule
module AND_1(inp_B,inp_J,out_I); input [1:0]inp_B,inp_J; output [1:0]out_I; assign out_I=inp_B & inp_J; endmodule
module AND_6(O,H,Y,L); input [6:0]O,H,Y; output [6:0]L; assign L=O & H & Y; endmodule
module AND_3(inp_T,inp_G,inp_H,out_A); input [3:0]inp_T,inp_G,inp_H; output [3:0]out_A; assign out_A=inp_T & inp_G & inp_H; endmodule
module AND_3(M,L,C,J); input [3:0]M,L,C; output [3:0]J; assign J=M & L & C
module AND_2(J,A,W,P); input [2:0]J,A,W; output [2:0]P; assign P=J & A & W
module AND_2(V,N,T); input [2:0]V,N; output [2:0]T; assign T=V & N
module AND_3(inp_Y,inp_G,inp_S,out_Z); input [3:0]inp_Y,inp_G,inp_S; output [3:0]out_Z; assign out_Z=inp_Y & inp_G & inp_S
module AND_5(G,D,F,Y); input [5:0]G,D,F; output [5:0]Y; assign Y=G & D & F
module AND_4(inp_D,inp_L,out_J); input [4:0]inp_D,inp_L; output [4:0]out_J; assign out_J=inp_D & inp_L
module AND_5(inp_W,inp_E,inp_M,out_D); input [5:0]inp_W,inp_E,inp_M; output [5:0]out_D; assign out_D=inp_W & inp_E & inp_M
module AND_7(inp_V,inp_W,inp_R,out_A); input [7:0]inp_V,inp_W,inp_R; output [7:0]out_A; assign out_A=inp_V & inp_W & inp_R; endmodule
module AND_3(W,E,C); input [3:0]W,E; output [3:0]C; assign C=W & E; endmodule
module AND_1(inp_V,inp_G,out_A); input [1:0]inp_V,inp_G; output [1:0]out_A; assign out_A=inp_V & inp_G; endmodule
module AND_4(U,E,Q,W); input [4:0]U,E,Q; output [4:0]W; assign W=U & E & Q; endmodule
module AND_1(G,H,A); input [1:0]G,H; output [1:0]A; assign A=G & H; endmodule
module AND_3(inp_P,inp_X,out_X); input [3:0]inp_P,inp_X; output [3:0]out_X; assign out_X=inp_P & inp_X; endmodule
module AND_6(K,A,V,U); input [6:0]K,A,V; output [6:0]U; assign U=K & A & V; endmodule
module AND_2(inp_V,inp_F,out_L); input [2:0]inp_V,inp_F; output [2:0]out_L; assign out_L=inp_V & inp_F; endmodule
module AND_7(inp_Y,inp_M,out_H); input [7:0]inp_Y,inp_M; output [7:0]out_H; assign out_H=inp_Y & inp_M; endmodule
module AND_5(Y,H,G,X); input [5:0]Y,H,G; output [5:0]X; assign X=Y & H & G; endmodule
module AND_2(inp_U,inp_X,out_A); input [2:0]inp_U,inp_X; output [2:0]out_A; assign out_A=inp_U & inp_X; endmodule
module AND_4(inp_N,inp_U,out_T); input [4:0]inp_N,inp_U; output [4:0]out_T; assign out_T=inp_N & inp_U
module AND_1(inp_M,inp_N,out_I); input [1:0]inp_M,inp_N; output [1:0]out_I; assign out_I=inp_M & inp_N; endmodule
module AND_4(inp_U,inp_J,out_D); input [4:0]inp_U,inp_J; output [4:0]out_D; assign out_D=inp_U & inp_J
module AND_7(O,K,X); input [7:0]O,K; output [7:0]X; assign X=O & K; endmodule
module AND_2(inp_N,inp_D,inp_Z,out_S); input [2:0]inp_N,inp_D,inp_Z; output [2:0]out_S; assign out_S=inp_N & inp_D & inp_Z; endmodule
module AND_6(inp_U,inp_B,inp_S,out_W); input [6:0]inp_U,inp_B,inp_S; output [6:0]out_W; assign out_W=inp_U & inp_B & inp_S; endmodule
module AND_7(C,V,D,W); input [7:0]C,V,D; output [7:0]W; assign W=C & V & D
module AND_7(U,J,L); input [7:0]U,J; output [7:0]L; assign L=U & J; endmodule
module AND_4(Z,T,B,K); input [4:0]Z,T,B; output [4:0]K; assign K=Z & T & B; endmodule
module AND_1(inp_N,inp_O,out_Q); input [1:0]inp_N,inp_O; output [1:0]out_Q; assign out_Q=inp_N & inp_O; endmodule
module AND_1(Y,D,L); input [1:0]Y,D; output [1:0]L; assign L=Y & D
module AND_5(G,R,Z,P); input [5:0]G,R,Z; output [5:0]P; assign P=G & R & Z; endmodule
module AND_7(inp_A,inp_C,inp_N,out_B); input [7:0]inp_A,inp_C,inp_N; output [7:0]out_B; assign out_B=inp_A & inp_C & inp_N
module AND_4(W,I,H,L); input [4:0]W,I,H; output [4:0]L; assign L=W & I & H; endmodule
module AND_1(inp_U,inp_E,out_C); input [1:0]inp_U,inp_E; output [1:0]out_C; assign out_C=inp_U & inp_E; endmodule
module AND_1(Q,M,O); input [1:0]Q,M; output [1:0]O; assign O=Q & M; endmodule
module AND_1(inp_M,inp_X,out_E); input [1:0]inp_M,inp_X; output [1:0]out_E; assign out_E=inp_M & inp_X; endmodule
module AND_1(inp_D,inp_I,inp_O,out_T); input [1:0]inp_D,inp_I,inp_O; output [1:0]out_T; assign out_T=inp_D & inp_I & inp_O; endmodule
module AND_3(J,R,C); input [3:0]J,R; output [3:0]C; assign C=J & R
module AND_7(M,K,D); input [7:0]M,K; output [7:0]D; assign D=M & K
module AND_5(I,K,M,D); input [5:0]I,K,M; output [5:0]D; assign D=I & K & M
module AND_2(X,M,E); input [2:0]X,M; output [2:0]E; assign E=X & M; endmodule
module AND_5(inp_U,inp_I,out_Y); input [5:0]inp_U,inp_I; output [5:0]out_Y; assign out_Y=inp_U & inp_I
module AND_2(inp_X,inp_V,inp_J,out_K); input [2:0]inp_X,inp_V,inp_J; output [2:0]out_K; assign out_K=inp_X & inp_V & inp_J
module AND_6(G,B,P); input [6:0]G,B; output [6:0]P; assign P=G & B; endmodule
module AND_7(inp_J,inp_K,inp_P,out_G); input [7:0]inp_J,inp_K,inp_P; output [7:0]out_G; assign out_G=inp_J & inp_K & inp_P; endmodule
module AND_7(inp_F,inp_T,out_D); input [7:0]inp_F,inp_T; output [7:0]out_D; assign out_D=inp_F & inp_T; endmodule
module AND_6(W,A,D,X); input [6:0]W,A,D; output [6:0]X; assign X=W & A & D; endmodule
module AND_4(inp_L,inp_U,out_N); input [4:0]inp_L,inp_U; output [4:0]out_N; assign out_N=inp_L & inp_U
module AND_5(inp_W,inp_B,inp_S,out_Y); input [5:0]inp_W,inp_B,inp_S; output [5:0]out_Y; assign out_Y=inp_W & inp_B & inp_S
module AND_3(G,U,H,R); input [3:0]G,U,H; output [3:0]R; assign R=G & U & H; endmodule
module AND_4(R,M,O); input [4:0]R,M; output [4:0]O; assign O=R & M
module AND_3(inp_T,inp_Q,out_B); input [3:0]inp_T,inp_Q; output [3:0]out_B; assign out_B=inp_T & inp_Q; endmodule
module AND_6(inp_N,inp_E,inp_F,out_T); input [6:0]inp_N,inp_E,inp_F; output [6:0]out_T; assign out_T=inp_N & inp_E & inp_F; endmodule
module AND_3(X,J,K); input [3:0]X,J; output [3:0]K; assign K=X & J; endmodule
module AND_6(R,I,W); input [6:0]R,I; output [6:0]W; assign W=R & I
module AND_3(Y,Q,D,S); input [3:0]Y,Q,D; output [3:0]S; assign S=Y & Q & D; endmodule
module AND_4(O,G,N); input [4:0]O,G; output [4:0]N; assign N=O & G; endmodule
module AND_3(Q,Z,Y); input [3:0]Q,Z; output [3:0]Y; assign Y=Q & Z; endmodule
module AND_3(C,L,O,T); input [3:0]C,L,O; output [3:0]T; assign T=C & L & O
module AND_6(inp_Z,inp_C,out_Z); input [6:0]inp_Z,inp_C; output [6:0]out_Z; assign out_Z=inp_Z & inp_C
module AND_6(C,A,D); input [6:0]C,A; output [6:0]D; assign D=C & A; endmodule
module AND_3(inp_D,inp_P,inp_M,out_V); input [3:0]inp_D,inp_P,inp_M; output [3:0]out_V; assign out_V=inp_D & inp_P & inp_M
module AND_3(N,M,P,K); input [3:0]N,M,P; output [3:0]K; assign K=N & M & P
module AND_6(C,D,W); input [6:0]C,D; output [6:0]W; assign W=C & D
module AND_1(A,R,L); input [1:0]A,R; output [1:0]L; assign L=A & R; endmodule
module AND_1(L,M,Z); input [1:0]L,M; output [1:0]Z; assign Z=L & M; endmodule
module AND_6(Q,M,G,Y); input [6:0]Q,M,G; output [6:0]Y; assign Y=Q & M & G; endmodule
module AND_4(J,H,N); input [4:0]J,H; output [4:0]N; assign N=J & H; endmodule
module AND_5(V,B,E,L); input [5:0]V,B,E; output [5:0]L; assign L=V & B & E; endmodule
module AND_1(E,Y,E); input [1:0]E,Y; output [1:0]E; assign E=E & Y
module AND_1(N,D,P); input [1:0]N,D; output [1:0]P; assign P=N & D; endmodule
module AND_7(inp_I,inp_B,inp_O,out_B); input [7:0]inp_I,inp_B,inp_O; output [7:0]out_B; assign out_B=inp_I & inp_B & inp_O
module AND_2(inp_Q,inp_E,inp_L,out_S); input [2:0]inp_Q,inp_E,inp_L; output [2:0]out_S; assign out_S=inp_Q & inp_E & inp_L
module AND_5(inp_Z,inp_D,out_Z); input [5:0]inp_Z,inp_D; output [5:0]out_Z; assign out_Z=inp_Z & inp_D; endmodule
module AND_3(L,P,A); input [3:0]L,P; output [3:0]A; assign A=L & P
module AND_6(Y,A,J); input [6:0]Y,A; output [6:0]J; assign J=Y & A; endmodule
module AND_4(inp_K,inp_T,inp_J,out_C); input [4:0]inp_K,inp_T,inp_J; output [4:0]out_C; assign out_C=inp_K & inp_T & inp_J; endmodule
module AND_7(H,V,S); input [7:0]H,V; output [7:0]S; assign S=H & V
module AND_6(inp_A,inp_J,inp_Y,out_Q); input [6:0]inp_A,inp_J,inp_Y; output [6:0]out_Q; assign out_Q=inp_A & inp_J & inp_Y
module AND_7(inp_H,inp_V,out_I); input [7:0]inp_H,inp_V; output [7:0]out_I; assign out_I=inp_H & inp_V; endmodule
module AND_5(P,L,V); input [5:0]P,L; output [5:0]V; assign V=P & L
module AND_5(inp_S,inp_Q,out_W); input [5:0]inp_S,inp_Q; output [5:0]out_W; assign out_W=inp_S & inp_Q
module AND_1(inp_S,inp_K,out_V); input [1:0]inp_S,inp_K; output [1:0]out_V; assign out_V=inp_S & inp_K
module AND_3(V,R,O); input [3:0]V,R; output [3:0]O; assign O=V & R; endmodule
module AND_3(inp_P,inp_B,out_J); input [3:0]inp_P,inp_B; output [3:0]out_J; assign out_J=inp_P & inp_B; endmodule
module AND_3(M,D,W,S); input [3:0]M,D,W; output [3:0]S; assign S=M & D & W; endmodule
module AND_1(O,F,L); input [1:0]O,F; output [1:0]L; assign L=O & F
module AND_4(inp_Z,inp_K,inp_F,out_H); input [4:0]inp_Z,inp_K,inp_F; output [4:0]out_H; assign out_H=inp_Z & inp_K & inp_F; endmodule
module AND_3(inp_W,inp_X,inp_Y,out_L); input [3:0]inp_W,inp_X,inp_Y; output [3:0]out_L; assign out_L=inp_W & inp_X & inp_Y
module AND_7(inp_R,inp_T,inp_L,out_R); input [7:0]inp_R,inp_T,inp_L; output [7:0]out_R; assign out_R=inp_R & inp_T & inp_L
module AND_3(inp_W,inp_G,inp_B,out_V); input [3:0]inp_W,inp_G,inp_B; output [3:0]out_V; assign out_V=inp_W & inp_G & inp_B
module AND_2(C,H,G,W); input [2:0]C,H,G; output [2:0]W; assign W=C & H & G
module AND_3(inp_V,inp_X,inp_M,out_U); input [3:0]inp_V,inp_X,inp_M; output [3:0]out_U; assign out_U=inp_V & inp_X & inp_M; endmodule
module AND_7(inp_Q,inp_M,out_G); input [7:0]inp_Q,inp_M; output [7:0]out_G; assign out_G=inp_Q & inp_M
module AND_1(Y,E,T); input [1:0]Y,E; output [1:0]T; assign T=Y & E
module AND_3(inp_U,inp_J,inp_X,out_D); input [3:0]inp_U,inp_J,inp_X; output [3:0]out_D; assign out_D=inp_U & inp_J & inp_X; endmodule
module AND_4(inp_I,inp_D,inp_T,out_C); input [4:0]inp_I,inp_D,inp_T; output [4:0]out_C; assign out_C=inp_I & inp_D & inp_T
module AND_4(inp_J,inp_Y,out_Q); input [4:0]inp_J,inp_Y; output [4:0]out_Q; assign out_Q=inp_J & inp_Y; endmodule
module AND_7(D,B,R); input [7:0]D,B; output [7:0]R; assign R=D & B; endmodule
module AND_6(inp_Q,inp_A,out_R); input [6:0]inp_Q,inp_A; output [6:0]out_R; assign out_R=inp_Q & inp_A
module AND_1(inp_F,inp_J,inp_A,out_G); input [1:0]inp_F,inp_J,inp_A; output [1:0]out_G; assign out_G=inp_F & inp_J & inp_A
module AND_6(A,G,V,S); input [6:0]A,G,V; output [6:0]S; assign S=A & G & V; endmodule
module AND_7(O,C,M); input [7:0]O,C; output [7:0]M; assign M=O & C
module AND_6(inp_A,inp_O,out_K); input [6:0]inp_A,inp_O; output [6:0]out_K; assign out_K=inp_A & inp_O
module AND_4(inp_J,inp_W,inp_P,out_M); input [4:0]inp_J,inp_W,inp_P; output [4:0]out_M; assign out_M=inp_J & inp_W & inp_P; endmodule
module AND_5(inp_J,inp_I,inp_A,out_Z); input [5:0]inp_J,inp_I,inp_A; output [5:0]out_Z; assign out_Z=inp_J & inp_I & inp_A
module AND_5(inp_C,inp_R,out_H); input [5:0]inp_C,inp_R; output [5:0]out_H; assign out_H=inp_C & inp_R
module AND_7(inp_N,inp_Y,out_S); input [7:0]inp_N,inp_Y; output [7:0]out_S; assign out_S=inp_N & inp_Y
module AND_2(inp_R,inp_A,inp_T,out_L); input [2:0]inp_R,inp_A,inp_T; output [2:0]out_L; assign out_L=inp_R & inp_A & inp_T; endmodule
module AND_2(I,W,Y,G); input [2:0]I,W,Y; output [2:0]G; assign G=I & W & Y
module AND_1(inp_L,inp_E,inp_X,out_C); input [1:0]inp_L,inp_E,inp_X; output [1:0]out_C; assign out_C=inp_L & inp_E & inp_X; endmodule
module AND_4(Q,Z,V,C); input [4:0]Q,Z,V; output [4:0]C; assign C=Q & Z & V; endmodule
module AND_1(F,U,S,I); input [1:0]F,U,S; output [1:0]I; assign I=F & U & S
module AND_1(N,F,G,A); input [1:0]N,F,G; output [1:0]A; assign A=N & F & G; endmodule
module AND_4(A,Y,J,W); input [4:0]A,Y,J; output [4:0]W; assign W=A & Y & J
module AND_1(K,Q,N); input [1:0]K,Q; output [1:0]N; assign N=K & Q; endmodule
module AND_3(inp_Q,inp_O,inp_W,out_R); input [3:0]inp_Q,inp_O,inp_W; output [3:0]out_R; assign out_R=inp_Q & inp_O & inp_W; endmodule
module AND_7(T,J,E); input [7:0]T,J; output [7:0]E; assign E=T & J
module AND_4(inp_U,inp_Z,out_Q); input [4:0]inp_U,inp_Z; output [4:0]out_Q; assign out_Q=inp_U & inp_Z; endmodule
module AND_7(inp_Q,inp_M,inp_P,out_E); input [7:0]inp_Q,inp_M,inp_P; output [7:0]out_E; assign out_E=inp_Q & inp_M & inp_P
module AND_7(inp_E,inp_P,out_L); input [7:0]inp_E,inp_P; output [7:0]out_L; assign out_L=inp_E & inp_P
module AND_6(inp_T,inp_E,out_Y); input [6:0]inp_T,inp_E; output [6:0]out_Y; assign out_Y=inp_T & inp_E
module AND_6(M,N,V); input [6:0]M,N; output [6:0]V; assign V=M & N
module AND_5(L,Z,X); input [5:0]L,Z; output [5:0]X; assign X=L & Z
module AND_7(I,E,W,F); input [7:0]I,E,W; output [7:0]F; assign F=I & E & W
module AND_1(inp_Q,inp_S,out_Q); input [1:0]inp_Q,inp_S; output [1:0]out_Q; assign out_Q=inp_Q & inp_S; endmodule
module AND_7(J,B,C,N); input [7:0]J,B,C; output [7:0]N; assign N=J & B & C; endmodule
module AND_4(C,L,O); input [4:0]C,L; output [4:0]O; assign O=C & L; endmodule
module AND_7(U,Z,F,V); input [7:0]U,Z,F; output [7:0]V; assign V=U & Z & F; endmodule
module AND_3(inp_A,inp_I,inp_B,out_Q); input [3:0]inp_A,inp_I,inp_B; output [3:0]out_Q; assign out_Q=inp_A & inp_I & inp_B
module AND_2(L,C,S,B); input [2:0]L,C,S; output [2:0]B; assign B=L & C & S; endmodule
module AND_4(B,A,K); input [4:0]B,A; output [4:0]K; assign K=B & A
module AND_5(inp_K,inp_I,inp_V,out_V); input [5:0]inp_K,inp_I,inp_V; output [5:0]out_V; assign out_V=inp_K & inp_I & inp_V
module AND_6(J,T,P,N); input [6:0]J,T,P; output [6:0]N; assign N=J & T & P
module AND_1(inp_D,inp_N,out_S); input [1:0]inp_D,inp_N; output [1:0]out_S; assign out_S=inp_D & inp_N
module AND_6(I,T,N,M); input [6:0]I,T,N; output [6:0]M; assign M=I & T & N; endmodule
module AND_4(inp_Y,inp_K,out_J); input [4:0]inp_Y,inp_K; output [4:0]out_J; assign out_J=inp_Y & inp_K
module AND_7(F,W,G); input [7:0]F,W; output [7:0]G; assign G=F & W; endmodule
module AND_6(inp_W,inp_G,inp_O,out_D); input [6:0]inp_W,inp_G,inp_O; output [6:0]out_D; assign out_D=inp_W & inp_G & inp_O
module AND_4(inp_V,inp_U,out_H); input [4:0]inp_V,inp_U; output [4:0]out_H; assign out_H=inp_V & inp_U; endmodule
module AND_6(inp_V,inp_L,inp_M,out_S); input [6:0]inp_V,inp_L,inp_M; output [6:0]out_S; assign out_S=inp_V & inp_L & inp_M
module AND_5(J,H,I,E); input [5:0]J,H,I; output [5:0]E; assign E=J & H & I
module AND_3(inp_Q,inp_G,out_D); input [3:0]inp_Q,inp_G; output [3:0]out_D; assign out_D=inp_Q & inp_G; endmodule
module AND_3(B,I,T); input [3:0]B,I; output [3:0]T; assign T=B & I
module AND_3(inp_X,inp_R,out_B); input [3:0]inp_X,inp_R; output [3:0]out_B; assign out_B=inp_X & inp_R; endmodule
module AND_3(inp_E,inp_S,inp_T,out_T); input [3:0]inp_E,inp_S,inp_T; output [3:0]out_T; assign out_T=inp_E & inp_S & inp_T; endmodule
module AND_1(U,W,B); input [1:0]U,W; output [1:0]B; assign B=U & W; endmodule
module AND_3(inp_P,inp_H,inp_M,out_J); input [3:0]inp_P,inp_H,inp_M; output [3:0]out_J; assign out_J=inp_P & inp_H & inp_M
module AND_7(inp_N,inp_R,inp_Y,out_U); input [7:0]inp_N,inp_R,inp_Y; output [7:0]out_U; assign out_U=inp_N & inp_R & inp_Y; endmodule
module AND_2(T,M,X); input [2:0]T,M; output [2:0]X; assign X=T & M; endmodule
module AND_7(inp_C,inp_N,out_Y); input [7:0]inp_C,inp_N; output [7:0]out_Y; assign out_Y=inp_C & inp_N; endmodule
module AND_2(inp_N,inp_X,inp_W,out_L); input [2:0]inp_N,inp_X,inp_W; output [2:0]out_L; assign out_L=inp_N & inp_X & inp_W
module AND_3(inp_U,inp_F,inp_Y,out_L); input [3:0]inp_U,inp_F,inp_Y; output [3:0]out_L; assign out_L=inp_U & inp_F & inp_Y
module AND_3(A,X,K,Q); input [3:0]A,X,K; output [3:0]Q; assign Q=A & X & K; endmodule
module AND_7(inp_D,inp_V,out_F); input [7:0]inp_D,inp_V; output [7:0]out_F; assign out_F=inp_D & inp_V; endmodule
module AND_4(inp_T,inp_L,out_Z); input [4:0]inp_T,inp_L; output [4:0]out_Z; assign out_Z=inp_T & inp_L; endmodule
module AND_1(U,I,D); input [1:0]U,I; output [1:0]D; assign D=U & I
module AND_1(inp_I,inp_J,out_P); input [1:0]inp_I,inp_J; output [1:0]out_P; assign out_P=inp_I & inp_J; endmodule
module AND_2(inp_M,inp_Y,out_M); input [2:0]inp_M,inp_Y; output [2:0]out_M; assign out_M=inp_M & inp_Y; endmodule
module AND_3(inp_C,inp_B,out_P); input [3:0]inp_C,inp_B; output [3:0]out_P; assign out_P=inp_C & inp_B; endmodule
module AND_3(Q,I,W,J); input [3:0]Q,I,W; output [3:0]J; assign J=Q & I & W
module AND_3(inp_I,inp_W,inp_S,out_J); input [3:0]inp_I,inp_W,inp_S; output [3:0]out_J; assign out_J=inp_I & inp_W & inp_S
module AND_5(J,A,N); input [5:0]J,A; output [5:0]N; assign N=J & A; endmodule
module AND_1(inp_N,inp_W,out_K); input [1:0]inp_N,inp_W; output [1:0]out_K; assign out_K=inp_N & inp_W; endmodule
module AND_6(inp_G,inp_P,inp_C,out_P); input [6:0]inp_G,inp_P,inp_C; output [6:0]out_P; assign out_P=inp_G & inp_P & inp_C; endmodule
module AND_3(inp_I,inp_G,out_B); input [3:0]inp_I,inp_G; output [3:0]out_B; assign out_B=inp_I & inp_G; endmodule
module AND_1(Z,D,R,H); input [1:0]Z,D,R; output [1:0]H; assign H=Z & D & R
module AND_2(Y,Z,I,U); input [2:0]Y,Z,I; output [2:0]U; assign U=Y & Z & I
module AND_6(inp_F,inp_B,out_P); input [6:0]inp_F,inp_B; output [6:0]out_P; assign out_P=inp_F & inp_B
module AND_3(R,E,X); input [3:0]R,E; output [3:0]X; assign X=R & E
module AND_7(inp_N,inp_O,inp_F,out_I); input [7:0]inp_N,inp_O,inp_F; output [7:0]out_I; assign out_I=inp_N & inp_O & inp_F; endmodule
module AND_1(inp_Q,inp_G,out_T); input [1:0]inp_Q,inp_G; output [1:0]out_T; assign out_T=inp_Q & inp_G; endmodule
module AND_2(inp_I,inp_D,out_R); input [2:0]inp_I,inp_D; output [2:0]out_R; assign out_R=inp_I & inp_D; endmodule
module AND_5(B,K,R); input [5:0]B,K; output [5:0]R; assign R=B & K; endmodule
module AND_6(Q,T,A,E); input [6:0]Q,T,A; output [6:0]E; assign E=Q & T & A; endmodule
module AND_7(J,U,M,H); input [7:0]J,U,M; output [7:0]H; assign H=J & U & M
module AND_1(inp_W,inp_R,inp_D,out_A); input [1:0]inp_W,inp_R,inp_D; output [1:0]out_A; assign out_A=inp_W & inp_R & inp_D; endmodule
module AND_3(inp_L,inp_Z,inp_B,out_C); input [3:0]inp_L,inp_Z,inp_B; output [3:0]out_C; assign out_C=inp_L & inp_Z & inp_B
module AND_1(F,G,Y,X); input [1:0]F,G,Y; output [1:0]X; assign X=F & G & Y; endmodule
module AND_7(T,X,Q); input [7:0]T,X; output [7:0]Q; assign Q=T & X
module AND_7(inp_V,inp_R,inp_Y,out_T); input [7:0]inp_V,inp_R,inp_Y; output [7:0]out_T; assign out_T=inp_V & inp_R & inp_Y
module AND_5(inp_Y,inp_D,inp_E,out_U); input [5:0]inp_Y,inp_D,inp_E; output [5:0]out_U; assign out_U=inp_Y & inp_D & inp_E; endmodule
module AND_2(S,H,M,N); input [2:0]S,H,M; output [2:0]N; assign N=S & H & M; endmodule
module AND_4(R,Q,I); input [4:0]R,Q; output [4:0]I; assign I=R & Q
module AND_4(inp_B,inp_M,inp_L,out_G); input [4:0]inp_B,inp_M,inp_L; output [4:0]out_G; assign out_G=inp_B & inp_M & inp_L; endmodule
module AND_3(A,T,V); input [3:0]A,T; output [3:0]V; assign V=A & T; endmodule
module AND_2(inp_C,inp_Q,inp_K,out_C); input [2:0]inp_C,inp_Q,inp_K; output [2:0]out_C; assign out_C=inp_C & inp_Q & inp_K
module AND_2(S,F,H); input [2:0]S,F; output [2:0]H; assign H=S & F; endmodule
module AND_3(Q,D,O,P); input [3:0]Q,D,O; output [3:0]P; assign P=Q & D & O; endmodule
module AND_3(inp_W,inp_T,out_Y); input [3:0]inp_W,inp_T; output [3:0]out_Y; assign out_Y=inp_W & inp_T
module AND_5(inp_J,inp_E,out_T); input [5:0]inp_J,inp_E; output [5:0]out_T; assign out_T=inp_J & inp_E
module AND_1(Y,E,W); input [1:0]Y,E; output [1:0]W; assign W=Y & E; endmodule
module AND_7(inp_M,inp_C,inp_O,out_B); input [7:0]inp_M,inp_C,inp_O; output [7:0]out_B; assign out_B=inp_M & inp_C & inp_O
module AND_4(inp_R,inp_P,out_R); input [4:0]inp_R,inp_P; output [4:0]out_R; assign out_R=inp_R & inp_P; endmodule
module AND_4(inp_P,inp_U,out_C); input [4:0]inp_P,inp_U; output [4:0]out_C; assign out_C=inp_P & inp_U
module AND_4(R,I,L); input [4:0]R,I; output [4:0]L; assign L=R & I
module AND_3(inp_U,inp_K,out_N); input [3:0]inp_U,inp_K; output [3:0]out_N; assign out_N=inp_U & inp_K; endmodule
module AND_5(inp_L,inp_K,out_V); input [5:0]inp_L,inp_K; output [5:0]out_V; assign out_V=inp_L & inp_K; endmodule
module AND_1(X,M,Q,G); input [1:0]X,M,Q; output [1:0]G; assign G=X & M & Q
module AND_3(U,Q,F,G); input [3:0]U,Q,F; output [3:0]G; assign G=U & Q & F
module AND_3(L,J,Z); input [3:0]L,J; output [3:0]Z; assign Z=L & J; endmodule
module AND_2(L,W,P); input [2:0]L,W; output [2:0]P; assign P=L & W
module AND_7(inp_X,inp_B,inp_T,out_H); input [7:0]inp_X,inp_B,inp_T; output [7:0]out_H; assign out_H=inp_X & inp_B & inp_T; endmodule
module AND_4(inp_D,inp_L,out_S); input [4:0]inp_D,inp_L; output [4:0]out_S; assign out_S=inp_D & inp_L
module AND_4(inp_B,inp_N,inp_J,out_J); input [4:0]inp_B,inp_N,inp_J; output [4:0]out_J; assign out_J=inp_B & inp_N & inp_J; endmodule
module AND_3(inp_V,inp_Y,out_A); input [3:0]inp_V,inp_Y; output [3:0]out_A; assign out_A=inp_V & inp_Y; endmodule
module AND_3(inp_N,inp_T,inp_B,out_U); input [3:0]inp_N,inp_T,inp_B; output [3:0]out_U; assign out_U=inp_N & inp_T & inp_B; endmodule
module AND_1(F,W,V,T); input [1:0]F,W,V; output [1:0]T; assign T=F & W & V
module AND_6(P,I,W,N); input [6:0]P,I,W; output [6:0]N; assign N=P & I & W
module AND_3(inp_K,inp_D,inp_Z,out_X); input [3:0]inp_K,inp_D,inp_Z; output [3:0]out_X; assign out_X=inp_K & inp_D & inp_Z
module AND_7(inp_G,inp_E,inp_E,out_G); input [7:0]inp_G,inp_E,inp_E; output [7:0]out_G; assign out_G=inp_G & inp_E & inp_E; endmodule
module AND_3(X,D,W,C); input [3:0]X,D,W; output [3:0]C; assign C=X & D & W; endmodule
module AND_1(inp_M,inp_E,out_T); input [1:0]inp_M,inp_E; output [1:0]out_T; assign out_T=inp_M & inp_E
module AND_4(G,M,H); input [4:0]G,M; output [4:0]H; assign H=G & M
module AND_5(S,N,F,B); input [5:0]S,N,F; output [5:0]B; assign B=S & N & F
module AND_1(C,R,W,T); input [1:0]C,R,W; output [1:0]T; assign T=C & R & W
module AND_3(inp_F,inp_C,inp_D,out_V); input [3:0]inp_F,inp_C,inp_D; output [3:0]out_V; assign out_V=inp_F & inp_C & inp_D
module AND_7(P,O,X,H); input [7:0]P,O,X; output [7:0]H; assign H=P & O & X; endmodule
module AND_6(inp_A,inp_B,inp_K,out_Q); input [6:0]inp_A,inp_B,inp_K; output [6:0]out_Q; assign out_Q=inp_A & inp_B & inp_K; endmodule
module AND_6(inp_V,inp_C,inp_O,out_B); input [6:0]inp_V,inp_C,inp_O; output [6:0]out_B; assign out_B=inp_V & inp_C & inp_O; endmodule
module AND_1(T,L,S); input [1:0]T,L; output [1:0]S; assign S=T & L
module AND_1(E,R,W); input [1:0]E,R; output [1:0]W; assign W=E & R
module AND_5(B,I,A); input [5:0]B,I; output [5:0]A; assign A=B & I
module AND_3(P,S,T,X); input [3:0]P,S,T; output [3:0]X; assign X=P & S & T
module AND_3(inp_D,inp_X,inp_Z,out_T); input [3:0]inp_D,inp_X,inp_Z; output [3:0]out_T; assign out_T=inp_D & inp_X & inp_Z; endmodule
module AND_1(A,C,S); input [1:0]A,C; output [1:0]S; assign S=A & C; endmodule
module AND_6(inp_N,inp_D,inp_S,out_J); input [6:0]inp_N,inp_D,inp_S; output [6:0]out_J; assign out_J=inp_N & inp_D & inp_S
module AND_2(V,D,L,U); input [2:0]V,D,L; output [2:0]U; assign U=V & D & L; endmodule
module AND_6(inp_W,inp_C,inp_U,out_R); input [6:0]inp_W,inp_C,inp_U; output [6:0]out_R; assign out_R=inp_W & inp_C & inp_U
module AND_5(Z,A,S,Y); input [5:0]Z,A,S; output [5:0]Y; assign Y=Z & A & S; endmodule
module AND_2(inp_N,inp_W,out_A); input [2:0]inp_N,inp_W; output [2:0]out_A; assign out_A=inp_N & inp_W
module AND_7(inp_R,inp_M,inp_P,out_T); input [7:0]inp_R,inp_M,inp_P; output [7:0]out_T; assign out_T=inp_R & inp_M & inp_P
module AND_7(Y,J,I,A); input [7:0]Y,J,I; output [7:0]A; assign A=Y & J & I; endmodule
module AND_2(S,N,H,T); input [2:0]S,N,H; output [2:0]T; assign T=S & N & H; endmodule
module AND_6(P,S,Y,R); input [6:0]P,S,Y; output [6:0]R; assign R=P & S & Y; endmodule
module AND_2(D,X,L,V); input [2:0]D,X,L; output [2:0]V; assign V=D & X & L; endmodule
module AND_4(Y,O,H); input [4:0]Y,O; output [4:0]H; assign H=Y & O
module AND_5(F,O,A,R); input [5:0]F,O,A; output [5:0]R; assign R=F & O & A
module AND_7(P,A,M); input [7:0]P,A; output [7:0]M; assign M=P & A
module AND_4(inp_O,inp_B,inp_F,out_V); input [4:0]inp_O,inp_B,inp_F; output [4:0]out_V; assign out_V=inp_O & inp_B & inp_F; endmodule
module AND_6(inp_A,inp_S,inp_H,out_J); input [6:0]inp_A,inp_S,inp_H; output [6:0]out_J; assign out_J=inp_A & inp_S & inp_H
module AND_5(inp_P,inp_V,inp_Q,out_Y); input [5:0]inp_P,inp_V,inp_Q; output [5:0]out_Y; assign out_Y=inp_P & inp_V & inp_Q
module AND_7(inp_H,inp_K,out_H); input [7:0]inp_H,inp_K; output [7:0]out_H; assign out_H=inp_H & inp_K; endmodule
module AND_6(M,D,Y,Z); input [6:0]M,D,Y; output [6:0]Z; assign Z=M & D & Y; endmodule
module AND_6(F,N,W,S); input [6:0]F,N,W; output [6:0]S; assign S=F & N & W; endmodule
module AND_3(inp_A,inp_X,out_G); input [3:0]inp_A,inp_X; output [3:0]out_G; assign out_G=inp_A & inp_X
module AND_4(J,L,V,U); input [4:0]J,L,V; output [4:0]U; assign U=J & L & V; endmodule
module AND_3(inp_F,inp_Z,inp_M,out_L); input [3:0]inp_F,inp_Z,inp_M; output [3:0]out_L; assign out_L=inp_F & inp_Z & inp_M
module AND_4(inp_I,inp_P,inp_A,out_C); input [4:0]inp_I,inp_P,inp_A; output [4:0]out_C; assign out_C=inp_I & inp_P & inp_A; endmodule
module AND_2(inp_A,inp_W,inp_H,out_A); input [2:0]inp_A,inp_W,inp_H; output [2:0]out_A; assign out_A=inp_A & inp_W & inp_H; endmodule
module AND_7(C,S,V); input [7:0]C,S; output [7:0]V; assign V=C & S; endmodule
module AND_2(inp_H,inp_J,out_H); input [2:0]inp_H,inp_J; output [2:0]out_H; assign out_H=inp_H & inp_J
module AND_5(S,M,P); input [5:0]S,M; output [5:0]P; assign P=S & M; endmodule
module AND_5(inp_Q,inp_G,inp_S,out_V); input [5:0]inp_Q,inp_G,inp_S; output [5:0]out_V; assign out_V=inp_Q & inp_G & inp_S
module AND_3(inp_Z,inp_V,out_M); input [3:0]inp_Z,inp_V; output [3:0]out_M; assign out_M=inp_Z & inp_V
module AND_3(inp_U,inp_D,out_H); input [3:0]inp_U,inp_D; output [3:0]out_H; assign out_H=inp_U & inp_D
module AND_2(W,T,E); input [2:0]W,T; output [2:0]E; assign E=W & T
module AND_5(T,H,G,D); input [5:0]T,H,G; output [5:0]D; assign D=T & H & G; endmodule
module AND_3(O,F,N,S); input [3:0]O,F,N; output [3:0]S; assign S=O & F & N; endmodule
module AND_6(F,A,Y,E); input [6:0]F,A,Y; output [6:0]E; assign E=F & A & Y
module AND_5(inp_D,inp_H,inp_P,out_N); input [5:0]inp_D,inp_H,inp_P; output [5:0]out_N; assign out_N=inp_D & inp_H & inp_P
module AND_7(O,H,A,D); input [7:0]O,H,A; output [7:0]D; assign D=O & H & A; endmodule
module AND_5(D,T,B,L); input [5:0]D,T,B; output [5:0]L; assign L=D & T & B
module AND_4(inp_W,inp_G,out_A); input [4:0]inp_W,inp_G; output [4:0]out_A; assign out_A=inp_W & inp_G; endmodule
module AND_3(inp_J,inp_C,inp_Q,out_Q); input [3:0]inp_J,inp_C,inp_Q; output [3:0]out_Q; assign out_Q=inp_J & inp_C & inp_Q
module AND_2(L,H,J); input [2:0]L,H; output [2:0]J; assign J=L & H
module AND_7(inp_H,inp_C,inp_K,out_H); input [7:0]inp_H,inp_C,inp_K; output [7:0]out_H; assign out_H=inp_H & inp_C & inp_K
module AND_2(N,F,P,O); input [2:0]N,F,P; output [2:0]O; assign O=N & F & P
module AND_5(inp_Z,inp_T,out_H); input [5:0]inp_Z,inp_T; output [5:0]out_H; assign out_H=inp_Z & inp_T; endmodule
module AND_7(H,J,R); input [7:0]H,J; output [7:0]R; assign R=H & J
module AND_7(R,T,N); input [7:0]R,T; output [7:0]N; assign N=R & T; endmodule
module AND_7(inp_H,inp_I,out_H); input [7:0]inp_H,inp_I; output [7:0]out_H; assign out_H=inp_H & inp_I
module AND_1(S,B,V,D); input [1:0]S,B,V; output [1:0]D; assign D=S & B & V; endmodule
module AND_7(inp_B,inp_P,inp_D,out_J); input [7:0]inp_B,inp_P,inp_D; output [7:0]out_J; assign out_J=inp_B & inp_P & inp_D
module AND_5(Q,D,R,L); input [5:0]Q,D,R; output [5:0]L; assign L=Q & D & R
module AND_4(Z,P,H); input [4:0]Z,P; output [4:0]H; assign H=Z & P; endmodule
module AND_2(E,J,B); input [2:0]E,J; output [2:0]B; assign B=E & J; endmodule
module AND_5(inp_B,inp_C,inp_K,out_W); input [5:0]inp_B,inp_C,inp_K; output [5:0]out_W; assign out_W=inp_B & inp_C & inp_K
module AND_1(inp_W,inp_Z,out_A); input [1:0]inp_W,inp_Z; output [1:0]out_A; assign out_A=inp_W & inp_Z
module AND_2(F,D,U,K); input [2:0]F,D,U; output [2:0]K; assign K=F & D & U; endmodule
module AND_2(L,J,T); input [2:0]L,J; output [2:0]T; assign T=L & J; endmodule
module AND_7(X,C,W,F); input [7:0]X,C,W; output [7:0]F; assign F=X & C & W; endmodule
module AND_4(inp_A,inp_V,inp_L,out_E); input [4:0]inp_A,inp_V,inp_L; output [4:0]out_E; assign out_E=inp_A & inp_V & inp_L
module AND_5(inp_H,inp_B,out_R); input [5:0]inp_H,inp_B; output [5:0]out_R; assign out_R=inp_H & inp_B; endmodule
module AND_7(inp_H,inp_K,inp_F,out_I); input [7:0]inp_H,inp_K,inp_F; output [7:0]out_I; assign out_I=inp_H & inp_K & inp_F; endmodule
module AND_3(inp_Z,inp_Y,inp_O,out_R); input [3:0]inp_Z,inp_Y,inp_O; output [3:0]out_R; assign out_R=inp_Z & inp_Y & inp_O
module AND_4(inp_C,inp_G,inp_W,out_Y); input [4:0]inp_C,inp_G,inp_W; output [4:0]out_Y; assign out_Y=inp_C & inp_G & inp_W; endmodule
module AND_2(Z,N,G); input [2:0]Z,N; output [2:0]G; assign G=Z & N; endmodule
module AND_2(inp_K,inp_D,inp_Y,out_Z); input [2:0]inp_K,inp_D,inp_Y; output [2:0]out_Z; assign out_Z=inp_K & inp_D & inp_Y
module AND_4(inp_R,inp_V,out_S); input [4:0]inp_R,inp_V; output [4:0]out_S; assign out_S=inp_R & inp_V; endmodule
module AND_5(inp_G,inp_K,inp_X,out_K); input [5:0]inp_G,inp_K,inp_X; output [5:0]out_K; assign out_K=inp_G & inp_K & inp_X
module AND_2(E,C,Y); input [2:0]E,C; output [2:0]Y; assign Y=E & C; endmodule
module AND_5(Q,V,I,J); input [5:0]Q,V,I; output [5:0]J; assign J=Q & V & I; endmodule
module AND_4(U,D,N); input [4:0]U,D; output [4:0]N; assign N=U & D
module AND_4(inp_X,inp_N,inp_R,out_G); input [4:0]inp_X,inp_N,inp_R; output [4:0]out_G; assign out_G=inp_X & inp_N & inp_R
module AND_3(inp_X,inp_K,out_J); input [3:0]inp_X,inp_K; output [3:0]out_J; assign out_J=inp_X & inp_K
module AND_7(inp_O,inp_P,out_F); input [7:0]inp_O,inp_P; output [7:0]out_F; assign out_F=inp_O & inp_P; endmodule
module AND_1(inp_N,inp_V,inp_F,out_X); input [1:0]inp_N,inp_V,inp_F; output [1:0]out_X; assign out_X=inp_N & inp_V & inp_F; endmodule
module AND_7(W,T,A); input [7:0]W,T; output [7:0]A; assign A=W & T
module AND_2(L,F,Q,W); input [2:0]L,F,Q; output [2:0]W; assign W=L & F & Q; endmodule
module AND_6(Z,W,P,U); input [6:0]Z,W,P; output [6:0]U; assign U=Z & W & P; endmodule
module AND_3(R,J,X,E); input [3:0]R,J,X; output [3:0]E; assign E=R & J & X
module AND_6(T,U,M,P); input [6:0]T,U,M; output [6:0]P; assign P=T & U & M
module AND_7(inp_I,inp_Y,out_I); input [7:0]inp_I,inp_Y; output [7:0]out_I; assign out_I=inp_I & inp_Y; endmodule
module AND_4(U,X,J); input [4:0]U,X; output [4:0]J; assign J=U & X; endmodule
module AND_7(inp_Q,inp_P,out_M); input [7:0]inp_Q,inp_P; output [7:0]out_M; assign out_M=inp_Q & inp_P; endmodule
module AND_1(inp_V,inp_S,out_L); input [1:0]inp_V,inp_S; output [1:0]out_L; assign out_L=inp_V & inp_S
module AND_3(inp_L,inp_N,out_L); input [3:0]inp_L,inp_N; output [3:0]out_L; assign out_L=inp_L & inp_N
module AND_7(inp_J,inp_M,out_M); input [7:0]inp_J,inp_M; output [7:0]out_M; assign out_M=inp_J & inp_M
module AND_5(inp_H,inp_R,out_C); input [5:0]inp_H,inp_R; output [5:0]out_C; assign out_C=inp_H & inp_R
module AND_2(inp_E,inp_W,out_X); input [2:0]inp_E,inp_W; output [2:0]out_X; assign out_X=inp_E & inp_W
module AND_6(P,R,O); input [6:0]P,R; output [6:0]O; assign O=P & R; endmodule
module AND_6(inp_X,inp_L,out_A); input [6:0]inp_X,inp_L; output [6:0]out_A; assign out_A=inp_X & inp_L; endmodule
module AND_3(J,V,D); input [3:0]J,V; output [3:0]D; assign D=J & V
module AND_2(inp_P,inp_R,out_L); input [2:0]inp_P,inp_R; output [2:0]out_L; assign out_L=inp_P & inp_R; endmodule
module AND_5(K,Z,V,Q); input [5:0]K,Z,V; output [5:0]Q; assign Q=K & Z & V
module AND_6(Z,L,K); input [6:0]Z,L; output [6:0]K; assign K=Z & L; endmodule
module AND_5(inp_O,inp_D,inp_Y,out_N); input [5:0]inp_O,inp_D,inp_Y; output [5:0]out_N; assign out_N=inp_O & inp_D & inp_Y
module AND_1(inp_S,inp_M,inp_V,out_I); input [1:0]inp_S,inp_M,inp_V; output [1:0]out_I; assign out_I=inp_S & inp_M & inp_V; endmodule
module AND_3(D,G,M,W); input [3:0]D,G,M; output [3:0]W; assign W=D & G & M; endmodule
module AND_4(A,D,J,L); input [4:0]A,D,J; output [4:0]L; assign L=A & D & J
module AND_6(B,M,I,K); input [6:0]B,M,I; output [6:0]K; assign K=B & M & I
module AND_4(K,D,I); input [4:0]K,D; output [4:0]I; assign I=K & D
module AND_7(E,A,P); input [7:0]E,A; output [7:0]P; assign P=E & A; endmodule
module AND_2(U,G,Q); input [2:0]U,G; output [2:0]Q; assign Q=U & G
module AND_5(inp_V,inp_L,inp_X,out_J); input [5:0]inp_V,inp_L,inp_X; output [5:0]out_J; assign out_J=inp_V & inp_L & inp_X
module AND_7(inp_T,inp_Z,out_V); input [7:0]inp_T,inp_Z; output [7:0]out_V; assign out_V=inp_T & inp_Z; endmodule
module AND_7(Y,L,F,K); input [7:0]Y,L,F; output [7:0]K; assign K=Y & L & F
module AND_5(U,W,E); input [5:0]U,W; output [5:0]E; assign E=U & W
module AND_4(Q,G,N); input [4:0]Q,G; output [4:0]N; assign N=Q & G; endmodule
module AND_1(inp_G,inp_F,inp_B,out_S); input [1:0]inp_G,inp_F,inp_B; output [1:0]out_S; assign out_S=inp_G & inp_F & inp_B; endmodule
module AND_1(inp_H,inp_J,out_T); input [1:0]inp_H,inp_J; output [1:0]out_T; assign out_T=inp_H & inp_J; endmodule
module AND_2(inp_W,inp_B,out_P); input [2:0]inp_W,inp_B; output [2:0]out_P; assign out_P=inp_W & inp_B; endmodule
module AND_1(inp_J,inp_N,out_S); input [1:0]inp_J,inp_N; output [1:0]out_S; assign out_S=inp_J & inp_N; endmodule
module AND_6(S,K,A); input [6:0]S,K; output [6:0]A; assign A=S & K
module AND_1(W,D,F,B); input [1:0]W,D,F; output [1:0]B; assign B=W & D & F
module AND_2(inp_V,inp_F,inp_N,out_C); input [2:0]inp_V,inp_F,inp_N; output [2:0]out_C; assign out_C=inp_V & inp_F & inp_N; endmodule
module AND_6(inp_L,inp_Q,out_O); input [6:0]inp_L,inp_Q; output [6:0]out_O; assign out_O=inp_L & inp_Q; endmodule
module AND_6(A,Y,I,L); input [6:0]A,Y,I; output [6:0]L; assign L=A & Y & I; endmodule
module AND_7(inp_O,inp_W,out_N); input [7:0]inp_O,inp_W; output [7:0]out_N; assign out_N=inp_O & inp_W
module AND_3(G,E,K); input [3:0]G,E; output [3:0]K; assign K=G & E
module AND_2(V,D,C); input [2:0]V,D; output [2:0]C; assign C=V & D; endmodule
module AND_1(G,F,B); input [1:0]G,F; output [1:0]B; assign B=G & F
module AND_6(inp_Y,inp_F,out_I); input [6:0]inp_Y,inp_F; output [6:0]out_I; assign out_I=inp_Y & inp_F
module AND_4(inp_V,inp_J,out_J); input [4:0]inp_V,inp_J; output [4:0]out_J; assign out_J=inp_V & inp_J; endmodule
module AND_3(inp_H,inp_L,out_C); input [3:0]inp_H,inp_L; output [3:0]out_C; assign out_C=inp_H & inp_L
module AND_5(X,Y,S); input [5:0]X,Y; output [5:0]S; assign S=X & Y
module AND_4(inp_F,inp_W,inp_M,out_Z); input [4:0]inp_F,inp_W,inp_M; output [4:0]out_Z; assign out_Z=inp_F & inp_W & inp_M; endmodule
module AND_1(T,S,Q); input [1:0]T,S; output [1:0]Q; assign Q=T & S; endmodule
module AND_5(X,V,Q,M); input [5:0]X,V,Q; output [5:0]M; assign M=X & V & Q
module AND_7(inp_H,inp_W,inp_B,out_I); input [7:0]inp_H,inp_W,inp_B; output [7:0]out_I; assign out_I=inp_H & inp_W & inp_B
module AND_7(inp_Q,inp_N,out_B); input [7:0]inp_Q,inp_N; output [7:0]out_B; assign out_B=inp_Q & inp_N
module AND_2(T,E,Z); input [2:0]T,E; output [2:0]Z; assign Z=T & E
module AND_7(inp_S,inp_L,inp_M,out_H); input [7:0]inp_S,inp_L,inp_M; output [7:0]out_H; assign out_H=inp_S & inp_L & inp_M
module AND_1(J,X,V); input [1:0]J,X; output [1:0]V; assign V=J & X
module AND_5(S,E,J,R); input [5:0]S,E,J; output [5:0]R; assign R=S & E & J; endmodule
module AND_7(Q,L,W); input [7:0]Q,L; output [7:0]W; assign W=Q & L
module AND_5(inp_K,inp_V,inp_R,out_Y); input [5:0]inp_K,inp_V,inp_R; output [5:0]out_Y; assign out_Y=inp_K & inp_V & inp_R; endmodule
module AND_5(V,Q,Z,R); input [5:0]V,Q,Z; output [5:0]R; assign R=V & Q & Z; endmodule
module AND_7(inp_M,inp_C,out_D); input [7:0]inp_M,inp_C; output [7:0]out_D; assign out_D=inp_M & inp_C
module AND_5(inp_O,inp_M,out_S); input [5:0]inp_O,inp_M; output [5:0]out_S; assign out_S=inp_O & inp_M; endmodule
module AND_4(D,J,R); input [4:0]D,J; output [4:0]R; assign R=D & J
module AND_7(inp_L,inp_I,out_C); input [7:0]inp_L,inp_I; output [7:0]out_C; assign out_C=inp_L & inp_I
module AND_7(inp_S,inp_E,out_Z); input [7:0]inp_S,inp_E; output [7:0]out_Z; assign out_Z=inp_S & inp_E
module AND_6(X,Y,F,L); input [6:0]X,Y,F; output [6:0]L; assign L=X & Y & F; endmodule
module AND_6(inp_L,inp_A,out_P); input [6:0]inp_L,inp_A; output [6:0]out_P; assign out_P=inp_L & inp_A; endmodule
module AND_2(inp_O,inp_L,inp_T,out_H); input [2:0]inp_O,inp_L,inp_T; output [2:0]out_H; assign out_H=inp_O & inp_L & inp_T
module AND_1(M,K,J); input [1:0]M,K; output [1:0]J; assign J=M & K
module AND_6(X,Z,E,H); input [6:0]X,Z,E; output [6:0]H; assign H=X & Z & E
module AND_3(I,K,G); input [3:0]I,K; output [3:0]G; assign G=I & K; endmodule
module AND_7(J,A,X); input [7:0]J,A; output [7:0]X; assign X=J & A; endmodule
module AND_5(Q,D,W,G); input [5:0]Q,D,W; output [5:0]G; assign G=Q & D & W; endmodule
module AND_5(inp_K,inp_J,out_L); input [5:0]inp_K,inp_J; output [5:0]out_L; assign out_L=inp_K & inp_J; endmodule
module AND_3(A,I,T,F); input [3:0]A,I,T; output [3:0]F; assign F=A & I & T
module AND_4(inp_J,inp_C,out_Z); input [4:0]inp_J,inp_C; output [4:0]out_Z; assign out_Z=inp_J & inp_C; endmodule
module AND_7(inp_K,inp_Q,out_B); input [7:0]inp_K,inp_Q; output [7:0]out_B; assign out_B=inp_K & inp_Q; endmodule
module AND_5(Z,V,A); input [5:0]Z,V; output [5:0]A; assign A=Z & V; endmodule
module AND_7(inp_N,inp_X,inp_M,out_O); input [7:0]inp_N,inp_X,inp_M; output [7:0]out_O; assign out_O=inp_N & inp_X & inp_M; endmodule
module AND_1(inp_M,inp_D,inp_B,out_E); input [1:0]inp_M,inp_D,inp_B; output [1:0]out_E; assign out_E=inp_M & inp_D & inp_B
module AND_2(inp_B,inp_N,inp_U,out_D); input [2:0]inp_B,inp_N,inp_U; output [2:0]out_D; assign out_D=inp_B & inp_N & inp_U
module AND_1(V,S,R); input [1:0]V,S; output [1:0]R; assign R=V & S; endmodule
module AND_4(inp_V,inp_Z,out_X); input [4:0]inp_V,inp_Z; output [4:0]out_X; assign out_X=inp_V & inp_Z; endmodule
module AND_7(O,A,B,R); input [7:0]O,A,B; output [7:0]R; assign R=O & A & B
module AND_5(inp_H,inp_G,inp_W,out_N); input [5:0]inp_H,inp_G,inp_W; output [5:0]out_N; assign out_N=inp_H & inp_G & inp_W; endmodule
module AND_7(D,O,G,B); input [7:0]D,O,G; output [7:0]B; assign B=D & O & G; endmodule
module AND_2(inp_B,inp_M,inp_G,out_D); input [2:0]inp_B,inp_M,inp_G; output [2:0]out_D; assign out_D=inp_B & inp_M & inp_G; endmodule
module AND_1(Y,T,W); input [1:0]Y,T; output [1:0]W; assign W=Y & T; endmodule
module AND_1(K,E,R,J); input [1:0]K,E,R; output [1:0]J; assign J=K & E & R; endmodule
module AND_4(inp_W,inp_X,inp_U,out_T); input [4:0]inp_W,inp_X,inp_U; output [4:0]out_T; assign out_T=inp_W & inp_X & inp_U; endmodule
module AND_6(inp_U,inp_Y,out_U); input [6:0]inp_U,inp_Y; output [6:0]out_U; assign out_U=inp_U & inp_Y; endmodule
module AND_2(inp_L,inp_T,out_V); input [2:0]inp_L,inp_T; output [2:0]out_V; assign out_V=inp_L & inp_T
module AND_3(G,C,N,R); input [3:0]G,C,N; output [3:0]R; assign R=G & C & N
module AND_3(W,Y,S); input [3:0]W,Y; output [3:0]S; assign S=W & Y
module AND_1(inp_Q,inp_H,inp_F,out_R); input [1:0]inp_Q,inp_H,inp_F; output [1:0]out_R; assign out_R=inp_Q & inp_H & inp_F; endmodule
module AND_2(Q,C,V,P); input [2:0]Q,C,V; output [2:0]P; assign P=Q & C & V
module AND_7(inp_B,inp_Q,out_B); input [7:0]inp_B,inp_Q; output [7:0]out_B; assign out_B=inp_B & inp_Q
module AND_1(F,K,T); input [1:0]F,K; output [1:0]T; assign T=F & K; endmodule
module AND_1(inp_L,inp_G,out_P); input [1:0]inp_L,inp_G; output [1:0]out_P; assign out_P=inp_L & inp_G
module AND_7(C,A,S); input [7:0]C,A; output [7:0]S; assign S=C & A
module AND_3(I,W,V); input [3:0]I,W; output [3:0]V; assign V=I & W
module AND_6(N,U,D,M); input [6:0]N,U,D; output [6:0]M; assign M=N & U & D
module AND_6(J,S,O); input [6:0]J,S; output [6:0]O; assign O=J & S; endmodule
module AND_1(inp_H,inp_Z,out_H); input [1:0]inp_H,inp_Z; output [1:0]out_H; assign out_H=inp_H & inp_Z
module AND_6(O,F,A); input [6:0]O,F; output [6:0]A; assign A=O & F; endmodule
module AND_5(inp_F,inp_C,inp_N,out_T); input [5:0]inp_F,inp_C,inp_N; output [5:0]out_T; assign out_T=inp_F & inp_C & inp_N; endmodule
module AND_6(I,X,E,Z); input [6:0]I,X,E; output [6:0]Z; assign Z=I & X & E
module AND_3(inp_N,inp_U,out_U); input [3:0]inp_N,inp_U; output [3:0]out_U; assign out_U=inp_N & inp_U
module AND_1(E,G,I); input [1:0]E,G; output [1:0]I; assign I=E & G; endmodule
module AND_6(inp_O,inp_A,out_E); input [6:0]inp_O,inp_A; output [6:0]out_E; assign out_E=inp_O & inp_A; endmodule
module AND_3(inp_M,inp_G,inp_J,out_S); input [3:0]inp_M,inp_G,inp_J; output [3:0]out_S; assign out_S=inp_M & inp_G & inp_J; endmodule
module AND_6(U,B,P); input [6:0]U,B; output [6:0]P; assign P=U & B
module AND_3(S,X,G,W); input [3:0]S,X,G; output [3:0]W; assign W=S & X & G; endmodule
module AND_2(V,A,Z); input [2:0]V,A; output [2:0]Z; assign Z=V & A
module AND_7(D,P,L,Q); input [7:0]D,P,L; output [7:0]Q; assign Q=D & P & L
module AND_6(Z,T,S); input [6:0]Z,T; output [6:0]S; assign S=Z & T; endmodule
module AND_7(E,Z,S); input [7:0]E,Z; output [7:0]S; assign S=E & Z; endmodule
module AND_4(O,M,T); input [4:0]O,M; output [4:0]T; assign T=O & M; endmodule
module AND_5(inp_M,inp_F,inp_X,out_E); input [5:0]inp_M,inp_F,inp_X; output [5:0]out_E; assign out_E=inp_M & inp_F & inp_X; endmodule
module AND_1(inp_G,inp_C,out_S); input [1:0]inp_G,inp_C; output [1:0]out_S; assign out_S=inp_G & inp_C
module AND_1(Q,B,T,X); input [1:0]Q,B,T; output [1:0]X; assign X=Q & B & T
module AND_3(N,V,X); input [3:0]N,V; output [3:0]X; assign X=N & V
module AND_7(Z,E,Y,J); input [7:0]Z,E,Y; output [7:0]J; assign J=Z & E & Y; endmodule
module AND_3(inp_P,inp_R,out_C); input [3:0]inp_P,inp_R; output [3:0]out_C; assign out_C=inp_P & inp_R
module AND_6(R,V,H); input [6:0]R,V; output [6:0]H; assign H=R & V
module AND_5(Y,H,I); input [5:0]Y,H; output [5:0]I; assign I=Y & H; endmodule
module AND_7(inp_H,inp_K,out_F); input [7:0]inp_H,inp_K; output [7:0]out_F; assign out_F=inp_H & inp_K
module AND_7(inp_J,inp_X,inp_S,out_G); input [7:0]inp_J,inp_X,inp_S; output [7:0]out_G; assign out_G=inp_J & inp_X & inp_S; endmodule
module AND_3(inp_G,inp_C,inp_N,out_T); input [3:0]inp_G,inp_C,inp_N; output [3:0]out_T; assign out_T=inp_G & inp_C & inp_N
module AND_6(inp_L,inp_T,inp_W,out_G); input [6:0]inp_L,inp_T,inp_W; output [6:0]out_G; assign out_G=inp_L & inp_T & inp_W
module AND_1(H,P,W,X); input [1:0]H,P,W; output [1:0]X; assign X=H & P & W; endmodule
module AND_7(inp_X,inp_E,inp_F,out_I); input [7:0]inp_X,inp_E,inp_F; output [7:0]out_I; assign out_I=inp_X & inp_E & inp_F; endmodule
module AND_4(inp_N,inp_C,inp_I,out_Q); input [4:0]inp_N,inp_C,inp_I; output [4:0]out_Q; assign out_Q=inp_N & inp_C & inp_I
module AND_1(inp_B,inp_S,out_B); input [1:0]inp_B,inp_S; output [1:0]out_B; assign out_B=inp_B & inp_S; endmodule
module AND_1(inp_V,inp_R,inp_M,out_D); input [1:0]inp_V,inp_R,inp_M; output [1:0]out_D; assign out_D=inp_V & inp_R & inp_M
module AND_1(X,F,C,R); input [1:0]X,F,C; output [1:0]R; assign R=X & F & C
module AND_5(R,B,I,E); input [5:0]R,B,I; output [5:0]E; assign E=R & B & I; endmodule
module AND_4(H,B,I); input [4:0]H,B; output [4:0]I; assign I=H & B
module AND_1(inp_H,inp_R,out_A); input [1:0]inp_H,inp_R; output [1:0]out_A; assign out_A=inp_H & inp_R
module AND_6(M,H,R,L); input [6:0]M,H,R; output [6:0]L; assign L=M & H & R; endmodule
module AND_2(V,T,L); input [2:0]V,T; output [2:0]L; assign L=V & T
module AND_5(C,D,F); input [5:0]C,D; output [5:0]F; assign F=C & D
module AND_5(inp_L,inp_W,out_A); input [5:0]inp_L,inp_W; output [5:0]out_A; assign out_A=inp_L & inp_W; endmodule
module AND_1(P,S,G); input [1:0]P,S; output [1:0]G; assign G=P & S
module AND_3(W,A,N,Y); input [3:0]W,A,N; output [3:0]Y; assign Y=W & A & N
module AND_7(D,R,P); input [7:0]D,R; output [7:0]P; assign P=D & R; endmodule
module AND_2(X,J,F); input [2:0]X,J; output [2:0]F; assign F=X & J
module AND_3(inp_U,inp_M,out_K); input [3:0]inp_U,inp_M; output [3:0]out_K; assign out_K=inp_U & inp_M
module AND_7(inp_T,inp_B,inp_U,out_X); input [7:0]inp_T,inp_B,inp_U; output [7:0]out_X; assign out_X=inp_T & inp_B & inp_U
module AND_5(B,B,Q,Z); input [5:0]B,B,Q; output [5:0]Z; assign Z=B & B & Q; endmodule
module AND_6(inp_F,inp_G,inp_N,out_J); input [6:0]inp_F,inp_G,inp_N; output [6:0]out_J; assign out_J=inp_F & inp_G & inp_N
module AND_5(U,S,H); input [5:0]U,S; output [5:0]H; assign H=U & S; endmodule
module AND_6(inp_D,inp_N,out_M); input [6:0]inp_D,inp_N; output [6:0]out_M; assign out_M=inp_D & inp_N; endmodule
module AND_1(inp_J,inp_Z,inp_U,out_Q); input [1:0]inp_J,inp_Z,inp_U; output [1:0]out_Q; assign out_Q=inp_J & inp_Z & inp_U
module AND_3(Z,F,P); input [3:0]Z,F; output [3:0]P; assign P=Z & F; endmodule
module AND_4(S,M,V); input [4:0]S,M; output [4:0]V; assign V=S & M
module AND_6(V,U,A); input [6:0]V,U; output [6:0]A; assign A=V & U
module AND_6(inp_U,inp_O,inp_W,out_L); input [6:0]inp_U,inp_O,inp_W; output [6:0]out_L; assign out_L=inp_U & inp_O & inp_W; endmodule
module AND_2(K,I,F,O); input [2:0]K,I,F; output [2:0]O; assign O=K & I & F
module AND_2(C,G,L,Z); input [2:0]C,G,L; output [2:0]Z; assign Z=C & G & L; endmodule
module AND_5(K,G,B,N); input [5:0]K,G,B; output [5:0]N; assign N=K & G & B
module AND_1(inp_M,inp_D,out_P); input [1:0]inp_M,inp_D; output [1:0]out_P; assign out_P=inp_M & inp_D; endmodule
module AND_2(inp_A,inp_L,inp_C,out_S); input [2:0]inp_A,inp_L,inp_C; output [2:0]out_S; assign out_S=inp_A & inp_L & inp_C
module AND_5(inp_W,inp_F,inp_C,out_M); input [5:0]inp_W,inp_F,inp_C; output [5:0]out_M; assign out_M=inp_W & inp_F & inp_C
module AND_5(T,C,B,L); input [5:0]T,C,B; output [5:0]L; assign L=T & C & B; endmodule
module AND_2(inp_N,inp_V,inp_L,out_K); input [2:0]inp_N,inp_V,inp_L; output [2:0]out_K; assign out_K=inp_N & inp_V & inp_L; endmodule
module AND_2(inp_J,inp_X,out_S); input [2:0]inp_J,inp_X; output [2:0]out_S; assign out_S=inp_J & inp_X; endmodule
module AND_2(A,P,G,C); input [2:0]A,P,G; output [2:0]C; assign C=A & P & G
module AND_4(E,Q,W,A); input [4:0]E,Q,W; output [4:0]A; assign A=E & Q & W
module AND_7(L,H,J,Q); input [7:0]L,H,J; output [7:0]Q; assign Q=L & H & J
module AND_3(inp_I,inp_Q,out_S); input [3:0]inp_I,inp_Q; output [3:0]out_S; assign out_S=inp_I & inp_Q
module AND_6(V,M,E,I); input [6:0]V,M,E; output [6:0]I; assign I=V & M & E; endmodule
module AND_2(inp_R,inp_J,inp_V,out_C); input [2:0]inp_R,inp_J,inp_V; output [2:0]out_C; assign out_C=inp_R & inp_J & inp_V
module AND_5(inp_Z,inp_Q,inp_G,out_J); input [5:0]inp_Z,inp_Q,inp_G; output [5:0]out_J; assign out_J=inp_Z & inp_Q & inp_G; endmodule
module AND_6(G,Y,O); input [6:0]G,Y; output [6:0]O; assign O=G & Y
module AND_3(inp_N,inp_G,out_A); input [3:0]inp_N,inp_G; output [3:0]out_A; assign out_A=inp_N & inp_G
module AND_3(Q,V,C,G); input [3:0]Q,V,C; output [3:0]G; assign G=Q & V & C
module AND_3(inp_A,inp_D,inp_W,out_P); input [3:0]inp_A,inp_D,inp_W; output [3:0]out_P; assign out_P=inp_A & inp_D & inp_W
module AND_5(inp_E,inp_H,out_U); input [5:0]inp_E,inp_H; output [5:0]out_U; assign out_U=inp_E & inp_H
module AND_1(inp_L,inp_R,out_I); input [1:0]inp_L,inp_R; output [1:0]out_I; assign out_I=inp_L & inp_R
module AND_3(S,N,H,D); input [3:0]S,N,H; output [3:0]D; assign D=S & N & H
module AND_5(W,X,U); input [5:0]W,X; output [5:0]U; assign U=W & X
module AND_2(inp_F,inp_X,out_X); input [2:0]inp_F,inp_X; output [2:0]out_X; assign out_X=inp_F & inp_X; endmodule
module AND_5(J,H,Y,L); input [5:0]J,H,Y; output [5:0]L; assign L=J & H & Y
module AND_5(inp_O,inp_J,inp_M,out_T); input [5:0]inp_O,inp_J,inp_M; output [5:0]out_T; assign out_T=inp_O & inp_J & inp_M; endmodule
module AND_5(inp_H,inp_A,out_O); input [5:0]inp_H,inp_A; output [5:0]out_O; assign out_O=inp_H & inp_A; endmodule
module AND_6(inp_Z,inp_N,inp_K,out_C); input [6:0]inp_Z,inp_N,inp_K; output [6:0]out_C; assign out_C=inp_Z & inp_N & inp_K
module AND_6(C,K,H,Z); input [6:0]C,K,H; output [6:0]Z; assign Z=C & K & H; endmodule
module AND_5(inp_R,inp_M,out_E); input [5:0]inp_R,inp_M; output [5:0]out_E; assign out_E=inp_R & inp_M
module AND_3(H,M,S,U); input [3:0]H,M,S; output [3:0]U; assign U=H & M & S
module AND_3(A,D,K,G); input [3:0]A,D,K; output [3:0]G; assign G=A & D & K
module AND_3(inp_F,inp_E,inp_V,out_E); input [3:0]inp_F,inp_E,inp_V; output [3:0]out_E; assign out_E=inp_F & inp_E & inp_V
module AND_6(T,D,G); input [6:0]T,D; output [6:0]G; assign G=T & D; endmodule
module AND_5(B,D,O); input [5:0]B,D; output [5:0]O; assign O=B & D
module AND_3(inp_Q,inp_C,inp_E,out_V); input [3:0]inp_Q,inp_C,inp_E; output [3:0]out_V; assign out_V=inp_Q & inp_C & inp_E
module AND_5(inp_C,inp_G,inp_M,out_Q); input [5:0]inp_C,inp_G,inp_M; output [5:0]out_Q; assign out_Q=inp_C & inp_G & inp_M; endmodule
module AND_2(H,T,M,X); input [2:0]H,T,M; output [2:0]X; assign X=H & T & M
module AND_5(inp_K,inp_E,out_Z); input [5:0]inp_K,inp_E; output [5:0]out_Z; assign out_Z=inp_K & inp_E
module AND_2(inp_N,inp_K,inp_X,out_K); input [2:0]inp_N,inp_K,inp_X; output [2:0]out_K; assign out_K=inp_N & inp_K & inp_X; endmodule
module AND_5(inp_S,inp_K,out_D); input [5:0]inp_S,inp_K; output [5:0]out_D; assign out_D=inp_S & inp_K; endmodule
module AND_3(inp_F,inp_O,inp_Q,out_F); input [3:0]inp_F,inp_O,inp_Q; output [3:0]out_F; assign out_F=inp_F & inp_O & inp_Q
module AND_2(H,G,C,N); input [2:0]H,G,C; output [2:0]N; assign N=H & G & C; endmodule
module AND_3(E,Q,W,C); input [3:0]E,Q,W; output [3:0]C; assign C=E & Q & W
module AND_1(W,L,G,A); input [1:0]W,L,G; output [1:0]A; assign A=W & L & G; endmodule
module AND_3(D,U,V); input [3:0]D,U; output [3:0]V; assign V=D & U; endmodule
module AND_5(inp_K,inp_R,inp_D,out_L); input [5:0]inp_K,inp_R,inp_D; output [5:0]out_L; assign out_L=inp_K & inp_R & inp_D; endmodule
module AND_1(H,L,C,U); input [1:0]H,L,C; output [1:0]U; assign U=H & L & C
module AND_4(inp_F,inp_J,out_N); input [4:0]inp_F,inp_J; output [4:0]out_N; assign out_N=inp_F & inp_J; endmodule
module AND_5(J,C,Z,R); input [5:0]J,C,Z; output [5:0]R; assign R=J & C & Z
module AND_5(S,E,K,D); input [5:0]S,E,K; output [5:0]D; assign D=S & E & K
module AND_6(inp_O,inp_B,inp_W,out_O); input [6:0]inp_O,inp_B,inp_W; output [6:0]out_O; assign out_O=inp_O & inp_B & inp_W; endmodule
module AND_5(C,Y,Q,G); input [5:0]C,Y,Q; output [5:0]G; assign G=C & Y & Q; endmodule
module AND_2(T,M,K); input [2:0]T,M; output [2:0]K; assign K=T & M
module AND_5(inp_S,inp_B,inp_K,out_G); input [5:0]inp_S,inp_B,inp_K; output [5:0]out_G; assign out_G=inp_S & inp_B & inp_K; endmodule
module AND_6(inp_P,inp_C,out_F); input [6:0]inp_P,inp_C; output [6:0]out_F; assign out_F=inp_P & inp_C
module AND_7(S,M,J); input [7:0]S,M; output [7:0]J; assign J=S & M
module AND_1(inp_N,inp_S,inp_X,out_U); input [1:0]inp_N,inp_S,inp_X; output [1:0]out_U; assign out_U=inp_N & inp_S & inp_X; endmodule
module AND_2(inp_J,inp_Q,out_C); input [2:0]inp_J,inp_Q; output [2:0]out_C; assign out_C=inp_J & inp_Q
module AND_5(inp_B,inp_V,out_U); input [5:0]inp_B,inp_V; output [5:0]out_U; assign out_U=inp_B & inp_V
module AND_1(E,I,J,K); input [1:0]E,I,J; output [1:0]K; assign K=E & I & J; endmodule
module AND_2(X,C,F,D); input [2:0]X,C,F; output [2:0]D; assign D=X & C & F
module AND_5(C,A,Q,O); input [5:0]C,A,Q; output [5:0]O; assign O=C & A & Q; endmodule
module AND_3(inp_F,inp_Y,inp_C,out_P); input [3:0]inp_F,inp_Y,inp_C; output [3:0]out_P; assign out_P=inp_F & inp_Y & inp_C
module AND_5(inp_F,inp_N,inp_T,out_P); input [5:0]inp_F,inp_N,inp_T; output [5:0]out_P; assign out_P=inp_F & inp_N & inp_T; endmodule
module AND_7(O,H,P); input [7:0]O,H; output [7:0]P; assign P=O & H; endmodule
module AND_7(inp_U,inp_M,inp_T,out_A); input [7:0]inp_U,inp_M,inp_T; output [7:0]out_A; assign out_A=inp_U & inp_M & inp_T
module AND_2(inp_X,inp_Q,out_B); input [2:0]inp_X,inp_Q; output [2:0]out_B; assign out_B=inp_X & inp_Q
module AND_6(inp_I,inp_P,inp_H,out_Q); input [6:0]inp_I,inp_P,inp_H; output [6:0]out_Q; assign out_Q=inp_I & inp_P & inp_H
module AND_2(inp_K,inp_T,out_D); input [2:0]inp_K,inp_T; output [2:0]out_D; assign out_D=inp_K & inp_T
module AND_2(P,M,T); input [2:0]P,M; output [2:0]T; assign T=P & M
module AND_6(C,S,M); input [6:0]C,S; output [6:0]M; assign M=C & S; endmodule
module AND_5(inp_W,inp_R,inp_K,out_Y); input [5:0]inp_W,inp_R,inp_K; output [5:0]out_Y; assign out_Y=inp_W & inp_R & inp_K
module AND_1(I,V,S); input [1:0]I,V; output [1:0]S; assign S=I & V; endmodule
module AND_4(inp_B,inp_Q,inp_E,out_A); input [4:0]inp_B,inp_Q,inp_E; output [4:0]out_A; assign out_A=inp_B & inp_Q & inp_E; endmodule
module AND_7(inp_F,inp_W,out_C); input [7:0]inp_F,inp_W; output [7:0]out_C; assign out_C=inp_F & inp_W; endmodule
module AND_6(H,R,K,X); input [6:0]H,R,K; output [6:0]X; assign X=H & R & K; endmodule
module AND_1(inp_S,inp_G,inp_S,out_R); input [1:0]inp_S,inp_G,inp_S; output [1:0]out_R; assign out_R=inp_S & inp_G & inp_S; endmodule
module AND_6(inp_S,inp_R,inp_E,out_J); input [6:0]inp_S,inp_R,inp_E; output [6:0]out_J; assign out_J=inp_S & inp_R & inp_E
module AND_3(inp_X,inp_J,out_F); input [3:0]inp_X,inp_J; output [3:0]out_F; assign out_F=inp_X & inp_J; endmodule
module AND_5(N,Z,V); input [5:0]N,Z; output [5:0]V; assign V=N & Z; endmodule
module AND_5(W,J,Y,V); input [5:0]W,J,Y; output [5:0]V; assign V=W & J & Y; endmodule
module AND_1(inp_Q,inp_M,inp_W,out_T); input [1:0]inp_Q,inp_M,inp_W; output [1:0]out_T; assign out_T=inp_Q & inp_M & inp_W; endmodule
module AND_7(inp_G,inp_S,inp_X,out_K); input [7:0]inp_G,inp_S,inp_X; output [7:0]out_K; assign out_K=inp_G & inp_S & inp_X
module AND_4(inp_E,inp_F,out_E); input [4:0]inp_E,inp_F; output [4:0]out_E; assign out_E=inp_E & inp_F
module AND_3(I,D,W,E); input [3:0]I,D,W; output [3:0]E; assign E=I & D & W
module AND_4(V,N,B,W); input [4:0]V,N,B; output [4:0]W; assign W=V & N & B
module AND_3(inp_U,inp_W,inp_G,out_O); input [3:0]inp_U,inp_W,inp_G; output [3:0]out_O; assign out_O=inp_U & inp_W & inp_G; endmodule
module AND_5(inp_R,inp_J,out_P); input [5:0]inp_R,inp_J; output [5:0]out_P; assign out_P=inp_R & inp_J
module AND_4(Q,B,J); input [4:0]Q,B; output [4:0]J; assign J=Q & B; endmodule
module AND_5(inp_E,inp_F,inp_N,out_M); input [5:0]inp_E,inp_F,inp_N; output [5:0]out_M; assign out_M=inp_E & inp_F & inp_N; endmodule
module AND_2(inp_O,inp_Q,out_P); input [2:0]inp_O,inp_Q; output [2:0]out_P; assign out_P=inp_O & inp_Q; endmodule
module AND_5(S,A,U,Y); input [5:0]S,A,U; output [5:0]Y; assign Y=S & A & U
module AND_1(Y,F,O,Y); input [1:0]Y,F,O; output [1:0]Y; assign Y=Y & F & O
module AND_4(inp_S,inp_R,inp_Y,out_T); input [4:0]inp_S,inp_R,inp_Y; output [4:0]out_T; assign out_T=inp_S & inp_R & inp_Y; endmodule
module AND_2(P,J,H); input [2:0]P,J; output [2:0]H; assign H=P & J
module AND_7(inp_L,inp_G,out_A); input [7:0]inp_L,inp_G; output [7:0]out_A; assign out_A=inp_L & inp_G
module AND_4(inp_M,inp_N,inp_P,out_O); input [4:0]inp_M,inp_N,inp_P; output [4:0]out_O; assign out_O=inp_M & inp_N & inp_P
module AND_1(inp_B,inp_S,out_O); input [1:0]inp_B,inp_S; output [1:0]out_O; assign out_O=inp_B & inp_S; endmodule
module AND_5(inp_H,inp_D,inp_O,out_C); input [5:0]inp_H,inp_D,inp_O; output [5:0]out_C; assign out_C=inp_H & inp_D & inp_O; endmodule
module AND_5(O,X,L,C); input [5:0]O,X,L; output [5:0]C; assign C=O & X & L; endmodule
module AND_1(inp_T,inp_C,out_Y); input [1:0]inp_T,inp_C; output [1:0]out_Y; assign out_Y=inp_T & inp_C
module AND_1(inp_S,inp_T,out_G); input [1:0]inp_S,inp_T; output [1:0]out_G; assign out_G=inp_S & inp_T; endmodule
module AND_6(inp_B,inp_O,out_H); input [6:0]inp_B,inp_O; output [6:0]out_H; assign out_H=inp_B & inp_O
module AND_5(P,N,U); input [5:0]P,N; output [5:0]U; assign U=P & N
module AND_4(inp_F,inp_B,out_I); input [4:0]inp_F,inp_B; output [4:0]out_I; assign out_I=inp_F & inp_B
module AND_5(N,V,T); input [5:0]N,V; output [5:0]T; assign T=N & V; endmodule
module AND_4(inp_O,inp_V,out_B); input [4:0]inp_O,inp_V; output [4:0]out_B; assign out_B=inp_O & inp_V; endmodule
module AND_1(inp_K,inp_O,out_Q); input [1:0]inp_K,inp_O; output [1:0]out_Q; assign out_Q=inp_K & inp_O; endmodule
module AND_7(inp_T,inp_F,inp_O,out_O); input [7:0]inp_T,inp_F,inp_O; output [7:0]out_O; assign out_O=inp_T & inp_F & inp_O; endmodule
module AND_6(inp_B,inp_T,inp_W,out_T); input [6:0]inp_B,inp_T,inp_W; output [6:0]out_T; assign out_T=inp_B & inp_T & inp_W; endmodule
module AND_3(D,C,R,E); input [3:0]D,C,R; output [3:0]E; assign E=D & C & R
module AND_2(inp_I,inp_B,inp_M,out_J); input [2:0]inp_I,inp_B,inp_M; output [2:0]out_J; assign out_J=inp_I & inp_B & inp_M
module AND_1(inp_C,inp_I,out_L); input [1:0]inp_C,inp_I; output [1:0]out_L; assign out_L=inp_C & inp_I; endmodule
module AND_1(S,J,Z); input [1:0]S,J; output [1:0]Z; assign Z=S & J; endmodule
module AND_4(K,I,Z,G); input [4:0]K,I,Z; output [4:0]G; assign G=K & I & Z
module AND_7(H,Y,C); input [7:0]H,Y; output [7:0]C; assign C=H & Y; endmodule
module AND_4(inp_B,inp_T,inp_T,out_C); input [4:0]inp_B,inp_T,inp_T; output [4:0]out_C; assign out_C=inp_B & inp_T & inp_T; endmodule
module AND_1(inp_B,inp_E,out_K); input [1:0]inp_B,inp_E; output [1:0]out_K; assign out_K=inp_B & inp_E; endmodule
module AND_1(L,Z,E); input [1:0]L,Z; output [1:0]E; assign E=L & Z
module AND_2(inp_M,inp_Z,out_T); input [2:0]inp_M,inp_Z; output [2:0]out_T; assign out_T=inp_M & inp_Z; endmodule
module AND_4(P,U,Y); input [4:0]P,U; output [4:0]Y; assign Y=P & U; endmodule
module AND_7(inp_W,inp_X,inp_E,out_Q); input [7:0]inp_W,inp_X,inp_E; output [7:0]out_Q; assign out_Q=inp_W & inp_X & inp_E; endmodule
module AND_4(Y,G,B); input [4:0]Y,G; output [4:0]B; assign B=Y & G
module AND_1(inp_S,inp_K,out_H); input [1:0]inp_S,inp_K; output [1:0]out_H; assign out_H=inp_S & inp_K
module AND_4(inp_N,inp_G,out_L); input [4:0]inp_N,inp_G; output [4:0]out_L; assign out_L=inp_N & inp_G; endmodule
module AND_2(inp_S,inp_L,out_N); input [2:0]inp_S,inp_L; output [2:0]out_N; assign out_N=inp_S & inp_L; endmodule
module AND_3(inp_K,inp_D,inp_W,out_O); input [3:0]inp_K,inp_D,inp_W; output [3:0]out_O; assign out_O=inp_K & inp_D & inp_W; endmodule
module AND_2(K,Y,C); input [2:0]K,Y; output [2:0]C; assign C=K & Y; endmodule
module AND_5(inp_K,inp_Z,inp_B,out_K); input [5:0]inp_K,inp_Z,inp_B; output [5:0]out_K; assign out_K=inp_K & inp_Z & inp_B; endmodule
module AND_4(inp_F,inp_Q,inp_H,out_K); input [4:0]inp_F,inp_Q,inp_H; output [4:0]out_K; assign out_K=inp_F & inp_Q & inp_H
module AND_1(inp_V,inp_Y,out_Z); input [1:0]inp_V,inp_Y; output [1:0]out_Z; assign out_Z=inp_V & inp_Y; endmodule
module AND_2(inp_A,inp_S,out_O); input [2:0]inp_A,inp_S; output [2:0]out_O; assign out_O=inp_A & inp_S
module AND_1(inp_S,inp_A,inp_X,out_N); input [1:0]inp_S,inp_A,inp_X; output [1:0]out_N; assign out_N=inp_S & inp_A & inp_X
module AND_1(inp_N,inp_E,out_J); input [1:0]inp_N,inp_E; output [1:0]out_J; assign out_J=inp_N & inp_E; endmodule
module AND_5(Z,M,F,N); input [5:0]Z,M,F; output [5:0]N; assign N=Z & M & F
module AND_5(inp_G,inp_A,inp_Q,out_F); input [5:0]inp_G,inp_A,inp_Q; output [5:0]out_F; assign out_F=inp_G & inp_A & inp_Q
module AND_4(O,R,P,L); input [4:0]O,R,P; output [4:0]L; assign L=O & R & P
module AND_2(M,A,F,G); input [2:0]M,A,F; output [2:0]G; assign G=M & A & F
module AND_5(V,C,Z,J); input [5:0]V,C,Z; output [5:0]J; assign J=V & C & Z; endmodule
module AND_3(inp_T,inp_R,inp_X,out_F); input [3:0]inp_T,inp_R,inp_X; output [3:0]out_F; assign out_F=inp_T & inp_R & inp_X; endmodule
module AND_2(F,K,A,J); input [2:0]F,K,A; output [2:0]J; assign J=F & K & A
module AND_5(K,Z,X); input [5:0]K,Z; output [5:0]X; assign X=K & Z
module AND_4(G,K,T); input [4:0]G,K; output [4:0]T; assign T=G & K
module AND_1(L,H,Z,C); input [1:0]L,H,Z; output [1:0]C; assign C=L & H & Z; endmodule
module AND_6(L,S,Q,C); input [6:0]L,S,Q; output [6:0]C; assign C=L & S & Q; endmodule
module AND_6(X,I,L); input [6:0]X,I; output [6:0]L; assign L=X & I
module AND_1(G,J,T); input [1:0]G,J; output [1:0]T; assign T=G & J
module AND_3(V,G,N,U); input [3:0]V,G,N; output [3:0]U; assign U=V & G & N; endmodule
module AND_4(inp_G,inp_S,out_F); input [4:0]inp_G,inp_S; output [4:0]out_F; assign out_F=inp_G & inp_S
module AND_2(inp_M,inp_H,inp_Q,out_M); input [2:0]inp_M,inp_H,inp_Q; output [2:0]out_M; assign out_M=inp_M & inp_H & inp_Q
module AND_1(inp_X,inp_R,out_L); input [1:0]inp_X,inp_R; output [1:0]out_L; assign out_L=inp_X & inp_R
module AND_4(inp_G,inp_D,out_R); input [4:0]inp_G,inp_D; output [4:0]out_R; assign out_R=inp_G & inp_D; endmodule
module AND_3(E,G,Z); input [3:0]E,G; output [3:0]Z; assign Z=E & G
module AND_4(inp_R,inp_N,out_R); input [4:0]inp_R,inp_N; output [4:0]out_R; assign out_R=inp_R & inp_N; endmodule
module AND_2(inp_J,inp_Q,inp_E,out_F); input [2:0]inp_J,inp_Q,inp_E; output [2:0]out_F; assign out_F=inp_J & inp_Q & inp_E
module AND_1(inp_X,inp_N,inp_C,out_A); input [1:0]inp_X,inp_N,inp_C; output [1:0]out_A; assign out_A=inp_X & inp_N & inp_C
module AND_5(Z,S,W,U); input [5:0]Z,S,W; output [5:0]U; assign U=Z & S & W; endmodule
module AND_2(M,K,W,I); input [2:0]M,K,W; output [2:0]I; assign I=M & K & W; endmodule
module AND_2(W,J,Y,L); input [2:0]W,J,Y; output [2:0]L; assign L=W & J & Y; endmodule
module AND_7(P,K,Y,B); input [7:0]P,K,Y; output [7:0]B; assign B=P & K & Y; endmodule
module AND_4(M,T,Y); input [4:0]M,T; output [4:0]Y; assign Y=M & T
module AND_5(inp_V,inp_H,inp_X,out_M); input [5:0]inp_V,inp_H,inp_X; output [5:0]out_M; assign out_M=inp_V & inp_H & inp_X; endmodule
module AND_5(G,E,Z,L); input [5:0]G,E,Z; output [5:0]L; assign L=G & E & Z; endmodule
module AND_7(inp_Y,inp_A,inp_P,out_I); input [7:0]inp_Y,inp_A,inp_P; output [7:0]out_I; assign out_I=inp_Y & inp_A & inp_P; endmodule
module AND_5(inp_O,inp_Q,inp_J,out_Y); input [5:0]inp_O,inp_Q,inp_J; output [5:0]out_Y; assign out_Y=inp_O & inp_Q & inp_J; endmodule
module AND_3(C,Q,K); input [3:0]C,Q; output [3:0]K; assign K=C & Q
module AND_6(inp_G,inp_F,inp_N,out_E); input [6:0]inp_G,inp_F,inp_N; output [6:0]out_E; assign out_E=inp_G & inp_F & inp_N; endmodule
module AND_4(inp_J,inp_Y,out_G); input [4:0]inp_J,inp_Y; output [4:0]out_G; assign out_G=inp_J & inp_Y; endmodule
module AND_5(inp_G,inp_Y,inp_C,out_P); input [5:0]inp_G,inp_Y,inp_C; output [5:0]out_P; assign out_P=inp_G & inp_Y & inp_C; endmodule
module AND_2(inp_P,inp_K,inp_N,out_U); input [2:0]inp_P,inp_K,inp_N; output [2:0]out_U; assign out_U=inp_P & inp_K & inp_N
module AND_2(inp_Y,inp_L,inp_X,out_K); input [2:0]inp_Y,inp_L,inp_X; output [2:0]out_K; assign out_K=inp_Y & inp_L & inp_X; endmodule
module AND_2(inp_L,inp_S,inp_A,out_U); input [2:0]inp_L,inp_S,inp_A; output [2:0]out_U; assign out_U=inp_L & inp_S & inp_A
module AND_5(inp_E,inp_J,inp_U,out_Z); input [5:0]inp_E,inp_J,inp_U; output [5:0]out_Z; assign out_Z=inp_E & inp_J & inp_U
module AND_5(inp_H,inp_K,inp_E,out_X); input [5:0]inp_H,inp_K,inp_E; output [5:0]out_X; assign out_X=inp_H & inp_K & inp_E; endmodule
module AND_7(inp_W,inp_Z,inp_G,out_A); input [7:0]inp_W,inp_Z,inp_G; output [7:0]out_A; assign out_A=inp_W & inp_Z & inp_G; endmodule
module AND_6(H,S,G); input [6:0]H,S; output [6:0]G; assign G=H & S; endmodule
module AND_3(inp_F,inp_V,inp_Q,out_M); input [3:0]inp_F,inp_V,inp_Q; output [3:0]out_M; assign out_M=inp_F & inp_V & inp_Q; endmodule
module AND_2(inp_X,inp_I,inp_M,out_U); input [2:0]inp_X,inp_I,inp_M; output [2:0]out_U; assign out_U=inp_X & inp_I & inp_M
module AND_6(S,M,V); input [6:0]S,M; output [6:0]V; assign V=S & M
module AND_1(inp_T,inp_A,out_I); input [1:0]inp_T,inp_A; output [1:0]out_I; assign out_I=inp_T & inp_A; endmodule
module AND_3(inp_V,inp_G,inp_S,out_E); input [3:0]inp_V,inp_G,inp_S; output [3:0]out_E; assign out_E=inp_V & inp_G & inp_S; endmodule
module AND_3(J,Z,D); input [3:0]J,Z; output [3:0]D; assign D=J & Z; endmodule
module AND_2(inp_T,inp_V,inp_J,out_I); input [2:0]inp_T,inp_V,inp_J; output [2:0]out_I; assign out_I=inp_T & inp_V & inp_J; endmodule
module AND_4(inp_F,inp_R,inp_Z,out_Y); input [4:0]inp_F,inp_R,inp_Z; output [4:0]out_Y; assign out_Y=inp_F & inp_R & inp_Z; endmodule
module AND_6(G,E,Z,X); input [6:0]G,E,Z; output [6:0]X; assign X=G & E & Z
module AND_3(inp_B,inp_R,inp_K,out_Y); input [3:0]inp_B,inp_R,inp_K; output [3:0]out_Y; assign out_Y=inp_B & inp_R & inp_K; endmodule
module AND_3(I,L,T,D); input [3:0]I,L,T; output [3:0]D; assign D=I & L & T; endmodule
module AND_7(inp_T,inp_W,out_F); input [7:0]inp_T,inp_W; output [7:0]out_F; assign out_F=inp_T & inp_W
module AND_5(B,X,L); input [5:0]B,X; output [5:0]L; assign L=B & X; endmodule
module AND_3(M,X,J); input [3:0]M,X; output [3:0]J; assign J=M & X
module AND_1(O,P,I); input [1:0]O,P; output [1:0]I; assign I=O & P
module AND_5(inp_D,inp_T,inp_S,out_R); input [5:0]inp_D,inp_T,inp_S; output [5:0]out_R; assign out_R=inp_D & inp_T & inp_S
module AND_4(inp_O,inp_L,inp_A,out_X); input [4:0]inp_O,inp_L,inp_A; output [4:0]out_X; assign out_X=inp_O & inp_L & inp_A; endmodule
module AND_5(N,V,C,X); input [5:0]N,V,C; output [5:0]X; assign X=N & V & C; endmodule
module AND_4(V,D,B,Q); input [4:0]V,D,B; output [4:0]Q; assign Q=V & D & B; endmodule
module AND_5(inp_P,inp_C,out_B); input [5:0]inp_P,inp_C; output [5:0]out_B; assign out_B=inp_P & inp_C
module AND_6(J,Z,P,F); input [6:0]J,Z,P; output [6:0]F; assign F=J & Z & P
module AND_3(inp_Z,inp_C,inp_G,out_Z); input [3:0]inp_Z,inp_C,inp_G; output [3:0]out_Z; assign out_Z=inp_Z & inp_C & inp_G
module AND_4(S,B,Y); input [4:0]S,B; output [4:0]Y; assign Y=S & B; endmodule
module AND_6(X,L,F,T); input [6:0]X,L,F; output [6:0]T; assign T=X & L & F; endmodule
module AND_5(inp_I,inp_C,out_K); input [5:0]inp_I,inp_C; output [5:0]out_K; assign out_K=inp_I & inp_C; endmodule
module AND_2(inp_A,inp_T,out_Y); input [2:0]inp_A,inp_T; output [2:0]out_Y; assign out_Y=inp_A & inp_T; endmodule
module AND_2(Q,L,X); input [2:0]Q,L; output [2:0]X; assign X=Q & L; endmodule
module AND_1(inp_C,inp_O,out_C); input [1:0]inp_C,inp_O; output [1:0]out_C; assign out_C=inp_C & inp_O; endmodule
module AND_6(inp_Y,inp_C,out_Q); input [6:0]inp_Y,inp_C; output [6:0]out_Q; assign out_Q=inp_Y & inp_C; endmodule
module AND_7(H,A,Q); input [7:0]H,A; output [7:0]Q; assign Q=H & A; endmodule
module AND_1(S,L,B); input [1:0]S,L; output [1:0]B; assign B=S & L
module AND_6(K,R,B,Q); input [6:0]K,R,B; output [6:0]Q; assign Q=K & R & B; endmodule
module AND_2(I,B,Q); input [2:0]I,B; output [2:0]Q; assign Q=I & B
module AND_3(Y,B,O,F); input [3:0]Y,B,O; output [3:0]F; assign F=Y & B & O; endmodule
module AND_1(inp_K,inp_Y,inp_B,out_U); input [1:0]inp_K,inp_Y,inp_B; output [1:0]out_U; assign out_U=inp_K & inp_Y & inp_B; endmodule
module AND_3(inp_X,inp_W,out_T); input [3:0]inp_X,inp_W; output [3:0]out_T; assign out_T=inp_X & inp_W; endmodule
module AND_3(inp_V,inp_J,inp_X,out_C); input [3:0]inp_V,inp_J,inp_X; output [3:0]out_C; assign out_C=inp_V & inp_J & inp_X; endmodule
module AND_5(D,P,U,F); input [5:0]D,P,U; output [5:0]F; assign F=D & P & U
module AND_3(inp_B,inp_M,inp_X,out_R); input [3:0]inp_B,inp_M,inp_X; output [3:0]out_R; assign out_R=inp_B & inp_M & inp_X
module AND_6(inp_S,inp_L,inp_Y,out_R); input [6:0]inp_S,inp_L,inp_Y; output [6:0]out_R; assign out_R=inp_S & inp_L & inp_Y
module AND_1(inp_G,inp_Y,out_U); input [1:0]inp_G,inp_Y; output [1:0]out_U; assign out_U=inp_G & inp_Y; endmodule
module AND_2(inp_S,inp_I,inp_K,out_N); input [2:0]inp_S,inp_I,inp_K; output [2:0]out_N; assign out_N=inp_S & inp_I & inp_K
module AND_3(I,X,S,U); input [3:0]I,X,S; output [3:0]U; assign U=I & X & S
module AND_2(inp_C,inp_U,out_X); input [2:0]inp_C,inp_U; output [2:0]out_X; assign out_X=inp_C & inp_U; endmodule
module AND_3(I,K,E); input [3:0]I,K; output [3:0]E; assign E=I & K
module AND_5(inp_J,inp_V,inp_G,out_O); input [5:0]inp_J,inp_V,inp_G; output [5:0]out_O; assign out_O=inp_J & inp_V & inp_G; endmodule
module AND_2(inp_Y,inp_X,inp_V,out_S); input [2:0]inp_Y,inp_X,inp_V; output [2:0]out_S; assign out_S=inp_Y & inp_X & inp_V
module AND_1(F,E,W); input [1:0]F,E; output [1:0]W; assign W=F & E
module AND_1(inp_E,inp_R,out_E); input [1:0]inp_E,inp_R; output [1:0]out_E; assign out_E=inp_E & inp_R
module AND_2(C,O,F,R); input [2:0]C,O,F; output [2:0]R; assign R=C & O & F; endmodule
module AND_6(C,D,K); input [6:0]C,D; output [6:0]K; assign K=C & D
module AND_1(H,M,Q,P); input [1:0]H,M,Q; output [1:0]P; assign P=H & M & Q; endmodule
module AND_4(inp_D,inp_S,inp_T,out_L); input [4:0]inp_D,inp_S,inp_T; output [4:0]out_L; assign out_L=inp_D & inp_S & inp_T
module AND_7(inp_E,inp_F,out_H); input [7:0]inp_E,inp_F; output [7:0]out_H; assign out_H=inp_E & inp_F
module AND_1(C,R,X); input [1:0]C,R; output [1:0]X; assign X=C & R; endmodule
module AND_5(inp_N,inp_R,out_W); input [5:0]inp_N,inp_R; output [5:0]out_W; assign out_W=inp_N & inp_R
module AND_4(inp_Z,inp_B,out_D); input [4:0]inp_Z,inp_B; output [4:0]out_D; assign out_D=inp_Z & inp_B; endmodule
module AND_2(inp_N,inp_T,out_U); input [2:0]inp_N,inp_T; output [2:0]out_U; assign out_U=inp_N & inp_T
module AND_4(inp_M,inp_K,inp_N,out_B); input [4:0]inp_M,inp_K,inp_N; output [4:0]out_B; assign out_B=inp_M & inp_K & inp_N
module AND_1(Z,I,G,N); input [1:0]Z,I,G; output [1:0]N; assign N=Z & I & G; endmodule
module AND_7(inp_V,inp_Z,out_N); input [7:0]inp_V,inp_Z; output [7:0]out_N; assign out_N=inp_V & inp_Z
module AND_4(inp_L,inp_N,inp_T,out_J); input [4:0]inp_L,inp_N,inp_T; output [4:0]out_J; assign out_J=inp_L & inp_N & inp_T; endmodule
module AND_6(inp_T,inp_A,out_R); input [6:0]inp_T,inp_A; output [6:0]out_R; assign out_R=inp_T & inp_A; endmodule
module AND_6(inp_Q,inp_R,inp_T,out_I); input [6:0]inp_Q,inp_R,inp_T; output [6:0]out_I; assign out_I=inp_Q & inp_R & inp_T
module AND_4(V,Y,V,E); input [4:0]V,Y,V; output [4:0]E; assign E=V & Y & V
module AND_2(Z,T,A,R); input [2:0]Z,T,A; output [2:0]R; assign R=Z & T & A; endmodule
module AND_6(inp_L,inp_E,inp_Y,out_A); input [6:0]inp_L,inp_E,inp_Y; output [6:0]out_A; assign out_A=inp_L & inp_E & inp_Y; endmodule
module AND_7(inp_D,inp_G,inp_V,out_W); input [7:0]inp_D,inp_G,inp_V; output [7:0]out_W; assign out_W=inp_D & inp_G & inp_V; endmodule
module AND_2(S,F,Y,I); input [2:0]S,F,Y; output [2:0]I; assign I=S & F & Y; endmodule
module AND_6(D,P,O,Z); input [6:0]D,P,O; output [6:0]Z; assign Z=D & P & O
module AND_3(Q,C,X,D); input [3:0]Q,C,X; output [3:0]D; assign D=Q & C & X
module AND_2(B,H,K); input [2:0]B,H; output [2:0]K; assign K=B & H; endmodule
module AND_7(inp_F,inp_A,out_C); input [7:0]inp_F,inp_A; output [7:0]out_C; assign out_C=inp_F & inp_A; endmodule
module AND_5(inp_B,inp_M,out_V); input [5:0]inp_B,inp_M; output [5:0]out_V; assign out_V=inp_B & inp_M
module AND_1(U,W,X,L); input [1:0]U,W,X; output [1:0]L; assign L=U & W & X
module AND_3(inp_R,inp_C,out_Z); input [3:0]inp_R,inp_C; output [3:0]out_Z; assign out_Z=inp_R & inp_C
module AND_7(inp_C,inp_B,inp_R,out_K); input [7:0]inp_C,inp_B,inp_R; output [7:0]out_K; assign out_K=inp_C & inp_B & inp_R
module AND_2(inp_Q,inp_R,out_V); input [2:0]inp_Q,inp_R; output [2:0]out_V; assign out_V=inp_Q & inp_R
module AND_6(O,G,Q,S); input [6:0]O,G,Q; output [6:0]S; assign S=O & G & Q
module AND_4(M,H,Z); input [4:0]M,H; output [4:0]Z; assign Z=M & H; endmodule
module AND_2(S,M,F,C); input [2:0]S,M,F; output [2:0]C; assign C=S & M & F
module AND_6(T,E,Y); input [6:0]T,E; output [6:0]Y; assign Y=T & E
module AND_5(inp_S,inp_B,out_E); input [5:0]inp_S,inp_B; output [5:0]out_E; assign out_E=inp_S & inp_B
module AND_6(F,Q,T); input [6:0]F,Q; output [6:0]T; assign T=F & Q; endmodule
module AND_3(inp_K,inp_M,out_I); input [3:0]inp_K,inp_M; output [3:0]out_I; assign out_I=inp_K & inp_M
module AND_1(B,I,E); input [1:0]B,I; output [1:0]E; assign E=B & I; endmodule
module AND_3(inp_A,inp_V,inp_J,out_U); input [3:0]inp_A,inp_V,inp_J; output [3:0]out_U; assign out_U=inp_A & inp_V & inp_J; endmodule
module AND_7(H,R,P,K); input [7:0]H,R,P; output [7:0]K; assign K=H & R & P
module AND_2(N,F,M,I); input [2:0]N,F,M; output [2:0]I; assign I=N & F & M; endmodule
module AND_1(X,T,P); input [1:0]X,T; output [1:0]P; assign P=X & T
module AND_6(W,H,S); input [6:0]W,H; output [6:0]S; assign S=W & H
module AND_3(K,V,W); input [3:0]K,V; output [3:0]W; assign W=K & V
module AND_6(G,D,O); input [6:0]G,D; output [6:0]O; assign O=G & D
module AND_1(inp_D,inp_G,inp_B,out_C); input [1:0]inp_D,inp_G,inp_B; output [1:0]out_C; assign out_C=inp_D & inp_G & inp_B
module AND_5(Q,S,D); input [5:0]Q,S; output [5:0]D; assign D=Q & S; endmodule
module AND_6(B,J,K); input [6:0]B,J; output [6:0]K; assign K=B & J
module AND_3(inp_N,inp_T,out_Q); input [3:0]inp_N,inp_T; output [3:0]out_Q; assign out_Q=inp_N & inp_T; endmodule
module AND_2(J,D,T,P); input [2:0]J,D,T; output [2:0]P; assign P=J & D & T; endmodule
module AND_5(inp_I,inp_B,inp_Z,out_H); input [5:0]inp_I,inp_B,inp_Z; output [5:0]out_H; assign out_H=inp_I & inp_B & inp_Z
module AND_1(L,A,W,Q); input [1:0]L,A,W; output [1:0]Q; assign Q=L & A & W
module AND_6(inp_P,inp_D,inp_K,out_L); input [6:0]inp_P,inp_D,inp_K; output [6:0]out_L; assign out_L=inp_P & inp_D & inp_K
module AND_3(L,C,G,M); input [3:0]L,C,G; output [3:0]M; assign M=L & C & G; endmodule
module AND_5(inp_F,inp_O,inp_Q,out_B); input [5:0]inp_F,inp_O,inp_Q; output [5:0]out_B; assign out_B=inp_F & inp_O & inp_Q; endmodule
module AND_3(inp_B,inp_W,out_H); input [3:0]inp_B,inp_W; output [3:0]out_H; assign out_H=inp_B & inp_W; endmodule
module AND_6(inp_J,inp_G,inp_B,out_W); input [6:0]inp_J,inp_G,inp_B; output [6:0]out_W; assign out_W=inp_J & inp_G & inp_B
module AND_3(inp_Z,inp_F,inp_Y,out_I); input [3:0]inp_Z,inp_F,inp_Y; output [3:0]out_I; assign out_I=inp_Z & inp_F & inp_Y
module AND_5(V,O,Z,N); input [5:0]V,O,Z; output [5:0]N; assign N=V & O & Z; endmodule
module AND_1(inp_Z,inp_H,out_T); input [1:0]inp_Z,inp_H; output [1:0]out_T; assign out_T=inp_Z & inp_H
module AND_7(inp_W,inp_B,out_X); input [7:0]inp_W,inp_B; output [7:0]out_X; assign out_X=inp_W & inp_B; endmodule
module AND_4(inp_T,inp_Y,inp_S,out_X); input [4:0]inp_T,inp_Y,inp_S; output [4:0]out_X; assign out_X=inp_T & inp_Y & inp_S
module AND_2(inp_N,inp_J,inp_W,out_D); input [2:0]inp_N,inp_J,inp_W; output [2:0]out_D; assign out_D=inp_N & inp_J & inp_W
module AND_7(P,Y,D); input [7:0]P,Y; output [7:0]D; assign D=P & Y
module AND_7(inp_O,inp_B,out_I); input [7:0]inp_O,inp_B; output [7:0]out_I; assign out_I=inp_O & inp_B; endmodule
module AND_4(B,J,H); input [4:0]B,J; output [4:0]H; assign H=B & J
module AND_6(inp_J,inp_E,inp_K,out_C); input [6:0]inp_J,inp_E,inp_K; output [6:0]out_C; assign out_C=inp_J & inp_E & inp_K; endmodule
module AND_2(G,U,N,Q); input [2:0]G,U,N; output [2:0]Q; assign Q=G & U & N; endmodule
module AND_3(inp_B,inp_M,out_F); input [3:0]inp_B,inp_M; output [3:0]out_F; assign out_F=inp_B & inp_M
module AND_3(inp_G,inp_X,inp_I,out_C); input [3:0]inp_G,inp_X,inp_I; output [3:0]out_C; assign out_C=inp_G & inp_X & inp_I
module AND_7(E,J,P); input [7:0]E,J; output [7:0]P; assign P=E & J
module AND_5(I,S,E); input [5:0]I,S; output [5:0]E; assign E=I & S
module AND_2(A,V,Q,C); input [2:0]A,V,Q; output [2:0]C; assign C=A & V & Q; endmodule
module AND_2(C,N,R,K); input [2:0]C,N,R; output [2:0]K; assign K=C & N & R; endmodule
module AND_2(L,D,P); input [2:0]L,D; output [2:0]P; assign P=L & D
module AND_1(inp_Q,inp_E,out_S); input [1:0]inp_Q,inp_E; output [1:0]out_S; assign out_S=inp_Q & inp_E
module AND_6(R,Y,J); input [6:0]R,Y; output [6:0]J; assign J=R & Y
module AND_1(O,M,G); input [1:0]O,M; output [1:0]G; assign G=O & M
module AND_7(A,V,L); input [7:0]A,V; output [7:0]L; assign L=A & V; endmodule
module AND_7(inp_Q,inp_K,out_K); input [7:0]inp_Q,inp_K; output [7:0]out_K; assign out_K=inp_Q & inp_K; endmodule
module AND_5(inp_N,inp_A,inp_Q,out_J); input [5:0]inp_N,inp_A,inp_Q; output [5:0]out_J; assign out_J=inp_N & inp_A & inp_Q; endmodule
module AND_7(inp_C,inp_V,inp_X,out_E); input [7:0]inp_C,inp_V,inp_X; output [7:0]out_E; assign out_E=inp_C & inp_V & inp_X
module AND_6(V,A,Z,U); input [6:0]V,A,Z; output [6:0]U; assign U=V & A & Z; endmodule
module AND_7(inp_C,inp_D,out_Y); input [7:0]inp_C,inp_D; output [7:0]out_Y; assign out_Y=inp_C & inp_D
module AND_7(inp_J,inp_K,inp_S,out_B); input [7:0]inp_J,inp_K,inp_S; output [7:0]out_B; assign out_B=inp_J & inp_K & inp_S
module AND_5(inp_G,inp_X,out_B); input [5:0]inp_G,inp_X; output [5:0]out_B; assign out_B=inp_G & inp_X
module AND_7(E,M,L,D); input [7:0]E,M,L; output [7:0]D; assign D=E & M & L; endmodule
module AND_2(inp_S,inp_V,out_B); input [2:0]inp_S,inp_V; output [2:0]out_B; assign out_B=inp_S & inp_V
module AND_3(L,K,A); input [3:0]L,K; output [3:0]A; assign A=L & K
module AND_6(inp_G,inp_K,inp_X,out_B); input [6:0]inp_G,inp_K,inp_X; output [6:0]out_B; assign out_B=inp_G & inp_K & inp_X
module AND_3(inp_F,inp_X,inp_V,out_A); input [3:0]inp_F,inp_X,inp_V; output [3:0]out_A; assign out_A=inp_F & inp_X & inp_V
module AND_7(T,Z,F,R); input [7:0]T,Z,F; output [7:0]R; assign R=T & Z & F; endmodule
module AND_3(inp_A,inp_I,out_N); input [3:0]inp_A,inp_I; output [3:0]out_N; assign out_N=inp_A & inp_I; endmodule
module AND_1(S,N,I,F); input [1:0]S,N,I; output [1:0]F; assign F=S & N & I; endmodule
module AND_6(Q,N,D,A); input [6:0]Q,N,D; output [6:0]A; assign A=Q & N & D
module AND_6(inp_B,inp_L,inp_G,out_V); input [6:0]inp_B,inp_L,inp_G; output [6:0]out_V; assign out_V=inp_B & inp_L & inp_G
module AND_6(N,G,E,Y); input [6:0]N,G,E; output [6:0]Y; assign Y=N & G & E; endmodule
module AND_3(B,P,E); input [3:0]B,P; output [3:0]E; assign E=B & P
module AND_6(M,R,L,V); input [6:0]M,R,L; output [6:0]V; assign V=M & R & L
module AND_7(inp_E,inp_W,inp_M,out_P); input [7:0]inp_E,inp_W,inp_M; output [7:0]out_P; assign out_P=inp_E & inp_W & inp_M
module AND_2(X,Z,E); input [2:0]X,Z; output [2:0]E; assign E=X & Z; endmodule
module AND_1(O,G,V); input [1:0]O,G; output [1:0]V; assign V=O & G
module AND_1(J,F,B); input [1:0]J,F; output [1:0]B; assign B=J & F
module AND_6(inp_W,inp_X,out_F); input [6:0]inp_W,inp_X; output [6:0]out_F; assign out_F=inp_W & inp_X; endmodule
module AND_6(inp_J,inp_V,out_Z); input [6:0]inp_J,inp_V; output [6:0]out_Z; assign out_Z=inp_J & inp_V; endmodule
module AND_6(inp_M,inp_D,inp_P,out_Z); input [6:0]inp_M,inp_D,inp_P; output [6:0]out_Z; assign out_Z=inp_M & inp_D & inp_P; endmodule
module AND_1(U,C,X,K); input [1:0]U,C,X; output [1:0]K; assign K=U & C & X; endmodule
module AND_4(A,W,D); input [4:0]A,W; output [4:0]D; assign D=A & W; endmodule
module AND_4(C,C,Z); input [4:0]C,C; output [4:0]Z; assign Z=C & C; endmodule
module AND_3(inp_A,inp_G,out_P); input [3:0]inp_A,inp_G; output [3:0]out_P; assign out_P=inp_A & inp_G; endmodule
module AND_6(J,V,U,T); input [6:0]J,V,U; output [6:0]T; assign T=J & V & U
module AND_7(inp_A,inp_O,inp_U,out_N); input [7:0]inp_A,inp_O,inp_U; output [7:0]out_N; assign out_N=inp_A & inp_O & inp_U
module AND_1(inp_Y,inp_F,inp_B,out_R); input [1:0]inp_Y,inp_F,inp_B; output [1:0]out_R; assign out_R=inp_Y & inp_F & inp_B
module AND_1(N,H,B,D); input [1:0]N,H,B; output [1:0]D; assign D=N & H & B
module AND_6(inp_V,inp_A,out_N); input [6:0]inp_V,inp_A; output [6:0]out_N; assign out_N=inp_V & inp_A; endmodule
module AND_2(A,H,C); input [2:0]A,H; output [2:0]C; assign C=A & H
module AND_6(inp_P,inp_I,out_V); input [6:0]inp_P,inp_I; output [6:0]out_V; assign out_V=inp_P & inp_I
module AND_1(W,P,X); input [1:0]W,P; output [1:0]X; assign X=W & P
module AND_6(inp_O,inp_R,out_H); input [6:0]inp_O,inp_R; output [6:0]out_H; assign out_H=inp_O & inp_R
module AND_7(U,P,D); input [7:0]U,P; output [7:0]D; assign D=U & P
module AND_3(O,N,S,R); input [3:0]O,N,S; output [3:0]R; assign R=O & N & S
module AND_2(inp_A,inp_W,out_C); input [2:0]inp_A,inp_W; output [2:0]out_C; assign out_C=inp_A & inp_W; endmodule
module AND_1(inp_I,inp_X,inp_J,out_O); input [1:0]inp_I,inp_X,inp_J; output [1:0]out_O; assign out_O=inp_I & inp_X & inp_J
module AND_2(inp_R,inp_L,out_W); input [2:0]inp_R,inp_L; output [2:0]out_W; assign out_W=inp_R & inp_L; endmodule
module AND_6(X,E,M,R); input [6:0]X,E,M; output [6:0]R; assign R=X & E & M
module AND_1(W,H,T,O); input [1:0]W,H,T; output [1:0]O; assign O=W & H & T
module AND_5(inp_Y,inp_F,out_A); input [5:0]inp_Y,inp_F; output [5:0]out_A; assign out_A=inp_Y & inp_F
module AND_5(F,E,I,Q); input [5:0]F,E,I; output [5:0]Q; assign Q=F & E & I; endmodule
module AND_2(inp_S,inp_W,inp_B,out_D); input [2:0]inp_S,inp_W,inp_B; output [2:0]out_D; assign out_D=inp_S & inp_W & inp_B
module AND_4(inp_G,inp_H,out_U); input [4:0]inp_G,inp_H; output [4:0]out_U; assign out_U=inp_G & inp_H; endmodule
module AND_4(X,J,R); input [4:0]X,J; output [4:0]R; assign R=X & J
module AND_5(inp_S,inp_I,inp_M,out_H); input [5:0]inp_S,inp_I,inp_M; output [5:0]out_H; assign out_H=inp_S & inp_I & inp_M
module AND_1(inp_C,inp_J,inp_B,out_V); input [1:0]inp_C,inp_J,inp_B; output [1:0]out_V; assign out_V=inp_C & inp_J & inp_B
module AND_6(U,K,P,O); input [6:0]U,K,P; output [6:0]O; assign O=U & K & P
module AND_4(inp_S,inp_J,inp_E,out_L); input [4:0]inp_S,inp_J,inp_E; output [4:0]out_L; assign out_L=inp_S & inp_J & inp_E
module AND_4(inp_M,inp_V,out_T); input [4:0]inp_M,inp_V; output [4:0]out_T; assign out_T=inp_M & inp_V
module AND_5(inp_Y,inp_C,out_L); input [5:0]inp_Y,inp_C; output [5:0]out_L; assign out_L=inp_Y & inp_C; endmodule
module AND_4(inp_D,inp_Z,inp_Y,out_D); input [4:0]inp_D,inp_Z,inp_Y; output [4:0]out_D; assign out_D=inp_D & inp_Z & inp_Y
module AND_4(inp_L,inp_B,inp_U,out_D); input [4:0]inp_L,inp_B,inp_U; output [4:0]out_D; assign out_D=inp_L & inp_B & inp_U
module AND_4(X,H,N,O); input [4:0]X,H,N; output [4:0]O; assign O=X & H & N; endmodule
module AND_4(inp_F,inp_C,inp_K,out_R); input [4:0]inp_F,inp_C,inp_K; output [4:0]out_R; assign out_R=inp_F & inp_C & inp_K
module AND_6(inp_G,inp_C,inp_F,out_P); input [6:0]inp_G,inp_C,inp_F; output [6:0]out_P; assign out_P=inp_G & inp_C & inp_F; endmodule
module AND_5(I,P,B); input [5:0]I,P; output [5:0]B; assign B=I & P
module AND_3(inp_K,inp_C,inp_P,out_S); input [3:0]inp_K,inp_C,inp_P; output [3:0]out_S; assign out_S=inp_K & inp_C & inp_P; endmodule
module AND_4(R,O,A); input [4:0]R,O; output [4:0]A; assign A=R & O
module AND_7(inp_Z,inp_B,inp_J,out_B); input [7:0]inp_Z,inp_B,inp_J; output [7:0]out_B; assign out_B=inp_Z & inp_B & inp_J; endmodule
module AND_1(O,I,N,Z); input [1:0]O,I,N; output [1:0]Z; assign Z=O & I & N; endmodule
module AND_1(inp_Z,inp_O,inp_S,out_Z); input [1:0]inp_Z,inp_O,inp_S; output [1:0]out_Z; assign out_Z=inp_Z & inp_O & inp_S; endmodule
module AND_3(S,Y,A); input [3:0]S,Y; output [3:0]A; assign A=S & Y
module AND_2(S,G,B); input [2:0]S,G; output [2:0]B; assign B=S & G
module AND_1(inp_U,inp_X,out_R); input [1:0]inp_U,inp_X; output [1:0]out_R; assign out_R=inp_U & inp_X; endmodule
module AND_2(inp_H,inp_G,out_X); input [2:0]inp_H,inp_G; output [2:0]out_X; assign out_X=inp_H & inp_G
module AND_1(N,P,D); input [1:0]N,P; output [1:0]D; assign D=N & P
module AND_7(inp_P,inp_G,out_A); input [7:0]inp_P,inp_G; output [7:0]out_A; assign out_A=inp_P & inp_G
module AND_5(Z,U,G,F); input [5:0]Z,U,G; output [5:0]F; assign F=Z & U & G
module AND_7(inp_A,inp_F,inp_S,out_M); input [7:0]inp_A,inp_F,inp_S; output [7:0]out_M; assign out_M=inp_A & inp_F & inp_S
module AND_2(inp_G,inp_Q,out_D); input [2:0]inp_G,inp_Q; output [2:0]out_D; assign out_D=inp_G & inp_Q; endmodule
module AND_3(Y,Z,X,M); input [3:0]Y,Z,X; output [3:0]M; assign M=Y & Z & X; endmodule
module AND_6(D,P,K,C); input [6:0]D,P,K; output [6:0]C; assign C=D & P & K
module AND_4(U,A,D); input [4:0]U,A; output [4:0]D; assign D=U & A; endmodule
module AND_5(inp_I,inp_P,out_H); input [5:0]inp_I,inp_P; output [5:0]out_H; assign out_H=inp_I & inp_P
module AND_5(inp_A,inp_E,inp_O,out_W); input [5:0]inp_A,inp_E,inp_O; output [5:0]out_W; assign out_W=inp_A & inp_E & inp_O; endmodule
module AND_7(inp_F,inp_K,inp_L,out_K); input [7:0]inp_F,inp_K,inp_L; output [7:0]out_K; assign out_K=inp_F & inp_K & inp_L; endmodule
module AND_5(inp_P,inp_F,inp_T,out_D); input [5:0]inp_P,inp_F,inp_T; output [5:0]out_D; assign out_D=inp_P & inp_F & inp_T
module AND_3(inp_S,inp_H,inp_E,out_T); input [3:0]inp_S,inp_H,inp_E; output [3:0]out_T; assign out_T=inp_S & inp_H & inp_E; endmodule
module AND_3(inp_A,inp_V,out_Q); input [3:0]inp_A,inp_V; output [3:0]out_Q; assign out_Q=inp_A & inp_V; endmodule
module AND_5(L,W,U,Z); input [5:0]L,W,U; output [5:0]Z; assign Z=L & W & U
module AND_1(inp_B,inp_Q,inp_J,out_O); input [1:0]inp_B,inp_Q,inp_J; output [1:0]out_O; assign out_O=inp_B & inp_Q & inp_J; endmodule
module AND_4(H,R,S); input [4:0]H,R; output [4:0]S; assign S=H & R
module AND_6(W,O,F); input [6:0]W,O; output [6:0]F; assign F=W & O
module AND_6(inp_Z,inp_W,inp_T,out_U); input [6:0]inp_Z,inp_W,inp_T; output [6:0]out_U; assign out_U=inp_Z & inp_W & inp_T; endmodule
module AND_4(W,I,O); input [4:0]W,I; output [4:0]O; assign O=W & I; endmodule
module AND_3(inp_T,inp_P,inp_I,out_J); input [3:0]inp_T,inp_P,inp_I; output [3:0]out_J; assign out_J=inp_T & inp_P & inp_I
module AND_5(P,G,S,W); input [5:0]P,G,S; output [5:0]W; assign W=P & G & S
module AND_5(S,P,V); input [5:0]S,P; output [5:0]V; assign V=S & P
module AND_6(inp_V,inp_Q,out_S); input [6:0]inp_V,inp_Q; output [6:0]out_S; assign out_S=inp_V & inp_Q; endmodule
module AND_6(F,E,W); input [6:0]F,E; output [6:0]W; assign W=F & E; endmodule
module AND_7(D,W,P,R); input [7:0]D,W,P; output [7:0]R; assign R=D & W & P; endmodule
module AND_4(Q,M,H); input [4:0]Q,M; output [4:0]H; assign H=Q & M
module AND_2(X,P,W,K); input [2:0]X,P,W; output [2:0]K; assign K=X & P & W
module AND_4(E,A,Q); input [4:0]E,A; output [4:0]Q; assign Q=E & A
module AND_7(Z,Y,J); input [7:0]Z,Y; output [7:0]J; assign J=Z & Y; endmodule
module AND_7(J,L,Q,B); input [7:0]J,L,Q; output [7:0]B; assign B=J & L & Q; endmodule
module AND_2(T,O,K,E); input [2:0]T,O,K; output [2:0]E; assign E=T & O & K
module AND_6(O,H,R); input [6:0]O,H; output [6:0]R; assign R=O & H
module AND_1(inp_B,inp_M,out_U); input [1:0]inp_B,inp_M; output [1:0]out_U; assign out_U=inp_B & inp_M
module AND_6(G,Y,O,I); input [6:0]G,Y,O; output [6:0]I; assign I=G & Y & O; endmodule
module AND_2(inp_X,inp_W,inp_F,out_W); input [2:0]inp_X,inp_W,inp_F; output [2:0]out_W; assign out_W=inp_X & inp_W & inp_F
module AND_4(E,W,S); input [4:0]E,W; output [4:0]S; assign S=E & W; endmodule
module AND_5(inp_D,inp_E,out_X); input [5:0]inp_D,inp_E; output [5:0]out_X; assign out_X=inp_D & inp_E
module AND_3(inp_A,inp_J,inp_C,out_I); input [3:0]inp_A,inp_J,inp_C; output [3:0]out_I; assign out_I=inp_A & inp_J & inp_C
module AND_1(Z,R,S,E); input [1:0]Z,R,S; output [1:0]E; assign E=Z & R & S; endmodule
module AND_1(inp_H,inp_X,out_S); input [1:0]inp_H,inp_X; output [1:0]out_S; assign out_S=inp_H & inp_X
module AND_4(R,F,K,N); input [4:0]R,F,K; output [4:0]N; assign N=R & F & K; endmodule
module AND_2(inp_V,inp_I,out_Z); input [2:0]inp_V,inp_I; output [2:0]out_Z; assign out_Z=inp_V & inp_I; endmodule
module AND_3(inp_H,inp_Y,inp_V,out_T); input [3:0]inp_H,inp_Y,inp_V; output [3:0]out_T; assign out_T=inp_H & inp_Y & inp_V
module AND_6(X,W,I); input [6:0]X,W; output [6:0]I; assign I=X & W
module AND_3(L,W,M,P); input [3:0]L,W,M; output [3:0]P; assign P=L & W & M; endmodule
module AND_6(inp_B,inp_M,out_M); input [6:0]inp_B,inp_M; output [6:0]out_M; assign out_M=inp_B & inp_M; endmodule
module AND_4(W,G,X,P); input [4:0]W,G,X; output [4:0]P; assign P=W & G & X
module AND_1(inp_R,inp_H,out_C); input [1:0]inp_R,inp_H; output [1:0]out_C; assign out_C=inp_R & inp_H
module AND_1(C,Q,Z); input [1:0]C,Q; output [1:0]Z; assign Z=C & Q
module AND_2(K,L,I,Y); input [2:0]K,L,I; output [2:0]Y; assign Y=K & L & I; endmodule
module AND_5(inp_X,inp_Q,inp_U,out_V); input [5:0]inp_X,inp_Q,inp_U; output [5:0]out_V; assign out_V=inp_X & inp_Q & inp_U
module AND_6(inp_W,inp_P,inp_L,out_E); input [6:0]inp_W,inp_P,inp_L; output [6:0]out_E; assign out_E=inp_W & inp_P & inp_L; endmodule
module AND_5(inp_B,inp_C,out_R); input [5:0]inp_B,inp_C; output [5:0]out_R; assign out_R=inp_B & inp_C
module AND_1(Y,N,H,M); input [1:0]Y,N,H; output [1:0]M; assign M=Y & N & H
module AND_2(M,X,N,R); input [2:0]M,X,N; output [2:0]R; assign R=M & X & N
module AND_1(P,U,W,S); input [1:0]P,U,W; output [1:0]S; assign S=P & U & W; endmodule
module AND_3(inp_S,inp_Q,out_A); input [3:0]inp_S,inp_Q; output [3:0]out_A; assign out_A=inp_S & inp_Q; endmodule
module AND_4(L,F,A); input [4:0]L,F; output [4:0]A; assign A=L & F; endmodule
module AND_5(inp_J,inp_P,inp_F,out_O); input [5:0]inp_J,inp_P,inp_F; output [5:0]out_O; assign out_O=inp_J & inp_P & inp_F; endmodule
module AND_6(inp_D,inp_J,out_S); input [6:0]inp_D,inp_J; output [6:0]out_S; assign out_S=inp_D & inp_J
module AND_3(inp_M,inp_G,inp_S,out_J); input [3:0]inp_M,inp_G,inp_S; output [3:0]out_J; assign out_J=inp_M & inp_G & inp_S
module AND_5(inp_Y,inp_D,out_R); input [5:0]inp_Y,inp_D; output [5:0]out_R; assign out_R=inp_Y & inp_D; endmodule
module AND_1(X,E,W,Q); input [1:0]X,E,W; output [1:0]Q; assign Q=X & E & W
module AND_7(Z,X,C); input [7:0]Z,X; output [7:0]C; assign C=Z & X; endmodule
module AND_5(L,E,Y); input [5:0]L,E; output [5:0]Y; assign Y=L & E
module AND_6(inp_A,inp_X,out_H); input [6:0]inp_A,inp_X; output [6:0]out_H; assign out_H=inp_A & inp_X; endmodule
module AND_2(K,T,C,G); input [2:0]K,T,C; output [2:0]G; assign G=K & T & C
module AND_6(inp_X,inp_H,inp_G,out_N); input [6:0]inp_X,inp_H,inp_G; output [6:0]out_N; assign out_N=inp_X & inp_H & inp_G; endmodule
module AND_4(inp_A,inp_R,out_O); input [4:0]inp_A,inp_R; output [4:0]out_O; assign out_O=inp_A & inp_R; endmodule
module AND_4(G,Z,A,T); input [4:0]G,Z,A; output [4:0]T; assign T=G & Z & A
module AND_7(M,J,N); input [7:0]M,J; output [7:0]N; assign N=M & J; endmodule
module AND_6(inp_Q,inp_D,inp_N,out_B); input [6:0]inp_Q,inp_D,inp_N; output [6:0]out_B; assign out_B=inp_Q & inp_D & inp_N
module AND_6(D,Q,N); input [6:0]D,Q; output [6:0]N; assign N=D & Q; endmodule
module AND_5(Z,X,U); input [5:0]Z,X; output [5:0]U; assign U=Z & X
module AND_7(inp_R,inp_U,out_N); input [7:0]inp_R,inp_U; output [7:0]out_N; assign out_N=inp_R & inp_U
module AND_3(V,H,C); input [3:0]V,H; output [3:0]C; assign C=V & H
module AND_4(inp_M,inp_X,inp_V,out_B); input [4:0]inp_M,inp_X,inp_V; output [4:0]out_B; assign out_B=inp_M & inp_X & inp_V
module AND_1(Y,A,D); input [1:0]Y,A; output [1:0]D; assign D=Y & A; endmodule
module AND_2(M,R,G,P); input [2:0]M,R,G; output [2:0]P; assign P=M & R & G; endmodule
module AND_4(inp_Y,inp_M,out_Q); input [4:0]inp_Y,inp_M; output [4:0]out_Q; assign out_Q=inp_Y & inp_M; endmodule
module AND_6(B,N,Y,M); input [6:0]B,N,Y; output [6:0]M; assign M=B & N & Y; endmodule
module AND_4(E,G,L,M); input [4:0]E,G,L; output [4:0]M; assign M=E & G & L
module AND_5(B,N,G,I); input [5:0]B,N,G; output [5:0]I; assign I=B & N & G; endmodule
module AND_6(W,T,G,H); input [6:0]W,T,G; output [6:0]H; assign H=W & T & G; endmodule
module AND_1(inp_B,inp_R,inp_J,out_D); input [1:0]inp_B,inp_R,inp_J; output [1:0]out_D; assign out_D=inp_B & inp_R & inp_J; endmodule
module AND_6(inp_J,inp_S,inp_H,out_V); input [6:0]inp_J,inp_S,inp_H; output [6:0]out_V; assign out_V=inp_J & inp_S & inp_H
module AND_7(T,N,V,D); input [7:0]T,N,V; output [7:0]D; assign D=T & N & V; endmodule
module AND_6(Z,N,L,X); input [6:0]Z,N,L; output [6:0]X; assign X=Z & N & L
module AND_2(L,N,I,S); input [2:0]L,N,I; output [2:0]S; assign S=L & N & I; endmodule
module AND_3(V,T,Z,L); input [3:0]V,T,Z; output [3:0]L; assign L=V & T & Z; endmodule
module AND_3(S,K,I); input [3:0]S,K; output [3:0]I; assign I=S & K; endmodule
module AND_4(inp_J,inp_V,inp_F,out_Z); input [4:0]inp_J,inp_V,inp_F; output [4:0]out_Z; assign out_Z=inp_J & inp_V & inp_F; endmodule
module AND_5(inp_X,inp_H,inp_A,out_T); input [5:0]inp_X,inp_H,inp_A; output [5:0]out_T; assign out_T=inp_X & inp_H & inp_A; endmodule
module AND_2(inp_W,inp_O,out_X); input [2:0]inp_W,inp_O; output [2:0]out_X; assign out_X=inp_W & inp_O; endmodule
module AND_2(inp_P,inp_V,inp_Z,out_F); input [2:0]inp_P,inp_V,inp_Z; output [2:0]out_F; assign out_F=inp_P & inp_V & inp_Z
module AND_1(inp_Q,inp_I,inp_Z,out_W); input [1:0]inp_Q,inp_I,inp_Z; output [1:0]out_W; assign out_W=inp_Q & inp_I & inp_Z; endmodule
module AND_1(F,E,S); input [1:0]F,E; output [1:0]S; assign S=F & E; endmodule
module AND_4(inp_V,inp_Y,out_T); input [4:0]inp_V,inp_Y; output [4:0]out_T; assign out_T=inp_V & inp_Y
module AND_4(inp_S,inp_I,inp_Y,out_M); input [4:0]inp_S,inp_I,inp_Y; output [4:0]out_M; assign out_M=inp_S & inp_I & inp_Y; endmodule
module AND_6(inp_B,inp_M,inp_F,out_H); input [6:0]inp_B,inp_M,inp_F; output [6:0]out_H; assign out_H=inp_B & inp_M & inp_F
module AND_7(T,H,E,C); input [7:0]T,H,E; output [7:0]C; assign C=T & H & E
module AND_3(inp_I,inp_N,inp_O,out_X); input [3:0]inp_I,inp_N,inp_O; output [3:0]out_X; assign out_X=inp_I & inp_N & inp_O; endmodule
module AND_7(A,N,P); input [7:0]A,N; output [7:0]P; assign P=A & N
module AND_2(J,O,Z,I); input [2:0]J,O,Z; output [2:0]I; assign I=J & O & Z; endmodule
module AND_1(inp_G,inp_H,inp_W,out_K); input [1:0]inp_G,inp_H,inp_W; output [1:0]out_K; assign out_K=inp_G & inp_H & inp_W; endmodule
module OR_7(inp_H,inp_I,inp_P,out_Y); input [7:0]inp_H,inp_I,inp_P; output [7:0]out_Y; assign out_Y=inp_H | inp_I | inp_P
module OR_7(inp_H,inp_R,inp_Q,out_G); input [7:0]inp_H,inp_R,inp_Q; output [7:0]out_G; assign out_G=inp_H | inp_R | inp_Q; endmodule
module OR_3(inp_E,inp_C,out_O); input [3:0]inp_E,inp_C; output [3:0]out_O; assign out_O=inp_E | inp_C; endmodule
module OR_3(Z,B,O,M); input [3:0]Z,B,O; output [3:0]M; assign M=Z | B | O
module OR_7(O,A,L,G); input [7:0]O,A,L; output [7:0]G; assign G=O | A | L
module OR_3(Y,V,E,A); input [3:0]Y,V,E; output [3:0]A; assign A=Y | V | E; endmodule
module OR_5(inp_P,inp_Q,inp_O,out_Y); input [5:0]inp_P,inp_Q,inp_O; output [5:0]out_Y; assign out_Y=inp_P | inp_Q | inp_O
module OR_6(U,N,E,T); input [6:0]U,N,E; output [6:0]T; assign T=U | N | E; endmodule
module OR_4(Y,R,I,F); input [4:0]Y,R,I; output [4:0]F; assign F=Y | R | I; endmodule
module OR_3(A,F,Z,J); input [3:0]A,F,Z; output [3:0]J; assign J=A | F | Z
module OR_2(inp_T,inp_X,inp_S,out_M); input [2:0]inp_T,inp_X,inp_S; output [2:0]out_M; assign out_M=inp_T | inp_X | inp_S
module OR_2(inp_I,inp_E,out_K); input [2:0]inp_I,inp_E; output [2:0]out_K; assign out_K=inp_I | inp_E
module OR_3(inp_Y,inp_M,inp_Z,out_U); input [3:0]inp_Y,inp_M,inp_Z; output [3:0]out_U; assign out_U=inp_Y | inp_M | inp_Z
module OR_6(inp_S,inp_G,inp_O,out_Y); input [6:0]inp_S,inp_G,inp_O; output [6:0]out_Y; assign out_Y=inp_S | inp_G | inp_O
module OR_7(A,Z,R,V); input [7:0]A,Z,R; output [7:0]V; assign V=A | Z | R
module OR_5(O,S,V,N); input [5:0]O,S,V; output [5:0]N; assign N=O | S | V
module OR_5(H,O,N); input [5:0]H,O; output [5:0]N; assign N=H | O; endmodule
module OR_6(inp_N,inp_A,inp_L,out_E); input [6:0]inp_N,inp_A,inp_L; output [6:0]out_E; assign out_E=inp_N | inp_A | inp_L; endmodule
module OR_2(inp_H,inp_C,out_K); input [2:0]inp_H,inp_C; output [2:0]out_K; assign out_K=inp_H | inp_C; endmodule
module OR_1(inp_S,inp_B,out_T); input [1:0]inp_S,inp_B; output [1:0]out_T; assign out_T=inp_S | inp_B; endmodule
module OR_4(inp_I,inp_H,out_R); input [4:0]inp_I,inp_H; output [4:0]out_R; assign out_R=inp_I | inp_H
module OR_2(inp_U,inp_Z,out_T); input [2:0]inp_U,inp_Z; output [2:0]out_T; assign out_T=inp_U | inp_Z; endmodule
module OR_1(inp_K,inp_T,out_R); input [1:0]inp_K,inp_T; output [1:0]out_R; assign out_R=inp_K | inp_T
module OR_5(Y,F,U,W); input [5:0]Y,F,U; output [5:0]W; assign W=Y | F | U
module OR_2(N,G,W); input [2:0]N,G; output [2:0]W; assign W=N | G; endmodule
module OR_5(G,S,Q,D); input [5:0]G,S,Q; output [5:0]D; assign D=G | S | Q
module OR_2(inp_P,inp_A,out_K); input [2:0]inp_P,inp_A; output [2:0]out_K; assign out_K=inp_P | inp_A; endmodule
module OR_7(B,H,S); input [7:0]B,H; output [7:0]S; assign S=B | H
module OR_1(M,R,L,K); input [1:0]M,R,L; output [1:0]K; assign K=M | R | L; endmodule
module OR_7(inp_I,inp_H,out_W); input [7:0]inp_I,inp_H; output [7:0]out_W; assign out_W=inp_I | inp_H
module OR_2(X,G,U,L); input [2:0]X,G,U; output [2:0]L; assign L=X | G | U
module OR_7(F,Y,Q,S); input [7:0]F,Y,Q; output [7:0]S; assign S=F | Y | Q
module OR_1(inp_P,inp_Z,inp_C,out_H); input [1:0]inp_P,inp_Z,inp_C; output [1:0]out_H; assign out_H=inp_P | inp_Z | inp_C
module OR_2(inp_I,inp_H,inp_V,out_U); input [2:0]inp_I,inp_H,inp_V; output [2:0]out_U; assign out_U=inp_I | inp_H | inp_V; endmodule
module OR_4(X,Q,Y,Z); input [4:0]X,Q,Y; output [4:0]Z; assign Z=X | Q | Y; endmodule
module OR_7(P,U,Y); input [7:0]P,U; output [7:0]Y; assign Y=P | U
module OR_7(inp_Z,inp_O,out_V); input [7:0]inp_Z,inp_O; output [7:0]out_V; assign out_V=inp_Z | inp_O
module OR_2(U,C,Q); input [2:0]U,C; output [2:0]Q; assign Q=U | C
module OR_1(inp_U,inp_Y,out_N); input [1:0]inp_U,inp_Y; output [1:0]out_N; assign out_N=inp_U | inp_Y; endmodule
module OR_3(inp_K,inp_Q,out_N); input [3:0]inp_K,inp_Q; output [3:0]out_N; assign out_N=inp_K | inp_Q
module OR_4(Z,X,Y); input [4:0]Z,X; output [4:0]Y; assign Y=Z | X; endmodule
module OR_6(inp_C,inp_K,out_V); input [6:0]inp_C,inp_K; output [6:0]out_V; assign out_V=inp_C | inp_K; endmodule
module OR_1(B,Q,F,N); input [1:0]B,Q,F; output [1:0]N; assign N=B | Q | F; endmodule
module OR_7(inp_J,inp_A,inp_Z,out_Z); input [7:0]inp_J,inp_A,inp_Z; output [7:0]out_Z; assign out_Z=inp_J | inp_A | inp_Z
module OR_6(inp_P,inp_N,inp_V,out_W); input [6:0]inp_P,inp_N,inp_V; output [6:0]out_W; assign out_W=inp_P | inp_N | inp_V; endmodule
module OR_6(inp_C,inp_N,inp_S,out_Q); input [6:0]inp_C,inp_N,inp_S; output [6:0]out_Q; assign out_Q=inp_C | inp_N | inp_S; endmodule
module OR_5(B,J,G,Z); input [5:0]B,J,G; output [5:0]Z; assign Z=B | J | G
module OR_2(inp_K,inp_N,inp_X,out_D); input [2:0]inp_K,inp_N,inp_X; output [2:0]out_D; assign out_D=inp_K | inp_N | inp_X
module OR_5(T,O,C,Q); input [5:0]T,O,C; output [5:0]Q; assign Q=T | O | C
module OR_5(P,F,M,R); input [5:0]P,F,M; output [5:0]R; assign R=P | F | M
module OR_7(inp_N,inp_W,inp_I,out_I); input [7:0]inp_N,inp_W,inp_I; output [7:0]out_I; assign out_I=inp_N | inp_W | inp_I
module OR_3(Q,M,I); input [3:0]Q,M; output [3:0]I; assign I=Q | M
module OR_3(inp_Z,inp_X,out_L); input [3:0]inp_Z,inp_X; output [3:0]out_L; assign out_L=inp_Z | inp_X; endmodule
module OR_7(inp_X,inp_Q,inp_Z,out_Y); input [7:0]inp_X,inp_Q,inp_Z; output [7:0]out_Y; assign out_Y=inp_X | inp_Q | inp_Z; endmodule
module OR_7(inp_X,inp_Z,out_G); input [7:0]inp_X,inp_Z; output [7:0]out_G; assign out_G=inp_X | inp_Z
module OR_4(inp_E,inp_V,out_V); input [4:0]inp_E,inp_V; output [4:0]out_V; assign out_V=inp_E | inp_V
module OR_5(E,W,G); input [5:0]E,W; output [5:0]G; assign G=E | W; endmodule
module OR_7(inp_X,inp_C,out_L); input [7:0]inp_X,inp_C; output [7:0]out_L; assign out_L=inp_X | inp_C
module OR_7(inp_K,inp_W,inp_I,out_H); input [7:0]inp_K,inp_W,inp_I; output [7:0]out_H; assign out_H=inp_K | inp_W | inp_I
module OR_6(H,N,W); input [6:0]H,N; output [6:0]W; assign W=H | N
module OR_3(inp_S,inp_L,inp_F,out_A); input [3:0]inp_S,inp_L,inp_F; output [3:0]out_A; assign out_A=inp_S | inp_L | inp_F; endmodule
module OR_4(inp_Q,inp_J,out_P); input [4:0]inp_Q,inp_J; output [4:0]out_P; assign out_P=inp_Q | inp_J; endmodule
module OR_3(inp_D,inp_W,out_O); input [3:0]inp_D,inp_W; output [3:0]out_O; assign out_O=inp_D | inp_W
module OR_7(B,I,Y,H); input [7:0]B,I,Y; output [7:0]H; assign H=B | I | Y
module OR_7(inp_H,inp_Q,inp_K,out_G); input [7:0]inp_H,inp_Q,inp_K; output [7:0]out_G; assign out_G=inp_H | inp_Q | inp_K
module OR_6(inp_W,inp_J,inp_M,out_Y); input [6:0]inp_W,inp_J,inp_M; output [6:0]out_Y; assign out_Y=inp_W | inp_J | inp_M; endmodule
module OR_5(G,I,U,P); input [5:0]G,I,U; output [5:0]P; assign P=G | I | U
module OR_3(inp_P,inp_B,inp_W,out_P); input [3:0]inp_P,inp_B,inp_W; output [3:0]out_P; assign out_P=inp_P | inp_B | inp_W
module OR_2(inp_P,inp_N,out_D); input [2:0]inp_P,inp_N; output [2:0]out_D; assign out_D=inp_P | inp_N
module OR_2(inp_D,inp_Z,out_C); input [2:0]inp_D,inp_Z; output [2:0]out_C; assign out_C=inp_D | inp_Z; endmodule
module OR_7(M,R,P,Y); input [7:0]M,R,P; output [7:0]Y; assign Y=M | R | P
module OR_2(inp_X,inp_H,out_X); input [2:0]inp_X,inp_H; output [2:0]out_X; assign out_X=inp_X | inp_H; endmodule
module OR_4(C,O,V); input [4:0]C,O; output [4:0]V; assign V=C | O; endmodule
module OR_7(inp_V,inp_Y,out_N); input [7:0]inp_V,inp_Y; output [7:0]out_N; assign out_N=inp_V | inp_Y; endmodule
module OR_1(inp_W,inp_M,out_B); input [1:0]inp_W,inp_M; output [1:0]out_B; assign out_B=inp_W | inp_M
module OR_5(O,P,E); input [5:0]O,P; output [5:0]E; assign E=O | P
module OR_1(inp_L,inp_N,out_K); input [1:0]inp_L,inp_N; output [1:0]out_K; assign out_K=inp_L | inp_N; endmodule
module OR_2(X,F,N,T); input [2:0]X,F,N; output [2:0]T; assign T=X | F | N; endmodule
module OR_6(inp_R,inp_Y,out_I); input [6:0]inp_R,inp_Y; output [6:0]out_I; assign out_I=inp_R | inp_Y
module OR_6(inp_Z,inp_G,out_Z); input [6:0]inp_Z,inp_G; output [6:0]out_Z; assign out_Z=inp_Z | inp_G
module OR_4(inp_M,inp_W,inp_C,out_T); input [4:0]inp_M,inp_W,inp_C; output [4:0]out_T; assign out_T=inp_M | inp_W | inp_C; endmodule
module OR_2(inp_T,inp_O,inp_C,out_J); input [2:0]inp_T,inp_O,inp_C; output [2:0]out_J; assign out_J=inp_T | inp_O | inp_C; endmodule
module OR_3(inp_Y,inp_I,out_V); input [3:0]inp_Y,inp_I; output [3:0]out_V; assign out_V=inp_Y | inp_I
module OR_2(B,G,E,S); input [2:0]B,G,E; output [2:0]S; assign S=B | G | E; endmodule
module OR_3(D,J,F); input [3:0]D,J; output [3:0]F; assign F=D | J; endmodule
module OR_6(U,Q,N); input [6:0]U,Q; output [6:0]N; assign N=U | Q
module OR_3(inp_E,inp_X,out_W); input [3:0]inp_E,inp_X; output [3:0]out_W; assign out_W=inp_E | inp_X
module OR_6(S,R,P,M); input [6:0]S,R,P; output [6:0]M; assign M=S | R | P
module OR_6(inp_K,inp_Q,inp_T,out_T); input [6:0]inp_K,inp_Q,inp_T; output [6:0]out_T; assign out_T=inp_K | inp_Q | inp_T
module OR_5(L,K,J); input [5:0]L,K; output [5:0]J; assign J=L | K
module OR_1(inp_O,inp_E,out_M); input [1:0]inp_O,inp_E; output [1:0]out_M; assign out_M=inp_O | inp_E; endmodule
module OR_5(F,V,W,O); input [5:0]F,V,W; output [5:0]O; assign O=F | V | W; endmodule
module OR_3(P,B,N,I); input [3:0]P,B,N; output [3:0]I; assign I=P | B | N
module OR_6(L,M,I); input [6:0]L,M; output [6:0]I; assign I=L | M; endmodule
module OR_4(K,H,W); input [4:0]K,H; output [4:0]W; assign W=K | H
module OR_3(inp_L,inp_U,inp_D,out_W); input [3:0]inp_L,inp_U,inp_D; output [3:0]out_W; assign out_W=inp_L | inp_U | inp_D
module OR_5(inp_D,inp_K,inp_U,out_C); input [5:0]inp_D,inp_K,inp_U; output [5:0]out_C; assign out_C=inp_D | inp_K | inp_U; endmodule
module OR_5(inp_D,inp_C,out_V); input [5:0]inp_D,inp_C; output [5:0]out_V; assign out_V=inp_D | inp_C
module OR_7(X,M,C,B); input [7:0]X,M,C; output [7:0]B; assign B=X | M | C
module OR_5(inp_D,inp_Z,inp_P,out_S); input [5:0]inp_D,inp_Z,inp_P; output [5:0]out_S; assign out_S=inp_D | inp_Z | inp_P
module OR_3(S,R,C); input [3:0]S,R; output [3:0]C; assign C=S | R
module OR_7(P,Q,N,M); input [7:0]P,Q,N; output [7:0]M; assign M=P | Q | N
module OR_6(A,W,M,Z); input [6:0]A,W,M; output [6:0]Z; assign Z=A | W | M
module OR_6(inp_K,inp_M,out_E); input [6:0]inp_K,inp_M; output [6:0]out_E; assign out_E=inp_K | inp_M
module OR_5(inp_I,inp_U,out_P); input [5:0]inp_I,inp_U; output [5:0]out_P; assign out_P=inp_I | inp_U
module OR_2(I,R,N); input [2:0]I,R; output [2:0]N; assign N=I | R; endmodule
module OR_1(inp_C,inp_R,inp_I,out_S); input [1:0]inp_C,inp_R,inp_I; output [1:0]out_S; assign out_S=inp_C | inp_R | inp_I; endmodule
module OR_4(G,E,B); input [4:0]G,E; output [4:0]B; assign B=G | E
module OR_4(inp_Z,inp_N,out_M); input [4:0]inp_Z,inp_N; output [4:0]out_M; assign out_M=inp_Z | inp_N; endmodule
module OR_4(inp_U,inp_R,inp_C,out_K); input [4:0]inp_U,inp_R,inp_C; output [4:0]out_K; assign out_K=inp_U | inp_R | inp_C; endmodule
module OR_6(inp_S,inp_M,out_L); input [6:0]inp_S,inp_M; output [6:0]out_L; assign out_L=inp_S | inp_M
module OR_7(E,N,A); input [7:0]E,N; output [7:0]A; assign A=E | N
module OR_5(K,V,F); input [5:0]K,V; output [5:0]F; assign F=K | V
module OR_4(inp_A,inp_T,out_O); input [4:0]inp_A,inp_T; output [4:0]out_O; assign out_O=inp_A | inp_T
module OR_5(E,C,T); input [5:0]E,C; output [5:0]T; assign T=E | C
module OR_4(Q,R,T,K); input [4:0]Q,R,T; output [4:0]K; assign K=Q | R | T
module OR_4(inp_B,inp_W,inp_H,out_G); input [4:0]inp_B,inp_W,inp_H; output [4:0]out_G; assign out_G=inp_B | inp_W | inp_H; endmodule
module OR_5(E,F,Y); input [5:0]E,F; output [5:0]Y; assign Y=E | F; endmodule
module OR_4(inp_U,inp_M,inp_A,out_X); input [4:0]inp_U,inp_M,inp_A; output [4:0]out_X; assign out_X=inp_U | inp_M | inp_A
module OR_4(E,L,N,J); input [4:0]E,L,N; output [4:0]J; assign J=E | L | N
module OR_6(inp_O,inp_B,out_U); input [6:0]inp_O,inp_B; output [6:0]out_U; assign out_U=inp_O | inp_B; endmodule
module OR_2(inp_A,inp_Y,inp_V,out_O); input [2:0]inp_A,inp_Y,inp_V; output [2:0]out_O; assign out_O=inp_A | inp_Y | inp_V
module OR_7(inp_U,inp_Q,out_U); input [7:0]inp_U,inp_Q; output [7:0]out_U; assign out_U=inp_U | inp_Q
module OR_5(U,H,Y); input [5:0]U,H; output [5:0]Y; assign Y=U | H; endmodule
module OR_7(inp_W,inp_U,out_I); input [7:0]inp_W,inp_U; output [7:0]out_I; assign out_I=inp_W | inp_U; endmodule
module OR_4(inp_K,inp_V,inp_N,out_G); input [4:0]inp_K,inp_V,inp_N; output [4:0]out_G; assign out_G=inp_K | inp_V | inp_N
module OR_7(Y,B,G); input [7:0]Y,B; output [7:0]G; assign G=Y | B
module OR_2(inp_V,inp_J,inp_E,out_D); input [2:0]inp_V,inp_J,inp_E; output [2:0]out_D; assign out_D=inp_V | inp_J | inp_E
module OR_7(inp_G,inp_V,inp_R,out_R); input [7:0]inp_G,inp_V,inp_R; output [7:0]out_R; assign out_R=inp_G | inp_V | inp_R
module OR_3(inp_O,inp_X,out_H); input [3:0]inp_O,inp_X; output [3:0]out_H; assign out_H=inp_O | inp_X
module OR_1(inp_Z,inp_W,inp_A,out_U); input [1:0]inp_Z,inp_W,inp_A; output [1:0]out_U; assign out_U=inp_Z | inp_W | inp_A; endmodule
module OR_5(inp_A,inp_D,out_H); input [5:0]inp_A,inp_D; output [5:0]out_H; assign out_H=inp_A | inp_D
module OR_7(Q,V,F); input [7:0]Q,V; output [7:0]F; assign F=Q | V
module OR_1(G,I,S); input [1:0]G,I; output [1:0]S; assign S=G | I; endmodule
module OR_1(inp_B,inp_M,inp_Q,out_C); input [1:0]inp_B,inp_M,inp_Q; output [1:0]out_C; assign out_C=inp_B | inp_M | inp_Q; endmodule
module OR_5(O,L,V); input [5:0]O,L; output [5:0]V; assign V=O | L; endmodule
module OR_1(inp_K,inp_H,out_S); input [1:0]inp_K,inp_H; output [1:0]out_S; assign out_S=inp_K | inp_H; endmodule
module OR_7(C,B,K,Z); input [7:0]C,B,K; output [7:0]Z; assign Z=C | B | K
module OR_5(R,E,Y,X); input [5:0]R,E,Y; output [5:0]X; assign X=R | E | Y; endmodule
module OR_1(inp_X,inp_M,inp_L,out_I); input [1:0]inp_X,inp_M,inp_L; output [1:0]out_I; assign out_I=inp_X | inp_M | inp_L
module OR_3(T,X,B,H); input [3:0]T,X,B; output [3:0]H; assign H=T | X | B
module OR_3(inp_L,inp_Y,inp_G,out_I); input [3:0]inp_L,inp_Y,inp_G; output [3:0]out_I; assign out_I=inp_L | inp_Y | inp_G
module OR_1(inp_K,inp_I,out_R); input [1:0]inp_K,inp_I; output [1:0]out_R; assign out_R=inp_K | inp_I
module OR_6(G,Q,Q,R); input [6:0]G,Q,Q; output [6:0]R; assign R=G | Q | Q
module OR_7(inp_E,inp_X,out_T); input [7:0]inp_E,inp_X; output [7:0]out_T; assign out_T=inp_E | inp_X
module OR_6(I,R,D,C); input [6:0]I,R,D; output [6:0]C; assign C=I | R | D
module OR_6(Q,Z,J,E); input [6:0]Q,Z,J; output [6:0]E; assign E=Q | Z | J
module OR_3(T,I,K); input [3:0]T,I; output [3:0]K; assign K=T | I
module OR_5(K,F,L); input [5:0]K,F; output [5:0]L; assign L=K | F; endmodule
module OR_1(inp_W,inp_P,inp_L,out_D); input [1:0]inp_W,inp_P,inp_L; output [1:0]out_D; assign out_D=inp_W | inp_P | inp_L; endmodule
module OR_7(inp_X,inp_O,out_H); input [7:0]inp_X,inp_O; output [7:0]out_H; assign out_H=inp_X | inp_O
module OR_5(Y,G,J,A); input [5:0]Y,G,J; output [5:0]A; assign A=Y | G | J; endmodule
module OR_7(inp_M,inp_W,inp_C,out_R); input [7:0]inp_M,inp_W,inp_C; output [7:0]out_R; assign out_R=inp_M | inp_W | inp_C
module OR_7(inp_M,inp_N,out_K); input [7:0]inp_M,inp_N; output [7:0]out_K; assign out_K=inp_M | inp_N; endmodule
module OR_4(M,N,C,D); input [4:0]M,N,C; output [4:0]D; assign D=M | N | C; endmodule
module OR_7(Y,H,A,V); input [7:0]Y,H,A; output [7:0]V; assign V=Y | H | A
module OR_4(inp_Y,inp_W,inp_T,out_N); input [4:0]inp_Y,inp_W,inp_T; output [4:0]out_N; assign out_N=inp_Y | inp_W | inp_T; endmodule
module OR_2(K,H,T); input [2:0]K,H; output [2:0]T; assign T=K | H
module OR_2(inp_V,inp_Q,inp_S,out_M); input [2:0]inp_V,inp_Q,inp_S; output [2:0]out_M; assign out_M=inp_V | inp_Q | inp_S
module OR_2(inp_C,inp_X,out_U); input [2:0]inp_C,inp_X; output [2:0]out_U; assign out_U=inp_C | inp_X
module OR_5(inp_A,inp_B,inp_U,out_F); input [5:0]inp_A,inp_B,inp_U; output [5:0]out_F; assign out_F=inp_A | inp_B | inp_U; endmodule
module OR_7(inp_B,inp_Z,out_G); input [7:0]inp_B,inp_Z; output [7:0]out_G; assign out_G=inp_B | inp_Z
module OR_1(inp_E,inp_H,inp_N,out_H); input [1:0]inp_E,inp_H,inp_N; output [1:0]out_H; assign out_H=inp_E | inp_H | inp_N; endmodule
module OR_1(inp_P,inp_C,out_W); input [1:0]inp_P,inp_C; output [1:0]out_W; assign out_W=inp_P | inp_C; endmodule
module OR_6(inp_P,inp_T,out_B); input [6:0]inp_P,inp_T; output [6:0]out_B; assign out_B=inp_P | inp_T
module OR_6(X,T,I,J); input [6:0]X,T,I; output [6:0]J; assign J=X | T | I
module OR_5(inp_U,inp_G,inp_J,out_U); input [5:0]inp_U,inp_G,inp_J; output [5:0]out_U; assign out_U=inp_U | inp_G | inp_J
module OR_6(P,L,E,D); input [6:0]P,L,E; output [6:0]D; assign D=P | L | E
module OR_3(C,Q,H,W); input [3:0]C,Q,H; output [3:0]W; assign W=C | Q | H
module OR_7(inp_A,inp_R,inp_H,out_U); input [7:0]inp_A,inp_R,inp_H; output [7:0]out_U; assign out_U=inp_A | inp_R | inp_H; endmodule
module OR_7(inp_X,inp_F,inp_M,out_T); input [7:0]inp_X,inp_F,inp_M; output [7:0]out_T; assign out_T=inp_X | inp_F | inp_M
module OR_5(inp_S,inp_I,out_K); input [5:0]inp_S,inp_I; output [5:0]out_K; assign out_K=inp_S | inp_I
module OR_4(inp_G,inp_N,out_S); input [4:0]inp_G,inp_N; output [4:0]out_S; assign out_S=inp_G | inp_N
module OR_1(A,P,D,B); input [1:0]A,P,D; output [1:0]B; assign B=A | P | D
module OR_6(Q,V,P); input [6:0]Q,V; output [6:0]P; assign P=Q | V; endmodule
module OR_1(I,O,H); input [1:0]I,O; output [1:0]H; assign H=I | O; endmodule
module OR_5(inp_D,inp_U,out_U); input [5:0]inp_D,inp_U; output [5:0]out_U; assign out_U=inp_D | inp_U
module OR_1(inp_W,inp_U,out_M); input [1:0]inp_W,inp_U; output [1:0]out_M; assign out_M=inp_W | inp_U; endmodule
module OR_3(F,O,W,U); input [3:0]F,O,W; output [3:0]U; assign U=F | O | W; endmodule
module OR_1(inp_S,inp_K,inp_H,out_C); input [1:0]inp_S,inp_K,inp_H; output [1:0]out_C; assign out_C=inp_S | inp_K | inp_H; endmodule
module OR_2(inp_X,inp_M,inp_K,out_Y); input [2:0]inp_X,inp_M,inp_K; output [2:0]out_Y; assign out_Y=inp_X | inp_M | inp_K
module OR_6(inp_W,inp_Q,out_B); input [6:0]inp_W,inp_Q; output [6:0]out_B; assign out_B=inp_W | inp_Q; endmodule
module OR_3(O,Q,R); input [3:0]O,Q; output [3:0]R; assign R=O | Q; endmodule
module OR_5(inp_Z,inp_F,inp_X,out_B); input [5:0]inp_Z,inp_F,inp_X; output [5:0]out_B; assign out_B=inp_Z | inp_F | inp_X; endmodule
module OR_2(inp_O,inp_Y,inp_C,out_L); input [2:0]inp_O,inp_Y,inp_C; output [2:0]out_L; assign out_L=inp_O | inp_Y | inp_C; endmodule
module OR_3(inp_F,inp_C,out_W); input [3:0]inp_F,inp_C; output [3:0]out_W; assign out_W=inp_F | inp_C; endmodule
module OR_5(inp_E,inp_V,out_C); input [5:0]inp_E,inp_V; output [5:0]out_C; assign out_C=inp_E | inp_V; endmodule
module OR_1(H,B,O); input [1:0]H,B; output [1:0]O; assign O=H | B
module OR_4(I,A,J,C); input [4:0]I,A,J; output [4:0]C; assign C=I | A | J
module OR_4(inp_W,inp_N,out_Q); input [4:0]inp_W,inp_N; output [4:0]out_Q; assign out_Q=inp_W | inp_N; endmodule
module OR_2(inp_R,inp_V,out_B); input [2:0]inp_R,inp_V; output [2:0]out_B; assign out_B=inp_R | inp_V
module OR_1(I,Y,K,J); input [1:0]I,Y,K; output [1:0]J; assign J=I | Y | K; endmodule
module OR_2(inp_K,inp_N,out_K); input [2:0]inp_K,inp_N; output [2:0]out_K; assign out_K=inp_K | inp_N
module OR_2(inp_C,inp_Z,out_H); input [2:0]inp_C,inp_Z; output [2:0]out_H; assign out_H=inp_C | inp_Z; endmodule
module OR_6(C,S,B); input [6:0]C,S; output [6:0]B; assign B=C | S
module OR_2(W,A,J,M); input [2:0]W,A,J; output [2:0]M; assign M=W | A | J
module OR_7(inp_Z,inp_R,inp_W,out_P); input [7:0]inp_Z,inp_R,inp_W; output [7:0]out_P; assign out_P=inp_Z | inp_R | inp_W
module OR_4(T,J,G); input [4:0]T,J; output [4:0]G; assign G=T | J; endmodule
module OR_6(inp_U,inp_O,out_U); input [6:0]inp_U,inp_O; output [6:0]out_U; assign out_U=inp_U | inp_O; endmodule
module OR_5(inp_M,inp_X,inp_R,out_T); input [5:0]inp_M,inp_X,inp_R; output [5:0]out_T; assign out_T=inp_M | inp_X | inp_R; endmodule
module OR_1(inp_X,inp_U,inp_B,out_X); input [1:0]inp_X,inp_U,inp_B; output [1:0]out_X; assign out_X=inp_X | inp_U | inp_B
module OR_4(inp_A,inp_L,inp_R,out_Q); input [4:0]inp_A,inp_L,inp_R; output [4:0]out_Q; assign out_Q=inp_A | inp_L | inp_R
module OR_2(inp_C,inp_K,inp_Z,out_R); input [2:0]inp_C,inp_K,inp_Z; output [2:0]out_R; assign out_R=inp_C | inp_K | inp_Z
module OR_3(inp_A,inp_S,inp_C,out_V); input [3:0]inp_A,inp_S,inp_C; output [3:0]out_V; assign out_V=inp_A | inp_S | inp_C; endmodule
module OR_4(inp_H,inp_G,out_P); input [4:0]inp_H,inp_G; output [4:0]out_P; assign out_P=inp_H | inp_G
module OR_4(inp_B,inp_T,inp_V,out_B); input [4:0]inp_B,inp_T,inp_V; output [4:0]out_B; assign out_B=inp_B | inp_T | inp_V
module OR_4(K,Y,Q,R); input [4:0]K,Y,Q; output [4:0]R; assign R=K | Y | Q
module OR_1(inp_U,inp_M,out_O); input [1:0]inp_U,inp_M; output [1:0]out_O; assign out_O=inp_U | inp_M; endmodule
module OR_1(U,R,M,Y); input [1:0]U,R,M; output [1:0]Y; assign Y=U | R | M; endmodule
module OR_4(inp_V,inp_G,inp_E,out_E); input [4:0]inp_V,inp_G,inp_E; output [4:0]out_E; assign out_E=inp_V | inp_G | inp_E; endmodule
module OR_3(N,H,A); input [3:0]N,H; output [3:0]A; assign A=N | H; endmodule
module OR_7(S,Z,I,O); input [7:0]S,Z,I; output [7:0]O; assign O=S | Z | I
module OR_5(X,S,H); input [5:0]X,S; output [5:0]H; assign H=X | S
module OR_3(K,N,J); input [3:0]K,N; output [3:0]J; assign J=K | N; endmodule
module OR_7(inp_K,inp_P,inp_Y,out_H); input [7:0]inp_K,inp_P,inp_Y; output [7:0]out_H; assign out_H=inp_K | inp_P | inp_Y; endmodule
module OR_1(M,A,O); input [1:0]M,A; output [1:0]O; assign O=M | A
module OR_2(inp_N,inp_F,out_H); input [2:0]inp_N,inp_F; output [2:0]out_H; assign out_H=inp_N | inp_F; endmodule
module OR_7(inp_V,inp_S,out_N); input [7:0]inp_V,inp_S; output [7:0]out_N; assign out_N=inp_V | inp_S; endmodule
module OR_4(inp_C,inp_F,inp_V,out_Z); input [4:0]inp_C,inp_F,inp_V; output [4:0]out_Z; assign out_Z=inp_C | inp_F | inp_V
module OR_4(L,Z,B,A); input [4:0]L,Z,B; output [4:0]A; assign A=L | Z | B
module OR_4(inp_C,inp_T,inp_E,out_B); input [4:0]inp_C,inp_T,inp_E; output [4:0]out_B; assign out_B=inp_C | inp_T | inp_E; endmodule
module OR_7(inp_S,inp_R,inp_F,out_D); input [7:0]inp_S,inp_R,inp_F; output [7:0]out_D; assign out_D=inp_S | inp_R | inp_F; endmodule
module OR_1(inp_L,inp_W,inp_N,out_I); input [1:0]inp_L,inp_W,inp_N; output [1:0]out_I; assign out_I=inp_L | inp_W | inp_N; endmodule
module OR_4(inp_A,inp_L,out_Y); input [4:0]inp_A,inp_L; output [4:0]out_Y; assign out_Y=inp_A | inp_L
module OR_2(inp_U,inp_N,out_U); input [2:0]inp_U,inp_N; output [2:0]out_U; assign out_U=inp_U | inp_N
module OR_5(O,I,L); input [5:0]O,I; output [5:0]L; assign L=O | I; endmodule
module OR_1(D,A,X,G); input [1:0]D,A,X; output [1:0]G; assign G=D | A | X; endmodule
module OR_4(Q,M,W,U); input [4:0]Q,M,W; output [4:0]U; assign U=Q | M | W
module OR_7(S,X,B); input [7:0]S,X; output [7:0]B; assign B=S | X; endmodule
module OR_2(inp_H,inp_Z,inp_W,out_G); input [2:0]inp_H,inp_Z,inp_W; output [2:0]out_G; assign out_G=inp_H | inp_Z | inp_W
module OR_4(inp_N,inp_A,inp_M,out_W); input [4:0]inp_N,inp_A,inp_M; output [4:0]out_W; assign out_W=inp_N | inp_A | inp_M
module OR_7(C,L,K,Z); input [7:0]C,L,K; output [7:0]Z; assign Z=C | L | K
module OR_4(T,I,Q,D); input [4:0]T,I,Q; output [4:0]D; assign D=T | I | Q
module OR_6(G,W,L,X); input [6:0]G,W,L; output [6:0]X; assign X=G | W | L
module OR_7(inp_W,inp_L,out_R); input [7:0]inp_W,inp_L; output [7:0]out_R; assign out_R=inp_W | inp_L
module OR_5(inp_U,inp_J,inp_O,out_K); input [5:0]inp_U,inp_J,inp_O; output [5:0]out_K; assign out_K=inp_U | inp_J | inp_O
module OR_1(W,E,D,V); input [1:0]W,E,D; output [1:0]V; assign V=W | E | D
module OR_1(B,W,Z,S); input [1:0]B,W,Z; output [1:0]S; assign S=B | W | Z
module OR_5(inp_A,inp_I,out_Y); input [5:0]inp_A,inp_I; output [5:0]out_Y; assign out_Y=inp_A | inp_I
module OR_3(R,M,A); input [3:0]R,M; output [3:0]A; assign A=R | M; endmodule
module OR_1(inp_R,inp_C,out_U); input [1:0]inp_R,inp_C; output [1:0]out_U; assign out_U=inp_R | inp_C
module OR_7(W,P,H,S); input [7:0]W,P,H; output [7:0]S; assign S=W | P | H; endmodule
module OR_4(I,B,P,F); input [4:0]I,B,P; output [4:0]F; assign F=I | B | P; endmodule
module OR_2(V,P,A); input [2:0]V,P; output [2:0]A; assign A=V | P; endmodule
module OR_1(inp_K,inp_J,out_P); input [1:0]inp_K,inp_J; output [1:0]out_P; assign out_P=inp_K | inp_J; endmodule
module OR_2(inp_J,inp_M,out_Q); input [2:0]inp_J,inp_M; output [2:0]out_Q; assign out_Q=inp_J | inp_M
module OR_7(Z,A,T,N); input [7:0]Z,A,T; output [7:0]N; assign N=Z | A | T; endmodule
module OR_1(inp_M,inp_H,out_K); input [1:0]inp_M,inp_H; output [1:0]out_K; assign out_K=inp_M | inp_H; endmodule
module OR_3(U,S,K,W); input [3:0]U,S,K; output [3:0]W; assign W=U | S | K; endmodule
module OR_3(inp_M,inp_I,out_D); input [3:0]inp_M,inp_I; output [3:0]out_D; assign out_D=inp_M | inp_I; endmodule
module OR_4(inp_W,inp_E,out_P); input [4:0]inp_W,inp_E; output [4:0]out_P; assign out_P=inp_W | inp_E; endmodule
module OR_7(inp_M,inp_H,inp_T,out_K); input [7:0]inp_M,inp_H,inp_T; output [7:0]out_K; assign out_K=inp_M | inp_H | inp_T
module OR_5(inp_C,inp_L,inp_M,out_X); input [5:0]inp_C,inp_L,inp_M; output [5:0]out_X; assign out_X=inp_C | inp_L | inp_M
module OR_5(T,O,P,H); input [5:0]T,O,P; output [5:0]H; assign H=T | O | P
module OR_5(I,F,W,G); input [5:0]I,F,W; output [5:0]G; assign G=I | F | W; endmodule
module OR_6(inp_V,inp_A,inp_L,out_B); input [6:0]inp_V,inp_A,inp_L; output [6:0]out_B; assign out_B=inp_V | inp_A | inp_L; endmodule
module OR_5(inp_E,inp_U,out_Y); input [5:0]inp_E,inp_U; output [5:0]out_Y; assign out_Y=inp_E | inp_U
module OR_3(S,G,B); input [3:0]S,G; output [3:0]B; assign B=S | G; endmodule
module OR_3(K,T,D,R); input [3:0]K,T,D; output [3:0]R; assign R=K | T | D; endmodule
module OR_7(inp_R,inp_Q,inp_J,out_V); input [7:0]inp_R,inp_Q,inp_J; output [7:0]out_V; assign out_V=inp_R | inp_Q | inp_J
module OR_2(inp_A,inp_Z,out_Y); input [2:0]inp_A,inp_Z; output [2:0]out_Y; assign out_Y=inp_A | inp_Z
module OR_3(U,P,K); input [3:0]U,P; output [3:0]K; assign K=U | P
module OR_5(O,P,S,B); input [5:0]O,P,S; output [5:0]B; assign B=O | P | S; endmodule
module OR_4(D,N,L,B); input [4:0]D,N,L; output [4:0]B; assign B=D | N | L
module OR_1(O,L,U); input [1:0]O,L; output [1:0]U; assign U=O | L; endmodule
module OR_4(C,N,P); input [4:0]C,N; output [4:0]P; assign P=C | N; endmodule
module OR_4(Q,D,V,N); input [4:0]Q,D,V; output [4:0]N; assign N=Q | D | V
module OR_2(O,H,F); input [2:0]O,H; output [2:0]F; assign F=O | H; endmodule
module OR_1(inp_I,inp_K,out_Y); input [1:0]inp_I,inp_K; output [1:0]out_Y; assign out_Y=inp_I | inp_K; endmodule
module OR_5(inp_W,inp_A,out_J); input [5:0]inp_W,inp_A; output [5:0]out_J; assign out_J=inp_W | inp_A; endmodule
module OR_3(inp_Y,inp_J,inp_U,out_W); input [3:0]inp_Y,inp_J,inp_U; output [3:0]out_W; assign out_W=inp_Y | inp_J | inp_U
module OR_6(H,J,F); input [6:0]H,J; output [6:0]F; assign F=H | J
module OR_4(K,T,F); input [4:0]K,T; output [4:0]F; assign F=K | T; endmodule
module OR_4(S,Y,C); input [4:0]S,Y; output [4:0]C; assign C=S | Y
module OR_4(O,T,M); input [4:0]O,T; output [4:0]M; assign M=O | T; endmodule
module OR_6(inp_H,inp_R,inp_L,out_H); input [6:0]inp_H,inp_R,inp_L; output [6:0]out_H; assign out_H=inp_H | inp_R | inp_L; endmodule
module OR_2(inp_K,inp_W,inp_A,out_Y); input [2:0]inp_K,inp_W,inp_A; output [2:0]out_Y; assign out_Y=inp_K | inp_W | inp_A; endmodule
module OR_2(W,Z,D); input [2:0]W,Z; output [2:0]D; assign D=W | Z
module OR_4(inp_V,inp_O,out_P); input [4:0]inp_V,inp_O; output [4:0]out_P; assign out_P=inp_V | inp_O
module OR_6(H,K,N); input [6:0]H,K; output [6:0]N; assign N=H | K; endmodule
module OR_6(inp_N,inp_X,inp_F,out_T); input [6:0]inp_N,inp_X,inp_F; output [6:0]out_T; assign out_T=inp_N | inp_X | inp_F; endmodule
module OR_5(inp_O,inp_J,inp_G,out_M); input [5:0]inp_O,inp_J,inp_G; output [5:0]out_M; assign out_M=inp_O | inp_J | inp_G; endmodule
module OR_1(H,T,K); input [1:0]H,T; output [1:0]K; assign K=H | T
module OR_3(D,Z,W); input [3:0]D,Z; output [3:0]W; assign W=D | Z
module OR_3(inp_R,inp_P,out_O); input [3:0]inp_R,inp_P; output [3:0]out_O; assign out_O=inp_R | inp_P
module OR_4(inp_Y,inp_A,inp_P,out_Y); input [4:0]inp_Y,inp_A,inp_P; output [4:0]out_Y; assign out_Y=inp_Y | inp_A | inp_P
module OR_2(inp_E,inp_C,inp_E,out_U); input [2:0]inp_E,inp_C,inp_E; output [2:0]out_U; assign out_U=inp_E | inp_C | inp_E
module OR_1(R,Z,P,U); input [1:0]R,Z,P; output [1:0]U; assign U=R | Z | P; endmodule
module OR_3(inp_Y,inp_H,out_S); input [3:0]inp_Y,inp_H; output [3:0]out_S; assign out_S=inp_Y | inp_H
module OR_1(inp_C,inp_G,out_N); input [1:0]inp_C,inp_G; output [1:0]out_N; assign out_N=inp_C | inp_G
module OR_4(inp_F,inp_S,inp_Z,out_Z); input [4:0]inp_F,inp_S,inp_Z; output [4:0]out_Z; assign out_Z=inp_F | inp_S | inp_Z; endmodule
module OR_5(W,Y,I,X); input [5:0]W,Y,I; output [5:0]X; assign X=W | Y | I; endmodule
module OR_3(inp_S,inp_Q,out_D); input [3:0]inp_S,inp_Q; output [3:0]out_D; assign out_D=inp_S | inp_Q
module OR_3(Y,R,X); input [3:0]Y,R; output [3:0]X; assign X=Y | R; endmodule
module OR_4(R,V,T); input [4:0]R,V; output [4:0]T; assign T=R | V
module OR_2(inp_F,inp_D,inp_H,out_P); input [2:0]inp_F,inp_D,inp_H; output [2:0]out_P; assign out_P=inp_F | inp_D | inp_H; endmodule
module OR_5(O,T,J,Q); input [5:0]O,T,J; output [5:0]Q; assign Q=O | T | J
module OR_6(inp_A,inp_W,out_M); input [6:0]inp_A,inp_W; output [6:0]out_M; assign out_M=inp_A | inp_W
module OR_1(W,V,M,N); input [1:0]W,V,M; output [1:0]N; assign N=W | V | M; endmodule
module OR_3(inp_M,inp_S,inp_Q,out_K); input [3:0]inp_M,inp_S,inp_Q; output [3:0]out_K; assign out_K=inp_M | inp_S | inp_Q
module OR_1(inp_M,inp_Q,inp_L,out_C); input [1:0]inp_M,inp_Q,inp_L; output [1:0]out_C; assign out_C=inp_M | inp_Q | inp_L; endmodule
module OR_1(F,U,O); input [1:0]F,U; output [1:0]O; assign O=F | U
module OR_6(inp_A,inp_P,out_H); input [6:0]inp_A,inp_P; output [6:0]out_H; assign out_H=inp_A | inp_P; endmodule
module OR_4(inp_D,inp_X,inp_G,out_W); input [4:0]inp_D,inp_X,inp_G; output [4:0]out_W; assign out_W=inp_D | inp_X | inp_G; endmodule
module OR_1(inp_D,inp_U,out_X); input [1:0]inp_D,inp_U; output [1:0]out_X; assign out_X=inp_D | inp_U
module OR_5(inp_T,inp_R,out_A); input [5:0]inp_T,inp_R; output [5:0]out_A; assign out_A=inp_T | inp_R; endmodule
module OR_6(N,L,W,F); input [6:0]N,L,W; output [6:0]F; assign F=N | L | W; endmodule
module OR_1(inp_N,inp_D,out_X); input [1:0]inp_N,inp_D; output [1:0]out_X; assign out_X=inp_N | inp_D; endmodule
module OR_2(U,T,P); input [2:0]U,T; output [2:0]P; assign P=U | T; endmodule
module OR_7(inp_B,inp_E,out_H); input [7:0]inp_B,inp_E; output [7:0]out_H; assign out_H=inp_B | inp_E; endmodule
module OR_3(R,C,V,Z); input [3:0]R,C,V; output [3:0]Z; assign Z=R | C | V
module OR_4(inp_R,inp_V,out_Q); input [4:0]inp_R,inp_V; output [4:0]out_Q; assign out_Q=inp_R | inp_V; endmodule
module OR_6(inp_S,inp_P,inp_U,out_I); input [6:0]inp_S,inp_P,inp_U; output [6:0]out_I; assign out_I=inp_S | inp_P | inp_U
module OR_3(D,N,B); input [3:0]D,N; output [3:0]B; assign B=D | N; endmodule
module OR_2(inp_O,inp_B,out_V); input [2:0]inp_O,inp_B; output [2:0]out_V; assign out_V=inp_O | inp_B
module OR_3(K,K,T); input [3:0]K,K; output [3:0]T; assign T=K | K
module OR_2(inp_B,inp_U,inp_Q,out_B); input [2:0]inp_B,inp_U,inp_Q; output [2:0]out_B; assign out_B=inp_B | inp_U | inp_Q
module OR_5(inp_L,inp_A,out_H); input [5:0]inp_L,inp_A; output [5:0]out_H; assign out_H=inp_L | inp_A
module OR_6(P,M,D); input [6:0]P,M; output [6:0]D; assign D=P | M; endmodule
module OR_2(W,G,L); input [2:0]W,G; output [2:0]L; assign L=W | G
module OR_5(inp_D,inp_X,inp_B,out_W); input [5:0]inp_D,inp_X,inp_B; output [5:0]out_W; assign out_W=inp_D | inp_X | inp_B; endmodule
module OR_6(R,Q,G,J); input [6:0]R,Q,G; output [6:0]J; assign J=R | Q | G; endmodule
module OR_4(inp_Q,inp_T,inp_E,out_A); input [4:0]inp_Q,inp_T,inp_E; output [4:0]out_A; assign out_A=inp_Q | inp_T | inp_E; endmodule
module OR_3(Z,O,I); input [3:0]Z,O; output [3:0]I; assign I=Z | O; endmodule
module OR_1(inp_V,inp_K,inp_J,out_T); input [1:0]inp_V,inp_K,inp_J; output [1:0]out_T; assign out_T=inp_V | inp_K | inp_J
module OR_2(Q,X,H,N); input [2:0]Q,X,H; output [2:0]N; assign N=Q | X | H; endmodule
module OR_3(inp_G,inp_E,inp_P,out_D); input [3:0]inp_G,inp_E,inp_P; output [3:0]out_D; assign out_D=inp_G | inp_E | inp_P
module OR_5(D,T,U,Z); input [5:0]D,T,U; output [5:0]Z; assign Z=D | T | U; endmodule
module OR_4(D,J,E); input [4:0]D,J; output [4:0]E; assign E=D | J
module OR_1(inp_W,inp_Z,inp_F,out_E); input [1:0]inp_W,inp_Z,inp_F; output [1:0]out_E; assign out_E=inp_W | inp_Z | inp_F
module OR_5(V,J,Z,P); input [5:0]V,J,Z; output [5:0]P; assign P=V | J | Z; endmodule
module OR_2(C,B,D); input [2:0]C,B; output [2:0]D; assign D=C | B
module OR_6(inp_B,inp_R,out_S); input [6:0]inp_B,inp_R; output [6:0]out_S; assign out_S=inp_B | inp_R; endmodule
module OR_5(inp_F,inp_P,inp_J,out_W); input [5:0]inp_F,inp_P,inp_J; output [5:0]out_W; assign out_W=inp_F | inp_P | inp_J
module OR_1(inp_H,inp_L,inp_F,out_Y); input [1:0]inp_H,inp_L,inp_F; output [1:0]out_Y; assign out_Y=inp_H | inp_L | inp_F; endmodule
module OR_3(inp_K,inp_P,out_A); input [3:0]inp_K,inp_P; output [3:0]out_A; assign out_A=inp_K | inp_P
module OR_6(inp_O,inp_N,inp_R,out_R); input [6:0]inp_O,inp_N,inp_R; output [6:0]out_R; assign out_R=inp_O | inp_N | inp_R; endmodule
module OR_1(B,R,C); input [1:0]B,R; output [1:0]C; assign C=B | R; endmodule
module OR_2(K,G,J,Y); input [2:0]K,G,J; output [2:0]Y; assign Y=K | G | J
module OR_6(S,T,U); input [6:0]S,T; output [6:0]U; assign U=S | T
module OR_2(K,L,R); input [2:0]K,L; output [2:0]R; assign R=K | L; endmodule
module OR_5(inp_W,inp_M,out_Z); input [5:0]inp_W,inp_M; output [5:0]out_Z; assign out_Z=inp_W | inp_M; endmodule
module OR_3(inp_B,inp_Z,out_J); input [3:0]inp_B,inp_Z; output [3:0]out_J; assign out_J=inp_B | inp_Z; endmodule
module OR_4(P,T,D); input [4:0]P,T; output [4:0]D; assign D=P | T
module OR_2(O,L,K,G); input [2:0]O,L,K; output [2:0]G; assign G=O | L | K
module OR_1(Q,N,G,Y); input [1:0]Q,N,G; output [1:0]Y; assign Y=Q | N | G; endmodule
module OR_3(M,C,V,Z); input [3:0]M,C,V; output [3:0]Z; assign Z=M | C | V; endmodule
module OR_7(T,M,A); input [7:0]T,M; output [7:0]A; assign A=T | M
module OR_5(inp_U,inp_Q,inp_A,out_C); input [5:0]inp_U,inp_Q,inp_A; output [5:0]out_C; assign out_C=inp_U | inp_Q | inp_A
module OR_3(inp_V,inp_B,inp_D,out_O); input [3:0]inp_V,inp_B,inp_D; output [3:0]out_O; assign out_O=inp_V | inp_B | inp_D; endmodule
module OR_3(I,P,P,A); input [3:0]I,P,P; output [3:0]A; assign A=I | P | P; endmodule
module OR_6(U,V,A); input [6:0]U,V; output [6:0]A; assign A=U | V
module OR_2(inp_I,inp_L,inp_E,out_G); input [2:0]inp_I,inp_L,inp_E; output [2:0]out_G; assign out_G=inp_I | inp_L | inp_E; endmodule
module OR_2(K,E,H,Z); input [2:0]K,E,H; output [2:0]Z; assign Z=K | E | H; endmodule
module OR_2(O,Y,A); input [2:0]O,Y; output [2:0]A; assign A=O | Y
module OR_3(P,X,G,R); input [3:0]P,X,G; output [3:0]R; assign R=P | X | G; endmodule
module OR_2(inp_F,inp_D,out_V); input [2:0]inp_F,inp_D; output [2:0]out_V; assign out_V=inp_F | inp_D; endmodule
module OR_7(O,Y,E,R); input [7:0]O,Y,E; output [7:0]R; assign R=O | Y | E
module OR_2(E,X,R,N); input [2:0]E,X,R; output [2:0]N; assign N=E | X | R
module OR_3(A,V,K,U); input [3:0]A,V,K; output [3:0]U; assign U=A | V | K; endmodule
module OR_5(G,I,M,K); input [5:0]G,I,M; output [5:0]K; assign K=G | I | M; endmodule
module OR_1(T,U,V,K); input [1:0]T,U,V; output [1:0]K; assign K=T | U | V; endmodule
module OR_2(inp_A,inp_X,inp_O,out_X); input [2:0]inp_A,inp_X,inp_O; output [2:0]out_X; assign out_X=inp_A | inp_X | inp_O; endmodule
module OR_5(inp_N,inp_I,out_W); input [5:0]inp_N,inp_I; output [5:0]out_W; assign out_W=inp_N | inp_I; endmodule
module OR_7(inp_M,inp_C,out_W); input [7:0]inp_M,inp_C; output [7:0]out_W; assign out_W=inp_M | inp_C
module OR_2(W,Q,L); input [2:0]W,Q; output [2:0]L; assign L=W | Q
module OR_6(inp_Z,inp_F,out_Y); input [6:0]inp_Z,inp_F; output [6:0]out_Y; assign out_Y=inp_Z | inp_F; endmodule
module OR_1(inp_O,inp_D,out_U); input [1:0]inp_O,inp_D; output [1:0]out_U; assign out_U=inp_O | inp_D; endmodule
module OR_4(E,K,K); input [4:0]E,K; output [4:0]K; assign K=E | K; endmodule
module OR_5(inp_O,inp_B,out_U); input [5:0]inp_O,inp_B; output [5:0]out_U; assign out_U=inp_O | inp_B
module OR_2(inp_Y,inp_H,inp_X,out_G); input [2:0]inp_Y,inp_H,inp_X; output [2:0]out_G; assign out_G=inp_Y | inp_H | inp_X; endmodule
module OR_6(inp_U,inp_Q,inp_Y,out_M); input [6:0]inp_U,inp_Q,inp_Y; output [6:0]out_M; assign out_M=inp_U | inp_Q | inp_Y; endmodule
module OR_1(P,I,F); input [1:0]P,I; output [1:0]F; assign F=P | I
module OR_1(M,A,C,X); input [1:0]M,A,C; output [1:0]X; assign X=M | A | C; endmodule
module OR_1(inp_O,inp_K,inp_C,out_H); input [1:0]inp_O,inp_K,inp_C; output [1:0]out_H; assign out_H=inp_O | inp_K | inp_C
module OR_2(inp_G,inp_I,out_R); input [2:0]inp_G,inp_I; output [2:0]out_R; assign out_R=inp_G | inp_I
module OR_5(K,N,H,S); input [5:0]K,N,H; output [5:0]S; assign S=K | N | H; endmodule
module OR_2(inp_T,inp_N,inp_P,out_M); input [2:0]inp_T,inp_N,inp_P; output [2:0]out_M; assign out_M=inp_T | inp_N | inp_P
module OR_2(inp_J,inp_H,inp_E,out_T); input [2:0]inp_J,inp_H,inp_E; output [2:0]out_T; assign out_T=inp_J | inp_H | inp_E
module OR_4(I,Q,G); input [4:0]I,Q; output [4:0]G; assign G=I | Q
module OR_2(inp_B,inp_E,inp_O,out_Q); input [2:0]inp_B,inp_E,inp_O; output [2:0]out_Q; assign out_Q=inp_B | inp_E | inp_O
module OR_3(P,S,R,Z); input [3:0]P,S,R; output [3:0]Z; assign Z=P | S | R; endmodule
module OR_6(inp_T,inp_G,out_Y); input [6:0]inp_T,inp_G; output [6:0]out_Y; assign out_Y=inp_T | inp_G; endmodule
module OR_1(inp_V,inp_U,out_O); input [1:0]inp_V,inp_U; output [1:0]out_O; assign out_O=inp_V | inp_U; endmodule
module OR_5(inp_A,inp_N,out_W); input [5:0]inp_A,inp_N; output [5:0]out_W; assign out_W=inp_A | inp_N; endmodule
module OR_2(inp_L,inp_Y,inp_T,out_U); input [2:0]inp_L,inp_Y,inp_T; output [2:0]out_U; assign out_U=inp_L | inp_Y | inp_T; endmodule
module OR_5(H,O,P); input [5:0]H,O; output [5:0]P; assign P=H | O
module OR_6(D,J,N,S); input [6:0]D,J,N; output [6:0]S; assign S=D | J | N
module OR_1(I,W,O); input [1:0]I,W; output [1:0]O; assign O=I | W
module OR_2(W,P,G); input [2:0]W,P; output [2:0]G; assign G=W | P; endmodule
module OR_3(D,H,K,T); input [3:0]D,H,K; output [3:0]T; assign T=D | H | K
module OR_5(inp_U,inp_A,out_A); input [5:0]inp_U,inp_A; output [5:0]out_A; assign out_A=inp_U | inp_A; endmodule
module OR_2(E,S,P,I); input [2:0]E,S,P; output [2:0]I; assign I=E | S | P
module OR_6(inp_E,inp_C,out_L); input [6:0]inp_E,inp_C; output [6:0]out_L; assign out_L=inp_E | inp_C
module OR_5(M,D,P,E); input [5:0]M,D,P; output [5:0]E; assign E=M | D | P; endmodule
module OR_6(inp_C,inp_X,inp_J,out_F); input [6:0]inp_C,inp_X,inp_J; output [6:0]out_F; assign out_F=inp_C | inp_X | inp_J
module OR_4(I,X,A,C); input [4:0]I,X,A; output [4:0]C; assign C=I | X | A; endmodule
module OR_6(inp_J,inp_H,inp_J,out_F); input [6:0]inp_J,inp_H,inp_J; output [6:0]out_F; assign out_F=inp_J | inp_H | inp_J; endmodule
module OR_6(inp_X,inp_U,inp_O,out_C); input [6:0]inp_X,inp_U,inp_O; output [6:0]out_C; assign out_C=inp_X | inp_U | inp_O; endmodule
module OR_5(I,D,M,K); input [5:0]I,D,M; output [5:0]K; assign K=I | D | M; endmodule
module OR_3(inp_H,inp_C,inp_G,out_K); input [3:0]inp_H,inp_C,inp_G; output [3:0]out_K; assign out_K=inp_H | inp_C | inp_G
module OR_6(inp_V,inp_Y,out_E); input [6:0]inp_V,inp_Y; output [6:0]out_E; assign out_E=inp_V | inp_Y
module OR_4(inp_A,inp_F,out_S); input [4:0]inp_A,inp_F; output [4:0]out_S; assign out_S=inp_A | inp_F; endmodule
module OR_4(I,L,A,F); input [4:0]I,L,A; output [4:0]F; assign F=I | L | A; endmodule
module OR_5(inp_U,inp_W,inp_X,out_S); input [5:0]inp_U,inp_W,inp_X; output [5:0]out_S; assign out_S=inp_U | inp_W | inp_X
module OR_6(N,L,T); input [6:0]N,L; output [6:0]T; assign T=N | L; endmodule
module OR_5(inp_S,inp_D,inp_Y,out_K); input [5:0]inp_S,inp_D,inp_Y; output [5:0]out_K; assign out_K=inp_S | inp_D | inp_Y; endmodule
module OR_5(E,K,U); input [5:0]E,K; output [5:0]U; assign U=E | K; endmodule
module OR_5(inp_Y,inp_F,out_H); input [5:0]inp_Y,inp_F; output [5:0]out_H; assign out_H=inp_Y | inp_F; endmodule
module OR_4(inp_L,inp_F,out_G); input [4:0]inp_L,inp_F; output [4:0]out_G; assign out_G=inp_L | inp_F; endmodule
module OR_2(inp_G,inp_K,out_D); input [2:0]inp_G,inp_K; output [2:0]out_D; assign out_D=inp_G | inp_K; endmodule
module OR_3(inp_S,inp_U,inp_K,out_J); input [3:0]inp_S,inp_U,inp_K; output [3:0]out_J; assign out_J=inp_S | inp_U | inp_K
module OR_4(M,J,Q); input [4:0]M,J; output [4:0]Q; assign Q=M | J; endmodule
module OR_7(inp_V,inp_K,out_O); input [7:0]inp_V,inp_K; output [7:0]out_O; assign out_O=inp_V | inp_K
module OR_4(inp_V,inp_R,out_B); input [4:0]inp_V,inp_R; output [4:0]out_B; assign out_B=inp_V | inp_R; endmodule
module OR_5(inp_L,inp_I,inp_R,out_N); input [5:0]inp_L,inp_I,inp_R; output [5:0]out_N; assign out_N=inp_L | inp_I | inp_R
module OR_5(inp_D,inp_L,out_G); input [5:0]inp_D,inp_L; output [5:0]out_G; assign out_G=inp_D | inp_L; endmodule
module OR_6(inp_I,inp_R,inp_N,out_P); input [6:0]inp_I,inp_R,inp_N; output [6:0]out_P; assign out_P=inp_I | inp_R | inp_N; endmodule
module OR_3(D,N,J); input [3:0]D,N; output [3:0]J; assign J=D | N
module OR_4(inp_O,inp_N,inp_Z,out_V); input [4:0]inp_O,inp_N,inp_Z; output [4:0]out_V; assign out_V=inp_O | inp_N | inp_Z; endmodule
module OR_5(U,M,F); input [5:0]U,M; output [5:0]F; assign F=U | M; endmodule
module OR_1(inp_O,inp_V,inp_J,out_W); input [1:0]inp_O,inp_V,inp_J; output [1:0]out_W; assign out_W=inp_O | inp_V | inp_J; endmodule
module OR_2(inp_R,inp_O,inp_A,out_B); input [2:0]inp_R,inp_O,inp_A; output [2:0]out_B; assign out_B=inp_R | inp_O | inp_A
module OR_4(J,E,A); input [4:0]J,E; output [4:0]A; assign A=J | E; endmodule
module OR_5(K,W,Y,U); input [5:0]K,W,Y; output [5:0]U; assign U=K | W | Y
module OR_4(W,Q,E); input [4:0]W,Q; output [4:0]E; assign E=W | Q
module OR_5(inp_S,inp_L,out_Q); input [5:0]inp_S,inp_L; output [5:0]out_Q; assign out_Q=inp_S | inp_L
module OR_1(F,N,Q); input [1:0]F,N; output [1:0]Q; assign Q=F | N; endmodule
module OR_3(N,P,Z); input [3:0]N,P; output [3:0]Z; assign Z=N | P; endmodule
module OR_5(W,H,J,B); input [5:0]W,H,J; output [5:0]B; assign B=W | H | J
module OR_1(W,X,L); input [1:0]W,X; output [1:0]L; assign L=W | X; endmodule
module OR_5(C,Q,K,V); input [5:0]C,Q,K; output [5:0]V; assign V=C | Q | K
module OR_4(inp_J,inp_C,inp_G,out_J); input [4:0]inp_J,inp_C,inp_G; output [4:0]out_J; assign out_J=inp_J | inp_C | inp_G; endmodule
module OR_1(M,X,L,O); input [1:0]M,X,L; output [1:0]O; assign O=M | X | L; endmodule
module OR_6(G,O,A); input [6:0]G,O; output [6:0]A; assign A=G | O
module OR_5(M,N,S); input [5:0]M,N; output [5:0]S; assign S=M | N
module OR_6(inp_N,inp_X,inp_C,out_G); input [6:0]inp_N,inp_X,inp_C; output [6:0]out_G; assign out_G=inp_N | inp_X | inp_C; endmodule
module OR_3(W,S,Z); input [3:0]W,S; output [3:0]Z; assign Z=W | S
module OR_5(Z,I,M); input [5:0]Z,I; output [5:0]M; assign M=Z | I
module OR_7(inp_A,inp_W,out_D); input [7:0]inp_A,inp_W; output [7:0]out_D; assign out_D=inp_A | inp_W
module OR_3(X,G,M); input [3:0]X,G; output [3:0]M; assign M=X | G; endmodule
module OR_2(T,Y,R,N); input [2:0]T,Y,R; output [2:0]N; assign N=T | Y | R
module OR_3(inp_P,inp_V,out_O); input [3:0]inp_P,inp_V; output [3:0]out_O; assign out_O=inp_P | inp_V; endmodule
module OR_4(inp_A,inp_W,inp_M,out_C); input [4:0]inp_A,inp_W,inp_M; output [4:0]out_C; assign out_C=inp_A | inp_W | inp_M; endmodule
module OR_3(inp_Y,inp_N,inp_V,out_C); input [3:0]inp_Y,inp_N,inp_V; output [3:0]out_C; assign out_C=inp_Y | inp_N | inp_V
module OR_6(inp_T,inp_C,inp_K,out_R); input [6:0]inp_T,inp_C,inp_K; output [6:0]out_R; assign out_R=inp_T | inp_C | inp_K
module OR_5(inp_J,inp_O,inp_Z,out_V); input [5:0]inp_J,inp_O,inp_Z; output [5:0]out_V; assign out_V=inp_J | inp_O | inp_Z; endmodule
module OR_4(inp_L,inp_Y,out_O); input [4:0]inp_L,inp_Y; output [4:0]out_O; assign out_O=inp_L | inp_Y; endmodule
module OR_7(inp_J,inp_Q,inp_F,out_V); input [7:0]inp_J,inp_Q,inp_F; output [7:0]out_V; assign out_V=inp_J | inp_Q | inp_F; endmodule
module OR_6(U,H,N); input [6:0]U,H; output [6:0]N; assign N=U | H
module OR_6(inp_B,inp_E,inp_D,out_H); input [6:0]inp_B,inp_E,inp_D; output [6:0]out_H; assign out_H=inp_B | inp_E | inp_D; endmodule
module OR_3(inp_S,inp_U,inp_Q,out_C); input [3:0]inp_S,inp_U,inp_Q; output [3:0]out_C; assign out_C=inp_S | inp_U | inp_Q
module OR_6(inp_S,inp_G,inp_Q,out_I); input [6:0]inp_S,inp_G,inp_Q; output [6:0]out_I; assign out_I=inp_S | inp_G | inp_Q
module OR_4(W,O,V); input [4:0]W,O; output [4:0]V; assign V=W | O; endmodule
module OR_4(inp_J,inp_C,out_W); input [4:0]inp_J,inp_C; output [4:0]out_W; assign out_W=inp_J | inp_C; endmodule
module OR_1(inp_E,inp_L,out_P); input [1:0]inp_E,inp_L; output [1:0]out_P; assign out_P=inp_E | inp_L
module OR_3(inp_J,inp_E,out_K); input [3:0]inp_J,inp_E; output [3:0]out_K; assign out_K=inp_J | inp_E
module OR_4(inp_Z,inp_A,inp_B,out_T); input [4:0]inp_Z,inp_A,inp_B; output [4:0]out_T; assign out_T=inp_Z | inp_A | inp_B; endmodule
module OR_4(inp_A,inp_V,inp_W,out_P); input [4:0]inp_A,inp_V,inp_W; output [4:0]out_P; assign out_P=inp_A | inp_V | inp_W
module OR_3(D,M,I,E); input [3:0]D,M,I; output [3:0]E; assign E=D | M | I
module OR_7(A,F,P); input [7:0]A,F; output [7:0]P; assign P=A | F
module OR_1(T,X,M,R); input [1:0]T,X,M; output [1:0]R; assign R=T | X | M; endmodule
module OR_4(G,R,Z); input [4:0]G,R; output [4:0]Z; assign Z=G | R; endmodule
module OR_1(inp_H,inp_U,inp_M,out_S); input [1:0]inp_H,inp_U,inp_M; output [1:0]out_S; assign out_S=inp_H | inp_U | inp_M; endmodule
module OR_3(inp_R,inp_H,inp_G,out_W); input [3:0]inp_R,inp_H,inp_G; output [3:0]out_W; assign out_W=inp_R | inp_H | inp_G
module OR_7(inp_O,inp_U,inp_X,out_Z); input [7:0]inp_O,inp_U,inp_X; output [7:0]out_Z; assign out_Z=inp_O | inp_U | inp_X
module OR_7(inp_T,inp_N,out_K); input [7:0]inp_T,inp_N; output [7:0]out_K; assign out_K=inp_T | inp_N
module OR_4(E,L,B); input [4:0]E,L; output [4:0]B; assign B=E | L; endmodule
module OR_5(Q,V,Y,A); input [5:0]Q,V,Y; output [5:0]A; assign A=Q | V | Y; endmodule
module OR_2(O,L,T,U); input [2:0]O,L,T; output [2:0]U; assign U=O | L | T; endmodule
module OR_4(Q,I,J,Z); input [4:0]Q,I,J; output [4:0]Z; assign Z=Q | I | J; endmodule
module OR_5(W,S,K); input [5:0]W,S; output [5:0]K; assign K=W | S
module OR_1(I,T,G,S); input [1:0]I,T,G; output [1:0]S; assign S=I | T | G
module OR_6(O,K,W); input [6:0]O,K; output [6:0]W; assign W=O | K
module OR_4(R,M,T,H); input [4:0]R,M,T; output [4:0]H; assign H=R | M | T
module OR_6(inp_O,inp_I,inp_P,out_K); input [6:0]inp_O,inp_I,inp_P; output [6:0]out_K; assign out_K=inp_O | inp_I | inp_P; endmodule
module OR_4(H,T,Q); input [4:0]H,T; output [4:0]Q; assign Q=H | T; endmodule
module OR_7(inp_Q,inp_N,out_B); input [7:0]inp_Q,inp_N; output [7:0]out_B; assign out_B=inp_Q | inp_N; endmodule
module OR_2(inp_E,inp_R,inp_N,out_K); input [2:0]inp_E,inp_R,inp_N; output [2:0]out_K; assign out_K=inp_E | inp_R | inp_N; endmodule
module OR_2(inp_U,inp_R,inp_M,out_G); input [2:0]inp_U,inp_R,inp_M; output [2:0]out_G; assign out_G=inp_U | inp_R | inp_M; endmodule
module OR_1(inp_O,inp_A,inp_R,out_P); input [1:0]inp_O,inp_A,inp_R; output [1:0]out_P; assign out_P=inp_O | inp_A | inp_R; endmodule
module OR_1(C,F,Q); input [1:0]C,F; output [1:0]Q; assign Q=C | F
module OR_7(V,U,B,Q); input [7:0]V,U,B; output [7:0]Q; assign Q=V | U | B; endmodule
module OR_2(inp_B,inp_K,inp_S,out_U); input [2:0]inp_B,inp_K,inp_S; output [2:0]out_U; assign out_U=inp_B | inp_K | inp_S
module OR_1(inp_I,inp_H,out_Y); input [1:0]inp_I,inp_H; output [1:0]out_Y; assign out_Y=inp_I | inp_H
module OR_3(inp_W,inp_L,out_U); input [3:0]inp_W,inp_L; output [3:0]out_U; assign out_U=inp_W | inp_L
module OR_1(H,U,B); input [1:0]H,U; output [1:0]B; assign B=H | U
module OR_1(inp_F,inp_T,inp_Z,out_O); input [1:0]inp_F,inp_T,inp_Z; output [1:0]out_O; assign out_O=inp_F | inp_T | inp_Z; endmodule
module OR_4(T,S,Q); input [4:0]T,S; output [4:0]Q; assign Q=T | S; endmodule
module OR_4(inp_Q,inp_Y,inp_G,out_W); input [4:0]inp_Q,inp_Y,inp_G; output [4:0]out_W; assign out_W=inp_Q | inp_Y | inp_G
module OR_3(inp_Z,inp_W,inp_V,out_D); input [3:0]inp_Z,inp_W,inp_V; output [3:0]out_D; assign out_D=inp_Z | inp_W | inp_V
module OR_7(inp_L,inp_H,out_Q); input [7:0]inp_L,inp_H; output [7:0]out_Q; assign out_Q=inp_L | inp_H
module OR_3(L,S,V); input [3:0]L,S; output [3:0]V; assign V=L | S
module OR_4(inp_T,inp_S,out_L); input [4:0]inp_T,inp_S; output [4:0]out_L; assign out_L=inp_T | inp_S; endmodule
module OR_6(inp_N,inp_T,inp_I,out_T); input [6:0]inp_N,inp_T,inp_I; output [6:0]out_T; assign out_T=inp_N | inp_T | inp_I; endmodule
module OR_5(F,Z,J); input [5:0]F,Z; output [5:0]J; assign J=F | Z
module OR_3(G,W,S); input [3:0]G,W; output [3:0]S; assign S=G | W
module OR_7(Z,L,P,C); input [7:0]Z,L,P; output [7:0]C; assign C=Z | L | P; endmodule
module OR_4(I,X,G); input [4:0]I,X; output [4:0]G; assign G=I | X; endmodule
module OR_4(O,U,C,I); input [4:0]O,U,C; output [4:0]I; assign I=O | U | C; endmodule
module OR_5(inp_Z,inp_A,inp_M,out_O); input [5:0]inp_Z,inp_A,inp_M; output [5:0]out_O; assign out_O=inp_Z | inp_A | inp_M
module OR_3(S,K,E); input [3:0]S,K; output [3:0]E; assign E=S | K; endmodule
module OR_5(M,D,W); input [5:0]M,D; output [5:0]W; assign W=M | D; endmodule
module OR_4(B,S,J,G); input [4:0]B,S,J; output [4:0]G; assign G=B | S | J
module OR_1(inp_Q,inp_P,inp_M,out_T); input [1:0]inp_Q,inp_P,inp_M; output [1:0]out_T; assign out_T=inp_Q | inp_P | inp_M
module OR_7(G,D,L,U); input [7:0]G,D,L; output [7:0]U; assign U=G | D | L; endmodule
module OR_4(I,D,W); input [4:0]I,D; output [4:0]W; assign W=I | D; endmodule
module OR_1(R,X,C,J); input [1:0]R,X,C; output [1:0]J; assign J=R | X | C; endmodule
module OR_2(inp_Q,inp_O,out_A); input [2:0]inp_Q,inp_O; output [2:0]out_A; assign out_A=inp_Q | inp_O; endmodule
module OR_2(inp_Y,inp_X,inp_S,out_A); input [2:0]inp_Y,inp_X,inp_S; output [2:0]out_A; assign out_A=inp_Y | inp_X | inp_S; endmodule
module OR_7(P,I,O,R); input [7:0]P,I,O; output [7:0]R; assign R=P | I | O; endmodule
module OR_6(W,Z,T,Q); input [6:0]W,Z,T; output [6:0]Q; assign Q=W | Z | T
module OR_6(inp_H,inp_P,out_R); input [6:0]inp_H,inp_P; output [6:0]out_R; assign out_R=inp_H | inp_P
module OR_6(Q,S,B,N); input [6:0]Q,S,B; output [6:0]N; assign N=Q | S | B; endmodule
module OR_5(G,X,C,R); input [5:0]G,X,C; output [5:0]R; assign R=G | X | C
module OR_2(W,B,H); input [2:0]W,B; output [2:0]H; assign H=W | B
module OR_3(inp_A,inp_W,inp_C,out_H); input [3:0]inp_A,inp_W,inp_C; output [3:0]out_H; assign out_H=inp_A | inp_W | inp_C; endmodule
module OR_5(R,B,L); input [5:0]R,B; output [5:0]L; assign L=R | B; endmodule
module OR_1(inp_F,inp_V,inp_W,out_D); input [1:0]inp_F,inp_V,inp_W; output [1:0]out_D; assign out_D=inp_F | inp_V | inp_W
module OR_6(K,P,C); input [6:0]K,P; output [6:0]C; assign C=K | P; endmodule
module OR_2(M,D,U); input [2:0]M,D; output [2:0]U; assign U=M | D; endmodule
module OR_3(inp_F,inp_U,out_D); input [3:0]inp_F,inp_U; output [3:0]out_D; assign out_D=inp_F | inp_U; endmodule
module OR_7(inp_C,inp_R,inp_M,out_N); input [7:0]inp_C,inp_R,inp_M; output [7:0]out_N; assign out_N=inp_C | inp_R | inp_M
module OR_6(X,W,D,O); input [6:0]X,W,D; output [6:0]O; assign O=X | W | D; endmodule
module OR_6(V,Z,Q); input [6:0]V,Z; output [6:0]Q; assign Q=V | Z
module OR_4(H,V,P,U); input [4:0]H,V,P; output [4:0]U; assign U=H | V | P
module OR_3(inp_J,inp_E,out_D); input [3:0]inp_J,inp_E; output [3:0]out_D; assign out_D=inp_J | inp_E
module OR_7(inp_C,inp_V,inp_D,out_T); input [7:0]inp_C,inp_V,inp_D; output [7:0]out_T; assign out_T=inp_C | inp_V | inp_D; endmodule
module OR_4(inp_P,inp_N,out_C); input [4:0]inp_P,inp_N; output [4:0]out_C; assign out_C=inp_P | inp_N
module OR_2(inp_G,inp_A,out_W); input [2:0]inp_G,inp_A; output [2:0]out_W; assign out_W=inp_G | inp_A; endmodule
module OR_4(K,T,A,N); input [4:0]K,T,A; output [4:0]N; assign N=K | T | A; endmodule
module OR_3(V,N,S); input [3:0]V,N; output [3:0]S; assign S=V | N
module OR_2(N,C,V); input [2:0]N,C; output [2:0]V; assign V=N | C
module OR_4(inp_U,inp_O,out_L); input [4:0]inp_U,inp_O; output [4:0]out_L; assign out_L=inp_U | inp_O; endmodule
module OR_1(Y,H,V); input [1:0]Y,H; output [1:0]V; assign V=Y | H
module OR_2(T,O,L); input [2:0]T,O; output [2:0]L; assign L=T | O
module OR_1(T,O,C); input [1:0]T,O; output [1:0]C; assign C=T | O
module OR_6(X,K,A); input [6:0]X,K; output [6:0]A; assign A=X | K
module OR_3(F,B,S,N); input [3:0]F,B,S; output [3:0]N; assign N=F | B | S
module OR_4(R,N,D); input [4:0]R,N; output [4:0]D; assign D=R | N; endmodule
module OR_1(inp_K,inp_B,out_V); input [1:0]inp_K,inp_B; output [1:0]out_V; assign out_V=inp_K | inp_B
module OR_1(Q,Y,I); input [1:0]Q,Y; output [1:0]I; assign I=Q | Y
module OR_7(inp_M,inp_X,inp_E,out_S); input [7:0]inp_M,inp_X,inp_E; output [7:0]out_S; assign out_S=inp_M | inp_X | inp_E
module OR_3(inp_Z,inp_V,out_C); input [3:0]inp_Z,inp_V; output [3:0]out_C; assign out_C=inp_Z | inp_V; endmodule
module OR_1(B,X,I,P); input [1:0]B,X,I; output [1:0]P; assign P=B | X | I; endmodule
module OR_1(C,I,S); input [1:0]C,I; output [1:0]S; assign S=C | I; endmodule
module OR_3(inp_J,inp_V,out_R); input [3:0]inp_J,inp_V; output [3:0]out_R; assign out_R=inp_J | inp_V
module OR_5(X,U,G); input [5:0]X,U; output [5:0]G; assign G=X | U; endmodule
module OR_4(S,I,L); input [4:0]S,I; output [4:0]L; assign L=S | I
module OR_1(M,D,L,R); input [1:0]M,D,L; output [1:0]R; assign R=M | D | L
module OR_6(A,I,N,F); input [6:0]A,I,N; output [6:0]F; assign F=A | I | N; endmodule
module OR_5(E,N,K,J); input [5:0]E,N,K; output [5:0]J; assign J=E | N | K
module OR_1(U,V,S,C); input [1:0]U,V,S; output [1:0]C; assign C=U | V | S
module OR_7(T,C,Z); input [7:0]T,C; output [7:0]Z; assign Z=T | C
module OR_4(J,P,O,B); input [4:0]J,P,O; output [4:0]B; assign B=J | P | O
module OR_3(Z,K,A); input [3:0]Z,K; output [3:0]A; assign A=Z | K; endmodule
module OR_2(W,A,K); input [2:0]W,A; output [2:0]K; assign K=W | A; endmodule
module OR_1(inp_L,inp_P,inp_N,out_S); input [1:0]inp_L,inp_P,inp_N; output [1:0]out_S; assign out_S=inp_L | inp_P | inp_N; endmodule
module OR_4(inp_D,inp_J,inp_A,out_S); input [4:0]inp_D,inp_J,inp_A; output [4:0]out_S; assign out_S=inp_D | inp_J | inp_A
module OR_7(I,D,G); input [7:0]I,D; output [7:0]G; assign G=I | D
module OR_7(inp_G,inp_C,out_C); input [7:0]inp_G,inp_C; output [7:0]out_C; assign out_C=inp_G | inp_C; endmodule
module OR_2(inp_X,inp_K,out_M); input [2:0]inp_X,inp_K; output [2:0]out_M; assign out_M=inp_X | inp_K
module OR_5(inp_K,inp_P,out_Q); input [5:0]inp_K,inp_P; output [5:0]out_Q; assign out_Q=inp_K | inp_P; endmodule
module OR_5(U,K,I,R); input [5:0]U,K,I; output [5:0]R; assign R=U | K | I; endmodule
module OR_5(inp_O,inp_Y,out_U); input [5:0]inp_O,inp_Y; output [5:0]out_U; assign out_U=inp_O | inp_Y
module OR_5(inp_J,inp_Q,inp_W,out_L); input [5:0]inp_J,inp_Q,inp_W; output [5:0]out_L; assign out_L=inp_J | inp_Q | inp_W
module OR_1(M,F,D); input [1:0]M,F; output [1:0]D; assign D=M | F
module OR_7(inp_F,inp_X,out_U); input [7:0]inp_F,inp_X; output [7:0]out_U; assign out_U=inp_F | inp_X
module OR_6(J,C,L); input [6:0]J,C; output [6:0]L; assign L=J | C; endmodule
module OR_1(K,R,P); input [1:0]K,R; output [1:0]P; assign P=K | R
module OR_2(J,K,P); input [2:0]J,K; output [2:0]P; assign P=J | K
module OR_4(S,M,O,W); input [4:0]S,M,O; output [4:0]W; assign W=S | M | O; endmodule
module OR_1(P,Z,W,R); input [1:0]P,Z,W; output [1:0]R; assign R=P | Z | W
module OR_6(inp_K,inp_B,inp_L,out_S); input [6:0]inp_K,inp_B,inp_L; output [6:0]out_S; assign out_S=inp_K | inp_B | inp_L
module OR_6(L,M,W); input [6:0]L,M; output [6:0]W; assign W=L | M; endmodule
module OR_7(inp_R,inp_X,inp_M,out_X); input [7:0]inp_R,inp_X,inp_M; output [7:0]out_X; assign out_X=inp_R | inp_X | inp_M; endmodule
module OR_1(X,H,N); input [1:0]X,H; output [1:0]N; assign N=X | H
module OR_3(inp_W,inp_I,out_S); input [3:0]inp_W,inp_I; output [3:0]out_S; assign out_S=inp_W | inp_I
module OR_1(inp_K,inp_S,out_E); input [1:0]inp_K,inp_S; output [1:0]out_E; assign out_E=inp_K | inp_S; endmodule
module OR_5(inp_T,inp_E,out_V); input [5:0]inp_T,inp_E; output [5:0]out_V; assign out_V=inp_T | inp_E
module OR_6(inp_J,inp_T,inp_X,out_Z); input [6:0]inp_J,inp_T,inp_X; output [6:0]out_Z; assign out_Z=inp_J | inp_T | inp_X; endmodule
module OR_4(Q,N,P,V); input [4:0]Q,N,P; output [4:0]V; assign V=Q | N | P; endmodule
module OR_1(inp_O,inp_J,inp_I,out_G); input [1:0]inp_O,inp_J,inp_I; output [1:0]out_G; assign out_G=inp_O | inp_J | inp_I
module OR_7(inp_G,inp_Y,out_C); input [7:0]inp_G,inp_Y; output [7:0]out_C; assign out_C=inp_G | inp_Y; endmodule
module OR_1(E,F,N,H); input [1:0]E,F,N; output [1:0]H; assign H=E | F | N; endmodule
module OR_7(inp_T,inp_V,out_Z); input [7:0]inp_T,inp_V; output [7:0]out_Z; assign out_Z=inp_T | inp_V; endmodule
module OR_1(F,Q,H,B); input [1:0]F,Q,H; output [1:0]B; assign B=F | Q | H; endmodule
module OR_4(inp_V,inp_D,inp_Q,out_P); input [4:0]inp_V,inp_D,inp_Q; output [4:0]out_P; assign out_P=inp_V | inp_D | inp_Q
module OR_2(inp_Q,inp_M,inp_E,out_Z); input [2:0]inp_Q,inp_M,inp_E; output [2:0]out_Z; assign out_Z=inp_Q | inp_M | inp_E
module OR_1(inp_Y,inp_G,inp_P,out_I); input [1:0]inp_Y,inp_G,inp_P; output [1:0]out_I; assign out_I=inp_Y | inp_G | inp_P
module OR_7(inp_D,inp_T,out_Z); input [7:0]inp_D,inp_T; output [7:0]out_Z; assign out_Z=inp_D | inp_T; endmodule
module OR_3(M,U,O); input [3:0]M,U; output [3:0]O; assign O=M | U
module OR_4(O,C,Y); input [4:0]O,C; output [4:0]Y; assign Y=O | C
module OR_2(inp_P,inp_O,out_L); input [2:0]inp_P,inp_O; output [2:0]out_L; assign out_L=inp_P | inp_O
module OR_7(E,X,O); input [7:0]E,X; output [7:0]O; assign O=E | X; endmodule
module OR_6(B,R,N,L); input [6:0]B,R,N; output [6:0]L; assign L=B | R | N; endmodule
module OR_7(inp_N,inp_L,out_I); input [7:0]inp_N,inp_L; output [7:0]out_I; assign out_I=inp_N | inp_L; endmodule
module OR_1(K,Q,A); input [1:0]K,Q; output [1:0]A; assign A=K | Q
module OR_5(inp_S,inp_L,inp_O,out_R); input [5:0]inp_S,inp_L,inp_O; output [5:0]out_R; assign out_R=inp_S | inp_L | inp_O; endmodule
module OR_6(X,J,F,N); input [6:0]X,J,F; output [6:0]N; assign N=X | J | F; endmodule
module OR_6(Z,H,P,S); input [6:0]Z,H,P; output [6:0]S; assign S=Z | H | P; endmodule
module OR_1(Z,S,I); input [1:0]Z,S; output [1:0]I; assign I=Z | S
module OR_4(inp_U,inp_H,out_E); input [4:0]inp_U,inp_H; output [4:0]out_E; assign out_E=inp_U | inp_H
module OR_7(Z,R,W); input [7:0]Z,R; output [7:0]W; assign W=Z | R; endmodule
module OR_4(F,E,B,Y); input [4:0]F,E,B; output [4:0]Y; assign Y=F | E | B
module OR_7(W,M,Q,U); input [7:0]W,M,Q; output [7:0]U; assign U=W | M | Q; endmodule
module OR_1(N,R,G); input [1:0]N,R; output [1:0]G; assign G=N | R
module OR_4(inp_B,inp_J,out_H); input [4:0]inp_B,inp_J; output [4:0]out_H; assign out_H=inp_B | inp_J
module OR_6(E,C,W,U); input [6:0]E,C,W; output [6:0]U; assign U=E | C | W; endmodule
module OR_6(H,U,T); input [6:0]H,U; output [6:0]T; assign T=H | U; endmodule
module OR_5(inp_J,inp_T,inp_M,out_L); input [5:0]inp_J,inp_T,inp_M; output [5:0]out_L; assign out_L=inp_J | inp_T | inp_M
module OR_3(N,U,S,W); input [3:0]N,U,S; output [3:0]W; assign W=N | U | S
module OR_7(inp_A,inp_F,out_P); input [7:0]inp_A,inp_F; output [7:0]out_P; assign out_P=inp_A | inp_F
module OR_3(S,N,Z,Q); input [3:0]S,N,Z; output [3:0]Q; assign Q=S | N | Z; endmodule
module OR_3(inp_K,inp_Z,out_D); input [3:0]inp_K,inp_Z; output [3:0]out_D; assign out_D=inp_K | inp_Z; endmodule
module OR_1(Y,V,S); input [1:0]Y,V; output [1:0]S; assign S=Y | V
module OR_7(E,J,L,M); input [7:0]E,J,L; output [7:0]M; assign M=E | J | L; endmodule
module OR_4(X,H,M); input [4:0]X,H; output [4:0]M; assign M=X | H
module OR_6(L,M,W,D); input [6:0]L,M,W; output [6:0]D; assign D=L | M | W; endmodule
module OR_4(inp_X,inp_T,out_D); input [4:0]inp_X,inp_T; output [4:0]out_D; assign out_D=inp_X | inp_T; endmodule
module OR_3(R,N,K); input [3:0]R,N; output [3:0]K; assign K=R | N; endmodule
module OR_2(inp_O,inp_T,inp_I,out_S); input [2:0]inp_O,inp_T,inp_I; output [2:0]out_S; assign out_S=inp_O | inp_T | inp_I; endmodule
module OR_2(K,N,H,Q); input [2:0]K,N,H; output [2:0]Q; assign Q=K | N | H; endmodule
module OR_1(Z,P,E); input [1:0]Z,P; output [1:0]E; assign E=Z | P
module OR_7(R,J,I,C); input [7:0]R,J,I; output [7:0]C; assign C=R | J | I
module OR_5(inp_C,inp_S,out_L); input [5:0]inp_C,inp_S; output [5:0]out_L; assign out_L=inp_C | inp_S; endmodule
module OR_1(inp_D,inp_I,inp_L,out_T); input [1:0]inp_D,inp_I,inp_L; output [1:0]out_T; assign out_T=inp_D | inp_I | inp_L
module OR_2(X,I,H); input [2:0]X,I; output [2:0]H; assign H=X | I
module OR_6(inp_C,inp_U,out_I); input [6:0]inp_C,inp_U; output [6:0]out_I; assign out_I=inp_C | inp_U; endmodule
module OR_3(inp_X,inp_Y,out_J); input [3:0]inp_X,inp_Y; output [3:0]out_J; assign out_J=inp_X | inp_Y; endmodule
module OR_3(A,Q,N,Z); input [3:0]A,Q,N; output [3:0]Z; assign Z=A | Q | N
module OR_3(O,J,Z); input [3:0]O,J; output [3:0]Z; assign Z=O | J; endmodule
module OR_5(inp_B,inp_M,inp_N,out_O); input [5:0]inp_B,inp_M,inp_N; output [5:0]out_O; assign out_O=inp_B | inp_M | inp_N
module OR_2(O,E,L,A); input [2:0]O,E,L; output [2:0]A; assign A=O | E | L; endmodule
module OR_5(inp_V,inp_R,out_X); input [5:0]inp_V,inp_R; output [5:0]out_X; assign out_X=inp_V | inp_R
module OR_4(Y,K,G,X); input [4:0]Y,K,G; output [4:0]X; assign X=Y | K | G
module OR_3(inp_L,inp_O,out_E); input [3:0]inp_L,inp_O; output [3:0]out_E; assign out_E=inp_L | inp_O
module OR_5(inp_P,inp_F,out_C); input [5:0]inp_P,inp_F; output [5:0]out_C; assign out_C=inp_P | inp_F; endmodule
module OR_4(Z,W,G,O); input [4:0]Z,W,G; output [4:0]O; assign O=Z | W | G
module OR_3(inp_N,inp_F,out_G); input [3:0]inp_N,inp_F; output [3:0]out_G; assign out_G=inp_N | inp_F
module OR_6(inp_W,inp_K,inp_Y,out_H); input [6:0]inp_W,inp_K,inp_Y; output [6:0]out_H; assign out_H=inp_W | inp_K | inp_Y; endmodule
module OR_6(G,J,V,T); input [6:0]G,J,V; output [6:0]T; assign T=G | J | V; endmodule
module OR_4(Q,K,Y); input [4:0]Q,K; output [4:0]Y; assign Y=Q | K; endmodule
module OR_6(inp_M,inp_T,out_E); input [6:0]inp_M,inp_T; output [6:0]out_E; assign out_E=inp_M | inp_T; endmodule
module OR_7(inp_A,inp_W,out_D); input [7:0]inp_A,inp_W; output [7:0]out_D; assign out_D=inp_A | inp_W; endmodule
module OR_6(H,P,M); input [6:0]H,P; output [6:0]M; assign M=H | P; endmodule
module OR_1(inp_B,inp_C,inp_Y,out_V); input [1:0]inp_B,inp_C,inp_Y; output [1:0]out_V; assign out_V=inp_B | inp_C | inp_Y
module OR_5(X,G,S); input [5:0]X,G; output [5:0]S; assign S=X | G
module OR_6(T,S,F,N); input [6:0]T,S,F; output [6:0]N; assign N=T | S | F
module OR_4(H,A,J,N); input [4:0]H,A,J; output [4:0]N; assign N=H | A | J; endmodule
module OR_6(inp_D,inp_C,inp_V,out_R); input [6:0]inp_D,inp_C,inp_V; output [6:0]out_R; assign out_R=inp_D | inp_C | inp_V; endmodule
module OR_3(inp_H,inp_N,out_M); input [3:0]inp_H,inp_N; output [3:0]out_M; assign out_M=inp_H | inp_N; endmodule
module OR_2(T,O,H); input [2:0]T,O; output [2:0]H; assign H=T | O
module OR_3(Y,Z,Y,J); input [3:0]Y,Z,Y; output [3:0]J; assign J=Y | Z | Y
module OR_2(N,O,F,Z); input [2:0]N,O,F; output [2:0]Z; assign Z=N | O | F
module OR_2(inp_R,inp_A,inp_W,out_X); input [2:0]inp_R,inp_A,inp_W; output [2:0]out_X; assign out_X=inp_R | inp_A | inp_W; endmodule
module OR_1(inp_U,inp_F,inp_I,out_S); input [1:0]inp_U,inp_F,inp_I; output [1:0]out_S; assign out_S=inp_U | inp_F | inp_I
module OR_1(inp_K,inp_C,out_V); input [1:0]inp_K,inp_C; output [1:0]out_V; assign out_V=inp_K | inp_C; endmodule
module OR_6(W,V,I,O); input [6:0]W,V,I; output [6:0]O; assign O=W | V | I
module OR_5(Z,B,D,C); input [5:0]Z,B,D; output [5:0]C; assign C=Z | B | D
module OR_6(inp_O,inp_E,out_V); input [6:0]inp_O,inp_E; output [6:0]out_V; assign out_V=inp_O | inp_E
module OR_1(inp_Z,inp_C,inp_D,out_P); input [1:0]inp_Z,inp_C,inp_D; output [1:0]out_P; assign out_P=inp_Z | inp_C | inp_D; endmodule
module OR_4(P,A,R,O); input [4:0]P,A,R; output [4:0]O; assign O=P | A | R
module OR_3(X,B,N); input [3:0]X,B; output [3:0]N; assign N=X | B; endmodule
module OR_1(Q,K,O); input [1:0]Q,K; output [1:0]O; assign O=Q | K
module OR_1(inp_I,inp_C,inp_O,out_P); input [1:0]inp_I,inp_C,inp_O; output [1:0]out_P; assign out_P=inp_I | inp_C | inp_O
module OR_1(inp_D,inp_A,inp_E,out_P); input [1:0]inp_D,inp_A,inp_E; output [1:0]out_P; assign out_P=inp_D | inp_A | inp_E; endmodule
module OR_7(inp_B,inp_W,out_J); input [7:0]inp_B,inp_W; output [7:0]out_J; assign out_J=inp_B | inp_W; endmodule
module OR_2(N,A,F); input [2:0]N,A; output [2:0]F; assign F=N | A
module OR_4(C,X,S); input [4:0]C,X; output [4:0]S; assign S=C | X; endmodule
module OR_4(inp_W,inp_S,inp_G,out_I); input [4:0]inp_W,inp_S,inp_G; output [4:0]out_I; assign out_I=inp_W | inp_S | inp_G
module OR_2(inp_N,inp_F,inp_K,out_A); input [2:0]inp_N,inp_F,inp_K; output [2:0]out_A; assign out_A=inp_N | inp_F | inp_K; endmodule
module OR_5(inp_B,inp_X,inp_O,out_R); input [5:0]inp_B,inp_X,inp_O; output [5:0]out_R; assign out_R=inp_B | inp_X | inp_O
module OR_4(inp_R,inp_Q,inp_S,out_E); input [4:0]inp_R,inp_Q,inp_S; output [4:0]out_E; assign out_E=inp_R | inp_Q | inp_S
module OR_5(L,R,D,V); input [5:0]L,R,D; output [5:0]V; assign V=L | R | D
module OR_7(J,W,P,L); input [7:0]J,W,P; output [7:0]L; assign L=J | W | P; endmodule
module OR_5(Q,N,W); input [5:0]Q,N; output [5:0]W; assign W=Q | N; endmodule
module OR_5(H,Y,L,D); input [5:0]H,Y,L; output [5:0]D; assign D=H | Y | L; endmodule
module OR_5(inp_Y,inp_J,out_M); input [5:0]inp_Y,inp_J; output [5:0]out_M; assign out_M=inp_Y | inp_J; endmodule
module OR_5(K,Y,R); input [5:0]K,Y; output [5:0]R; assign R=K | Y
module OR_6(X,P,Z); input [6:0]X,P; output [6:0]Z; assign Z=X | P
module OR_6(Y,J,N,W); input [6:0]Y,J,N; output [6:0]W; assign W=Y | J | N; endmodule
module OR_4(D,O,S); input [4:0]D,O; output [4:0]S; assign S=D | O
module OR_6(R,A,J,Z); input [6:0]R,A,J; output [6:0]Z; assign Z=R | A | J
module OR_5(inp_F,inp_P,inp_K,out_A); input [5:0]inp_F,inp_P,inp_K; output [5:0]out_A; assign out_A=inp_F | inp_P | inp_K; endmodule
module OR_7(E,P,S); input [7:0]E,P; output [7:0]S; assign S=E | P
module OR_1(inp_I,inp_X,inp_P,out_K); input [1:0]inp_I,inp_X,inp_P; output [1:0]out_K; assign out_K=inp_I | inp_X | inp_P; endmodule
module OR_6(J,W,F); input [6:0]J,W; output [6:0]F; assign F=J | W
module OR_2(inp_L,inp_B,inp_P,out_H); input [2:0]inp_L,inp_B,inp_P; output [2:0]out_H; assign out_H=inp_L | inp_B | inp_P
module OR_7(inp_Z,inp_L,out_C); input [7:0]inp_Z,inp_L; output [7:0]out_C; assign out_C=inp_Z | inp_L; endmodule
module OR_6(N,J,W,X); input [6:0]N,J,W; output [6:0]X; assign X=N | J | W; endmodule
module OR_1(C,E,O,N); input [1:0]C,E,O; output [1:0]N; assign N=C | E | O
module OR_7(inp_H,inp_O,out_D); input [7:0]inp_H,inp_O; output [7:0]out_D; assign out_D=inp_H | inp_O
module OR_2(inp_I,inp_X,inp_S,out_D); input [2:0]inp_I,inp_X,inp_S; output [2:0]out_D; assign out_D=inp_I | inp_X | inp_S
module OR_6(inp_B,inp_T,inp_Z,out_M); input [6:0]inp_B,inp_T,inp_Z; output [6:0]out_M; assign out_M=inp_B | inp_T | inp_Z; endmodule
module OR_4(H,J,F); input [4:0]H,J; output [4:0]F; assign F=H | J
module OR_7(inp_D,inp_S,inp_W,out_Q); input [7:0]inp_D,inp_S,inp_W; output [7:0]out_Q; assign out_Q=inp_D | inp_S | inp_W
module OR_4(U,Y,K,T); input [4:0]U,Y,K; output [4:0]T; assign T=U | Y | K
module OR_1(V,E,J,A); input [1:0]V,E,J; output [1:0]A; assign A=V | E | J
module OR_4(R,E,Y,W); input [4:0]R,E,Y; output [4:0]W; assign W=R | E | Y
module OR_3(U,G,M,F); input [3:0]U,G,M; output [3:0]F; assign F=U | G | M; endmodule
module OR_3(V,E,B); input [3:0]V,E; output [3:0]B; assign B=V | E; endmodule
module OR_3(K,G,A,X); input [3:0]K,G,A; output [3:0]X; assign X=K | G | A; endmodule
module OR_6(inp_Z,inp_V,inp_Q,out_N); input [6:0]inp_Z,inp_V,inp_Q; output [6:0]out_N; assign out_N=inp_Z | inp_V | inp_Q; endmodule
module OR_1(O,B,U,M); input [1:0]O,B,U; output [1:0]M; assign M=O | B | U; endmodule
module OR_3(inp_R,inp_K,out_J); input [3:0]inp_R,inp_K; output [3:0]out_J; assign out_J=inp_R | inp_K
module OR_2(inp_N,inp_B,out_I); input [2:0]inp_N,inp_B; output [2:0]out_I; assign out_I=inp_N | inp_B; endmodule
module OR_3(L,V,N,W); input [3:0]L,V,N; output [3:0]W; assign W=L | V | N; endmodule
module OR_7(K,Z,E); input [7:0]K,Z; output [7:0]E; assign E=K | Z
module OR_2(inp_W,inp_G,inp_D,out_F); input [2:0]inp_W,inp_G,inp_D; output [2:0]out_F; assign out_F=inp_W | inp_G | inp_D
module OR_1(inp_O,inp_G,out_V); input [1:0]inp_O,inp_G; output [1:0]out_V; assign out_V=inp_O | inp_G
module OR_2(Q,C,N); input [2:0]Q,C; output [2:0]N; assign N=Q | C
module OR_3(K,Y,L,J); input [3:0]K,Y,L; output [3:0]J; assign J=K | Y | L
module OR_7(inp_Q,inp_W,out_Y); input [7:0]inp_Q,inp_W; output [7:0]out_Y; assign out_Y=inp_Q | inp_W
module OR_2(inp_C,inp_F,out_S); input [2:0]inp_C,inp_F; output [2:0]out_S; assign out_S=inp_C | inp_F
module OR_4(D,E,R); input [4:0]D,E; output [4:0]R; assign R=D | E; endmodule
module OR_3(K,G,R); input [3:0]K,G; output [3:0]R; assign R=K | G; endmodule
module OR_5(inp_E,inp_I,out_Z); input [5:0]inp_E,inp_I; output [5:0]out_Z; assign out_Z=inp_E | inp_I; endmodule
module OR_1(C,Q,A); input [1:0]C,Q; output [1:0]A; assign A=C | Q
module OR_6(A,V,O,C); input [6:0]A,V,O; output [6:0]C; assign C=A | V | O; endmodule
module OR_5(inp_G,inp_X,inp_M,out_W); input [5:0]inp_G,inp_X,inp_M; output [5:0]out_W; assign out_W=inp_G | inp_X | inp_M; endmodule
module OR_4(inp_O,inp_D,out_C); input [4:0]inp_O,inp_D; output [4:0]out_C; assign out_C=inp_O | inp_D; endmodule
module OR_5(C,V,G,P); input [5:0]C,V,G; output [5:0]P; assign P=C | V | G; endmodule
module OR_6(inp_J,inp_Y,out_Y); input [6:0]inp_J,inp_Y; output [6:0]out_Y; assign out_Y=inp_J | inp_Y; endmodule
module OR_3(inp_X,inp_O,out_P); input [3:0]inp_X,inp_O; output [3:0]out_P; assign out_P=inp_X | inp_O; endmodule
module OR_1(H,K,Q); input [1:0]H,K; output [1:0]Q; assign Q=H | K
module OR_1(K,U,E); input [1:0]K,U; output [1:0]E; assign E=K | U
module OR_2(X,Z,U,V); input [2:0]X,Z,U; output [2:0]V; assign V=X | Z | U
module OR_4(inp_E,inp_U,out_D); input [4:0]inp_E,inp_U; output [4:0]out_D; assign out_D=inp_E | inp_U
module OR_2(R,H,X,O); input [2:0]R,H,X; output [2:0]O; assign O=R | H | X; endmodule
module OR_3(inp_X,inp_U,inp_V,out_K); input [3:0]inp_X,inp_U,inp_V; output [3:0]out_K; assign out_K=inp_X | inp_U | inp_V
module OR_7(G,U,O,X); input [7:0]G,U,O; output [7:0]X; assign X=G | U | O; endmodule
module OR_6(inp_F,inp_X,inp_A,out_Y); input [6:0]inp_F,inp_X,inp_A; output [6:0]out_Y; assign out_Y=inp_F | inp_X | inp_A; endmodule
module OR_1(inp_A,inp_H,out_Y); input [1:0]inp_A,inp_H; output [1:0]out_Y; assign out_Y=inp_A | inp_H
module OR_2(inp_Z,inp_P,inp_M,out_G); input [2:0]inp_Z,inp_P,inp_M; output [2:0]out_G; assign out_G=inp_Z | inp_P | inp_M
module OR_5(E,W,Z,L); input [5:0]E,W,Z; output [5:0]L; assign L=E | W | Z; endmodule
module OR_3(inp_K,inp_Z,out_E); input [3:0]inp_K,inp_Z; output [3:0]out_E; assign out_E=inp_K | inp_Z; endmodule
module OR_2(A,V,Y,U); input [2:0]A,V,Y; output [2:0]U; assign U=A | V | Y
module OR_4(A,B,Y); input [4:0]A,B; output [4:0]Y; assign Y=A | B; endmodule
module OR_4(inp_L,inp_E,inp_K,out_M); input [4:0]inp_L,inp_E,inp_K; output [4:0]out_M; assign out_M=inp_L | inp_E | inp_K; endmodule
module OR_4(inp_K,inp_C,out_L); input [4:0]inp_K,inp_C; output [4:0]out_L; assign out_L=inp_K | inp_C
module OR_1(M,H,Y,W); input [1:0]M,H,Y; output [1:0]W; assign W=M | H | Y
module OR_3(inp_I,inp_P,out_H); input [3:0]inp_I,inp_P; output [3:0]out_H; assign out_H=inp_I | inp_P; endmodule
module OR_4(Z,O,Y); input [4:0]Z,O; output [4:0]Y; assign Y=Z | O
module OR_6(inp_M,inp_I,out_G); input [6:0]inp_M,inp_I; output [6:0]out_G; assign out_G=inp_M | inp_I
module OR_5(K,A,N); input [5:0]K,A; output [5:0]N; assign N=K | A
module OR_5(inp_X,inp_W,inp_U,out_E); input [5:0]inp_X,inp_W,inp_U; output [5:0]out_E; assign out_E=inp_X | inp_W | inp_U
module OR_7(inp_K,inp_W,inp_D,out_M); input [7:0]inp_K,inp_W,inp_D; output [7:0]out_M; assign out_M=inp_K | inp_W | inp_D
module OR_3(inp_V,inp_U,inp_R,out_C); input [3:0]inp_V,inp_U,inp_R; output [3:0]out_C; assign out_C=inp_V | inp_U | inp_R; endmodule
module OR_4(inp_F,inp_X,inp_Z,out_Z); input [4:0]inp_F,inp_X,inp_Z; output [4:0]out_Z; assign out_Z=inp_F | inp_X | inp_Z
module OR_1(inp_N,inp_P,out_C); input [1:0]inp_N,inp_P; output [1:0]out_C; assign out_C=inp_N | inp_P
module OR_6(B,E,A,M); input [6:0]B,E,A; output [6:0]M; assign M=B | E | A; endmodule
module OR_6(T,K,V); input [6:0]T,K; output [6:0]V; assign V=T | K
module OR_3(C,P,A); input [3:0]C,P; output [3:0]A; assign A=C | P
module OR_7(inp_U,inp_T,inp_J,out_W); input [7:0]inp_U,inp_T,inp_J; output [7:0]out_W; assign out_W=inp_U | inp_T | inp_J; endmodule
module OR_1(Q,P,U,V); input [1:0]Q,P,U; output [1:0]V; assign V=Q | P | U; endmodule
module OR_4(H,R,N); input [4:0]H,R; output [4:0]N; assign N=H | R; endmodule
module OR_7(inp_C,inp_Y,out_R); input [7:0]inp_C,inp_Y; output [7:0]out_R; assign out_R=inp_C | inp_Y
module OR_7(G,D,L,N); input [7:0]G,D,L; output [7:0]N; assign N=G | D | L
module OR_5(inp_D,inp_F,out_H); input [5:0]inp_D,inp_F; output [5:0]out_H; assign out_H=inp_D | inp_F; endmodule
module OR_7(inp_O,inp_Y,inp_V,out_T); input [7:0]inp_O,inp_Y,inp_V; output [7:0]out_T; assign out_T=inp_O | inp_Y | inp_V
module OR_4(V,R,M,E); input [4:0]V,R,M; output [4:0]E; assign E=V | R | M; endmodule
module OR_7(inp_Y,inp_P,inp_N,out_N); input [7:0]inp_Y,inp_P,inp_N; output [7:0]out_N; assign out_N=inp_Y | inp_P | inp_N
module OR_2(O,C,E,Z); input [2:0]O,C,E; output [2:0]Z; assign Z=O | C | E
module OR_7(G,F,B,Y); input [7:0]G,F,B; output [7:0]Y; assign Y=G | F | B; endmodule
module OR_6(G,P,X,W); input [6:0]G,P,X; output [6:0]W; assign W=G | P | X
module OR_2(inp_K,inp_E,out_T); input [2:0]inp_K,inp_E; output [2:0]out_T; assign out_T=inp_K | inp_E
module OR_3(inp_J,inp_X,inp_U,out_F); input [3:0]inp_J,inp_X,inp_U; output [3:0]out_F; assign out_F=inp_J | inp_X | inp_U
module OR_1(inp_G,inp_K,out_L); input [1:0]inp_G,inp_K; output [1:0]out_L; assign out_L=inp_G | inp_K
module OR_3(inp_X,inp_V,inp_W,out_V); input [3:0]inp_X,inp_V,inp_W; output [3:0]out_V; assign out_V=inp_X | inp_V | inp_W
module OR_4(inp_I,inp_Q,inp_S,out_C); input [4:0]inp_I,inp_Q,inp_S; output [4:0]out_C; assign out_C=inp_I | inp_Q | inp_S
module OR_3(L,T,H); input [3:0]L,T; output [3:0]H; assign H=L | T
module OR_5(Z,T,J,U); input [5:0]Z,T,J; output [5:0]U; assign U=Z | T | J; endmodule
module OR_6(inp_W,inp_K,out_P); input [6:0]inp_W,inp_K; output [6:0]out_P; assign out_P=inp_W | inp_K
module OR_2(inp_C,inp_L,out_A); input [2:0]inp_C,inp_L; output [2:0]out_A; assign out_A=inp_C | inp_L; endmodule
module OR_4(J,S,P,D); input [4:0]J,S,P; output [4:0]D; assign D=J | S | P
module OR_4(C,F,P,N); input [4:0]C,F,P; output [4:0]N; assign N=C | F | P; endmodule
module OR_7(inp_P,inp_B,out_T); input [7:0]inp_P,inp_B; output [7:0]out_T; assign out_T=inp_P | inp_B; endmodule
module OR_3(inp_X,inp_D,out_J); input [3:0]inp_X,inp_D; output [3:0]out_J; assign out_J=inp_X | inp_D
module OR_1(X,Z,E,L); input [1:0]X,Z,E; output [1:0]L; assign L=X | Z | E; endmodule
module OR_2(inp_Z,inp_F,inp_K,out_H); input [2:0]inp_Z,inp_F,inp_K; output [2:0]out_H; assign out_H=inp_Z | inp_F | inp_K
module OR_1(W,P,S); input [1:0]W,P; output [1:0]S; assign S=W | P; endmodule
module OR_1(inp_L,inp_A,inp_R,out_Y); input [1:0]inp_L,inp_A,inp_R; output [1:0]out_Y; assign out_Y=inp_L | inp_A | inp_R
module OR_7(R,C,E,P); input [7:0]R,C,E; output [7:0]P; assign P=R | C | E
module OR_1(inp_I,inp_D,inp_A,out_M); input [1:0]inp_I,inp_D,inp_A; output [1:0]out_M; assign out_M=inp_I | inp_D | inp_A; endmodule
module OR_3(P,J,O); input [3:0]P,J; output [3:0]O; assign O=P | J
module OR_4(inp_M,inp_L,out_L); input [4:0]inp_M,inp_L; output [4:0]out_L; assign out_L=inp_M | inp_L
module OR_6(inp_O,inp_G,out_W); input [6:0]inp_O,inp_G; output [6:0]out_W; assign out_W=inp_O | inp_G
module OR_2(T,E,G); input [2:0]T,E; output [2:0]G; assign G=T | E
module OR_1(inp_P,inp_H,out_C); input [1:0]inp_P,inp_H; output [1:0]out_C; assign out_C=inp_P | inp_H
module OR_3(inp_O,inp_S,inp_O,out_Y); input [3:0]inp_O,inp_S,inp_O; output [3:0]out_Y; assign out_Y=inp_O | inp_S | inp_O; endmodule
module OR_6(inp_M,inp_S,out_T); input [6:0]inp_M,inp_S; output [6:0]out_T; assign out_T=inp_M | inp_S
module OR_3(inp_M,inp_Y,out_A); input [3:0]inp_M,inp_Y; output [3:0]out_A; assign out_A=inp_M | inp_Y
module OR_4(inp_Y,inp_J,out_G); input [4:0]inp_Y,inp_J; output [4:0]out_G; assign out_G=inp_Y | inp_J; endmodule
module OR_4(B,M,E,Y); input [4:0]B,M,E; output [4:0]Y; assign Y=B | M | E
module OR_3(inp_P,inp_E,inp_Z,out_V); input [3:0]inp_P,inp_E,inp_Z; output [3:0]out_V; assign out_V=inp_P | inp_E | inp_Z; endmodule
module OR_2(inp_R,inp_U,inp_D,out_C); input [2:0]inp_R,inp_U,inp_D; output [2:0]out_C; assign out_C=inp_R | inp_U | inp_D
module OR_4(inp_S,inp_M,inp_L,out_W); input [4:0]inp_S,inp_M,inp_L; output [4:0]out_W; assign out_W=inp_S | inp_M | inp_L; endmodule
module OR_3(inp_C,inp_V,inp_K,out_G); input [3:0]inp_C,inp_V,inp_K; output [3:0]out_G; assign out_G=inp_C | inp_V | inp_K; endmodule
module OR_7(inp_A,inp_H,inp_K,out_I); input [7:0]inp_A,inp_H,inp_K; output [7:0]out_I; assign out_I=inp_A | inp_H | inp_K
module OR_2(inp_P,inp_Q,out_E); input [2:0]inp_P,inp_Q; output [2:0]out_E; assign out_E=inp_P | inp_Q; endmodule
module OR_1(inp_O,inp_A,inp_L,out_S); input [1:0]inp_O,inp_A,inp_L; output [1:0]out_S; assign out_S=inp_O | inp_A | inp_L; endmodule
module OR_6(inp_V,inp_Z,inp_W,out_R); input [6:0]inp_V,inp_Z,inp_W; output [6:0]out_R; assign out_R=inp_V | inp_Z | inp_W; endmodule
module OR_2(I,B,X,W); input [2:0]I,B,X; output [2:0]W; assign W=I | B | X
module OR_6(inp_M,inp_X,inp_I,out_E); input [6:0]inp_M,inp_X,inp_I; output [6:0]out_E; assign out_E=inp_M | inp_X | inp_I
module OR_3(C,X,N); input [3:0]C,X; output [3:0]N; assign N=C | X
module OR_5(inp_G,inp_U,inp_T,out_H); input [5:0]inp_G,inp_U,inp_T; output [5:0]out_H; assign out_H=inp_G | inp_U | inp_T
module OR_1(inp_P,inp_I,out_G); input [1:0]inp_P,inp_I; output [1:0]out_G; assign out_G=inp_P | inp_I
module OR_1(inp_P,inp_S,out_J); input [1:0]inp_P,inp_S; output [1:0]out_J; assign out_J=inp_P | inp_S
module OR_1(inp_I,inp_P,out_C); input [1:0]inp_I,inp_P; output [1:0]out_C; assign out_C=inp_I | inp_P
module OR_1(inp_C,inp_H,out_L); input [1:0]inp_C,inp_H; output [1:0]out_L; assign out_L=inp_C | inp_H
module OR_6(A,N,S,G); input [6:0]A,N,S; output [6:0]G; assign G=A | N | S; endmodule
module OR_7(U,B,R,V); input [7:0]U,B,R; output [7:0]V; assign V=U | B | R
module OR_6(D,A,F,Q); input [6:0]D,A,F; output [6:0]Q; assign Q=D | A | F
module OR_7(inp_A,inp_D,out_A); input [7:0]inp_A,inp_D; output [7:0]out_A; assign out_A=inp_A | inp_D
module OR_1(U,C,A,D); input [1:0]U,C,A; output [1:0]D; assign D=U | C | A; endmodule
module OR_4(inp_P,inp_W,inp_V,out_W); input [4:0]inp_P,inp_W,inp_V; output [4:0]out_W; assign out_W=inp_P | inp_W | inp_V
module OR_4(inp_C,inp_M,inp_S,out_O); input [4:0]inp_C,inp_M,inp_S; output [4:0]out_O; assign out_O=inp_C | inp_M | inp_S
module OR_7(J,V,O,S); input [7:0]J,V,O; output [7:0]S; assign S=J | V | O
module OR_2(G,W,D); input [2:0]G,W; output [2:0]D; assign D=G | W
module OR_5(Q,S,U); input [5:0]Q,S; output [5:0]U; assign U=Q | S; endmodule
module OR_5(H,Y,K); input [5:0]H,Y; output [5:0]K; assign K=H | Y; endmodule
module OR_1(M,W,Z,C); input [1:0]M,W,Z; output [1:0]C; assign C=M | W | Z
module OR_7(inp_P,inp_E,out_G); input [7:0]inp_P,inp_E; output [7:0]out_G; assign out_G=inp_P | inp_E
module OR_7(A,R,E,N); input [7:0]A,R,E; output [7:0]N; assign N=A | R | E
module OR_3(L,T,P); input [3:0]L,T; output [3:0]P; assign P=L | T
module OR_7(inp_Y,inp_S,inp_K,out_H); input [7:0]inp_Y,inp_S,inp_K; output [7:0]out_H; assign out_H=inp_Y | inp_S | inp_K
module OR_3(inp_V,inp_H,out_R); input [3:0]inp_V,inp_H; output [3:0]out_R; assign out_R=inp_V | inp_H
module OR_4(inp_H,inp_W,inp_V,out_L); input [4:0]inp_H,inp_W,inp_V; output [4:0]out_L; assign out_L=inp_H | inp_W | inp_V
module OR_2(inp_F,inp_M,out_Z); input [2:0]inp_F,inp_M; output [2:0]out_Z; assign out_Z=inp_F | inp_M; endmodule
module OR_5(inp_V,inp_P,inp_R,out_U); input [5:0]inp_V,inp_P,inp_R; output [5:0]out_U; assign out_U=inp_V | inp_P | inp_R
module OR_7(N,J,K,I); input [7:0]N,J,K; output [7:0]I; assign I=N | J | K; endmodule
module OR_6(S,T,D); input [6:0]S,T; output [6:0]D; assign D=S | T; endmodule
module OR_6(U,G,K,J); input [6:0]U,G,K; output [6:0]J; assign J=U | G | K; endmodule
module OR_2(I,N,C); input [2:0]I,N; output [2:0]C; assign C=I | N
module OR_2(inp_G,inp_I,out_I); input [2:0]inp_G,inp_I; output [2:0]out_I; assign out_I=inp_G | inp_I; endmodule
module OR_5(M,A,J); input [5:0]M,A; output [5:0]J; assign J=M | A; endmodule
module OR_7(inp_Z,inp_M,out_J); input [7:0]inp_Z,inp_M; output [7:0]out_J; assign out_J=inp_Z | inp_M; endmodule
module OR_5(O,E,G,G); input [5:0]O,E,G; output [5:0]G; assign G=O | E | G
module OR_1(K,W,I); input [1:0]K,W; output [1:0]I; assign I=K | W
module OR_7(inp_V,inp_L,out_R); input [7:0]inp_V,inp_L; output [7:0]out_R; assign out_R=inp_V | inp_L
module OR_1(inp_L,inp_A,inp_G,out_N); input [1:0]inp_L,inp_A,inp_G; output [1:0]out_N; assign out_N=inp_L | inp_A | inp_G
module OR_3(inp_C,inp_N,inp_E,out_E); input [3:0]inp_C,inp_N,inp_E; output [3:0]out_E; assign out_E=inp_C | inp_N | inp_E
module OR_2(inp_X,inp_T,out_I); input [2:0]inp_X,inp_T; output [2:0]out_I; assign out_I=inp_X | inp_T
module OR_6(M,H,N,Y); input [6:0]M,H,N; output [6:0]Y; assign Y=M | H | N
module OR_5(N,O,B,J); input [5:0]N,O,B; output [5:0]J; assign J=N | O | B; endmodule
module OR_5(inp_C,inp_S,inp_E,out_P); input [5:0]inp_C,inp_S,inp_E; output [5:0]out_P; assign out_P=inp_C | inp_S | inp_E
module OR_1(inp_Z,inp_U,inp_Y,out_V); input [1:0]inp_Z,inp_U,inp_Y; output [1:0]out_V; assign out_V=inp_Z | inp_U | inp_Y
module OR_7(H,R,M); input [7:0]H,R; output [7:0]M; assign M=H | R; endmodule
module OR_7(J,U,R); input [7:0]J,U; output [7:0]R; assign R=J | U
module OR_5(inp_T,inp_W,out_M); input [5:0]inp_T,inp_W; output [5:0]out_M; assign out_M=inp_T | inp_W
module OR_6(I,S,J,R); input [6:0]I,S,J; output [6:0]R; assign R=I | S | J
module OR_3(inp_B,inp_I,inp_H,out_M); input [3:0]inp_B,inp_I,inp_H; output [3:0]out_M; assign out_M=inp_B | inp_I | inp_H; endmodule
module OR_7(inp_X,inp_M,inp_R,out_L); input [7:0]inp_X,inp_M,inp_R; output [7:0]out_L; assign out_L=inp_X | inp_M | inp_R
module OR_6(S,O,T,U); input [6:0]S,O,T; output [6:0]U; assign U=S | O | T; endmodule
module OR_7(inp_E,inp_N,inp_Z,out_U); input [7:0]inp_E,inp_N,inp_Z; output [7:0]out_U; assign out_U=inp_E | inp_N | inp_Z
module OR_6(N,O,X,C); input [6:0]N,O,X; output [6:0]C; assign C=N | O | X
module OR_1(inp_U,inp_O,out_N); input [1:0]inp_U,inp_O; output [1:0]out_N; assign out_N=inp_U | inp_O; endmodule
module OR_5(inp_G,inp_Q,inp_X,out_T); input [5:0]inp_G,inp_Q,inp_X; output [5:0]out_T; assign out_T=inp_G | inp_Q | inp_X
module OR_1(inp_E,inp_O,out_L); input [1:0]inp_E,inp_O; output [1:0]out_L; assign out_L=inp_E | inp_O; endmodule
module OR_4(inp_Z,inp_I,inp_U,out_E); input [4:0]inp_Z,inp_I,inp_U; output [4:0]out_E; assign out_E=inp_Z | inp_I | inp_U
module OR_1(inp_J,inp_Q,inp_E,out_Z); input [1:0]inp_J,inp_Q,inp_E; output [1:0]out_Z; assign out_Z=inp_J | inp_Q | inp_E; endmodule
module OR_5(C,R,T,B); input [5:0]C,R,T; output [5:0]B; assign B=C | R | T
module OR_2(S,X,H,B); input [2:0]S,X,H; output [2:0]B; assign B=S | X | H
module OR_3(inp_P,inp_H,out_T); input [3:0]inp_P,inp_H; output [3:0]out_T; assign out_T=inp_P | inp_H
module OR_6(X,I,B,E); input [6:0]X,I,B; output [6:0]E; assign E=X | I | B
module OR_6(inp_C,inp_P,inp_A,out_N); input [6:0]inp_C,inp_P,inp_A; output [6:0]out_N; assign out_N=inp_C | inp_P | inp_A
module OR_4(inp_Y,inp_O,inp_U,out_X); input [4:0]inp_Y,inp_O,inp_U; output [4:0]out_X; assign out_X=inp_Y | inp_O | inp_U
module OR_3(F,O,Q); input [3:0]F,O; output [3:0]Q; assign Q=F | O; endmodule
module OR_1(inp_B,inp_M,out_M); input [1:0]inp_B,inp_M; output [1:0]out_M; assign out_M=inp_B | inp_M
module OR_1(inp_T,inp_G,inp_A,out_Q); input [1:0]inp_T,inp_G,inp_A; output [1:0]out_Q; assign out_Q=inp_T | inp_G | inp_A
module OR_4(inp_F,inp_X,out_S); input [4:0]inp_F,inp_X; output [4:0]out_S; assign out_S=inp_F | inp_X; endmodule
module OR_6(inp_X,inp_S,out_U); input [6:0]inp_X,inp_S; output [6:0]out_U; assign out_U=inp_X | inp_S; endmodule
module OR_6(inp_V,inp_T,inp_M,out_F); input [6:0]inp_V,inp_T,inp_M; output [6:0]out_F; assign out_F=inp_V | inp_T | inp_M; endmodule
module OR_1(inp_N,inp_E,inp_S,out_Z); input [1:0]inp_N,inp_E,inp_S; output [1:0]out_Z; assign out_Z=inp_N | inp_E | inp_S; endmodule
module OR_6(inp_M,inp_J,inp_N,out_A); input [6:0]inp_M,inp_J,inp_N; output [6:0]out_A; assign out_A=inp_M | inp_J | inp_N; endmodule
module OR_6(Q,A,E,S); input [6:0]Q,A,E; output [6:0]S; assign S=Q | A | E; endmodule
module OR_6(inp_J,inp_K,inp_Q,out_C); input [6:0]inp_J,inp_K,inp_Q; output [6:0]out_C; assign out_C=inp_J | inp_K | inp_Q
module OR_5(O,U,A,Z); input [5:0]O,U,A; output [5:0]Z; assign Z=O | U | A; endmodule
module OR_5(inp_B,inp_K,inp_Z,out_B); input [5:0]inp_B,inp_K,inp_Z; output [5:0]out_B; assign out_B=inp_B | inp_K | inp_Z
module OR_4(inp_R,inp_W,inp_D,out_L); input [4:0]inp_R,inp_W,inp_D; output [4:0]out_L; assign out_L=inp_R | inp_W | inp_D; endmodule
module OR_4(D,F,E,N); input [4:0]D,F,E; output [4:0]N; assign N=D | F | E
module OR_1(H,Z,Y,S); input [1:0]H,Z,Y; output [1:0]S; assign S=H | Z | Y; endmodule
module OR_7(G,X,J,B); input [7:0]G,X,J; output [7:0]B; assign B=G | X | J; endmodule
module OR_6(inp_X,inp_I,inp_Z,out_H); input [6:0]inp_X,inp_I,inp_Z; output [6:0]out_H; assign out_H=inp_X | inp_I | inp_Z; endmodule
module OR_2(inp_S,inp_J,inp_G,out_R); input [2:0]inp_S,inp_J,inp_G; output [2:0]out_R; assign out_R=inp_S | inp_J | inp_G; endmodule
module OR_1(Q,X,J); input [1:0]Q,X; output [1:0]J; assign J=Q | X
module OR_2(inp_H,inp_L,out_L); input [2:0]inp_H,inp_L; output [2:0]out_L; assign out_L=inp_H | inp_L; endmodule
module OR_4(inp_X,inp_K,inp_B,out_R); input [4:0]inp_X,inp_K,inp_B; output [4:0]out_R; assign out_R=inp_X | inp_K | inp_B; endmodule
module OR_2(Q,D,G,B); input [2:0]Q,D,G; output [2:0]B; assign B=Q | D | G
module OR_1(B,E,V,D); input [1:0]B,E,V; output [1:0]D; assign D=B | E | V; endmodule
module OR_7(A,U,P); input [7:0]A,U; output [7:0]P; assign P=A | U; endmodule
module OR_6(U,K,Y,H); input [6:0]U,K,Y; output [6:0]H; assign H=U | K | Y; endmodule
module OR_1(G,L,Y,O); input [1:0]G,L,Y; output [1:0]O; assign O=G | L | Y
module OR_2(inp_M,inp_O,out_R); input [2:0]inp_M,inp_O; output [2:0]out_R; assign out_R=inp_M | inp_O; endmodule
module OR_3(N,P,A,C); input [3:0]N,P,A; output [3:0]C; assign C=N | P | A
module OR_6(inp_L,inp_E,out_F); input [6:0]inp_L,inp_E; output [6:0]out_F; assign out_F=inp_L | inp_E; endmodule
module OR_2(M,N,H); input [2:0]M,N; output [2:0]H; assign H=M | N; endmodule
module OR_5(I,J,A); input [5:0]I,J; output [5:0]A; assign A=I | J
module OR_3(K,D,S); input [3:0]K,D; output [3:0]S; assign S=K | D; endmodule
module OR_2(inp_W,inp_R,inp_K,out_W); input [2:0]inp_W,inp_R,inp_K; output [2:0]out_W; assign out_W=inp_W | inp_R | inp_K
module OR_1(U,X,N,H); input [1:0]U,X,N; output [1:0]H; assign H=U | X | N; endmodule
module OR_4(inp_T,inp_H,out_K); input [4:0]inp_T,inp_H; output [4:0]out_K; assign out_K=inp_T | inp_H
module OR_5(inp_S,inp_J,inp_T,out_P); input [5:0]inp_S,inp_J,inp_T; output [5:0]out_P; assign out_P=inp_S | inp_J | inp_T
module OR_2(inp_E,inp_H,out_E); input [2:0]inp_E,inp_H; output [2:0]out_E; assign out_E=inp_E | inp_H; endmodule
module OR_6(inp_O,inp_N,inp_C,out_M); input [6:0]inp_O,inp_N,inp_C; output [6:0]out_M; assign out_M=inp_O | inp_N | inp_C; endmodule
module OR_2(C,Y,L); input [2:0]C,Y; output [2:0]L; assign L=C | Y; endmodule
module OR_1(W,S,P,I); input [1:0]W,S,P; output [1:0]I; assign I=W | S | P; endmodule
module OR_3(inp_T,inp_Q,inp_J,out_L); input [3:0]inp_T,inp_Q,inp_J; output [3:0]out_L; assign out_L=inp_T | inp_Q | inp_J
module OR_1(Z,R,Q); input [1:0]Z,R; output [1:0]Q; assign Q=Z | R
module OR_4(S,I,L); input [4:0]S,I; output [4:0]L; assign L=S | I; endmodule
module OR_5(D,X,P,T); input [5:0]D,X,P; output [5:0]T; assign T=D | X | P; endmodule
module OR_6(C,H,J,P); input [6:0]C,H,J; output [6:0]P; assign P=C | H | J; endmodule
module OR_6(inp_N,inp_Y,inp_D,out_Y); input [6:0]inp_N,inp_Y,inp_D; output [6:0]out_Y; assign out_Y=inp_N | inp_Y | inp_D
module OR_3(inp_D,inp_T,inp_K,out_J); input [3:0]inp_D,inp_T,inp_K; output [3:0]out_J; assign out_J=inp_D | inp_T | inp_K
module OR_3(inp_J,inp_U,out_R); input [3:0]inp_J,inp_U; output [3:0]out_R; assign out_R=inp_J | inp_U
module OR_4(I,E,F); input [4:0]I,E; output [4:0]F; assign F=I | E
module OR_6(I,U,N,B); input [6:0]I,U,N; output [6:0]B; assign B=I | U | N
module OR_4(inp_C,inp_I,inp_J,out_H); input [4:0]inp_C,inp_I,inp_J; output [4:0]out_H; assign out_H=inp_C | inp_I | inp_J
module OR_2(inp_V,inp_F,out_I); input [2:0]inp_V,inp_F; output [2:0]out_I; assign out_I=inp_V | inp_F; endmodule
module OR_4(H,M,C,K); input [4:0]H,M,C; output [4:0]K; assign K=H | M | C
module OR_2(inp_F,inp_L,out_T); input [2:0]inp_F,inp_L; output [2:0]out_T; assign out_T=inp_F | inp_L
module OR_4(inp_K,inp_U,inp_N,out_T); input [4:0]inp_K,inp_U,inp_N; output [4:0]out_T; assign out_T=inp_K | inp_U | inp_N
module OR_3(inp_Z,inp_O,inp_W,out_R); input [3:0]inp_Z,inp_O,inp_W; output [3:0]out_R; assign out_R=inp_Z | inp_O | inp_W
module OR_3(inp_T,inp_Z,inp_V,out_D); input [3:0]inp_T,inp_Z,inp_V; output [3:0]out_D; assign out_D=inp_T | inp_Z | inp_V; endmodule
module OR_1(V,T,W); input [1:0]V,T; output [1:0]W; assign W=V | T
module OR_5(inp_Q,inp_D,out_P); input [5:0]inp_Q,inp_D; output [5:0]out_P; assign out_P=inp_Q | inp_D; endmodule
module OR_3(O,G,W,U); input [3:0]O,G,W; output [3:0]U; assign U=O | G | W; endmodule
module OR_4(inp_R,inp_E,out_F); input [4:0]inp_R,inp_E; output [4:0]out_F; assign out_F=inp_R | inp_E
module OR_2(inp_S,inp_D,inp_A,out_C); input [2:0]inp_S,inp_D,inp_A; output [2:0]out_C; assign out_C=inp_S | inp_D | inp_A
module OR_3(K,F,P); input [3:0]K,F; output [3:0]P; assign P=K | F; endmodule
module OR_3(L,J,I); input [3:0]L,J; output [3:0]I; assign I=L | J; endmodule
module OR_2(S,D,X,J); input [2:0]S,D,X; output [2:0]J; assign J=S | D | X; endmodule
module OR_2(C,K,U,H); input [2:0]C,K,U; output [2:0]H; assign H=C | K | U; endmodule
module OR_6(W,N,C,V); input [6:0]W,N,C; output [6:0]V; assign V=W | N | C
module OR_6(E,V,X,T); input [6:0]E,V,X; output [6:0]T; assign T=E | V | X; endmodule
module OR_5(inp_E,inp_N,out_S); input [5:0]inp_E,inp_N; output [5:0]out_S; assign out_S=inp_E | inp_N; endmodule
module OR_2(Q,I,T,K); input [2:0]Q,I,T; output [2:0]K; assign K=Q | I | T
module OR_5(inp_H,inp_E,inp_U,out_O); input [5:0]inp_H,inp_E,inp_U; output [5:0]out_O; assign out_O=inp_H | inp_E | inp_U; endmodule
module OR_6(inp_O,inp_H,inp_L,out_H); input [6:0]inp_O,inp_H,inp_L; output [6:0]out_H; assign out_H=inp_O | inp_H | inp_L
module OR_2(inp_V,inp_A,inp_E,out_W); input [2:0]inp_V,inp_A,inp_E; output [2:0]out_W; assign out_W=inp_V | inp_A | inp_E; endmodule
module OR_2(inp_X,inp_C,inp_L,out_H); input [2:0]inp_X,inp_C,inp_L; output [2:0]out_H; assign out_H=inp_X | inp_C | inp_L; endmodule
module OR_1(Y,J,C,N); input [1:0]Y,J,C; output [1:0]N; assign N=Y | J | C
module OR_3(P,Y,F,C); input [3:0]P,Y,F; output [3:0]C; assign C=P | Y | F
module OR_5(X,H,L); input [5:0]X,H; output [5:0]L; assign L=X | H
module OR_3(K,B,I,E); input [3:0]K,B,I; output [3:0]E; assign E=K | B | I
module OR_2(inp_G,inp_H,inp_S,out_S); input [2:0]inp_G,inp_H,inp_S; output [2:0]out_S; assign out_S=inp_G | inp_H | inp_S
module OR_6(inp_J,inp_K,inp_A,out_V); input [6:0]inp_J,inp_K,inp_A; output [6:0]out_V; assign out_V=inp_J | inp_K | inp_A; endmodule
module OR_7(inp_Y,inp_R,inp_Q,out_I); input [7:0]inp_Y,inp_R,inp_Q; output [7:0]out_I; assign out_I=inp_Y | inp_R | inp_Q; endmodule
module OR_7(inp_Z,inp_Z,out_J); input [7:0]inp_Z,inp_Z; output [7:0]out_J; assign out_J=inp_Z | inp_Z; endmodule
module OR_3(inp_I,inp_X,out_H); input [3:0]inp_I,inp_X; output [3:0]out_H; assign out_H=inp_I | inp_X; endmodule
module OR_7(inp_W,inp_T,inp_U,out_V); input [7:0]inp_W,inp_T,inp_U; output [7:0]out_V; assign out_V=inp_W | inp_T | inp_U
module OR_4(inp_G,inp_R,out_N); input [4:0]inp_G,inp_R; output [4:0]out_N; assign out_N=inp_G | inp_R
module OR_6(inp_Q,inp_Z,inp_W,out_P); input [6:0]inp_Q,inp_Z,inp_W; output [6:0]out_P; assign out_P=inp_Q | inp_Z | inp_W; endmodule
module OR_2(inp_B,inp_O,inp_N,out_I); input [2:0]inp_B,inp_O,inp_N; output [2:0]out_I; assign out_I=inp_B | inp_O | inp_N
module OR_6(M,D,J,W); input [6:0]M,D,J; output [6:0]W; assign W=M | D | J
module OR_3(inp_W,inp_Q,out_J); input [3:0]inp_W,inp_Q; output [3:0]out_J; assign out_J=inp_W | inp_Q
module OR_3(inp_V,inp_U,inp_A,out_C); input [3:0]inp_V,inp_U,inp_A; output [3:0]out_C; assign out_C=inp_V | inp_U | inp_A
module OR_3(inp_N,inp_Y,inp_I,out_N); input [3:0]inp_N,inp_Y,inp_I; output [3:0]out_N; assign out_N=inp_N | inp_Y | inp_I; endmodule
module OR_1(X,C,N); input [1:0]X,C; output [1:0]N; assign N=X | C; endmodule
module OR_4(A,P,U); input [4:0]A,P; output [4:0]U; assign U=A | P; endmodule
module OR_6(inp_E,inp_U,out_A); input [6:0]inp_E,inp_U; output [6:0]out_A; assign out_A=inp_E | inp_U; endmodule
module OR_7(inp_F,inp_I,inp_C,out_L); input [7:0]inp_F,inp_I,inp_C; output [7:0]out_L; assign out_L=inp_F | inp_I | inp_C; endmodule
module OR_4(O,S,L,K); input [4:0]O,S,L; output [4:0]K; assign K=O | S | L
module OR_7(W,N,R); input [7:0]W,N; output [7:0]R; assign R=W | N; endmodule
module OR_1(D,R,H); input [1:0]D,R; output [1:0]H; assign H=D | R
module OR_2(inp_T,inp_P,out_V); input [2:0]inp_T,inp_P; output [2:0]out_V; assign out_V=inp_T | inp_P
module OR_4(T,L,F,S); input [4:0]T,L,F; output [4:0]S; assign S=T | L | F; endmodule
module OR_7(inp_C,inp_H,inp_N,out_A); input [7:0]inp_C,inp_H,inp_N; output [7:0]out_A; assign out_A=inp_C | inp_H | inp_N
module OR_2(inp_U,inp_K,out_H); input [2:0]inp_U,inp_K; output [2:0]out_H; assign out_H=inp_U | inp_K; endmodule
module OR_5(J,Y,F,B); input [5:0]J,Y,F; output [5:0]B; assign B=J | Y | F; endmodule
module OR_7(inp_R,inp_B,out_Z); input [7:0]inp_R,inp_B; output [7:0]out_Z; assign out_Z=inp_R | inp_B
module OR_4(inp_N,inp_O,inp_E,out_V); input [4:0]inp_N,inp_O,inp_E; output [4:0]out_V; assign out_V=inp_N | inp_O | inp_E
module OR_2(inp_Z,inp_X,out_C); input [2:0]inp_Z,inp_X; output [2:0]out_C; assign out_C=inp_Z | inp_X; endmodule
module OR_1(R,H,Y); input [1:0]R,H; output [1:0]Y; assign Y=R | H; endmodule
module OR_1(R,P,Y); input [1:0]R,P; output [1:0]Y; assign Y=R | P; endmodule
module OR_4(E,P,O); input [4:0]E,P; output [4:0]O; assign O=E | P
module OR_2(L,F,U,N); input [2:0]L,F,U; output [2:0]N; assign N=L | F | U
module OR_3(inp_J,inp_H,out_L); input [3:0]inp_J,inp_H; output [3:0]out_L; assign out_L=inp_J | inp_H
module OR_2(N,V,O); input [2:0]N,V; output [2:0]O; assign O=N | V; endmodule
module OR_4(O,E,W,B); input [4:0]O,E,W; output [4:0]B; assign B=O | E | W
module OR_1(Z,V,P); input [1:0]Z,V; output [1:0]P; assign P=Z | V; endmodule
module OR_7(M,H,Q); input [7:0]M,H; output [7:0]Q; assign Q=M | H
module OR_5(inp_R,inp_T,out_U); input [5:0]inp_R,inp_T; output [5:0]out_U; assign out_U=inp_R | inp_T
module OR_7(inp_E,inp_L,inp_H,out_P); input [7:0]inp_E,inp_L,inp_H; output [7:0]out_P; assign out_P=inp_E | inp_L | inp_H
module OR_3(inp_J,inp_I,inp_Q,out_V); input [3:0]inp_J,inp_I,inp_Q; output [3:0]out_V; assign out_V=inp_J | inp_I | inp_Q
module OR_1(U,V,K); input [1:0]U,V; output [1:0]K; assign K=U | V; endmodule
module OR_2(V,P,E); input [2:0]V,P; output [2:0]E; assign E=V | P; endmodule
module OR_5(U,C,A,Q); input [5:0]U,C,A; output [5:0]Q; assign Q=U | C | A; endmodule
module OR_3(C,H,Y); input [3:0]C,H; output [3:0]Y; assign Y=C | H
module OR_3(V,R,Z,Q); input [3:0]V,R,Z; output [3:0]Q; assign Q=V | R | Z
module OR_1(inp_R,inp_Z,out_F); input [1:0]inp_R,inp_Z; output [1:0]out_F; assign out_F=inp_R | inp_Z; endmodule
module OR_6(O,N,F,W); input [6:0]O,N,F; output [6:0]W; assign W=O | N | F; endmodule
module OR_2(Z,X,L,H); input [2:0]Z,X,L; output [2:0]H; assign H=Z | X | L; endmodule
module OR_7(Y,U,P); input [7:0]Y,U; output [7:0]P; assign P=Y | U; endmodule
module OR_4(inp_L,inp_M,inp_C,out_Y); input [4:0]inp_L,inp_M,inp_C; output [4:0]out_Y; assign out_Y=inp_L | inp_M | inp_C
module OR_5(T,H,G,I); input [5:0]T,H,G; output [5:0]I; assign I=T | H | G
module OR_6(inp_P,inp_A,out_L); input [6:0]inp_P,inp_A; output [6:0]out_L; assign out_L=inp_P | inp_A; endmodule
module OR_2(inp_T,inp_M,inp_F,out_S); input [2:0]inp_T,inp_M,inp_F; output [2:0]out_S; assign out_S=inp_T | inp_M | inp_F
module OR_7(V,G,C,Z); input [7:0]V,G,C; output [7:0]Z; assign Z=V | G | C; endmodule
module NAND_4(S,J,X,H); input [4:0]S,J,X; output [4:0]H; assign H=S ~& J ~& X; endmodule
module NAND_7(F,T,A); input [7:0]F,T; output [7:0]A; assign A=F ~& T
module NAND_3(Q,W,N,B); input [3:0]Q,W,N; output [3:0]B; assign B=Q ~& W ~& N; endmodule
module NAND_7(S,U,Q); input [7:0]S,U; output [7:0]Q; assign Q=S ~& U; endmodule
module NAND_5(X,J,U,Y); input [5:0]X,J,U; output [5:0]Y; assign Y=X ~& J ~& U
module NAND_6(inp_X,inp_O,out_L); input [6:0]inp_X,inp_O; output [6:0]out_L; assign out_L=inp_X ~& inp_O
module NAND_6(J,Y,L,A); input [6:0]J,Y,L; output [6:0]A; assign A=J ~& Y ~& L
module NAND_2(G,R,D,B); input [2:0]G,R,D; output [2:0]B; assign B=G ~& R ~& D
module NAND_2(inp_R,inp_M,inp_N,out_L); input [2:0]inp_R,inp_M,inp_N; output [2:0]out_L; assign out_L=inp_R ~& inp_M ~& inp_N; endmodule
module NAND_2(inp_E,inp_L,inp_W,out_X); input [2:0]inp_E,inp_L,inp_W; output [2:0]out_X; assign out_X=inp_E ~& inp_L ~& inp_W; endmodule
module NAND_2(inp_V,inp_I,inp_G,out_L); input [2:0]inp_V,inp_I,inp_G; output [2:0]out_L; assign out_L=inp_V ~& inp_I ~& inp_G
module NAND_7(T,M,Z,S); input [7:0]T,M,Z; output [7:0]S; assign S=T ~& M ~& Z; endmodule
module NAND_3(inp_A,inp_B,inp_S,out_Z); input [3:0]inp_A,inp_B,inp_S; output [3:0]out_Z; assign out_Z=inp_A ~& inp_B ~& inp_S
module NAND_5(P,O,C); input [5:0]P,O; output [5:0]C; assign C=P ~& O; endmodule
module NAND_1(inp_U,inp_G,inp_Y,out_H); input [1:0]inp_U,inp_G,inp_Y; output [1:0]out_H; assign out_H=inp_U ~& inp_G ~& inp_Y
module NAND_5(inp_E,inp_A,out_Y); input [5:0]inp_E,inp_A; output [5:0]out_Y; assign out_Y=inp_E ~& inp_A; endmodule
module NAND_5(F,Y,P,O); input [5:0]F,Y,P; output [5:0]O; assign O=F ~& Y ~& P
module NAND_2(U,Z,V,Y); input [2:0]U,Z,V; output [2:0]Y; assign Y=U ~& Z ~& V
module NAND_3(inp_Y,inp_G,out_P); input [3:0]inp_Y,inp_G; output [3:0]out_P; assign out_P=inp_Y ~& inp_G
module NAND_5(inp_H,inp_B,out_H); input [5:0]inp_H,inp_B; output [5:0]out_H; assign out_H=inp_H ~& inp_B
module NAND_6(inp_R,inp_K,out_G); input [6:0]inp_R,inp_K; output [6:0]out_G; assign out_G=inp_R ~& inp_K
module NAND_7(inp_A,inp_B,out_E); input [7:0]inp_A,inp_B; output [7:0]out_E; assign out_E=inp_A ~& inp_B; endmodule
module NAND_3(inp_P,inp_N,inp_H,out_T); input [3:0]inp_P,inp_N,inp_H; output [3:0]out_T; assign out_T=inp_P ~& inp_N ~& inp_H; endmodule
module NAND_2(inp_J,inp_M,out_B); input [2:0]inp_J,inp_M; output [2:0]out_B; assign out_B=inp_J ~& inp_M; endmodule
module NAND_4(Z,T,Q,H); input [4:0]Z,T,Q; output [4:0]H; assign H=Z ~& T ~& Q
module NAND_3(U,H,K,J); input [3:0]U,H,K; output [3:0]J; assign J=U ~& H ~& K; endmodule
module NAND_3(X,T,F,P); input [3:0]X,T,F; output [3:0]P; assign P=X ~& T ~& F; endmodule
module NAND_5(inp_V,inp_B,out_S); input [5:0]inp_V,inp_B; output [5:0]out_S; assign out_S=inp_V ~& inp_B; endmodule
module NAND_4(inp_M,inp_F,out_S); input [4:0]inp_M,inp_F; output [4:0]out_S; assign out_S=inp_M ~& inp_F; endmodule
module NAND_3(V,C,F); input [3:0]V,C; output [3:0]F; assign F=V ~& C
module NAND_7(T,N,R); input [7:0]T,N; output [7:0]R; assign R=T ~& N; endmodule
module NAND_5(inp_B,inp_N,out_S); input [5:0]inp_B,inp_N; output [5:0]out_S; assign out_S=inp_B ~& inp_N; endmodule
module NAND_2(T,M,F,N); input [2:0]T,M,F; output [2:0]N; assign N=T ~& M ~& F
module NAND_7(inp_O,inp_M,inp_G,out_B); input [7:0]inp_O,inp_M,inp_G; output [7:0]out_B; assign out_B=inp_O ~& inp_M ~& inp_G; endmodule
module NAND_5(P,S,Y,N); input [5:0]P,S,Y; output [5:0]N; assign N=P ~& S ~& Y
module NAND_1(inp_D,inp_N,inp_S,out_G); input [1:0]inp_D,inp_N,inp_S; output [1:0]out_G; assign out_G=inp_D ~& inp_N ~& inp_S
module NAND_2(inp_I,inp_S,inp_L,out_M); input [2:0]inp_I,inp_S,inp_L; output [2:0]out_M; assign out_M=inp_I ~& inp_S ~& inp_L; endmodule
module NAND_4(I,G,J,P); input [4:0]I,G,J; output [4:0]P; assign P=I ~& G ~& J
module NAND_3(inp_H,inp_P,out_O); input [3:0]inp_H,inp_P; output [3:0]out_O; assign out_O=inp_H ~& inp_P; endmodule
module NAND_4(G,F,L); input [4:0]G,F; output [4:0]L; assign L=G ~& F; endmodule
module NAND_4(inp_A,inp_J,out_P); input [4:0]inp_A,inp_J; output [4:0]out_P; assign out_P=inp_A ~& inp_J
module NAND_5(O,Y,A,D); input [5:0]O,Y,A; output [5:0]D; assign D=O ~& Y ~& A
module NAND_5(A,X,J); input [5:0]A,X; output [5:0]J; assign J=A ~& X; endmodule
module NAND_2(O,Y,V); input [2:0]O,Y; output [2:0]V; assign V=O ~& Y; endmodule
module NAND_7(inp_B,inp_F,out_A); input [7:0]inp_B,inp_F; output [7:0]out_A; assign out_A=inp_B ~& inp_F; endmodule
module NAND_4(inp_B,inp_X,inp_P,out_C); input [4:0]inp_B,inp_X,inp_P; output [4:0]out_C; assign out_C=inp_B ~& inp_X ~& inp_P
module NAND_1(I,J,S); input [1:0]I,J; output [1:0]S; assign S=I ~& J
module NAND_6(C,E,H,O); input [6:0]C,E,H; output [6:0]O; assign O=C ~& E ~& H; endmodule
module NAND_1(P,H,O); input [1:0]P,H; output [1:0]O; assign O=P ~& H; endmodule
module NAND_3(F,L,Y,R); input [3:0]F,L,Y; output [3:0]R; assign R=F ~& L ~& Y; endmodule
module NAND_1(inp_R,inp_O,inp_U,out_R); input [1:0]inp_R,inp_O,inp_U; output [1:0]out_R; assign out_R=inp_R ~& inp_O ~& inp_U
module NAND_2(inp_G,inp_F,inp_Y,out_F); input [2:0]inp_G,inp_F,inp_Y; output [2:0]out_F; assign out_F=inp_G ~& inp_F ~& inp_Y
module NAND_5(F,M,I); input [5:0]F,M; output [5:0]I; assign I=F ~& M; endmodule
module NAND_4(inp_Q,inp_B,out_R); input [4:0]inp_Q,inp_B; output [4:0]out_R; assign out_R=inp_Q ~& inp_B
module NAND_1(Y,P,B); input [1:0]Y,P; output [1:0]B; assign B=Y ~& P
module NAND_6(inp_Y,inp_S,out_O); input [6:0]inp_Y,inp_S; output [6:0]out_O; assign out_O=inp_Y ~& inp_S; endmodule
module NAND_3(T,M,S); input [3:0]T,M; output [3:0]S; assign S=T ~& M; endmodule
module NAND_5(inp_B,inp_Z,inp_O,out_T); input [5:0]inp_B,inp_Z,inp_O; output [5:0]out_T; assign out_T=inp_B ~& inp_Z ~& inp_O
module NAND_2(inp_W,inp_E,out_B); input [2:0]inp_W,inp_E; output [2:0]out_B; assign out_B=inp_W ~& inp_E
module NAND_3(inp_V,inp_L,out_A); input [3:0]inp_V,inp_L; output [3:0]out_A; assign out_A=inp_V ~& inp_L; endmodule
module NAND_2(F,K,N); input [2:0]F,K; output [2:0]N; assign N=F ~& K; endmodule
module NAND_5(inp_K,inp_A,inp_B,out_C); input [5:0]inp_K,inp_A,inp_B; output [5:0]out_C; assign out_C=inp_K ~& inp_A ~& inp_B
module NAND_1(inp_F,inp_C,out_B); input [1:0]inp_F,inp_C; output [1:0]out_B; assign out_B=inp_F ~& inp_C; endmodule
module NAND_4(inp_G,inp_T,inp_J,out_I); input [4:0]inp_G,inp_T,inp_J; output [4:0]out_I; assign out_I=inp_G ~& inp_T ~& inp_J; endmodule
module NAND_1(inp_R,inp_N,inp_O,out_U); input [1:0]inp_R,inp_N,inp_O; output [1:0]out_U; assign out_U=inp_R ~& inp_N ~& inp_O
module NAND_7(inp_A,inp_P,inp_T,out_N); input [7:0]inp_A,inp_P,inp_T; output [7:0]out_N; assign out_N=inp_A ~& inp_P ~& inp_T; endmodule
module NAND_6(inp_P,inp_C,out_Z); input [6:0]inp_P,inp_C; output [6:0]out_Z; assign out_Z=inp_P ~& inp_C
module NAND_1(inp_Y,inp_G,out_W); input [1:0]inp_Y,inp_G; output [1:0]out_W; assign out_W=inp_Y ~& inp_G
module NAND_2(N,T,K); input [2:0]N,T; output [2:0]K; assign K=N ~& T
module NAND_3(G,A,P); input [3:0]G,A; output [3:0]P; assign P=G ~& A
module NAND_7(G,F,T,M); input [7:0]G,F,T; output [7:0]M; assign M=G ~& F ~& T; endmodule
module NAND_7(inp_D,inp_F,inp_U,out_T); input [7:0]inp_D,inp_F,inp_U; output [7:0]out_T; assign out_T=inp_D ~& inp_F ~& inp_U; endmodule
module NAND_6(E,O,G); input [6:0]E,O; output [6:0]G; assign G=E ~& O; endmodule
module NAND_1(inp_S,inp_Z,inp_I,out_T); input [1:0]inp_S,inp_Z,inp_I; output [1:0]out_T; assign out_T=inp_S ~& inp_Z ~& inp_I
module NAND_1(inp_Y,inp_R,out_C); input [1:0]inp_Y,inp_R; output [1:0]out_C; assign out_C=inp_Y ~& inp_R
module NAND_7(inp_A,inp_V,out_U); input [7:0]inp_A,inp_V; output [7:0]out_U; assign out_U=inp_A ~& inp_V
module NAND_2(inp_T,inp_L,inp_H,out_S); input [2:0]inp_T,inp_L,inp_H; output [2:0]out_S; assign out_S=inp_T ~& inp_L ~& inp_H; endmodule
module NAND_6(inp_N,inp_K,inp_D,out_F); input [6:0]inp_N,inp_K,inp_D; output [6:0]out_F; assign out_F=inp_N ~& inp_K ~& inp_D; endmodule
module NAND_4(X,Q,U,W); input [4:0]X,Q,U; output [4:0]W; assign W=X ~& Q ~& U
module NAND_2(Z,B,H); input [2:0]Z,B; output [2:0]H; assign H=Z ~& B; endmodule
module NAND_4(inp_U,inp_Z,out_V); input [4:0]inp_U,inp_Z; output [4:0]out_V; assign out_V=inp_U ~& inp_Z; endmodule
module NAND_7(inp_V,inp_F,inp_E,out_Q); input [7:0]inp_V,inp_F,inp_E; output [7:0]out_Q; assign out_Q=inp_V ~& inp_F ~& inp_E; endmodule
module NAND_3(inp_Z,inp_F,out_Y); input [3:0]inp_Z,inp_F; output [3:0]out_Y; assign out_Y=inp_Z ~& inp_F
module NAND_7(I,R,W,X); input [7:0]I,R,W; output [7:0]X; assign X=I ~& R ~& W; endmodule
module NAND_5(S,E,L,N); input [5:0]S,E,L; output [5:0]N; assign N=S ~& E ~& L; endmodule
module NAND_5(B,U,N); input [5:0]B,U; output [5:0]N; assign N=B ~& U
module NAND_6(inp_X,inp_F,out_K); input [6:0]inp_X,inp_F; output [6:0]out_K; assign out_K=inp_X ~& inp_F; endmodule
module NAND_1(T,X,K); input [1:0]T,X; output [1:0]K; assign K=T ~& X
module NAND_1(L,X,O,Z); input [1:0]L,X,O; output [1:0]Z; assign Z=L ~& X ~& O; endmodule
module NAND_2(inp_H,inp_G,out_X); input [2:0]inp_H,inp_G; output [2:0]out_X; assign out_X=inp_H ~& inp_G
module NAND_7(inp_W,inp_P,out_D); input [7:0]inp_W,inp_P; output [7:0]out_D; assign out_D=inp_W ~& inp_P; endmodule
module NAND_4(G,W,U); input [4:0]G,W; output [4:0]U; assign U=G ~& W; endmodule
module NAND_6(S,R,O,Y); input [6:0]S,R,O; output [6:0]Y; assign Y=S ~& R ~& O
module NAND_5(O,W,K,Y); input [5:0]O,W,K; output [5:0]Y; assign Y=O ~& W ~& K; endmodule
module NAND_2(inp_P,inp_K,out_N); input [2:0]inp_P,inp_K; output [2:0]out_N; assign out_N=inp_P ~& inp_K
module NAND_6(Q,K,G,B); input [6:0]Q,K,G; output [6:0]B; assign B=Q ~& K ~& G
module NAND_3(F,P,N,I); input [3:0]F,P,N; output [3:0]I; assign I=F ~& P ~& N
module NAND_3(inp_K,inp_O,inp_N,out_I); input [3:0]inp_K,inp_O,inp_N; output [3:0]out_I; assign out_I=inp_K ~& inp_O ~& inp_N; endmodule
module NAND_7(S,N,G,U); input [7:0]S,N,G; output [7:0]U; assign U=S ~& N ~& G; endmodule
module NAND_5(inp_D,inp_N,out_N); input [5:0]inp_D,inp_N; output [5:0]out_N; assign out_N=inp_D ~& inp_N
module NAND_6(L,R,M,T); input [6:0]L,R,M; output [6:0]T; assign T=L ~& R ~& M; endmodule
module NAND_1(inp_W,inp_I,inp_T,out_A); input [1:0]inp_W,inp_I,inp_T; output [1:0]out_A; assign out_A=inp_W ~& inp_I ~& inp_T; endmodule
module NAND_7(inp_S,inp_M,out_L); input [7:0]inp_S,inp_M; output [7:0]out_L; assign out_L=inp_S ~& inp_M
module NAND_5(inp_M,inp_N,out_T); input [5:0]inp_M,inp_N; output [5:0]out_T; assign out_T=inp_M ~& inp_N; endmodule
module NAND_1(inp_Q,inp_T,inp_O,out_D); input [1:0]inp_Q,inp_T,inp_O; output [1:0]out_D; assign out_D=inp_Q ~& inp_T ~& inp_O; endmodule
module NAND_2(D,H,Y,I); input [2:0]D,H,Y; output [2:0]I; assign I=D ~& H ~& Y
module NAND_2(inp_G,inp_I,out_O); input [2:0]inp_G,inp_I; output [2:0]out_O; assign out_O=inp_G ~& inp_I
module NAND_1(Q,V,C,G); input [1:0]Q,V,C; output [1:0]G; assign G=Q ~& V ~& C; endmodule
module NAND_7(inp_D,inp_B,inp_M,out_L); input [7:0]inp_D,inp_B,inp_M; output [7:0]out_L; assign out_L=inp_D ~& inp_B ~& inp_M
module NAND_6(inp_T,inp_V,inp_N,out_R); input [6:0]inp_T,inp_V,inp_N; output [6:0]out_R; assign out_R=inp_T ~& inp_V ~& inp_N; endmodule
module NAND_4(P,C,H,J); input [4:0]P,C,H; output [4:0]J; assign J=P ~& C ~& H
module NAND_6(inp_V,inp_Z,out_H); input [6:0]inp_V,inp_Z; output [6:0]out_H; assign out_H=inp_V ~& inp_Z
module NAND_5(Q,S,Y); input [5:0]Q,S; output [5:0]Y; assign Y=Q ~& S
module NAND_4(A,R,I,D); input [4:0]A,R,I; output [4:0]D; assign D=A ~& R ~& I; endmodule
module NAND_3(inp_Q,inp_F,out_Z); input [3:0]inp_Q,inp_F; output [3:0]out_Z; assign out_Z=inp_Q ~& inp_F
module NAND_3(inp_D,inp_U,out_F); input [3:0]inp_D,inp_U; output [3:0]out_F; assign out_F=inp_D ~& inp_U; endmodule
module NAND_7(inp_Z,inp_Y,inp_H,out_G); input [7:0]inp_Z,inp_Y,inp_H; output [7:0]out_G; assign out_G=inp_Z ~& inp_Y ~& inp_H; endmodule
module NAND_7(C,A,I); input [7:0]C,A; output [7:0]I; assign I=C ~& A; endmodule
module NAND_2(W,J,M); input [2:0]W,J; output [2:0]M; assign M=W ~& J
module NAND_1(P,Y,W); input [1:0]P,Y; output [1:0]W; assign W=P ~& Y
module NAND_1(B,U,R); input [1:0]B,U; output [1:0]R; assign R=B ~& U; endmodule
module NAND_2(O,X,M); input [2:0]O,X; output [2:0]M; assign M=O ~& X; endmodule
module NAND_1(P,H,W); input [1:0]P,H; output [1:0]W; assign W=P ~& H; endmodule
module NAND_1(F,Q,R); input [1:0]F,Q; output [1:0]R; assign R=F ~& Q
module NAND_2(S,Y,U); input [2:0]S,Y; output [2:0]U; assign U=S ~& Y; endmodule
module NAND_5(W,M,Q); input [5:0]W,M; output [5:0]Q; assign Q=W ~& M
module NAND_2(inp_C,inp_P,inp_S,out_C); input [2:0]inp_C,inp_P,inp_S; output [2:0]out_C; assign out_C=inp_C ~& inp_P ~& inp_S
module NAND_5(Z,R,N,S); input [5:0]Z,R,N; output [5:0]S; assign S=Z ~& R ~& N; endmodule
module NAND_7(N,Q,H); input [7:0]N,Q; output [7:0]H; assign H=N ~& Q; endmodule
module NAND_5(E,K,N); input [5:0]E,K; output [5:0]N; assign N=E ~& K; endmodule
module NAND_5(inp_L,inp_V,out_S); input [5:0]inp_L,inp_V; output [5:0]out_S; assign out_S=inp_L ~& inp_V; endmodule
module NAND_7(inp_H,inp_U,out_Z); input [7:0]inp_H,inp_U; output [7:0]out_Z; assign out_Z=inp_H ~& inp_U; endmodule
module NAND_1(inp_B,inp_T,inp_A,out_C); input [1:0]inp_B,inp_T,inp_A; output [1:0]out_C; assign out_C=inp_B ~& inp_T ~& inp_A; endmodule
module NAND_4(inp_L,inp_E,inp_Y,out_R); input [4:0]inp_L,inp_E,inp_Y; output [4:0]out_R; assign out_R=inp_L ~& inp_E ~& inp_Y; endmodule
module NAND_2(A,I,D); input [2:0]A,I; output [2:0]D; assign D=A ~& I; endmodule
module NAND_5(inp_B,inp_N,inp_P,out_C); input [5:0]inp_B,inp_N,inp_P; output [5:0]out_C; assign out_C=inp_B ~& inp_N ~& inp_P
module NAND_1(inp_D,inp_T,inp_E,out_L); input [1:0]inp_D,inp_T,inp_E; output [1:0]out_L; assign out_L=inp_D ~& inp_T ~& inp_E
module NAND_3(inp_W,inp_U,inp_Q,out_O); input [3:0]inp_W,inp_U,inp_Q; output [3:0]out_O; assign out_O=inp_W ~& inp_U ~& inp_Q
module NAND_1(inp_B,inp_O,inp_Z,out_V); input [1:0]inp_B,inp_O,inp_Z; output [1:0]out_V; assign out_V=inp_B ~& inp_O ~& inp_Z
module NAND_7(U,S,J,F); input [7:0]U,S,J; output [7:0]F; assign F=U ~& S ~& J; endmodule
module NAND_4(T,Y,N); input [4:0]T,Y; output [4:0]N; assign N=T ~& Y
module NAND_6(inp_M,inp_B,inp_V,out_H); input [6:0]inp_M,inp_B,inp_V; output [6:0]out_H; assign out_H=inp_M ~& inp_B ~& inp_V; endmodule
module NAND_4(inp_E,inp_U,inp_O,out_B); input [4:0]inp_E,inp_U,inp_O; output [4:0]out_B; assign out_B=inp_E ~& inp_U ~& inp_O; endmodule
module NAND_7(inp_P,inp_D,out_Y); input [7:0]inp_P,inp_D; output [7:0]out_Y; assign out_Y=inp_P ~& inp_D
module NAND_6(inp_L,inp_N,inp_X,out_E); input [6:0]inp_L,inp_N,inp_X; output [6:0]out_E; assign out_E=inp_L ~& inp_N ~& inp_X; endmodule
module NAND_4(inp_Q,inp_T,inp_X,out_A); input [4:0]inp_Q,inp_T,inp_X; output [4:0]out_A; assign out_A=inp_Q ~& inp_T ~& inp_X
module NAND_7(P,F,U,J); input [7:0]P,F,U; output [7:0]J; assign J=P ~& F ~& U; endmodule
module NAND_3(inp_T,inp_E,inp_N,out_C); input [3:0]inp_T,inp_E,inp_N; output [3:0]out_C; assign out_C=inp_T ~& inp_E ~& inp_N; endmodule
module NAND_1(B,L,J,I); input [1:0]B,L,J; output [1:0]I; assign I=B ~& L ~& J; endmodule
module NAND_1(inp_G,inp_E,out_Z); input [1:0]inp_G,inp_E; output [1:0]out_Z; assign out_Z=inp_G ~& inp_E
module NAND_4(Y,U,C); input [4:0]Y,U; output [4:0]C; assign C=Y ~& U
module NAND_5(inp_F,inp_K,out_B); input [5:0]inp_F,inp_K; output [5:0]out_B; assign out_B=inp_F ~& inp_K; endmodule
module NAND_6(D,V,U,J); input [6:0]D,V,U; output [6:0]J; assign J=D ~& V ~& U; endmodule
module NAND_3(K,P,G); input [3:0]K,P; output [3:0]G; assign G=K ~& P; endmodule
module NAND_4(K,S,A); input [4:0]K,S; output [4:0]A; assign A=K ~& S
module NAND_6(A,T,J); input [6:0]A,T; output [6:0]J; assign J=A ~& T
module NAND_5(N,D,Y,R); input [5:0]N,D,Y; output [5:0]R; assign R=N ~& D ~& Y; endmodule
module NAND_4(J,D,E); input [4:0]J,D; output [4:0]E; assign E=J ~& D
module NAND_5(J,S,K); input [5:0]J,S; output [5:0]K; assign K=J ~& S
module NAND_2(W,V,Y); input [2:0]W,V; output [2:0]Y; assign Y=W ~& V
module NAND_6(inp_H,inp_K,out_M); input [6:0]inp_H,inp_K; output [6:0]out_M; assign out_M=inp_H ~& inp_K; endmodule
module NAND_6(inp_I,inp_C,inp_X,out_T); input [6:0]inp_I,inp_C,inp_X; output [6:0]out_T; assign out_T=inp_I ~& inp_C ~& inp_X
module NAND_2(K,I,O); input [2:0]K,I; output [2:0]O; assign O=K ~& I
module NAND_5(Q,B,R); input [5:0]Q,B; output [5:0]R; assign R=Q ~& B; endmodule
module NAND_2(C,Q,J,U); input [2:0]C,Q,J; output [2:0]U; assign U=C ~& Q ~& J
module NAND_3(inp_B,inp_K,out_R); input [3:0]inp_B,inp_K; output [3:0]out_R; assign out_R=inp_B ~& inp_K; endmodule
module NAND_5(D,M,C,G); input [5:0]D,M,C; output [5:0]G; assign G=D ~& M ~& C; endmodule
module NAND_3(inp_V,inp_C,out_Y); input [3:0]inp_V,inp_C; output [3:0]out_Y; assign out_Y=inp_V ~& inp_C
module NAND_3(inp_Y,inp_R,inp_F,out_R); input [3:0]inp_Y,inp_R,inp_F; output [3:0]out_R; assign out_R=inp_Y ~& inp_R ~& inp_F
module NAND_4(inp_I,inp_B,inp_N,out_G); input [4:0]inp_I,inp_B,inp_N; output [4:0]out_G; assign out_G=inp_I ~& inp_B ~& inp_N; endmodule
module NAND_7(inp_G,inp_O,inp_J,out_I); input [7:0]inp_G,inp_O,inp_J; output [7:0]out_I; assign out_I=inp_G ~& inp_O ~& inp_J; endmodule
module NAND_4(inp_X,inp_D,inp_Z,out_O); input [4:0]inp_X,inp_D,inp_Z; output [4:0]out_O; assign out_O=inp_X ~& inp_D ~& inp_Z; endmodule
module NAND_2(inp_V,inp_D,inp_E,out_E); input [2:0]inp_V,inp_D,inp_E; output [2:0]out_E; assign out_E=inp_V ~& inp_D ~& inp_E; endmodule
module NAND_7(Y,V,B,S); input [7:0]Y,V,B; output [7:0]S; assign S=Y ~& V ~& B
module NAND_7(inp_L,inp_J,inp_B,out_Y); input [7:0]inp_L,inp_J,inp_B; output [7:0]out_Y; assign out_Y=inp_L ~& inp_J ~& inp_B
module NAND_1(inp_I,inp_O,inp_B,out_Z); input [1:0]inp_I,inp_O,inp_B; output [1:0]out_Z; assign out_Z=inp_I ~& inp_O ~& inp_B
module NAND_6(R,E,V); input [6:0]R,E; output [6:0]V; assign V=R ~& E
module NAND_6(inp_Q,inp_U,inp_E,out_G); input [6:0]inp_Q,inp_U,inp_E; output [6:0]out_G; assign out_G=inp_Q ~& inp_U ~& inp_E
module NAND_5(C,M,E); input [5:0]C,M; output [5:0]E; assign E=C ~& M; endmodule
module NAND_1(Y,X,I,O); input [1:0]Y,X,I; output [1:0]O; assign O=Y ~& X ~& I
module NAND_3(L,O,A); input [3:0]L,O; output [3:0]A; assign A=L ~& O; endmodule
module NAND_4(inp_B,inp_Y,inp_M,out_E); input [4:0]inp_B,inp_Y,inp_M; output [4:0]out_E; assign out_E=inp_B ~& inp_Y ~& inp_M; endmodule
module NAND_7(I,X,J); input [7:0]I,X; output [7:0]J; assign J=I ~& X
module NAND_3(F,C,E); input [3:0]F,C; output [3:0]E; assign E=F ~& C; endmodule
module NAND_4(inp_X,inp_J,inp_G,out_J); input [4:0]inp_X,inp_J,inp_G; output [4:0]out_J; assign out_J=inp_X ~& inp_J ~& inp_G; endmodule
module NAND_7(H,K,A); input [7:0]H,K; output [7:0]A; assign A=H ~& K
module NAND_1(inp_B,inp_R,out_E); input [1:0]inp_B,inp_R; output [1:0]out_E; assign out_E=inp_B ~& inp_R; endmodule
module NAND_3(E,J,F,Z); input [3:0]E,J,F; output [3:0]Z; assign Z=E ~& J ~& F; endmodule
module NAND_2(inp_V,inp_T,out_N); input [2:0]inp_V,inp_T; output [2:0]out_N; assign out_N=inp_V ~& inp_T; endmodule
module NAND_2(W,S,F); input [2:0]W,S; output [2:0]F; assign F=W ~& S
module NAND_6(D,L,E); input [6:0]D,L; output [6:0]E; assign E=D ~& L
module NAND_5(Q,E,R); input [5:0]Q,E; output [5:0]R; assign R=Q ~& E; endmodule
module NAND_6(inp_W,inp_K,inp_N,out_D); input [6:0]inp_W,inp_K,inp_N; output [6:0]out_D; assign out_D=inp_W ~& inp_K ~& inp_N; endmodule
module NAND_1(inp_O,inp_N,inp_E,out_C); input [1:0]inp_O,inp_N,inp_E; output [1:0]out_C; assign out_C=inp_O ~& inp_N ~& inp_E; endmodule
module NAND_7(J,S,D,W); input [7:0]J,S,D; output [7:0]W; assign W=J ~& S ~& D; endmodule
module NAND_3(inp_L,inp_Y,out_Y); input [3:0]inp_L,inp_Y; output [3:0]out_Y; assign out_Y=inp_L ~& inp_Y
module NAND_3(inp_X,inp_J,inp_O,out_D); input [3:0]inp_X,inp_J,inp_O; output [3:0]out_D; assign out_D=inp_X ~& inp_J ~& inp_O
module NAND_3(H,E,R); input [3:0]H,E; output [3:0]R; assign R=H ~& E
module NAND_1(N,P,D,M); input [1:0]N,P,D; output [1:0]M; assign M=N ~& P ~& D; endmodule
module NAND_7(O,D,I); input [7:0]O,D; output [7:0]I; assign I=O ~& D
module NAND_3(A,D,C); input [3:0]A,D; output [3:0]C; assign C=A ~& D
module NAND_2(N,W,M,X); input [2:0]N,W,M; output [2:0]X; assign X=N ~& W ~& M
module NAND_6(Q,T,K); input [6:0]Q,T; output [6:0]K; assign K=Q ~& T; endmodule
module NAND_4(inp_A,inp_F,out_Y); input [4:0]inp_A,inp_F; output [4:0]out_Y; assign out_Y=inp_A ~& inp_F; endmodule
module NAND_4(I,R,N); input [4:0]I,R; output [4:0]N; assign N=I ~& R
module NAND_1(Z,T,H); input [1:0]Z,T; output [1:0]H; assign H=Z ~& T
module NAND_5(inp_X,inp_M,out_Z); input [5:0]inp_X,inp_M; output [5:0]out_Z; assign out_Z=inp_X ~& inp_M; endmodule
module NAND_6(I,T,J); input [6:0]I,T; output [6:0]J; assign J=I ~& T
module NAND_4(O,L,G,M); input [4:0]O,L,G; output [4:0]M; assign M=O ~& L ~& G; endmodule
module NAND_5(inp_N,inp_K,out_P); input [5:0]inp_N,inp_K; output [5:0]out_P; assign out_P=inp_N ~& inp_K
module NAND_4(W,B,N); input [4:0]W,B; output [4:0]N; assign N=W ~& B
module NAND_1(E,Z,M,D); input [1:0]E,Z,M; output [1:0]D; assign D=E ~& Z ~& M; endmodule
module NAND_6(U,H,X,Z); input [6:0]U,H,X; output [6:0]Z; assign Z=U ~& H ~& X; endmodule
module NAND_4(T,I,O,H); input [4:0]T,I,O; output [4:0]H; assign H=T ~& I ~& O
module NAND_1(X,R,B); input [1:0]X,R; output [1:0]B; assign B=X ~& R
module NAND_2(C,E,U,O); input [2:0]C,E,U; output [2:0]O; assign O=C ~& E ~& U
module NAND_6(E,R,A); input [6:0]E,R; output [6:0]A; assign A=E ~& R
module NAND_6(inp_O,inp_N,out_W); input [6:0]inp_O,inp_N; output [6:0]out_W; assign out_W=inp_O ~& inp_N; endmodule
module NAND_4(D,P,W); input [4:0]D,P; output [4:0]W; assign W=D ~& P; endmodule
module NAND_1(inp_V,inp_I,out_I); input [1:0]inp_V,inp_I; output [1:0]out_I; assign out_I=inp_V ~& inp_I; endmodule
module NAND_4(inp_L,inp_U,inp_P,out_W); input [4:0]inp_L,inp_U,inp_P; output [4:0]out_W; assign out_W=inp_L ~& inp_U ~& inp_P
module NAND_4(N,B,K,A); input [4:0]N,B,K; output [4:0]A; assign A=N ~& B ~& K
module NAND_6(U,Q,S,L); input [6:0]U,Q,S; output [6:0]L; assign L=U ~& Q ~& S
module NAND_3(H,K,U); input [3:0]H,K; output [3:0]U; assign U=H ~& K; endmodule
module NAND_4(inp_T,inp_V,inp_S,out_R); input [4:0]inp_T,inp_V,inp_S; output [4:0]out_R; assign out_R=inp_T ~& inp_V ~& inp_S
module NAND_3(inp_Z,inp_M,out_Z); input [3:0]inp_Z,inp_M; output [3:0]out_Z; assign out_Z=inp_Z ~& inp_M
module NAND_6(Q,I,R,A); input [6:0]Q,I,R; output [6:0]A; assign A=Q ~& I ~& R
module NAND_2(inp_M,inp_Y,inp_L,out_H); input [2:0]inp_M,inp_Y,inp_L; output [2:0]out_H; assign out_H=inp_M ~& inp_Y ~& inp_L; endmodule
module NAND_1(M,J,O,V); input [1:0]M,J,O; output [1:0]V; assign V=M ~& J ~& O; endmodule
module NAND_5(E,J,P); input [5:0]E,J; output [5:0]P; assign P=E ~& J
module NAND_1(inp_P,inp_E,out_U); input [1:0]inp_P,inp_E; output [1:0]out_U; assign out_U=inp_P ~& inp_E
module NAND_5(S,T,O); input [5:0]S,T; output [5:0]O; assign O=S ~& T; endmodule
module NAND_2(inp_H,inp_G,out_H); input [2:0]inp_H,inp_G; output [2:0]out_H; assign out_H=inp_H ~& inp_G; endmodule
module NAND_3(I,V,U); input [3:0]I,V; output [3:0]U; assign U=I ~& V
module NAND_4(G,P,R,C); input [4:0]G,P,R; output [4:0]C; assign C=G ~& P ~& R
module NAND_2(inp_U,inp_H,out_J); input [2:0]inp_U,inp_H; output [2:0]out_J; assign out_J=inp_U ~& inp_H
module NAND_5(U,I,Y); input [5:0]U,I; output [5:0]Y; assign Y=U ~& I
module NAND_1(inp_N,inp_F,inp_I,out_E); input [1:0]inp_N,inp_F,inp_I; output [1:0]out_E; assign out_E=inp_N ~& inp_F ~& inp_I; endmodule
module NAND_3(inp_Z,inp_I,out_O); input [3:0]inp_Z,inp_I; output [3:0]out_O; assign out_O=inp_Z ~& inp_I; endmodule
module NAND_3(T,J,L,C); input [3:0]T,J,L; output [3:0]C; assign C=T ~& J ~& L; endmodule
module NAND_7(inp_V,inp_K,inp_J,out_B); input [7:0]inp_V,inp_K,inp_J; output [7:0]out_B; assign out_B=inp_V ~& inp_K ~& inp_J; endmodule
module NAND_2(inp_M,inp_X,inp_E,out_I); input [2:0]inp_M,inp_X,inp_E; output [2:0]out_I; assign out_I=inp_M ~& inp_X ~& inp_E
module NAND_6(inp_I,inp_N,out_A); input [6:0]inp_I,inp_N; output [6:0]out_A; assign out_A=inp_I ~& inp_N; endmodule
module NAND_2(T,B,N); input [2:0]T,B; output [2:0]N; assign N=T ~& B; endmodule
module NAND_5(inp_D,inp_N,out_L); input [5:0]inp_D,inp_N; output [5:0]out_L; assign out_L=inp_D ~& inp_N; endmodule
module NAND_5(inp_T,inp_X,inp_A,out_U); input [5:0]inp_T,inp_X,inp_A; output [5:0]out_U; assign out_U=inp_T ~& inp_X ~& inp_A
module NAND_4(L,Q,H); input [4:0]L,Q; output [4:0]H; assign H=L ~& Q; endmodule
module NAND_7(inp_J,inp_B,inp_Z,out_L); input [7:0]inp_J,inp_B,inp_Z; output [7:0]out_L; assign out_L=inp_J ~& inp_B ~& inp_Z; endmodule
module NAND_2(L,U,J,Z); input [2:0]L,U,J; output [2:0]Z; assign Z=L ~& U ~& J; endmodule
module NAND_3(G,X,C); input [3:0]G,X; output [3:0]C; assign C=G ~& X
module NAND_6(H,V,N,K); input [6:0]H,V,N; output [6:0]K; assign K=H ~& V ~& N
module NAND_5(C,N,P,J); input [5:0]C,N,P; output [5:0]J; assign J=C ~& N ~& P
module NAND_4(inp_F,inp_S,inp_O,out_J); input [4:0]inp_F,inp_S,inp_O; output [4:0]out_J; assign out_J=inp_F ~& inp_S ~& inp_O; endmodule
module NAND_5(G,Y,H,L); input [5:0]G,Y,H; output [5:0]L; assign L=G ~& Y ~& H; endmodule
module NAND_1(L,N,Q); input [1:0]L,N; output [1:0]Q; assign Q=L ~& N
module NAND_3(U,J,L); input [3:0]U,J; output [3:0]L; assign L=U ~& J
module NAND_5(Q,N,I,X); input [5:0]Q,N,I; output [5:0]X; assign X=Q ~& N ~& I; endmodule
module NAND_5(O,Z,K,G); input [5:0]O,Z,K; output [5:0]G; assign G=O ~& Z ~& K; endmodule
module NAND_3(Z,J,K,D); input [3:0]Z,J,K; output [3:0]D; assign D=Z ~& J ~& K; endmodule
module NAND_4(inp_M,inp_N,inp_L,out_O); input [4:0]inp_M,inp_N,inp_L; output [4:0]out_O; assign out_O=inp_M ~& inp_N ~& inp_L; endmodule
module NAND_7(A,Y,F); input [7:0]A,Y; output [7:0]F; assign F=A ~& Y; endmodule
module NAND_5(inp_M,inp_D,out_F); input [5:0]inp_M,inp_D; output [5:0]out_F; assign out_F=inp_M ~& inp_D
module NAND_1(J,R,C); input [1:0]J,R; output [1:0]C; assign C=J ~& R
module NAND_1(A,O,G); input [1:0]A,O; output [1:0]G; assign G=A ~& O; endmodule
module NAND_5(B,T,Z); input [5:0]B,T; output [5:0]Z; assign Z=B ~& T; endmodule
module NAND_4(I,X,B,L); input [4:0]I,X,B; output [4:0]L; assign L=I ~& X ~& B; endmodule
module NAND_4(Z,F,T); input [4:0]Z,F; output [4:0]T; assign T=Z ~& F; endmodule
module NAND_6(V,T,I,O); input [6:0]V,T,I; output [6:0]O; assign O=V ~& T ~& I; endmodule
module NAND_4(inp_X,inp_T,out_O); input [4:0]inp_X,inp_T; output [4:0]out_O; assign out_O=inp_X ~& inp_T
module NAND_5(inp_V,inp_G,out_Y); input [5:0]inp_V,inp_G; output [5:0]out_Y; assign out_Y=inp_V ~& inp_G; endmodule
module NAND_7(Q,O,K,R); input [7:0]Q,O,K; output [7:0]R; assign R=Q ~& O ~& K; endmodule
module NAND_6(T,O,Q); input [6:0]T,O; output [6:0]Q; assign Q=T ~& O; endmodule
module NAND_2(V,Y,G); input [2:0]V,Y; output [2:0]G; assign G=V ~& Y
module NAND_6(inp_C,inp_N,out_L); input [6:0]inp_C,inp_N; output [6:0]out_L; assign out_L=inp_C ~& inp_N; endmodule
module NAND_1(inp_W,inp_X,out_J); input [1:0]inp_W,inp_X; output [1:0]out_J; assign out_J=inp_W ~& inp_X; endmodule
module NAND_6(inp_N,inp_L,out_E); input [6:0]inp_N,inp_L; output [6:0]out_E; assign out_E=inp_N ~& inp_L
module NAND_7(inp_K,inp_A,out_J); input [7:0]inp_K,inp_A; output [7:0]out_J; assign out_J=inp_K ~& inp_A; endmodule
module NAND_5(inp_B,inp_R,out_A); input [5:0]inp_B,inp_R; output [5:0]out_A; assign out_A=inp_B ~& inp_R
module NAND_7(inp_G,inp_M,out_P); input [7:0]inp_G,inp_M; output [7:0]out_P; assign out_P=inp_G ~& inp_M
module NAND_6(inp_M,inp_R,out_T); input [6:0]inp_M,inp_R; output [6:0]out_T; assign out_T=inp_M ~& inp_R; endmodule
module NAND_4(G,W,C); input [4:0]G,W; output [4:0]C; assign C=G ~& W
module NAND_1(inp_C,inp_W,out_R); input [1:0]inp_C,inp_W; output [1:0]out_R; assign out_R=inp_C ~& inp_W; endmodule
module NAND_6(inp_X,inp_K,out_R); input [6:0]inp_X,inp_K; output [6:0]out_R; assign out_R=inp_X ~& inp_K
module NAND_2(inp_C,inp_L,inp_P,out_K); input [2:0]inp_C,inp_L,inp_P; output [2:0]out_K; assign out_K=inp_C ~& inp_L ~& inp_P
module NAND_1(Z,V,J); input [1:0]Z,V; output [1:0]J; assign J=Z ~& V
module NAND_5(V,X,D,J); input [5:0]V,X,D; output [5:0]J; assign J=V ~& X ~& D; endmodule
module NAND_5(inp_B,inp_A,out_X); input [5:0]inp_B,inp_A; output [5:0]out_X; assign out_X=inp_B ~& inp_A; endmodule
module NAND_1(K,A,N); input [1:0]K,A; output [1:0]N; assign N=K ~& A; endmodule
module NAND_7(P,D,Z); input [7:0]P,D; output [7:0]Z; assign Z=P ~& D; endmodule
module NAND_6(O,G,Q,W); input [6:0]O,G,Q; output [6:0]W; assign W=O ~& G ~& Q
module NAND_5(inp_Z,inp_C,out_H); input [5:0]inp_Z,inp_C; output [5:0]out_H; assign out_H=inp_Z ~& inp_C
module NAND_7(A,L,J,X); input [7:0]A,L,J; output [7:0]X; assign X=A ~& L ~& J
module NAND_1(X,F,Q,O); input [1:0]X,F,Q; output [1:0]O; assign O=X ~& F ~& Q
module NAND_4(inp_S,inp_A,out_X); input [4:0]inp_S,inp_A; output [4:0]out_X; assign out_X=inp_S ~& inp_A; endmodule
module NAND_6(A,J,R); input [6:0]A,J; output [6:0]R; assign R=A ~& J; endmodule
module NAND_3(inp_U,inp_G,inp_V,out_B); input [3:0]inp_U,inp_G,inp_V; output [3:0]out_B; assign out_B=inp_U ~& inp_G ~& inp_V; endmodule
module NAND_4(inp_L,inp_R,out_U); input [4:0]inp_L,inp_R; output [4:0]out_U; assign out_U=inp_L ~& inp_R; endmodule
module NAND_6(inp_A,inp_X,inp_R,out_G); input [6:0]inp_A,inp_X,inp_R; output [6:0]out_G; assign out_G=inp_A ~& inp_X ~& inp_R; endmodule
module NAND_4(inp_Z,inp_G,inp_J,out_L); input [4:0]inp_Z,inp_G,inp_J; output [4:0]out_L; assign out_L=inp_Z ~& inp_G ~& inp_J; endmodule
module NAND_2(inp_R,inp_Y,out_K); input [2:0]inp_R,inp_Y; output [2:0]out_K; assign out_K=inp_R ~& inp_Y; endmodule
module NAND_7(T,Z,J,A); input [7:0]T,Z,J; output [7:0]A; assign A=T ~& Z ~& J
module NAND_6(I,Z,T,D); input [6:0]I,Z,T; output [6:0]D; assign D=I ~& Z ~& T; endmodule
module NAND_4(inp_G,inp_Y,out_P); input [4:0]inp_G,inp_Y; output [4:0]out_P; assign out_P=inp_G ~& inp_Y; endmodule
module NAND_7(Q,A,I); input [7:0]Q,A; output [7:0]I; assign I=Q ~& A; endmodule
module NAND_2(inp_Q,inp_Z,inp_J,out_Q); input [2:0]inp_Q,inp_Z,inp_J; output [2:0]out_Q; assign out_Q=inp_Q ~& inp_Z ~& inp_J; endmodule
module NAND_1(S,T,Y,P); input [1:0]S,T,Y; output [1:0]P; assign P=S ~& T ~& Y
module NAND_2(N,Z,L); input [2:0]N,Z; output [2:0]L; assign L=N ~& Z; endmodule
module NAND_2(inp_V,inp_U,out_N); input [2:0]inp_V,inp_U; output [2:0]out_N; assign out_N=inp_V ~& inp_U; endmodule
module NAND_4(U,S,I); input [4:0]U,S; output [4:0]I; assign I=U ~& S
module NAND_7(inp_B,inp_I,inp_V,out_T); input [7:0]inp_B,inp_I,inp_V; output [7:0]out_T; assign out_T=inp_B ~& inp_I ~& inp_V
module NAND_7(inp_L,inp_F,out_S); input [7:0]inp_L,inp_F; output [7:0]out_S; assign out_S=inp_L ~& inp_F; endmodule
module NAND_7(M,V,C,X); input [7:0]M,V,C; output [7:0]X; assign X=M ~& V ~& C
module NAND_1(inp_O,inp_G,inp_Q,out_U); input [1:0]inp_O,inp_G,inp_Q; output [1:0]out_U; assign out_U=inp_O ~& inp_G ~& inp_Q; endmodule
module NAND_2(inp_M,inp_Z,out_A); input [2:0]inp_M,inp_Z; output [2:0]out_A; assign out_A=inp_M ~& inp_Z; endmodule
module NAND_3(T,Z,K); input [3:0]T,Z; output [3:0]K; assign K=T ~& Z
module NAND_5(M,D,E); input [5:0]M,D; output [5:0]E; assign E=M ~& D; endmodule
module NAND_6(M,U,X,N); input [6:0]M,U,X; output [6:0]N; assign N=M ~& U ~& X
module NAND_2(inp_K,inp_C,inp_S,out_R); input [2:0]inp_K,inp_C,inp_S; output [2:0]out_R; assign out_R=inp_K ~& inp_C ~& inp_S
module NAND_6(J,B,R); input [6:0]J,B; output [6:0]R; assign R=J ~& B; endmodule
module NAND_6(F,D,R,X); input [6:0]F,D,R; output [6:0]X; assign X=F ~& D ~& R; endmodule
module NAND_1(inp_M,inp_W,inp_O,out_H); input [1:0]inp_M,inp_W,inp_O; output [1:0]out_H; assign out_H=inp_M ~& inp_W ~& inp_O
module NAND_3(inp_L,inp_K,inp_T,out_X); input [3:0]inp_L,inp_K,inp_T; output [3:0]out_X; assign out_X=inp_L ~& inp_K ~& inp_T
module NAND_1(I,S,O,F); input [1:0]I,S,O; output [1:0]F; assign F=I ~& S ~& O; endmodule
module NAND_5(inp_L,inp_D,inp_G,out_M); input [5:0]inp_L,inp_D,inp_G; output [5:0]out_M; assign out_M=inp_L ~& inp_D ~& inp_G
module NAND_3(X,B,F); input [3:0]X,B; output [3:0]F; assign F=X ~& B
module NAND_6(U,G,D); input [6:0]U,G; output [6:0]D; assign D=U ~& G
module NAND_4(inp_Q,inp_B,out_R); input [4:0]inp_Q,inp_B; output [4:0]out_R; assign out_R=inp_Q ~& inp_B; endmodule
module NAND_7(inp_F,inp_C,inp_K,out_B); input [7:0]inp_F,inp_C,inp_K; output [7:0]out_B; assign out_B=inp_F ~& inp_C ~& inp_K; endmodule
module NAND_1(inp_Y,inp_E,inp_Q,out_X); input [1:0]inp_Y,inp_E,inp_Q; output [1:0]out_X; assign out_X=inp_Y ~& inp_E ~& inp_Q
module NAND_5(N,Y,G,L); input [5:0]N,Y,G; output [5:0]L; assign L=N ~& Y ~& G
module NAND_5(inp_F,inp_Z,out_D); input [5:0]inp_F,inp_Z; output [5:0]out_D; assign out_D=inp_F ~& inp_Z
module NAND_4(F,N,L); input [4:0]F,N; output [4:0]L; assign L=F ~& N; endmodule
module NAND_1(J,I,R); input [1:0]J,I; output [1:0]R; assign R=J ~& I
module NAND_6(inp_X,inp_B,out_D); input [6:0]inp_X,inp_B; output [6:0]out_D; assign out_D=inp_X ~& inp_B
module NAND_7(T,E,B,J); input [7:0]T,E,B; output [7:0]J; assign J=T ~& E ~& B; endmodule
module NAND_6(inp_N,inp_I,out_G); input [6:0]inp_N,inp_I; output [6:0]out_G; assign out_G=inp_N ~& inp_I
module NAND_6(E,Q,Z,A); input [6:0]E,Q,Z; output [6:0]A; assign A=E ~& Q ~& Z
module NAND_6(inp_U,inp_C,inp_P,out_Q); input [6:0]inp_U,inp_C,inp_P; output [6:0]out_Q; assign out_Q=inp_U ~& inp_C ~& inp_P
module NAND_4(B,P,J); input [4:0]B,P; output [4:0]J; assign J=B ~& P; endmodule
module NAND_3(inp_Z,inp_M,out_W); input [3:0]inp_Z,inp_M; output [3:0]out_W; assign out_W=inp_Z ~& inp_M
module NAND_3(inp_Y,inp_T,out_K); input [3:0]inp_Y,inp_T; output [3:0]out_K; assign out_K=inp_Y ~& inp_T
module NAND_7(D,G,O,O); input [7:0]D,G,O; output [7:0]O; assign O=D ~& G ~& O
module NAND_5(G,R,Q); input [5:0]G,R; output [5:0]Q; assign Q=G ~& R
module NAND_5(U,F,R,N); input [5:0]U,F,R; output [5:0]N; assign N=U ~& F ~& R
module NAND_4(inp_Z,inp_P,out_C); input [4:0]inp_Z,inp_P; output [4:0]out_C; assign out_C=inp_Z ~& inp_P
module NAND_4(inp_D,inp_A,inp_L,out_W); input [4:0]inp_D,inp_A,inp_L; output [4:0]out_W; assign out_W=inp_D ~& inp_A ~& inp_L; endmodule
module NAND_1(E,R,S); input [1:0]E,R; output [1:0]S; assign S=E ~& R; endmodule
module NAND_7(W,S,Y,Z); input [7:0]W,S,Y; output [7:0]Z; assign Z=W ~& S ~& Y; endmodule
module NAND_7(U,K,O); input [7:0]U,K; output [7:0]O; assign O=U ~& K; endmodule
module NAND_4(inp_Q,inp_D,inp_G,out_G); input [4:0]inp_Q,inp_D,inp_G; output [4:0]out_G; assign out_G=inp_Q ~& inp_D ~& inp_G
module NAND_2(R,O,S); input [2:0]R,O; output [2:0]S; assign S=R ~& O
module NAND_5(inp_D,inp_J,inp_O,out_W); input [5:0]inp_D,inp_J,inp_O; output [5:0]out_W; assign out_W=inp_D ~& inp_J ~& inp_O; endmodule
module NAND_2(inp_A,inp_X,out_T); input [2:0]inp_A,inp_X; output [2:0]out_T; assign out_T=inp_A ~& inp_X; endmodule
module NAND_1(L,N,T); input [1:0]L,N; output [1:0]T; assign T=L ~& N
module NAND_7(B,C,X); input [7:0]B,C; output [7:0]X; assign X=B ~& C
module NAND_4(O,L,O); input [4:0]O,L; output [4:0]O; assign O=O ~& L
module NAND_1(O,N,V); input [1:0]O,N; output [1:0]V; assign V=O ~& N; endmodule
module NAND_5(P,J,O,B); input [5:0]P,J,O; output [5:0]B; assign B=P ~& J ~& O; endmodule
module NAND_5(inp_G,inp_Y,inp_N,out_U); input [5:0]inp_G,inp_Y,inp_N; output [5:0]out_U; assign out_U=inp_G ~& inp_Y ~& inp_N; endmodule
module NAND_2(V,K,L); input [2:0]V,K; output [2:0]L; assign L=V ~& K; endmodule
module NAND_3(inp_N,inp_G,inp_V,out_W); input [3:0]inp_N,inp_G,inp_V; output [3:0]out_W; assign out_W=inp_N ~& inp_G ~& inp_V
module NAND_1(inp_I,inp_S,inp_F,out_O); input [1:0]inp_I,inp_S,inp_F; output [1:0]out_O; assign out_O=inp_I ~& inp_S ~& inp_F; endmodule
module NAND_5(inp_T,inp_Y,out_Y); input [5:0]inp_T,inp_Y; output [5:0]out_Y; assign out_Y=inp_T ~& inp_Y
module NAND_4(M,P,Z,V); input [4:0]M,P,Z; output [4:0]V; assign V=M ~& P ~& Z; endmodule
module NAND_6(M,H,D); input [6:0]M,H; output [6:0]D; assign D=M ~& H
module NAND_3(inp_T,inp_V,out_D); input [3:0]inp_T,inp_V; output [3:0]out_D; assign out_D=inp_T ~& inp_V; endmodule
module NAND_5(G,E,R); input [5:0]G,E; output [5:0]R; assign R=G ~& E; endmodule
module NAND_7(R,A,Z,O); input [7:0]R,A,Z; output [7:0]O; assign O=R ~& A ~& Z
module NAND_3(S,I,V,X); input [3:0]S,I,V; output [3:0]X; assign X=S ~& I ~& V
module NAND_7(N,Y,R,N); input [7:0]N,Y,R; output [7:0]N; assign N=N ~& Y ~& R; endmodule
module NAND_6(inp_F,inp_V,out_X); input [6:0]inp_F,inp_V; output [6:0]out_X; assign out_X=inp_F ~& inp_V
module NAND_6(inp_I,inp_J,out_W); input [6:0]inp_I,inp_J; output [6:0]out_W; assign out_W=inp_I ~& inp_J; endmodule
module NAND_1(inp_R,inp_I,out_T); input [1:0]inp_R,inp_I; output [1:0]out_T; assign out_T=inp_R ~& inp_I; endmodule
module NAND_1(inp_M,inp_S,inp_U,out_G); input [1:0]inp_M,inp_S,inp_U; output [1:0]out_G; assign out_G=inp_M ~& inp_S ~& inp_U
module NAND_2(inp_P,inp_I,inp_W,out_G); input [2:0]inp_P,inp_I,inp_W; output [2:0]out_G; assign out_G=inp_P ~& inp_I ~& inp_W; endmodule
module NAND_4(inp_R,inp_B,inp_L,out_B); input [4:0]inp_R,inp_B,inp_L; output [4:0]out_B; assign out_B=inp_R ~& inp_B ~& inp_L; endmodule
module NAND_7(A,M,J); input [7:0]A,M; output [7:0]J; assign J=A ~& M
module NAND_4(inp_T,inp_A,inp_U,out_Z); input [4:0]inp_T,inp_A,inp_U; output [4:0]out_Z; assign out_Z=inp_T ~& inp_A ~& inp_U; endmodule
module NAND_3(S,Y,K,M); input [3:0]S,Y,K; output [3:0]M; assign M=S ~& Y ~& K
module NAND_4(W,Q,H); input [4:0]W,Q; output [4:0]H; assign H=W ~& Q; endmodule
module NAND_5(Q,T,S); input [5:0]Q,T; output [5:0]S; assign S=Q ~& T; endmodule
module NAND_1(F,J,Y); input [1:0]F,J; output [1:0]Y; assign Y=F ~& J; endmodule
module NAND_4(W,E,X,R); input [4:0]W,E,X; output [4:0]R; assign R=W ~& E ~& X; endmodule
module NAND_7(L,G,S,U); input [7:0]L,G,S; output [7:0]U; assign U=L ~& G ~& S
module NAND_5(inp_R,inp_A,out_X); input [5:0]inp_R,inp_A; output [5:0]out_X; assign out_X=inp_R ~& inp_A
module NAND_6(inp_B,inp_A,inp_D,out_S); input [6:0]inp_B,inp_A,inp_D; output [6:0]out_S; assign out_S=inp_B ~& inp_A ~& inp_D; endmodule
module NAND_2(inp_P,inp_X,out_K); input [2:0]inp_P,inp_X; output [2:0]out_K; assign out_K=inp_P ~& inp_X; endmodule
module NAND_5(inp_S,inp_W,inp_K,out_F); input [5:0]inp_S,inp_W,inp_K; output [5:0]out_F; assign out_F=inp_S ~& inp_W ~& inp_K
module NAND_1(inp_Z,inp_T,inp_I,out_U); input [1:0]inp_Z,inp_T,inp_I; output [1:0]out_U; assign out_U=inp_Z ~& inp_T ~& inp_I; endmodule
module NAND_5(inp_Q,inp_N,out_L); input [5:0]inp_Q,inp_N; output [5:0]out_L; assign out_L=inp_Q ~& inp_N; endmodule
module NAND_4(B,M,L,G); input [4:0]B,M,L; output [4:0]G; assign G=B ~& M ~& L; endmodule
module NAND_7(inp_J,inp_T,inp_Z,out_U); input [7:0]inp_J,inp_T,inp_Z; output [7:0]out_U; assign out_U=inp_J ~& inp_T ~& inp_Z
module NAND_7(C,X,M); input [7:0]C,X; output [7:0]M; assign M=C ~& X; endmodule
module NAND_3(F,U,I,R); input [3:0]F,U,I; output [3:0]R; assign R=F ~& U ~& I
module NAND_3(P,B,T); input [3:0]P,B; output [3:0]T; assign T=P ~& B
module NAND_1(G,M,F,Z); input [1:0]G,M,F; output [1:0]Z; assign Z=G ~& M ~& F; endmodule
module NAND_6(inp_Z,inp_Y,inp_F,out_T); input [6:0]inp_Z,inp_Y,inp_F; output [6:0]out_T; assign out_T=inp_Z ~& inp_Y ~& inp_F
module NAND_2(N,D,P); input [2:0]N,D; output [2:0]P; assign P=N ~& D
module NAND_5(inp_S,inp_M,out_I); input [5:0]inp_S,inp_M; output [5:0]out_I; assign out_I=inp_S ~& inp_M; endmodule
module NAND_3(inp_Y,inp_F,out_Z); input [3:0]inp_Y,inp_F; output [3:0]out_Z; assign out_Z=inp_Y ~& inp_F; endmodule
module NAND_2(Q,N,C); input [2:0]Q,N; output [2:0]C; assign C=Q ~& N; endmodule
module NAND_2(Z,Y,G,T); input [2:0]Z,Y,G; output [2:0]T; assign T=Z ~& Y ~& G; endmodule
module NAND_6(S,H,V); input [6:0]S,H; output [6:0]V; assign V=S ~& H; endmodule
module NAND_5(N,S,O); input [5:0]N,S; output [5:0]O; assign O=N ~& S
module NAND_6(inp_W,inp_Z,out_O); input [6:0]inp_W,inp_Z; output [6:0]out_O; assign out_O=inp_W ~& inp_Z; endmodule
module NAND_7(F,C,Z,F); input [7:0]F,C,Z; output [7:0]F; assign F=F ~& C ~& Z
module NAND_1(inp_I,inp_N,out_B); input [1:0]inp_I,inp_N; output [1:0]out_B; assign out_B=inp_I ~& inp_N; endmodule
module NAND_2(inp_K,inp_G,out_W); input [2:0]inp_K,inp_G; output [2:0]out_W; assign out_W=inp_K ~& inp_G
module NAND_5(inp_N,inp_S,out_E); input [5:0]inp_N,inp_S; output [5:0]out_E; assign out_E=inp_N ~& inp_S
module NAND_1(S,K,R); input [1:0]S,K; output [1:0]R; assign R=S ~& K; endmodule
module NAND_6(inp_M,inp_N,out_G); input [6:0]inp_M,inp_N; output [6:0]out_G; assign out_G=inp_M ~& inp_N; endmodule
module NAND_3(inp_V,inp_R,out_I); input [3:0]inp_V,inp_R; output [3:0]out_I; assign out_I=inp_V ~& inp_R; endmodule
module NAND_4(X,K,H); input [4:0]X,K; output [4:0]H; assign H=X ~& K
module NAND_5(inp_T,inp_L,inp_Q,out_Q); input [5:0]inp_T,inp_L,inp_Q; output [5:0]out_Q; assign out_Q=inp_T ~& inp_L ~& inp_Q
module NAND_7(inp_E,inp_W,out_U); input [7:0]inp_E,inp_W; output [7:0]out_U; assign out_U=inp_E ~& inp_W; endmodule
module NAND_6(inp_Z,inp_Y,inp_K,out_Y); input [6:0]inp_Z,inp_Y,inp_K; output [6:0]out_Y; assign out_Y=inp_Z ~& inp_Y ~& inp_K
module NAND_2(Q,R,X,D); input [2:0]Q,R,X; output [2:0]D; assign D=Q ~& R ~& X; endmodule
module NAND_5(inp_W,inp_P,out_N); input [5:0]inp_W,inp_P; output [5:0]out_N; assign out_N=inp_W ~& inp_P
module NAND_2(M,R,P); input [2:0]M,R; output [2:0]P; assign P=M ~& R
module NAND_6(inp_A,inp_W,out_U); input [6:0]inp_A,inp_W; output [6:0]out_U; assign out_U=inp_A ~& inp_W; endmodule
module NAND_5(E,J,D,T); input [5:0]E,J,D; output [5:0]T; assign T=E ~& J ~& D; endmodule
module NAND_3(C,U,F); input [3:0]C,U; output [3:0]F; assign F=C ~& U; endmodule
module NAND_2(inp_L,inp_E,inp_M,out_C); input [2:0]inp_L,inp_E,inp_M; output [2:0]out_C; assign out_C=inp_L ~& inp_E ~& inp_M
module NAND_6(inp_H,inp_O,out_G); input [6:0]inp_H,inp_O; output [6:0]out_G; assign out_G=inp_H ~& inp_O
module NAND_3(inp_J,inp_U,inp_E,out_Y); input [3:0]inp_J,inp_U,inp_E; output [3:0]out_Y; assign out_Y=inp_J ~& inp_U ~& inp_E
module NAND_3(T,W,B,U); input [3:0]T,W,B; output [3:0]U; assign U=T ~& W ~& B
module NAND_4(R,A,G,K); input [4:0]R,A,G; output [4:0]K; assign K=R ~& A ~& G
module NAND_6(inp_Z,inp_J,out_U); input [6:0]inp_Z,inp_J; output [6:0]out_U; assign out_U=inp_Z ~& inp_J; endmodule
module NAND_6(V,Q,I); input [6:0]V,Q; output [6:0]I; assign I=V ~& Q; endmodule
module NAND_5(Y,Q,I,J); input [5:0]Y,Q,I; output [5:0]J; assign J=Y ~& Q ~& I; endmodule
module NAND_6(M,S,G); input [6:0]M,S; output [6:0]G; assign G=M ~& S
module NAND_5(inp_Z,inp_A,inp_G,out_K); input [5:0]inp_Z,inp_A,inp_G; output [5:0]out_K; assign out_K=inp_Z ~& inp_A ~& inp_G; endmodule
module NAND_2(inp_S,inp_K,inp_N,out_K); input [2:0]inp_S,inp_K,inp_N; output [2:0]out_K; assign out_K=inp_S ~& inp_K ~& inp_N
module NAND_6(inp_T,inp_B,inp_H,out_N); input [6:0]inp_T,inp_B,inp_H; output [6:0]out_N; assign out_N=inp_T ~& inp_B ~& inp_H
module NAND_6(inp_B,inp_C,out_E); input [6:0]inp_B,inp_C; output [6:0]out_E; assign out_E=inp_B ~& inp_C; endmodule
module NAND_3(inp_M,inp_Y,out_Z); input [3:0]inp_M,inp_Y; output [3:0]out_Z; assign out_Z=inp_M ~& inp_Y
module NAND_6(U,G,F); input [6:0]U,G; output [6:0]F; assign F=U ~& G
module NAND_6(inp_Q,inp_A,out_K); input [6:0]inp_Q,inp_A; output [6:0]out_K; assign out_K=inp_Q ~& inp_A
module NAND_4(Z,W,E); input [4:0]Z,W; output [4:0]E; assign E=Z ~& W; endmodule
module NAND_7(K,A,L); input [7:0]K,A; output [7:0]L; assign L=K ~& A
module NAND_3(inp_R,inp_Q,out_O); input [3:0]inp_R,inp_Q; output [3:0]out_O; assign out_O=inp_R ~& inp_Q; endmodule
module NAND_7(inp_X,inp_D,inp_W,out_P); input [7:0]inp_X,inp_D,inp_W; output [7:0]out_P; assign out_P=inp_X ~& inp_D ~& inp_W
module NAND_2(Q,U,L,F); input [2:0]Q,U,L; output [2:0]F; assign F=Q ~& U ~& L; endmodule
module NAND_2(F,T,G,X); input [2:0]F,T,G; output [2:0]X; assign X=F ~& T ~& G
module NAND_1(L,E,H,J); input [1:0]L,E,H; output [1:0]J; assign J=L ~& E ~& H; endmodule
module NAND_5(inp_F,inp_B,inp_Y,out_B); input [5:0]inp_F,inp_B,inp_Y; output [5:0]out_B; assign out_B=inp_F ~& inp_B ~& inp_Y; endmodule
module NAND_3(inp_T,inp_Y,out_N); input [3:0]inp_T,inp_Y; output [3:0]out_N; assign out_N=inp_T ~& inp_Y
module NAND_7(F,G,L,T); input [7:0]F,G,L; output [7:0]T; assign T=F ~& G ~& L; endmodule
module NAND_7(T,F,U); input [7:0]T,F; output [7:0]U; assign U=T ~& F
module NAND_2(inp_T,inp_G,out_N); input [2:0]inp_T,inp_G; output [2:0]out_N; assign out_N=inp_T ~& inp_G; endmodule
module NAND_4(inp_S,inp_A,inp_H,out_L); input [4:0]inp_S,inp_A,inp_H; output [4:0]out_L; assign out_L=inp_S ~& inp_A ~& inp_H
module NAND_2(inp_L,inp_C,inp_G,out_I); input [2:0]inp_L,inp_C,inp_G; output [2:0]out_I; assign out_I=inp_L ~& inp_C ~& inp_G; endmodule
module NAND_7(Z,E,N,R); input [7:0]Z,E,N; output [7:0]R; assign R=Z ~& E ~& N
module NAND_5(L,C,A); input [5:0]L,C; output [5:0]A; assign A=L ~& C; endmodule
module NAND_3(inp_S,inp_U,out_V); input [3:0]inp_S,inp_U; output [3:0]out_V; assign out_V=inp_S ~& inp_U; endmodule
module NAND_3(V,W,U); input [3:0]V,W; output [3:0]U; assign U=V ~& W
module NAND_7(inp_O,inp_U,out_I); input [7:0]inp_O,inp_U; output [7:0]out_I; assign out_I=inp_O ~& inp_U; endmodule
module NAND_5(J,I,G,V); input [5:0]J,I,G; output [5:0]V; assign V=J ~& I ~& G; endmodule
module NAND_2(inp_A,inp_E,inp_L,out_U); input [2:0]inp_A,inp_E,inp_L; output [2:0]out_U; assign out_U=inp_A ~& inp_E ~& inp_L
module NAND_6(inp_P,inp_O,inp_C,out_N); input [6:0]inp_P,inp_O,inp_C; output [6:0]out_N; assign out_N=inp_P ~& inp_O ~& inp_C
module NAND_5(inp_W,inp_Q,out_T); input [5:0]inp_W,inp_Q; output [5:0]out_T; assign out_T=inp_W ~& inp_Q
module NAND_4(R,L,P); input [4:0]R,L; output [4:0]P; assign P=R ~& L
module NAND_2(P,X,T,B); input [2:0]P,X,T; output [2:0]B; assign B=P ~& X ~& T
module NAND_5(inp_Z,inp_Q,inp_W,out_N); input [5:0]inp_Z,inp_Q,inp_W; output [5:0]out_N; assign out_N=inp_Z ~& inp_Q ~& inp_W
module NAND_7(inp_Q,inp_Z,out_H); input [7:0]inp_Q,inp_Z; output [7:0]out_H; assign out_H=inp_Q ~& inp_Z
module NAND_1(R,J,E,D); input [1:0]R,J,E; output [1:0]D; assign D=R ~& J ~& E
module NAND_1(A,D,Y,N); input [1:0]A,D,Y; output [1:0]N; assign N=A ~& D ~& Y
module NAND_2(inp_B,inp_V,inp_P,out_L); input [2:0]inp_B,inp_V,inp_P; output [2:0]out_L; assign out_L=inp_B ~& inp_V ~& inp_P
module NAND_2(inp_O,inp_S,inp_Q,out_H); input [2:0]inp_O,inp_S,inp_Q; output [2:0]out_H; assign out_H=inp_O ~& inp_S ~& inp_Q
module NAND_4(inp_U,inp_O,out_P); input [4:0]inp_U,inp_O; output [4:0]out_P; assign out_P=inp_U ~& inp_O
module NAND_1(inp_M,inp_V,out_U); input [1:0]inp_M,inp_V; output [1:0]out_U; assign out_U=inp_M ~& inp_V; endmodule
module NAND_4(U,B,V); input [4:0]U,B; output [4:0]V; assign V=U ~& B
module NAND_4(R,H,I); input [4:0]R,H; output [4:0]I; assign I=R ~& H; endmodule
module NAND_6(inp_I,inp_C,inp_Y,out_N); input [6:0]inp_I,inp_C,inp_Y; output [6:0]out_N; assign out_N=inp_I ~& inp_C ~& inp_Y
module NAND_7(H,Q,M); input [7:0]H,Q; output [7:0]M; assign M=H ~& Q
module NAND_5(Y,G,H,N); input [5:0]Y,G,H; output [5:0]N; assign N=Y ~& G ~& H; endmodule
module NAND_3(inp_Q,inp_E,inp_L,out_C); input [3:0]inp_Q,inp_E,inp_L; output [3:0]out_C; assign out_C=inp_Q ~& inp_E ~& inp_L
module NAND_1(M,K,U,Y); input [1:0]M,K,U; output [1:0]Y; assign Y=M ~& K ~& U
module NAND_1(P,W,N); input [1:0]P,W; output [1:0]N; assign N=P ~& W
module NAND_7(Q,K,U,X); input [7:0]Q,K,U; output [7:0]X; assign X=Q ~& K ~& U
module NAND_1(L,E,Q); input [1:0]L,E; output [1:0]Q; assign Q=L ~& E
module NAND_3(X,R,Q,E); input [3:0]X,R,Q; output [3:0]E; assign E=X ~& R ~& Q
module NAND_3(inp_X,inp_F,out_S); input [3:0]inp_X,inp_F; output [3:0]out_S; assign out_S=inp_X ~& inp_F; endmodule
module NAND_5(C,X,W,Q); input [5:0]C,X,W; output [5:0]Q; assign Q=C ~& X ~& W; endmodule
module NAND_1(G,E,K,O); input [1:0]G,E,K; output [1:0]O; assign O=G ~& E ~& K
module NAND_7(L,G,W); input [7:0]L,G; output [7:0]W; assign W=L ~& G
module NAND_4(inp_P,inp_S,inp_O,out_N); input [4:0]inp_P,inp_S,inp_O; output [4:0]out_N; assign out_N=inp_P ~& inp_S ~& inp_O
module NAND_1(inp_K,inp_G,out_P); input [1:0]inp_K,inp_G; output [1:0]out_P; assign out_P=inp_K ~& inp_G; endmodule
module NAND_6(inp_U,inp_X,inp_W,out_N); input [6:0]inp_U,inp_X,inp_W; output [6:0]out_N; assign out_N=inp_U ~& inp_X ~& inp_W; endmodule
module NAND_4(A,J,N,S); input [4:0]A,J,N; output [4:0]S; assign S=A ~& J ~& N
module NAND_1(P,B,U,A); input [1:0]P,B,U; output [1:0]A; assign A=P ~& B ~& U; endmodule
module NAND_2(inp_N,inp_C,out_H); input [2:0]inp_N,inp_C; output [2:0]out_H; assign out_H=inp_N ~& inp_C
module NAND_5(Z,J,W); input [5:0]Z,J; output [5:0]W; assign W=Z ~& J
module NAND_4(inp_M,inp_A,inp_T,out_X); input [4:0]inp_M,inp_A,inp_T; output [4:0]out_X; assign out_X=inp_M ~& inp_A ~& inp_T
module NAND_3(inp_V,inp_H,out_F); input [3:0]inp_V,inp_H; output [3:0]out_F; assign out_F=inp_V ~& inp_H; endmodule
module NAND_2(A,F,X); input [2:0]A,F; output [2:0]X; assign X=A ~& F
module NAND_2(B,D,I,E); input [2:0]B,D,I; output [2:0]E; assign E=B ~& D ~& I
module NAND_3(inp_T,inp_W,out_J); input [3:0]inp_T,inp_W; output [3:0]out_J; assign out_J=inp_T ~& inp_W
module NAND_6(inp_N,inp_T,out_R); input [6:0]inp_N,inp_T; output [6:0]out_R; assign out_R=inp_N ~& inp_T; endmodule
module NAND_6(inp_H,inp_B,inp_I,out_V); input [6:0]inp_H,inp_B,inp_I; output [6:0]out_V; assign out_V=inp_H ~& inp_B ~& inp_I; endmodule
module NAND_2(D,E,S,B); input [2:0]D,E,S; output [2:0]B; assign B=D ~& E ~& S; endmodule
module NAND_2(inp_Q,inp_F,out_P); input [2:0]inp_Q,inp_F; output [2:0]out_P; assign out_P=inp_Q ~& inp_F
module NAND_3(P,A,D,Q); input [3:0]P,A,D; output [3:0]Q; assign Q=P ~& A ~& D
module NAND_5(inp_B,inp_V,out_F); input [5:0]inp_B,inp_V; output [5:0]out_F; assign out_F=inp_B ~& inp_V
module NAND_2(N,U,T,W); input [2:0]N,U,T; output [2:0]W; assign W=N ~& U ~& T; endmodule
module NAND_5(inp_P,inp_X,inp_O,out_U); input [5:0]inp_P,inp_X,inp_O; output [5:0]out_U; assign out_U=inp_P ~& inp_X ~& inp_O
module NAND_4(inp_N,inp_U,inp_Z,out_M); input [4:0]inp_N,inp_U,inp_Z; output [4:0]out_M; assign out_M=inp_N ~& inp_U ~& inp_Z
module NAND_1(inp_R,inp_Y,out_X); input [1:0]inp_R,inp_Y; output [1:0]out_X; assign out_X=inp_R ~& inp_Y
module NAND_2(J,X,C,T); input [2:0]J,X,C; output [2:0]T; assign T=J ~& X ~& C; endmodule
module NAND_7(X,M,P); input [7:0]X,M; output [7:0]P; assign P=X ~& M
module NAND_2(J,S,D,Z); input [2:0]J,S,D; output [2:0]Z; assign Z=J ~& S ~& D
module NAND_4(F,O,N); input [4:0]F,O; output [4:0]N; assign N=F ~& O; endmodule
module NAND_1(inp_A,inp_C,inp_G,out_K); input [1:0]inp_A,inp_C,inp_G; output [1:0]out_K; assign out_K=inp_A ~& inp_C ~& inp_G; endmodule
module NAND_4(T,P,S,V); input [4:0]T,P,S; output [4:0]V; assign V=T ~& P ~& S; endmodule
module NAND_4(D,U,V,Z); input [4:0]D,U,V; output [4:0]Z; assign Z=D ~& U ~& V; endmodule
module NAND_6(E,I,W); input [6:0]E,I; output [6:0]W; assign W=E ~& I; endmodule
module NAND_1(inp_C,inp_Z,inp_F,out_A); input [1:0]inp_C,inp_Z,inp_F; output [1:0]out_A; assign out_A=inp_C ~& inp_Z ~& inp_F; endmodule
module NAND_1(inp_Z,inp_D,out_W); input [1:0]inp_Z,inp_D; output [1:0]out_W; assign out_W=inp_Z ~& inp_D; endmodule
module NAND_1(inp_C,inp_H,out_G); input [1:0]inp_C,inp_H; output [1:0]out_G; assign out_G=inp_C ~& inp_H; endmodule
module NAND_6(I,X,D); input [6:0]I,X; output [6:0]D; assign D=I ~& X
module NAND_5(X,A,R); input [5:0]X,A; output [5:0]R; assign R=X ~& A
module NAND_6(inp_C,inp_Q,out_S); input [6:0]inp_C,inp_Q; output [6:0]out_S; assign out_S=inp_C ~& inp_Q; endmodule
module NAND_4(inp_I,inp_C,out_K); input [4:0]inp_I,inp_C; output [4:0]out_K; assign out_K=inp_I ~& inp_C
module NAND_5(inp_L,inp_G,out_M); input [5:0]inp_L,inp_G; output [5:0]out_M; assign out_M=inp_L ~& inp_G; endmodule
module NAND_7(inp_X,inp_W,inp_K,out_Y); input [7:0]inp_X,inp_W,inp_K; output [7:0]out_Y; assign out_Y=inp_X ~& inp_W ~& inp_K
module NAND_1(inp_G,inp_W,out_B); input [1:0]inp_G,inp_W; output [1:0]out_B; assign out_B=inp_G ~& inp_W
module NAND_7(U,M,W,Y); input [7:0]U,M,W; output [7:0]Y; assign Y=U ~& M ~& W; endmodule
module NAND_3(inp_R,inp_O,out_I); input [3:0]inp_R,inp_O; output [3:0]out_I; assign out_I=inp_R ~& inp_O
module NAND_2(T,B,S,D); input [2:0]T,B,S; output [2:0]D; assign D=T ~& B ~& S; endmodule
module NAND_7(inp_M,inp_K,out_Q); input [7:0]inp_M,inp_K; output [7:0]out_Q; assign out_Q=inp_M ~& inp_K; endmodule
module NAND_6(inp_P,inp_O,inp_Y,out_N); input [6:0]inp_P,inp_O,inp_Y; output [6:0]out_N; assign out_N=inp_P ~& inp_O ~& inp_Y; endmodule
module NAND_5(inp_C,inp_A,out_M); input [5:0]inp_C,inp_A; output [5:0]out_M; assign out_M=inp_C ~& inp_A; endmodule
module NAND_4(V,S,D,N); input [4:0]V,S,D; output [4:0]N; assign N=V ~& S ~& D
module NAND_1(inp_Y,inp_D,inp_V,out_W); input [1:0]inp_Y,inp_D,inp_V; output [1:0]out_W; assign out_W=inp_Y ~& inp_D ~& inp_V; endmodule
module NAND_4(inp_P,inp_I,inp_U,out_R); input [4:0]inp_P,inp_I,inp_U; output [4:0]out_R; assign out_R=inp_P ~& inp_I ~& inp_U; endmodule
module NAND_2(inp_S,inp_Z,out_M); input [2:0]inp_S,inp_Z; output [2:0]out_M; assign out_M=inp_S ~& inp_Z; endmodule
module NAND_5(inp_G,inp_Q,inp_K,out_G); input [5:0]inp_G,inp_Q,inp_K; output [5:0]out_G; assign out_G=inp_G ~& inp_Q ~& inp_K; endmodule
module NAND_5(Q,V,X,W); input [5:0]Q,V,X; output [5:0]W; assign W=Q ~& V ~& X; endmodule
module NAND_2(J,X,F); input [2:0]J,X; output [2:0]F; assign F=J ~& X
module NAND_5(inp_Y,inp_E,out_L); input [5:0]inp_Y,inp_E; output [5:0]out_L; assign out_L=inp_Y ~& inp_E
module NAND_4(F,M,I,C); input [4:0]F,M,I; output [4:0]C; assign C=F ~& M ~& I; endmodule
module NAND_6(inp_R,inp_A,out_C); input [6:0]inp_R,inp_A; output [6:0]out_C; assign out_C=inp_R ~& inp_A
module NAND_3(W,E,A,C); input [3:0]W,E,A; output [3:0]C; assign C=W ~& E ~& A; endmodule
module NAND_7(R,J,Q); input [7:0]R,J; output [7:0]Q; assign Q=R ~& J
module NAND_6(G,C,Y); input [6:0]G,C; output [6:0]Y; assign Y=G ~& C
module NAND_4(I,Y,X); input [4:0]I,Y; output [4:0]X; assign X=I ~& Y; endmodule
module NAND_2(inp_O,inp_T,out_S); input [2:0]inp_O,inp_T; output [2:0]out_S; assign out_S=inp_O ~& inp_T; endmodule
module NAND_1(inp_X,inp_H,inp_F,out_L); input [1:0]inp_X,inp_H,inp_F; output [1:0]out_L; assign out_L=inp_X ~& inp_H ~& inp_F; endmodule
module NAND_7(inp_E,inp_M,out_K); input [7:0]inp_E,inp_M; output [7:0]out_K; assign out_K=inp_E ~& inp_M; endmodule
module NAND_6(F,L,V); input [6:0]F,L; output [6:0]V; assign V=F ~& L
module NAND_3(inp_R,inp_X,out_P); input [3:0]inp_R,inp_X; output [3:0]out_P; assign out_P=inp_R ~& inp_X
module NAND_3(Y,M,H,V); input [3:0]Y,M,H; output [3:0]V; assign V=Y ~& M ~& H; endmodule
module NAND_4(inp_R,inp_Z,out_C); input [4:0]inp_R,inp_Z; output [4:0]out_C; assign out_C=inp_R ~& inp_Z
module NAND_1(inp_K,inp_L,out_T); input [1:0]inp_K,inp_L; output [1:0]out_T; assign out_T=inp_K ~& inp_L; endmodule
module NAND_6(R,O,Z); input [6:0]R,O; output [6:0]Z; assign Z=R ~& O; endmodule
module NAND_4(Z,D,W,V); input [4:0]Z,D,W; output [4:0]V; assign V=Z ~& D ~& W; endmodule
module NAND_3(inp_K,inp_U,inp_O,out_O); input [3:0]inp_K,inp_U,inp_O; output [3:0]out_O; assign out_O=inp_K ~& inp_U ~& inp_O
module NAND_2(B,Y,R,Z); input [2:0]B,Y,R; output [2:0]Z; assign Z=B ~& Y ~& R
module NAND_5(Q,F,X); input [5:0]Q,F; output [5:0]X; assign X=Q ~& F; endmodule
module NAND_3(S,C,R); input [3:0]S,C; output [3:0]R; assign R=S ~& C; endmodule
module NAND_2(inp_W,inp_G,out_U); input [2:0]inp_W,inp_G; output [2:0]out_U; assign out_U=inp_W ~& inp_G; endmodule
module NAND_5(inp_V,inp_F,inp_Q,out_B); input [5:0]inp_V,inp_F,inp_Q; output [5:0]out_B; assign out_B=inp_V ~& inp_F ~& inp_Q
module NAND_5(R,O,D,Y); input [5:0]R,O,D; output [5:0]Y; assign Y=R ~& O ~& D
module NAND_5(M,A,P); input [5:0]M,A; output [5:0]P; assign P=M ~& A
module NAND_6(D,K,O); input [6:0]D,K; output [6:0]O; assign O=D ~& K; endmodule
module NAND_4(J,G,R); input [4:0]J,G; output [4:0]R; assign R=J ~& G; endmodule
module NAND_5(N,M,M,B); input [5:0]N,M,M; output [5:0]B; assign B=N ~& M ~& M
module NAND_1(inp_P,inp_O,out_V); input [1:0]inp_P,inp_O; output [1:0]out_V; assign out_V=inp_P ~& inp_O; endmodule
module NAND_5(A,D,I); input [5:0]A,D; output [5:0]I; assign I=A ~& D
module NAND_3(inp_A,inp_D,inp_Y,out_Q); input [3:0]inp_A,inp_D,inp_Y; output [3:0]out_Q; assign out_Q=inp_A ~& inp_D ~& inp_Y; endmodule
module NAND_5(inp_U,inp_K,inp_X,out_G); input [5:0]inp_U,inp_K,inp_X; output [5:0]out_G; assign out_G=inp_U ~& inp_K ~& inp_X; endmodule
module NAND_3(X,P,C,N); input [3:0]X,P,C; output [3:0]N; assign N=X ~& P ~& C; endmodule
module NAND_2(inp_T,inp_K,out_T); input [2:0]inp_T,inp_K; output [2:0]out_T; assign out_T=inp_T ~& inp_K; endmodule
module NAND_2(inp_B,inp_K,out_M); input [2:0]inp_B,inp_K; output [2:0]out_M; assign out_M=inp_B ~& inp_K
module NAND_7(inp_I,inp_U,out_M); input [7:0]inp_I,inp_U; output [7:0]out_M; assign out_M=inp_I ~& inp_U
module NAND_7(G,N,B); input [7:0]G,N; output [7:0]B; assign B=G ~& N
module NAND_6(Z,L,C,J); input [6:0]Z,L,C; output [6:0]J; assign J=Z ~& L ~& C; endmodule
module NAND_3(inp_M,inp_X,out_K); input [3:0]inp_M,inp_X; output [3:0]out_K; assign out_K=inp_M ~& inp_X
module NAND_4(K,J,L,Z); input [4:0]K,J,L; output [4:0]Z; assign Z=K ~& J ~& L
module NAND_3(I,M,J,X); input [3:0]I,M,J; output [3:0]X; assign X=I ~& M ~& J; endmodule
module NAND_6(inp_C,inp_W,out_U); input [6:0]inp_C,inp_W; output [6:0]out_U; assign out_U=inp_C ~& inp_W; endmodule
module NAND_3(inp_X,inp_G,out_U); input [3:0]inp_X,inp_G; output [3:0]out_U; assign out_U=inp_X ~& inp_G
module NAND_3(N,R,H); input [3:0]N,R; output [3:0]H; assign H=N ~& R; endmodule
module NAND_2(A,U,L); input [2:0]A,U; output [2:0]L; assign L=A ~& U; endmodule
module NAND_2(inp_A,inp_G,inp_V,out_T); input [2:0]inp_A,inp_G,inp_V; output [2:0]out_T; assign out_T=inp_A ~& inp_G ~& inp_V
module NAND_6(inp_Y,inp_C,out_T); input [6:0]inp_Y,inp_C; output [6:0]out_T; assign out_T=inp_Y ~& inp_C; endmodule
module NAND_7(G,K,W); input [7:0]G,K; output [7:0]W; assign W=G ~& K; endmodule
module NAND_4(inp_H,inp_B,inp_V,out_I); input [4:0]inp_H,inp_B,inp_V; output [4:0]out_I; assign out_I=inp_H ~& inp_B ~& inp_V; endmodule
module NAND_2(inp_F,inp_S,inp_Y,out_B); input [2:0]inp_F,inp_S,inp_Y; output [2:0]out_B; assign out_B=inp_F ~& inp_S ~& inp_Y; endmodule
module NAND_5(inp_R,inp_B,inp_W,out_Q); input [5:0]inp_R,inp_B,inp_W; output [5:0]out_Q; assign out_Q=inp_R ~& inp_B ~& inp_W; endmodule
module NAND_6(O,K,J); input [6:0]O,K; output [6:0]J; assign J=O ~& K; endmodule
module NAND_4(inp_J,inp_T,inp_P,out_T); input [4:0]inp_J,inp_T,inp_P; output [4:0]out_T; assign out_T=inp_J ~& inp_T ~& inp_P
module NAND_1(inp_K,inp_E,out_O); input [1:0]inp_K,inp_E; output [1:0]out_O; assign out_O=inp_K ~& inp_E
module NAND_5(T,N,Q); input [5:0]T,N; output [5:0]Q; assign Q=T ~& N; endmodule
module NAND_2(Y,O,K); input [2:0]Y,O; output [2:0]K; assign K=Y ~& O; endmodule
module NAND_4(inp_E,inp_S,out_O); input [4:0]inp_E,inp_S; output [4:0]out_O; assign out_O=inp_E ~& inp_S
module NAND_4(C,Q,Y,X); input [4:0]C,Q,Y; output [4:0]X; assign X=C ~& Q ~& Y; endmodule
module NAND_5(inp_Y,inp_X,inp_D,out_P); input [5:0]inp_Y,inp_X,inp_D; output [5:0]out_P; assign out_P=inp_Y ~& inp_X ~& inp_D; endmodule
module NAND_7(inp_U,inp_I,inp_J,out_J); input [7:0]inp_U,inp_I,inp_J; output [7:0]out_J; assign out_J=inp_U ~& inp_I ~& inp_J; endmodule
module NAND_2(inp_K,inp_D,inp_M,out_U); input [2:0]inp_K,inp_D,inp_M; output [2:0]out_U; assign out_U=inp_K ~& inp_D ~& inp_M
module NAND_5(inp_L,inp_M,out_Q); input [5:0]inp_L,inp_M; output [5:0]out_Q; assign out_Q=inp_L ~& inp_M; endmodule
module NAND_1(inp_X,inp_F,inp_T,out_B); input [1:0]inp_X,inp_F,inp_T; output [1:0]out_B; assign out_B=inp_X ~& inp_F ~& inp_T
module NAND_7(W,Q,B); input [7:0]W,Q; output [7:0]B; assign B=W ~& Q
module NAND_4(Z,K,U); input [4:0]Z,K; output [4:0]U; assign U=Z ~& K; endmodule
module NAND_2(inp_Y,inp_R,out_F); input [2:0]inp_Y,inp_R; output [2:0]out_F; assign out_F=inp_Y ~& inp_R
module NAND_1(U,B,I); input [1:0]U,B; output [1:0]I; assign I=U ~& B
module NAND_2(inp_A,inp_K,out_W); input [2:0]inp_A,inp_K; output [2:0]out_W; assign out_W=inp_A ~& inp_K
module NAND_6(U,X,H,M); input [6:0]U,X,H; output [6:0]M; assign M=U ~& X ~& H; endmodule
module NAND_2(S,X,J,Y); input [2:0]S,X,J; output [2:0]Y; assign Y=S ~& X ~& J
module NAND_6(O,G,U,A); input [6:0]O,G,U; output [6:0]A; assign A=O ~& G ~& U; endmodule
module NAND_5(inp_W,inp_H,out_D); input [5:0]inp_W,inp_H; output [5:0]out_D; assign out_D=inp_W ~& inp_H
module NAND_5(J,Q,D); input [5:0]J,Q; output [5:0]D; assign D=J ~& Q
module NAND_7(I,K,J); input [7:0]I,K; output [7:0]J; assign J=I ~& K; endmodule
module NAND_4(inp_V,inp_R,inp_D,out_V); input [4:0]inp_V,inp_R,inp_D; output [4:0]out_V; assign out_V=inp_V ~& inp_R ~& inp_D
module NAND_6(inp_N,inp_Z,inp_Q,out_S); input [6:0]inp_N,inp_Z,inp_Q; output [6:0]out_S; assign out_S=inp_N ~& inp_Z ~& inp_Q
module NAND_1(inp_R,inp_W,inp_I,out_M); input [1:0]inp_R,inp_W,inp_I; output [1:0]out_M; assign out_M=inp_R ~& inp_W ~& inp_I
module NAND_6(inp_X,inp_J,out_X); input [6:0]inp_X,inp_J; output [6:0]out_X; assign out_X=inp_X ~& inp_J
module NAND_2(inp_Q,inp_K,inp_R,out_X); input [2:0]inp_Q,inp_K,inp_R; output [2:0]out_X; assign out_X=inp_Q ~& inp_K ~& inp_R; endmodule
module NAND_5(inp_J,inp_K,out_W); input [5:0]inp_J,inp_K; output [5:0]out_W; assign out_W=inp_J ~& inp_K
module NAND_5(inp_Z,inp_E,inp_P,out_R); input [5:0]inp_Z,inp_E,inp_P; output [5:0]out_R; assign out_R=inp_Z ~& inp_E ~& inp_P; endmodule
module NAND_7(inp_R,inp_H,inp_Z,out_A); input [7:0]inp_R,inp_H,inp_Z; output [7:0]out_A; assign out_A=inp_R ~& inp_H ~& inp_Z; endmodule
module NAND_7(M,F,Z,V); input [7:0]M,F,Z; output [7:0]V; assign V=M ~& F ~& Z; endmodule
module NAND_2(A,F,U,G); input [2:0]A,F,U; output [2:0]G; assign G=A ~& F ~& U; endmodule
module NAND_6(inp_D,inp_S,inp_B,out_Z); input [6:0]inp_D,inp_S,inp_B; output [6:0]out_Z; assign out_Z=inp_D ~& inp_S ~& inp_B; endmodule
module NAND_5(E,J,V,K); input [5:0]E,J,V; output [5:0]K; assign K=E ~& J ~& V; endmodule
module NAND_4(inp_Y,inp_X,out_M); input [4:0]inp_Y,inp_X; output [4:0]out_M; assign out_M=inp_Y ~& inp_X
module NAND_7(inp_I,inp_P,out_L); input [7:0]inp_I,inp_P; output [7:0]out_L; assign out_L=inp_I ~& inp_P
module NAND_6(V,I,P,O); input [6:0]V,I,P; output [6:0]O; assign O=V ~& I ~& P
module NAND_3(inp_S,inp_A,inp_N,out_I); input [3:0]inp_S,inp_A,inp_N; output [3:0]out_I; assign out_I=inp_S ~& inp_A ~& inp_N
module NAND_2(T,H,C,F); input [2:0]T,H,C; output [2:0]F; assign F=T ~& H ~& C; endmodule
module NAND_2(J,C,K); input [2:0]J,C; output [2:0]K; assign K=J ~& C; endmodule
module NAND_6(inp_U,inp_Y,out_X); input [6:0]inp_U,inp_Y; output [6:0]out_X; assign out_X=inp_U ~& inp_Y; endmodule
module NAND_7(inp_U,inp_M,inp_D,out_G); input [7:0]inp_U,inp_M,inp_D; output [7:0]out_G; assign out_G=inp_U ~& inp_M ~& inp_D
module NAND_2(T,V,X,O); input [2:0]T,V,X; output [2:0]O; assign O=T ~& V ~& X; endmodule
module NAND_2(T,G,M,V); input [2:0]T,G,M; output [2:0]V; assign V=T ~& G ~& M
module NAND_2(inp_A,inp_E,inp_M,out_F); input [2:0]inp_A,inp_E,inp_M; output [2:0]out_F; assign out_F=inp_A ~& inp_E ~& inp_M; endmodule
module NAND_4(D,T,P,S); input [4:0]D,T,P; output [4:0]S; assign S=D ~& T ~& P
module NAND_1(M,T,L); input [1:0]M,T; output [1:0]L; assign L=M ~& T; endmodule
module NAND_6(inp_Z,inp_Q,out_N); input [6:0]inp_Z,inp_Q; output [6:0]out_N; assign out_N=inp_Z ~& inp_Q
module NAND_3(inp_W,inp_H,out_X); input [3:0]inp_W,inp_H; output [3:0]out_X; assign out_X=inp_W ~& inp_H; endmodule
module NAND_2(inp_C,inp_G,inp_N,out_X); input [2:0]inp_C,inp_G,inp_N; output [2:0]out_X; assign out_X=inp_C ~& inp_G ~& inp_N
module NAND_4(inp_B,inp_P,inp_L,out_V); input [4:0]inp_B,inp_P,inp_L; output [4:0]out_V; assign out_V=inp_B ~& inp_P ~& inp_L
module NAND_1(inp_Z,inp_I,out_U); input [1:0]inp_Z,inp_I; output [1:0]out_U; assign out_U=inp_Z ~& inp_I; endmodule
module NAND_3(V,S,Q); input [3:0]V,S; output [3:0]Q; assign Q=V ~& S
module NAND_3(inp_R,inp_F,out_W); input [3:0]inp_R,inp_F; output [3:0]out_W; assign out_W=inp_R ~& inp_F; endmodule
module NAND_3(inp_W,inp_X,out_N); input [3:0]inp_W,inp_X; output [3:0]out_N; assign out_N=inp_W ~& inp_X
module NAND_2(inp_K,inp_N,inp_K,out_B); input [2:0]inp_K,inp_N,inp_K; output [2:0]out_B; assign out_B=inp_K ~& inp_N ~& inp_K; endmodule
module NAND_5(O,Y,Q,V); input [5:0]O,Y,Q; output [5:0]V; assign V=O ~& Y ~& Q
module NAND_3(inp_H,inp_K,inp_O,out_I); input [3:0]inp_H,inp_K,inp_O; output [3:0]out_I; assign out_I=inp_H ~& inp_K ~& inp_O; endmodule
module NAND_6(inp_H,inp_B,inp_O,out_R); input [6:0]inp_H,inp_B,inp_O; output [6:0]out_R; assign out_R=inp_H ~& inp_B ~& inp_O
module NAND_4(inp_T,inp_B,out_R); input [4:0]inp_T,inp_B; output [4:0]out_R; assign out_R=inp_T ~& inp_B; endmodule
module NAND_3(L,F,C,Q); input [3:0]L,F,C; output [3:0]Q; assign Q=L ~& F ~& C
module NAND_4(L,C,N,A); input [4:0]L,C,N; output [4:0]A; assign A=L ~& C ~& N
module NAND_1(inp_B,inp_G,out_J); input [1:0]inp_B,inp_G; output [1:0]out_J; assign out_J=inp_B ~& inp_G
module NAND_7(inp_R,inp_E,out_Y); input [7:0]inp_R,inp_E; output [7:0]out_Y; assign out_Y=inp_R ~& inp_E; endmodule
module NAND_5(H,I,G,F); input [5:0]H,I,G; output [5:0]F; assign F=H ~& I ~& G; endmodule
module NAND_2(inp_R,inp_S,out_D); input [2:0]inp_R,inp_S; output [2:0]out_D; assign out_D=inp_R ~& inp_S
module NAND_1(inp_E,inp_U,out_J); input [1:0]inp_E,inp_U; output [1:0]out_J; assign out_J=inp_E ~& inp_U; endmodule
module NAND_2(O,Y,C,I); input [2:0]O,Y,C; output [2:0]I; assign I=O ~& Y ~& C; endmodule
module NAND_5(T,Y,X); input [5:0]T,Y; output [5:0]X; assign X=T ~& Y; endmodule
module NAND_7(Z,U,B,I); input [7:0]Z,U,B; output [7:0]I; assign I=Z ~& U ~& B; endmodule
module NAND_6(inp_V,inp_H,inp_F,out_Q); input [6:0]inp_V,inp_H,inp_F; output [6:0]out_Q; assign out_Q=inp_V ~& inp_H ~& inp_F
module NAND_7(K,J,F); input [7:0]K,J; output [7:0]F; assign F=K ~& J; endmodule
module NAND_5(inp_F,inp_Q,inp_N,out_A); input [5:0]inp_F,inp_Q,inp_N; output [5:0]out_A; assign out_A=inp_F ~& inp_Q ~& inp_N
module NAND_2(inp_O,inp_X,out_W); input [2:0]inp_O,inp_X; output [2:0]out_W; assign out_W=inp_O ~& inp_X
module NAND_5(inp_A,inp_R,out_B); input [5:0]inp_A,inp_R; output [5:0]out_B; assign out_B=inp_A ~& inp_R; endmodule
module NAND_1(T,U,H); input [1:0]T,U; output [1:0]H; assign H=T ~& U
module NAND_1(inp_R,inp_S,out_U); input [1:0]inp_R,inp_S; output [1:0]out_U; assign out_U=inp_R ~& inp_S; endmodule
module NAND_4(inp_S,inp_A,out_S); input [4:0]inp_S,inp_A; output [4:0]out_S; assign out_S=inp_S ~& inp_A
module NAND_1(X,C,J,G); input [1:0]X,C,J; output [1:0]G; assign G=X ~& C ~& J; endmodule
module NAND_5(inp_Z,inp_X,out_M); input [5:0]inp_Z,inp_X; output [5:0]out_M; assign out_M=inp_Z ~& inp_X
module NAND_1(G,Y,R,H); input [1:0]G,Y,R; output [1:0]H; assign H=G ~& Y ~& R
module NAND_3(inp_X,inp_C,out_N); input [3:0]inp_X,inp_C; output [3:0]out_N; assign out_N=inp_X ~& inp_C; endmodule
module NAND_5(Q,J,B,H); input [5:0]Q,J,B; output [5:0]H; assign H=Q ~& J ~& B; endmodule
module NAND_7(J,V,Q); input [7:0]J,V; output [7:0]Q; assign Q=J ~& V
module NAND_1(inp_C,inp_E,inp_D,out_S); input [1:0]inp_C,inp_E,inp_D; output [1:0]out_S; assign out_S=inp_C ~& inp_E ~& inp_D
module NAND_5(A,E,F); input [5:0]A,E; output [5:0]F; assign F=A ~& E
module NAND_7(D,I,E); input [7:0]D,I; output [7:0]E; assign E=D ~& I; endmodule
module NAND_1(inp_N,inp_H,out_Y); input [1:0]inp_N,inp_H; output [1:0]out_Y; assign out_Y=inp_N ~& inp_H; endmodule
module NAND_7(inp_D,inp_J,inp_A,out_V); input [7:0]inp_D,inp_J,inp_A; output [7:0]out_V; assign out_V=inp_D ~& inp_J ~& inp_A
module NAND_6(inp_V,inp_T,inp_M,out_C); input [6:0]inp_V,inp_T,inp_M; output [6:0]out_C; assign out_C=inp_V ~& inp_T ~& inp_M
module NAND_7(D,Z,J); input [7:0]D,Z; output [7:0]J; assign J=D ~& Z; endmodule
module NAND_4(T,Y,O,R); input [4:0]T,Y,O; output [4:0]R; assign R=T ~& Y ~& O; endmodule
module NAND_7(inp_J,inp_Y,out_D); input [7:0]inp_J,inp_Y; output [7:0]out_D; assign out_D=inp_J ~& inp_Y
module NAND_5(F,W,P); input [5:0]F,W; output [5:0]P; assign P=F ~& W
module NAND_3(R,A,I,G); input [3:0]R,A,I; output [3:0]G; assign G=R ~& A ~& I
module NAND_4(Y,D,A,C); input [4:0]Y,D,A; output [4:0]C; assign C=Y ~& D ~& A; endmodule
module NAND_3(T,W,U,A); input [3:0]T,W,U; output [3:0]A; assign A=T ~& W ~& U
module NAND_3(M,P,G,Z); input [3:0]M,P,G; output [3:0]Z; assign Z=M ~& P ~& G
module NAND_1(inp_E,inp_N,inp_H,out_Y); input [1:0]inp_E,inp_N,inp_H; output [1:0]out_Y; assign out_Y=inp_E ~& inp_N ~& inp_H; endmodule
module NAND_6(L,N,Q,T); input [6:0]L,N,Q; output [6:0]T; assign T=L ~& N ~& Q
module NAND_1(Y,A,R); input [1:0]Y,A; output [1:0]R; assign R=Y ~& A
module NAND_1(P,C,A,B); input [1:0]P,C,A; output [1:0]B; assign B=P ~& C ~& A; endmodule
module NAND_2(inp_V,inp_E,inp_Z,out_F); input [2:0]inp_V,inp_E,inp_Z; output [2:0]out_F; assign out_F=inp_V ~& inp_E ~& inp_Z
module NAND_1(inp_I,inp_G,out_F); input [1:0]inp_I,inp_G; output [1:0]out_F; assign out_F=inp_I ~& inp_G; endmodule
module NAND_4(inp_H,inp_V,out_S); input [4:0]inp_H,inp_V; output [4:0]out_S; assign out_S=inp_H ~& inp_V
module NAND_6(inp_B,inp_D,out_G); input [6:0]inp_B,inp_D; output [6:0]out_G; assign out_G=inp_B ~& inp_D; endmodule
module NAND_2(D,Z,N); input [2:0]D,Z; output [2:0]N; assign N=D ~& Z
module NAND_6(inp_H,inp_J,inp_D,out_G); input [6:0]inp_H,inp_J,inp_D; output [6:0]out_G; assign out_G=inp_H ~& inp_J ~& inp_D; endmodule
module NAND_3(inp_Q,inp_Y,inp_X,out_R); input [3:0]inp_Q,inp_Y,inp_X; output [3:0]out_R; assign out_R=inp_Q ~& inp_Y ~& inp_X; endmodule
module NAND_2(Q,D,K,P); input [2:0]Q,D,K; output [2:0]P; assign P=Q ~& D ~& K; endmodule
module NAND_6(S,W,O,H); input [6:0]S,W,O; output [6:0]H; assign H=S ~& W ~& O
module NAND_6(inp_J,inp_O,out_K); input [6:0]inp_J,inp_O; output [6:0]out_K; assign out_K=inp_J ~& inp_O
module NAND_5(W,L,H); input [5:0]W,L; output [5:0]H; assign H=W ~& L; endmodule
module NAND_5(D,M,N,A); input [5:0]D,M,N; output [5:0]A; assign A=D ~& M ~& N
module NAND_2(inp_N,inp_Q,out_A); input [2:0]inp_N,inp_Q; output [2:0]out_A; assign out_A=inp_N ~& inp_Q
module NAND_7(T,J,M,A); input [7:0]T,J,M; output [7:0]A; assign A=T ~& J ~& M
module NAND_4(R,F,V,L); input [4:0]R,F,V; output [4:0]L; assign L=R ~& F ~& V
module NAND_7(inp_D,inp_C,out_V); input [7:0]inp_D,inp_C; output [7:0]out_V; assign out_V=inp_D ~& inp_C; endmodule
module NAND_3(S,O,Z); input [3:0]S,O; output [3:0]Z; assign Z=S ~& O
module NAND_6(M,X,K,J); input [6:0]M,X,K; output [6:0]J; assign J=M ~& X ~& K
module NAND_6(inp_K,inp_N,inp_U,out_Z); input [6:0]inp_K,inp_N,inp_U; output [6:0]out_Z; assign out_Z=inp_K ~& inp_N ~& inp_U; endmodule
module NAND_6(Y,L,M,U); input [6:0]Y,L,M; output [6:0]U; assign U=Y ~& L ~& M; endmodule
module NAND_7(S,O,H,M); input [7:0]S,O,H; output [7:0]M; assign M=S ~& O ~& H
module NAND_7(V,W,Q,I); input [7:0]V,W,Q; output [7:0]I; assign I=V ~& W ~& Q
module NAND_4(inp_T,inp_S,inp_A,out_D); input [4:0]inp_T,inp_S,inp_A; output [4:0]out_D; assign out_D=inp_T ~& inp_S ~& inp_A; endmodule
module NAND_7(inp_D,inp_K,inp_L,out_G); input [7:0]inp_D,inp_K,inp_L; output [7:0]out_G; assign out_G=inp_D ~& inp_K ~& inp_L; endmodule
module NAND_1(Z,Y,B,Q); input [1:0]Z,Y,B; output [1:0]Q; assign Q=Z ~& Y ~& B; endmodule
module NAND_5(inp_Q,inp_Y,inp_B,out_E); input [5:0]inp_Q,inp_Y,inp_B; output [5:0]out_E; assign out_E=inp_Q ~& inp_Y ~& inp_B
module NAND_5(N,U,B,J); input [5:0]N,U,B; output [5:0]J; assign J=N ~& U ~& B
module NAND_6(J,Z,M); input [6:0]J,Z; output [6:0]M; assign M=J ~& Z; endmodule
module NAND_5(H,Y,F,H); input [5:0]H,Y,F; output [5:0]H; assign H=H ~& Y ~& F
module NAND_3(C,U,H); input [3:0]C,U; output [3:0]H; assign H=C ~& U; endmodule
module NAND_6(inp_J,inp_I,out_K); input [6:0]inp_J,inp_I; output [6:0]out_K; assign out_K=inp_J ~& inp_I; endmodule
module NAND_1(inp_W,inp_C,inp_A,out_L); input [1:0]inp_W,inp_C,inp_A; output [1:0]out_L; assign out_L=inp_W ~& inp_C ~& inp_A
module NAND_7(L,E,X,Q); input [7:0]L,E,X; output [7:0]Q; assign Q=L ~& E ~& X; endmodule
module NAND_4(B,A,F); input [4:0]B,A; output [4:0]F; assign F=B ~& A
module NAND_2(C,W,X); input [2:0]C,W; output [2:0]X; assign X=C ~& W
module NAND_3(inp_U,inp_H,out_S); input [3:0]inp_U,inp_H; output [3:0]out_S; assign out_S=inp_U ~& inp_H
module NAND_4(inp_L,inp_A,out_D); input [4:0]inp_L,inp_A; output [4:0]out_D; assign out_D=inp_L ~& inp_A
module NAND_2(O,T,G,N); input [2:0]O,T,G; output [2:0]N; assign N=O ~& T ~& G
module NAND_5(F,X,W); input [5:0]F,X; output [5:0]W; assign W=F ~& X; endmodule
module NAND_6(inp_H,inp_P,inp_Q,out_W); input [6:0]inp_H,inp_P,inp_Q; output [6:0]out_W; assign out_W=inp_H ~& inp_P ~& inp_Q; endmodule
module NAND_5(H,M,R,I); input [5:0]H,M,R; output [5:0]I; assign I=H ~& M ~& R; endmodule
module NAND_6(inp_A,inp_D,out_X); input [6:0]inp_A,inp_D; output [6:0]out_X; assign out_X=inp_A ~& inp_D
module NAND_4(O,H,F,X); input [4:0]O,H,F; output [4:0]X; assign X=O ~& H ~& F
module NAND_1(inp_R,inp_D,out_Q); input [1:0]inp_R,inp_D; output [1:0]out_Q; assign out_Q=inp_R ~& inp_D; endmodule
module NAND_1(R,K,H); input [1:0]R,K; output [1:0]H; assign H=R ~& K; endmodule
module NAND_3(T,R,W,U); input [3:0]T,R,W; output [3:0]U; assign U=T ~& R ~& W
module NAND_6(inp_K,inp_T,out_X); input [6:0]inp_K,inp_T; output [6:0]out_X; assign out_X=inp_K ~& inp_T
module NAND_4(S,I,H,V); input [4:0]S,I,H; output [4:0]V; assign V=S ~& I ~& H; endmodule
module NAND_2(inp_J,inp_D,inp_H,out_P); input [2:0]inp_J,inp_D,inp_H; output [2:0]out_P; assign out_P=inp_J ~& inp_D ~& inp_H
module NAND_3(S,Q,G); input [3:0]S,Q; output [3:0]G; assign G=S ~& Q; endmodule
module NAND_1(inp_G,inp_N,inp_X,out_W); input [1:0]inp_G,inp_N,inp_X; output [1:0]out_W; assign out_W=inp_G ~& inp_N ~& inp_X
module NAND_3(S,G,V); input [3:0]S,G; output [3:0]V; assign V=S ~& G; endmodule
module NAND_2(F,W,O,Z); input [2:0]F,W,O; output [2:0]Z; assign Z=F ~& W ~& O
module NAND_4(L,U,T); input [4:0]L,U; output [4:0]T; assign T=L ~& U; endmodule
module NAND_2(inp_E,inp_C,inp_T,out_F); input [2:0]inp_E,inp_C,inp_T; output [2:0]out_F; assign out_F=inp_E ~& inp_C ~& inp_T
module NAND_1(inp_S,inp_Y,inp_W,out_W); input [1:0]inp_S,inp_Y,inp_W; output [1:0]out_W; assign out_W=inp_S ~& inp_Y ~& inp_W
module NAND_3(S,Q,G,H); input [3:0]S,Q,G; output [3:0]H; assign H=S ~& Q ~& G; endmodule
module NAND_1(T,K,L); input [1:0]T,K; output [1:0]L; assign L=T ~& K
module NAND_5(Z,C,D,U); input [5:0]Z,C,D; output [5:0]U; assign U=Z ~& C ~& D
module NAND_3(D,H,J,B); input [3:0]D,H,J; output [3:0]B; assign B=D ~& H ~& J; endmodule
module NAND_3(inp_I,inp_T,out_B); input [3:0]inp_I,inp_T; output [3:0]out_B; assign out_B=inp_I ~& inp_T; endmodule
module NAND_7(J,N,D); input [7:0]J,N; output [7:0]D; assign D=J ~& N; endmodule
module NAND_5(inp_R,inp_T,inp_F,out_U); input [5:0]inp_R,inp_T,inp_F; output [5:0]out_U; assign out_U=inp_R ~& inp_T ~& inp_F
module NAND_4(W,P,Z,R); input [4:0]W,P,Z; output [4:0]R; assign R=W ~& P ~& Z
module NAND_2(inp_M,inp_W,inp_C,out_B); input [2:0]inp_M,inp_W,inp_C; output [2:0]out_B; assign out_B=inp_M ~& inp_W ~& inp_C; endmodule
module NAND_6(inp_R,inp_W,inp_U,out_Z); input [6:0]inp_R,inp_W,inp_U; output [6:0]out_Z; assign out_Z=inp_R ~& inp_W ~& inp_U
module NAND_5(inp_X,inp_J,inp_R,out_H); input [5:0]inp_X,inp_J,inp_R; output [5:0]out_H; assign out_H=inp_X ~& inp_J ~& inp_R; endmodule
module NAND_4(inp_S,inp_Y,inp_C,out_O); input [4:0]inp_S,inp_Y,inp_C; output [4:0]out_O; assign out_O=inp_S ~& inp_Y ~& inp_C
module NAND_1(T,Z,H,E); input [1:0]T,Z,H; output [1:0]E; assign E=T ~& Z ~& H; endmodule
module NAND_2(X,Q,B); input [2:0]X,Q; output [2:0]B; assign B=X ~& Q
module NAND_6(Q,I,T,X); input [6:0]Q,I,T; output [6:0]X; assign X=Q ~& I ~& T
module NAND_4(O,V,D); input [4:0]O,V; output [4:0]D; assign D=O ~& V
module NAND_3(inp_J,inp_K,inp_C,out_W); input [3:0]inp_J,inp_K,inp_C; output [3:0]out_W; assign out_W=inp_J ~& inp_K ~& inp_C
module NAND_6(inp_B,inp_T,out_G); input [6:0]inp_B,inp_T; output [6:0]out_G; assign out_G=inp_B ~& inp_T
module NAND_4(Z,L,T,R); input [4:0]Z,L,T; output [4:0]R; assign R=Z ~& L ~& T; endmodule
module NAND_5(O,P,U,H); input [5:0]O,P,U; output [5:0]H; assign H=O ~& P ~& U
module NAND_7(inp_R,inp_O,out_T); input [7:0]inp_R,inp_O; output [7:0]out_T; assign out_T=inp_R ~& inp_O
module NAND_6(Q,G,Y); input [6:0]Q,G; output [6:0]Y; assign Y=Q ~& G
module NAND_3(inp_S,inp_H,out_G); input [3:0]inp_S,inp_H; output [3:0]out_G; assign out_G=inp_S ~& inp_H; endmodule
module NAND_1(inp_K,inp_J,inp_Y,out_B); input [1:0]inp_K,inp_J,inp_Y; output [1:0]out_B; assign out_B=inp_K ~& inp_J ~& inp_Y; endmodule
module NAND_3(Z,R,T); input [3:0]Z,R; output [3:0]T; assign T=Z ~& R; endmodule
module NAND_1(N,B,Z); input [1:0]N,B; output [1:0]Z; assign Z=N ~& B
module NAND_2(inp_H,inp_Y,out_I); input [2:0]inp_H,inp_Y; output [2:0]out_I; assign out_I=inp_H ~& inp_Y; endmodule
module NAND_7(inp_S,inp_M,out_M); input [7:0]inp_S,inp_M; output [7:0]out_M; assign out_M=inp_S ~& inp_M
module NAND_6(X,R,S); input [6:0]X,R; output [6:0]S; assign S=X ~& R
module NAND_7(inp_D,inp_K,out_X); input [7:0]inp_D,inp_K; output [7:0]out_X; assign out_X=inp_D ~& inp_K; endmodule
module NAND_2(inp_T,inp_M,out_W); input [2:0]inp_T,inp_M; output [2:0]out_W; assign out_W=inp_T ~& inp_M; endmodule
module NAND_1(F,M,J,O); input [1:0]F,M,J; output [1:0]O; assign O=F ~& M ~& J; endmodule
module NAND_1(K,X,L); input [1:0]K,X; output [1:0]L; assign L=K ~& X
module NAND_3(D,U,L,G); input [3:0]D,U,L; output [3:0]G; assign G=D ~& U ~& L
module NAND_3(inp_W,inp_Z,inp_I,out_E); input [3:0]inp_W,inp_Z,inp_I; output [3:0]out_E; assign out_E=inp_W ~& inp_Z ~& inp_I
module NAND_3(inp_W,inp_S,out_N); input [3:0]inp_W,inp_S; output [3:0]out_N; assign out_N=inp_W ~& inp_S; endmodule
module NAND_2(A,P,G); input [2:0]A,P; output [2:0]G; assign G=A ~& P
module NAND_2(J,R,A,D); input [2:0]J,R,A; output [2:0]D; assign D=J ~& R ~& A
module NAND_6(inp_C,inp_Y,inp_U,out_B); input [6:0]inp_C,inp_Y,inp_U; output [6:0]out_B; assign out_B=inp_C ~& inp_Y ~& inp_U; endmodule
module NAND_1(inp_B,inp_E,out_Y); input [1:0]inp_B,inp_E; output [1:0]out_Y; assign out_Y=inp_B ~& inp_E; endmodule
module NAND_5(W,O,X); input [5:0]W,O; output [5:0]X; assign X=W ~& O
module NAND_6(inp_L,inp_T,out_U); input [6:0]inp_L,inp_T; output [6:0]out_U; assign out_U=inp_L ~& inp_T
module NAND_4(K,B,U,E); input [4:0]K,B,U; output [4:0]E; assign E=K ~& B ~& U
module NAND_1(inp_W,inp_Y,out_W); input [1:0]inp_W,inp_Y; output [1:0]out_W; assign out_W=inp_W ~& inp_Y
module NAND_4(inp_R,inp_J,out_D); input [4:0]inp_R,inp_J; output [4:0]out_D; assign out_D=inp_R ~& inp_J; endmodule
module NAND_1(S,A,W); input [1:0]S,A; output [1:0]W; assign W=S ~& A; endmodule
module NAND_4(Z,B,R); input [4:0]Z,B; output [4:0]R; assign R=Z ~& B
module NAND_6(inp_A,inp_W,out_H); input [6:0]inp_A,inp_W; output [6:0]out_H; assign out_H=inp_A ~& inp_W; endmodule
module NAND_2(inp_U,inp_S,out_Z); input [2:0]inp_U,inp_S; output [2:0]out_Z; assign out_Z=inp_U ~& inp_S; endmodule
module NAND_5(P,X,C,F); input [5:0]P,X,C; output [5:0]F; assign F=P ~& X ~& C
module NAND_4(inp_E,inp_X,inp_Y,out_Y); input [4:0]inp_E,inp_X,inp_Y; output [4:0]out_Y; assign out_Y=inp_E ~& inp_X ~& inp_Y; endmodule
module NAND_2(inp_X,inp_T,inp_H,out_S); input [2:0]inp_X,inp_T,inp_H; output [2:0]out_S; assign out_S=inp_X ~& inp_T ~& inp_H; endmodule
module NAND_4(inp_D,inp_O,out_O); input [4:0]inp_D,inp_O; output [4:0]out_O; assign out_O=inp_D ~& inp_O; endmodule
module NAND_7(inp_K,inp_Z,inp_L,out_J); input [7:0]inp_K,inp_Z,inp_L; output [7:0]out_J; assign out_J=inp_K ~& inp_Z ~& inp_L
module NAND_4(V,Z,T); input [4:0]V,Z; output [4:0]T; assign T=V ~& Z
module NAND_7(inp_U,inp_Q,out_M); input [7:0]inp_U,inp_Q; output [7:0]out_M; assign out_M=inp_U ~& inp_Q; endmodule
module NAND_5(R,C,H,X); input [5:0]R,C,H; output [5:0]X; assign X=R ~& C ~& H
module NAND_1(inp_L,inp_O,out_L); input [1:0]inp_L,inp_O; output [1:0]out_L; assign out_L=inp_L ~& inp_O
module NAND_4(H,R,Y,O); input [4:0]H,R,Y; output [4:0]O; assign O=H ~& R ~& Y; endmodule
module NAND_4(I,F,K); input [4:0]I,F; output [4:0]K; assign K=I ~& F
module NAND_5(H,Q,S); input [5:0]H,Q; output [5:0]S; assign S=H ~& Q; endmodule
module NAND_4(inp_H,inp_N,out_K); input [4:0]inp_H,inp_N; output [4:0]out_K; assign out_K=inp_H ~& inp_N
module NAND_1(U,B,R); input [1:0]U,B; output [1:0]R; assign R=U ~& B
module NAND_6(inp_F,inp_C,out_Q); input [6:0]inp_F,inp_C; output [6:0]out_Q; assign out_Q=inp_F ~& inp_C; endmodule
module NAND_2(inp_T,inp_V,out_L); input [2:0]inp_T,inp_V; output [2:0]out_L; assign out_L=inp_T ~& inp_V; endmodule
module NAND_6(E,C,V); input [6:0]E,C; output [6:0]V; assign V=E ~& C; endmodule
module NAND_7(inp_E,inp_N,inp_M,out_R); input [7:0]inp_E,inp_N,inp_M; output [7:0]out_R; assign out_R=inp_E ~& inp_N ~& inp_M; endmodule
module NAND_1(C,S,D); input [1:0]C,S; output [1:0]D; assign D=C ~& S; endmodule
module NAND_1(D,E,S,G); input [1:0]D,E,S; output [1:0]G; assign G=D ~& E ~& S; endmodule
module NAND_7(F,X,O); input [7:0]F,X; output [7:0]O; assign O=F ~& X; endmodule
module NAND_7(I,D,P); input [7:0]I,D; output [7:0]P; assign P=I ~& D
module NAND_3(Y,P,X,S); input [3:0]Y,P,X; output [3:0]S; assign S=Y ~& P ~& X
module NAND_3(X,I,F,G); input [3:0]X,I,F; output [3:0]G; assign G=X ~& I ~& F
module NAND_7(U,V,L,G); input [7:0]U,V,L; output [7:0]G; assign G=U ~& V ~& L
module NAND_7(inp_G,inp_V,inp_N,out_B); input [7:0]inp_G,inp_V,inp_N; output [7:0]out_B; assign out_B=inp_G ~& inp_V ~& inp_N; endmodule
module NAND_4(E,J,Q,F); input [4:0]E,J,Q; output [4:0]F; assign F=E ~& J ~& Q
module NAND_3(inp_O,inp_M,out_C); input [3:0]inp_O,inp_M; output [3:0]out_C; assign out_C=inp_O ~& inp_M; endmodule
module NAND_1(I,E,Z); input [1:0]I,E; output [1:0]Z; assign Z=I ~& E; endmodule
module NAND_2(S,Q,D,P); input [2:0]S,Q,D; output [2:0]P; assign P=S ~& Q ~& D
module NAND_5(A,H,V,O); input [5:0]A,H,V; output [5:0]O; assign O=A ~& H ~& V
module NAND_4(D,O,M); input [4:0]D,O; output [4:0]M; assign M=D ~& O; endmodule
module NAND_5(inp_E,inp_D,out_H); input [5:0]inp_E,inp_D; output [5:0]out_H; assign out_H=inp_E ~& inp_D; endmodule
module NAND_7(R,D,A); input [7:0]R,D; output [7:0]A; assign A=R ~& D; endmodule
module NAND_5(inp_I,inp_T,inp_H,out_R); input [5:0]inp_I,inp_T,inp_H; output [5:0]out_R; assign out_R=inp_I ~& inp_T ~& inp_H; endmodule
module NAND_7(Q,O,H); input [7:0]Q,O; output [7:0]H; assign H=Q ~& O; endmodule
module NAND_1(X,S,D); input [1:0]X,S; output [1:0]D; assign D=X ~& S
module NAND_5(T,B,E,S); input [5:0]T,B,E; output [5:0]S; assign S=T ~& B ~& E; endmodule
module NAND_1(inp_V,inp_U,out_D); input [1:0]inp_V,inp_U; output [1:0]out_D; assign out_D=inp_V ~& inp_U
module NAND_2(inp_E,inp_C,out_T); input [2:0]inp_E,inp_C; output [2:0]out_T; assign out_T=inp_E ~& inp_C; endmodule
module NAND_6(inp_Q,inp_F,inp_S,out_P); input [6:0]inp_Q,inp_F,inp_S; output [6:0]out_P; assign out_P=inp_Q ~& inp_F ~& inp_S
module NAND_7(F,Z,Q,X); input [7:0]F,Z,Q; output [7:0]X; assign X=F ~& Z ~& Q; endmodule
module NAND_2(inp_I,inp_V,inp_G,out_B); input [2:0]inp_I,inp_V,inp_G; output [2:0]out_B; assign out_B=inp_I ~& inp_V ~& inp_G; endmodule
module NAND_1(inp_M,inp_K,inp_D,out_U); input [1:0]inp_M,inp_K,inp_D; output [1:0]out_U; assign out_U=inp_M ~& inp_K ~& inp_D
module NAND_3(T,W,S); input [3:0]T,W; output [3:0]S; assign S=T ~& W; endmodule
module NAND_3(L,A,M,X); input [3:0]L,A,M; output [3:0]X; assign X=L ~& A ~& M
module NAND_2(L,T,U,T); input [2:0]L,T,U; output [2:0]T; assign T=L ~& T ~& U; endmodule
module NAND_7(inp_E,inp_G,inp_R,out_C); input [7:0]inp_E,inp_G,inp_R; output [7:0]out_C; assign out_C=inp_E ~& inp_G ~& inp_R
module NAND_1(inp_M,inp_V,out_W); input [1:0]inp_M,inp_V; output [1:0]out_W; assign out_W=inp_M ~& inp_V
module NAND_5(Q,K,W,Z); input [5:0]Q,K,W; output [5:0]Z; assign Z=Q ~& K ~& W
module NAND_3(G,U,K,W); input [3:0]G,U,K; output [3:0]W; assign W=G ~& U ~& K
module NAND_4(Z,D,R); input [4:0]Z,D; output [4:0]R; assign R=Z ~& D; endmodule
module NAND_7(inp_F,inp_T,out_J); input [7:0]inp_F,inp_T; output [7:0]out_J; assign out_J=inp_F ~& inp_T; endmodule
module NAND_5(F,A,T); input [5:0]F,A; output [5:0]T; assign T=F ~& A
module NAND_5(inp_W,inp_X,inp_K,out_T); input [5:0]inp_W,inp_X,inp_K; output [5:0]out_T; assign out_T=inp_W ~& inp_X ~& inp_K; endmodule
module NAND_4(inp_V,inp_U,inp_M,out_F); input [4:0]inp_V,inp_U,inp_M; output [4:0]out_F; assign out_F=inp_V ~& inp_U ~& inp_M
module NAND_4(inp_I,inp_S,out_A); input [4:0]inp_I,inp_S; output [4:0]out_A; assign out_A=inp_I ~& inp_S
module NAND_3(J,E,U,C); input [3:0]J,E,U; output [3:0]C; assign C=J ~& E ~& U; endmodule
module NAND_6(M,X,E,P); input [6:0]M,X,E; output [6:0]P; assign P=M ~& X ~& E; endmodule
module NAND_6(G,V,S,C); input [6:0]G,V,S; output [6:0]C; assign C=G ~& V ~& S; endmodule
module NAND_2(inp_Z,inp_D,inp_X,out_H); input [2:0]inp_Z,inp_D,inp_X; output [2:0]out_H; assign out_H=inp_Z ~& inp_D ~& inp_X; endmodule
module NAND_2(inp_W,inp_Y,out_P); input [2:0]inp_W,inp_Y; output [2:0]out_P; assign out_P=inp_W ~& inp_Y
module NAND_7(Z,W,D,X); input [7:0]Z,W,D; output [7:0]X; assign X=Z ~& W ~& D; endmodule
module NAND_6(O,F,E,Q); input [6:0]O,F,E; output [6:0]Q; assign Q=O ~& F ~& E; endmodule
module NAND_5(inp_S,inp_Z,inp_B,out_H); input [5:0]inp_S,inp_Z,inp_B; output [5:0]out_H; assign out_H=inp_S ~& inp_Z ~& inp_B
module NAND_6(inp_H,inp_A,inp_L,out_L); input [6:0]inp_H,inp_A,inp_L; output [6:0]out_L; assign out_L=inp_H ~& inp_A ~& inp_L
module NAND_4(inp_U,inp_B,inp_V,out_T); input [4:0]inp_U,inp_B,inp_V; output [4:0]out_T; assign out_T=inp_U ~& inp_B ~& inp_V; endmodule
module NAND_4(inp_K,inp_O,out_G); input [4:0]inp_K,inp_O; output [4:0]out_G; assign out_G=inp_K ~& inp_O
module NAND_7(inp_C,inp_K,out_X); input [7:0]inp_C,inp_K; output [7:0]out_X; assign out_X=inp_C ~& inp_K
module NAND_7(D,J,Z,N); input [7:0]D,J,Z; output [7:0]N; assign N=D ~& J ~& Z; endmodule
module NAND_1(F,A,I,G); input [1:0]F,A,I; output [1:0]G; assign G=F ~& A ~& I; endmodule
module NAND_3(inp_G,inp_W,inp_L,out_K); input [3:0]inp_G,inp_W,inp_L; output [3:0]out_K; assign out_K=inp_G ~& inp_W ~& inp_L; endmodule
module NAND_6(inp_O,inp_B,out_E); input [6:0]inp_O,inp_B; output [6:0]out_E; assign out_E=inp_O ~& inp_B
module NAND_2(inp_V,inp_J,out_X); input [2:0]inp_V,inp_J; output [2:0]out_X; assign out_X=inp_V ~& inp_J
module NAND_6(F,Y,E,B); input [6:0]F,Y,E; output [6:0]B; assign B=F ~& Y ~& E; endmodule
module NAND_7(Q,T,K); input [7:0]Q,T; output [7:0]K; assign K=Q ~& T; endmodule
module NAND_3(V,I,X,J); input [3:0]V,I,X; output [3:0]J; assign J=V ~& I ~& X
module NAND_3(inp_Q,inp_I,out_N); input [3:0]inp_Q,inp_I; output [3:0]out_N; assign out_N=inp_Q ~& inp_I
module NAND_1(V,J,U); input [1:0]V,J; output [1:0]U; assign U=V ~& J
module NAND_6(inp_S,inp_Q,out_V); input [6:0]inp_S,inp_Q; output [6:0]out_V; assign out_V=inp_S ~& inp_Q; endmodule
module NAND_7(inp_V,inp_Y,inp_G,out_L); input [7:0]inp_V,inp_Y,inp_G; output [7:0]out_L; assign out_L=inp_V ~& inp_Y ~& inp_G
module NAND_7(inp_N,inp_P,inp_K,out_M); input [7:0]inp_N,inp_P,inp_K; output [7:0]out_M; assign out_M=inp_N ~& inp_P ~& inp_K; endmodule
module NAND_7(U,O,D,K); input [7:0]U,O,D; output [7:0]K; assign K=U ~& O ~& D
module NAND_7(T,O,W); input [7:0]T,O; output [7:0]W; assign W=T ~& O
module NAND_2(inp_Y,inp_Z,inp_A,out_P); input [2:0]inp_Y,inp_Z,inp_A; output [2:0]out_P; assign out_P=inp_Y ~& inp_Z ~& inp_A; endmodule
module NAND_4(inp_D,inp_J,out_P); input [4:0]inp_D,inp_J; output [4:0]out_P; assign out_P=inp_D ~& inp_J; endmodule
module NAND_1(K,G,N); input [1:0]K,G; output [1:0]N; assign N=K ~& G; endmodule
module NAND_3(inp_K,inp_W,inp_B,out_J); input [3:0]inp_K,inp_W,inp_B; output [3:0]out_J; assign out_J=inp_K ~& inp_W ~& inp_B
module NAND_6(T,K,G); input [6:0]T,K; output [6:0]G; assign G=T ~& K; endmodule
module NAND_5(N,C,X); input [5:0]N,C; output [5:0]X; assign X=N ~& C
module NAND_5(inp_Y,inp_P,out_V); input [5:0]inp_Y,inp_P; output [5:0]out_V; assign out_V=inp_Y ~& inp_P; endmodule
module NAND_2(C,H,F,M); input [2:0]C,H,F; output [2:0]M; assign M=C ~& H ~& F; endmodule
module NAND_2(B,R,J); input [2:0]B,R; output [2:0]J; assign J=B ~& R; endmodule
module NAND_5(O,W,A,I); input [5:0]O,W,A; output [5:0]I; assign I=O ~& W ~& A; endmodule
module NAND_3(R,F,I); input [3:0]R,F; output [3:0]I; assign I=R ~& F
module NAND_1(Q,U,O,X); input [1:0]Q,U,O; output [1:0]X; assign X=Q ~& U ~& O; endmodule
module NAND_1(inp_C,inp_P,out_D); input [1:0]inp_C,inp_P; output [1:0]out_D; assign out_D=inp_C ~& inp_P; endmodule
module NAND_7(inp_F,inp_W,out_I); input [7:0]inp_F,inp_W; output [7:0]out_I; assign out_I=inp_F ~& inp_W; endmodule
module NAND_4(A,D,X); input [4:0]A,D; output [4:0]X; assign X=A ~& D; endmodule
module NAND_2(inp_R,inp_T,inp_X,out_Z); input [2:0]inp_R,inp_T,inp_X; output [2:0]out_Z; assign out_Z=inp_R ~& inp_T ~& inp_X; endmodule
module NAND_2(E,D,A); input [2:0]E,D; output [2:0]A; assign A=E ~& D; endmodule
module NAND_2(inp_I,inp_V,out_X); input [2:0]inp_I,inp_V; output [2:0]out_X; assign out_X=inp_I ~& inp_V; endmodule
module NAND_6(V,O,F); input [6:0]V,O; output [6:0]F; assign F=V ~& O; endmodule
module NAND_6(inp_X,inp_D,out_P); input [6:0]inp_X,inp_D; output [6:0]out_P; assign out_P=inp_X ~& inp_D; endmodule
module NAND_5(S,W,X,L); input [5:0]S,W,X; output [5:0]L; assign L=S ~& W ~& X; endmodule
module NAND_2(inp_M,inp_Q,inp_C,out_H); input [2:0]inp_M,inp_Q,inp_C; output [2:0]out_H; assign out_H=inp_M ~& inp_Q ~& inp_C
module NAND_6(O,H,S); input [6:0]O,H; output [6:0]S; assign S=O ~& H
module NAND_1(I,Y,V); input [1:0]I,Y; output [1:0]V; assign V=I ~& Y; endmodule
module NAND_1(Y,F,O,H); input [1:0]Y,F,O; output [1:0]H; assign H=Y ~& F ~& O
module NAND_2(inp_P,inp_X,inp_J,out_Z); input [2:0]inp_P,inp_X,inp_J; output [2:0]out_Z; assign out_Z=inp_P ~& inp_X ~& inp_J; endmodule
module NAND_2(inp_T,inp_H,inp_S,out_I); input [2:0]inp_T,inp_H,inp_S; output [2:0]out_I; assign out_I=inp_T ~& inp_H ~& inp_S; endmodule
module NAND_1(W,L,J,T); input [1:0]W,L,J; output [1:0]T; assign T=W ~& L ~& J
module NAND_5(H,G,U,U); input [5:0]H,G,U; output [5:0]U; assign U=H ~& G ~& U
module NAND_2(inp_D,inp_B,out_A); input [2:0]inp_D,inp_B; output [2:0]out_A; assign out_A=inp_D ~& inp_B; endmodule
module NAND_2(inp_D,inp_H,out_A); input [2:0]inp_D,inp_H; output [2:0]out_A; assign out_A=inp_D ~& inp_H
module NAND_5(inp_C,inp_Y,inp_Q,out_R); input [5:0]inp_C,inp_Y,inp_Q; output [5:0]out_R; assign out_R=inp_C ~& inp_Y ~& inp_Q
module NAND_2(L,O,Z); input [2:0]L,O; output [2:0]Z; assign Z=L ~& O; endmodule
module NAND_5(inp_V,inp_C,inp_D,out_U); input [5:0]inp_V,inp_C,inp_D; output [5:0]out_U; assign out_U=inp_V ~& inp_C ~& inp_D
module NAND_1(inp_C,inp_Z,out_Q); input [1:0]inp_C,inp_Z; output [1:0]out_Q; assign out_Q=inp_C ~& inp_Z; endmodule
module NAND_2(F,E,Z,G); input [2:0]F,E,Z; output [2:0]G; assign G=F ~& E ~& Z
module NAND_5(A,E,H); input [5:0]A,E; output [5:0]H; assign H=A ~& E; endmodule
module NAND_5(G,S,I); input [5:0]G,S; output [5:0]I; assign I=G ~& S; endmodule
module NAND_2(E,Z,X); input [2:0]E,Z; output [2:0]X; assign X=E ~& Z; endmodule
module NAND_5(inp_O,inp_N,out_W); input [5:0]inp_O,inp_N; output [5:0]out_W; assign out_W=inp_O ~& inp_N; endmodule
module NAND_4(Y,Q,S); input [4:0]Y,Q; output [4:0]S; assign S=Y ~& Q
module NAND_4(inp_Q,inp_Y,inp_I,out_O); input [4:0]inp_Q,inp_Y,inp_I; output [4:0]out_O; assign out_O=inp_Q ~& inp_Y ~& inp_I
module NAND_3(W,K,D,E); input [3:0]W,K,D; output [3:0]E; assign E=W ~& K ~& D; endmodule
module NAND_3(inp_T,inp_Y,inp_B,out_V); input [3:0]inp_T,inp_Y,inp_B; output [3:0]out_V; assign out_V=inp_T ~& inp_Y ~& inp_B
module NAND_3(P,V,D); input [3:0]P,V; output [3:0]D; assign D=P ~& V; endmodule
module NAND_1(D,S,O,T); input [1:0]D,S,O; output [1:0]T; assign T=D ~& S ~& O
module NAND_4(E,M,B); input [4:0]E,M; output [4:0]B; assign B=E ~& M
module NAND_1(inp_A,inp_C,out_S); input [1:0]inp_A,inp_C; output [1:0]out_S; assign out_S=inp_A ~& inp_C; endmodule
module NAND_5(inp_X,inp_G,inp_I,out_S); input [5:0]inp_X,inp_G,inp_I; output [5:0]out_S; assign out_S=inp_X ~& inp_G ~& inp_I; endmodule
module NAND_7(W,X,D,Q); input [7:0]W,X,D; output [7:0]Q; assign Q=W ~& X ~& D
module NAND_4(inp_F,inp_E,out_Z); input [4:0]inp_F,inp_E; output [4:0]out_Z; assign out_Z=inp_F ~& inp_E
module NAND_3(inp_J,inp_N,inp_B,out_P); input [3:0]inp_J,inp_N,inp_B; output [3:0]out_P; assign out_P=inp_J ~& inp_N ~& inp_B
module NAND_1(B,G,H,Q); input [1:0]B,G,H; output [1:0]Q; assign Q=B ~& G ~& H; endmodule
module NAND_1(V,G,A,P); input [1:0]V,G,A; output [1:0]P; assign P=V ~& G ~& A; endmodule
module NAND_4(inp_N,inp_X,inp_J,out_U); input [4:0]inp_N,inp_X,inp_J; output [4:0]out_U; assign out_U=inp_N ~& inp_X ~& inp_J; endmodule
module NAND_7(inp_J,inp_Q,inp_N,out_J); input [7:0]inp_J,inp_Q,inp_N; output [7:0]out_J; assign out_J=inp_J ~& inp_Q ~& inp_N
module NAND_3(U,Z,T); input [3:0]U,Z; output [3:0]T; assign T=U ~& Z; endmodule
module NAND_1(R,H,U,K); input [1:0]R,H,U; output [1:0]K; assign K=R ~& H ~& U
module NAND_2(inp_U,inp_D,inp_K,out_C); input [2:0]inp_U,inp_D,inp_K; output [2:0]out_C; assign out_C=inp_U ~& inp_D ~& inp_K; endmodule
module NAND_3(inp_M,inp_S,out_X); input [3:0]inp_M,inp_S; output [3:0]out_X; assign out_X=inp_M ~& inp_S; endmodule
module NAND_1(T,B,J,I); input [1:0]T,B,J; output [1:0]I; assign I=T ~& B ~& J
module NAND_4(inp_Q,inp_P,inp_J,out_V); input [4:0]inp_Q,inp_P,inp_J; output [4:0]out_V; assign out_V=inp_Q ~& inp_P ~& inp_J
module NAND_1(D,E,B); input [1:0]D,E; output [1:0]B; assign B=D ~& E
module NAND_1(inp_S,inp_A,inp_W,out_V); input [1:0]inp_S,inp_A,inp_W; output [1:0]out_V; assign out_V=inp_S ~& inp_A ~& inp_W; endmodule
module NAND_7(G,R,H,N); input [7:0]G,R,H; output [7:0]N; assign N=G ~& R ~& H; endmodule
module NAND_1(O,V,U,S); input [1:0]O,V,U; output [1:0]S; assign S=O ~& V ~& U; endmodule
module NAND_4(I,A,X); input [4:0]I,A; output [4:0]X; assign X=I ~& A; endmodule
module NAND_4(T,M,R); input [4:0]T,M; output [4:0]R; assign R=T ~& M; endmodule
module NAND_2(F,G,V); input [2:0]F,G; output [2:0]V; assign V=F ~& G
module NAND_5(P,C,U,V); input [5:0]P,C,U; output [5:0]V; assign V=P ~& C ~& U
module NAND_1(O,Q,E,N); input [1:0]O,Q,E; output [1:0]N; assign N=O ~& Q ~& E; endmodule
module NAND_2(inp_U,inp_S,inp_Y,out_X); input [2:0]inp_U,inp_S,inp_Y; output [2:0]out_X; assign out_X=inp_U ~& inp_S ~& inp_Y
module NAND_6(H,U,C); input [6:0]H,U; output [6:0]C; assign C=H ~& U
module NAND_3(inp_G,inp_Q,inp_L,out_B); input [3:0]inp_G,inp_Q,inp_L; output [3:0]out_B; assign out_B=inp_G ~& inp_Q ~& inp_L; endmodule
module NAND_3(inp_S,inp_A,out_V); input [3:0]inp_S,inp_A; output [3:0]out_V; assign out_V=inp_S ~& inp_A
module NAND_7(P,J,K,M); input [7:0]P,J,K; output [7:0]M; assign M=P ~& J ~& K
module NAND_2(inp_U,inp_D,inp_L,out_H); input [2:0]inp_U,inp_D,inp_L; output [2:0]out_H; assign out_H=inp_U ~& inp_D ~& inp_L; endmodule
module NAND_2(inp_S,inp_G,out_F); input [2:0]inp_S,inp_G; output [2:0]out_F; assign out_F=inp_S ~& inp_G
module NAND_5(inp_O,inp_Y,inp_J,out_N); input [5:0]inp_O,inp_Y,inp_J; output [5:0]out_N; assign out_N=inp_O ~& inp_Y ~& inp_J; endmodule
module NAND_4(inp_N,inp_X,inp_S,out_S); input [4:0]inp_N,inp_X,inp_S; output [4:0]out_S; assign out_S=inp_N ~& inp_X ~& inp_S; endmodule
module NAND_3(inp_E,inp_M,out_D); input [3:0]inp_E,inp_M; output [3:0]out_D; assign out_D=inp_E ~& inp_M; endmodule
module NAND_7(inp_W,inp_T,inp_B,out_Q); input [7:0]inp_W,inp_T,inp_B; output [7:0]out_Q; assign out_Q=inp_W ~& inp_T ~& inp_B; endmodule
module NAND_5(inp_G,inp_T,inp_I,out_P); input [5:0]inp_G,inp_T,inp_I; output [5:0]out_P; assign out_P=inp_G ~& inp_T ~& inp_I
module NAND_7(inp_P,inp_C,out_H); input [7:0]inp_P,inp_C; output [7:0]out_H; assign out_H=inp_P ~& inp_C
module NAND_6(L,S,T,I); input [6:0]L,S,T; output [6:0]I; assign I=L ~& S ~& T; endmodule
module NAND_2(S,W,U,V); input [2:0]S,W,U; output [2:0]V; assign V=S ~& W ~& U; endmodule
module NAND_2(G,Z,S,Q); input [2:0]G,Z,S; output [2:0]Q; assign Q=G ~& Z ~& S
module NAND_7(inp_J,inp_K,out_F); input [7:0]inp_J,inp_K; output [7:0]out_F; assign out_F=inp_J ~& inp_K; endmodule
module NAND_7(inp_H,inp_V,out_T); input [7:0]inp_H,inp_V; output [7:0]out_T; assign out_T=inp_H ~& inp_V
module NAND_7(inp_P,inp_R,inp_I,out_G); input [7:0]inp_P,inp_R,inp_I; output [7:0]out_G; assign out_G=inp_P ~& inp_R ~& inp_I
module NAND_6(inp_U,inp_K,out_G); input [6:0]inp_U,inp_K; output [6:0]out_G; assign out_G=inp_U ~& inp_K; endmodule
module NAND_2(M,X,H,Z); input [2:0]M,X,H; output [2:0]Z; assign Z=M ~& X ~& H; endmodule
module NAND_2(Z,D,W); input [2:0]Z,D; output [2:0]W; assign W=Z ~& D; endmodule
module NAND_6(inp_N,inp_D,inp_O,out_P); input [6:0]inp_N,inp_D,inp_O; output [6:0]out_P; assign out_P=inp_N ~& inp_D ~& inp_O; endmodule
module NAND_5(U,M,W,O); input [5:0]U,M,W; output [5:0]O; assign O=U ~& M ~& W; endmodule
module NAND_5(inp_V,inp_O,inp_J,out_D); input [5:0]inp_V,inp_O,inp_J; output [5:0]out_D; assign out_D=inp_V ~& inp_O ~& inp_J; endmodule
module NAND_6(inp_L,inp_W,out_W); input [6:0]inp_L,inp_W; output [6:0]out_W; assign out_W=inp_L ~& inp_W
module NAND_6(Z,O,F); input [6:0]Z,O; output [6:0]F; assign F=Z ~& O; endmodule
module NAND_6(G,K,B); input [6:0]G,K; output [6:0]B; assign B=G ~& K
module NAND_7(Q,T,P); input [7:0]Q,T; output [7:0]P; assign P=Q ~& T; endmodule
module NAND_5(I,N,O); input [5:0]I,N; output [5:0]O; assign O=I ~& N; endmodule
module NAND_1(inp_M,inp_E,inp_S,out_K); input [1:0]inp_M,inp_E,inp_S; output [1:0]out_K; assign out_K=inp_M ~& inp_E ~& inp_S
module NAND_4(inp_Z,inp_R,out_I); input [4:0]inp_Z,inp_R; output [4:0]out_I; assign out_I=inp_Z ~& inp_R; endmodule
module NAND_3(F,H,E); input [3:0]F,H; output [3:0]E; assign E=F ~& H; endmodule
module NAND_1(R,L,A); input [1:0]R,L; output [1:0]A; assign A=R ~& L
module NAND_5(inp_S,inp_H,inp_Y,out_G); input [5:0]inp_S,inp_H,inp_Y; output [5:0]out_G; assign out_G=inp_S ~& inp_H ~& inp_Y; endmodule
module NAND_3(inp_J,inp_G,out_E); input [3:0]inp_J,inp_G; output [3:0]out_E; assign out_E=inp_J ~& inp_G; endmodule
module NAND_1(inp_I,inp_Y,inp_M,out_C); input [1:0]inp_I,inp_Y,inp_M; output [1:0]out_C; assign out_C=inp_I ~& inp_Y ~& inp_M
module NAND_5(Z,F,W,S); input [5:0]Z,F,W; output [5:0]S; assign S=Z ~& F ~& W
module NAND_4(inp_T,inp_K,out_F); input [4:0]inp_T,inp_K; output [4:0]out_F; assign out_F=inp_T ~& inp_K
module NAND_7(inp_M,inp_S,inp_W,out_P); input [7:0]inp_M,inp_S,inp_W; output [7:0]out_P; assign out_P=inp_M ~& inp_S ~& inp_W
module NAND_7(inp_I,inp_C,inp_Y,out_K); input [7:0]inp_I,inp_C,inp_Y; output [7:0]out_K; assign out_K=inp_I ~& inp_C ~& inp_Y
module NAND_4(inp_L,inp_V,inp_U,out_F); input [4:0]inp_L,inp_V,inp_U; output [4:0]out_F; assign out_F=inp_L ~& inp_V ~& inp_U; endmodule
module NAND_1(inp_V,inp_K,inp_M,out_V); input [1:0]inp_V,inp_K,inp_M; output [1:0]out_V; assign out_V=inp_V ~& inp_K ~& inp_M; endmodule
module NAND_2(Y,G,W); input [2:0]Y,G; output [2:0]W; assign W=Y ~& G
module NAND_3(inp_M,inp_E,out_L); input [3:0]inp_M,inp_E; output [3:0]out_L; assign out_L=inp_M ~& inp_E
module NAND_4(inp_M,inp_L,inp_I,out_X); input [4:0]inp_M,inp_L,inp_I; output [4:0]out_X; assign out_X=inp_M ~& inp_L ~& inp_I; endmodule
module NAND_3(inp_D,inp_U,out_D); input [3:0]inp_D,inp_U; output [3:0]out_D; assign out_D=inp_D ~& inp_U; endmodule
module NOR_6(M,J,U); input [6:0]M,J; output [6:0]U; assign U=M ~| J
module NOR_7(inp_I,inp_J,inp_E,out_R); input [7:0]inp_I,inp_J,inp_E; output [7:0]out_R; assign out_R=inp_I ~| inp_J ~| inp_E
module NOR_2(inp_D,inp_H,inp_V,out_V); input [2:0]inp_D,inp_H,inp_V; output [2:0]out_V; assign out_V=inp_D ~| inp_H ~| inp_V; endmodule
module NOR_6(inp_Z,inp_B,inp_M,out_A); input [6:0]inp_Z,inp_B,inp_M; output [6:0]out_A; assign out_A=inp_Z ~| inp_B ~| inp_M; endmodule
module NOR_6(J,K,F); input [6:0]J,K; output [6:0]F; assign F=J ~| K
module NOR_6(F,K,U,L); input [6:0]F,K,U; output [6:0]L; assign L=F ~| K ~| U
module NOR_3(inp_E,inp_Q,inp_I,out_P); input [3:0]inp_E,inp_Q,inp_I; output [3:0]out_P; assign out_P=inp_E ~| inp_Q ~| inp_I; endmodule
module NOR_3(B,Z,G,J); input [3:0]B,Z,G; output [3:0]J; assign J=B ~| Z ~| G; endmodule
module NOR_2(Q,V,B,F); input [2:0]Q,V,B; output [2:0]F; assign F=Q ~| V ~| B
module NOR_4(inp_L,inp_J,inp_W,out_Y); input [4:0]inp_L,inp_J,inp_W; output [4:0]out_Y; assign out_Y=inp_L ~| inp_J ~| inp_W; endmodule
module NOR_5(inp_Y,inp_U,inp_C,out_P); input [5:0]inp_Y,inp_U,inp_C; output [5:0]out_P; assign out_P=inp_Y ~| inp_U ~| inp_C; endmodule
module NOR_4(inp_X,inp_K,inp_E,out_H); input [4:0]inp_X,inp_K,inp_E; output [4:0]out_H; assign out_H=inp_X ~| inp_K ~| inp_E
module NOR_6(Q,X,T,F); input [6:0]Q,X,T; output [6:0]F; assign F=Q ~| X ~| T
module NOR_4(inp_F,inp_E,out_S); input [4:0]inp_F,inp_E; output [4:0]out_S; assign out_S=inp_F ~| inp_E; endmodule
module NOR_7(inp_G,inp_R,out_E); input [7:0]inp_G,inp_R; output [7:0]out_E; assign out_E=inp_G ~| inp_R
module NOR_1(N,P,Z); input [1:0]N,P; output [1:0]Z; assign Z=N ~| P
module NOR_6(F,A,Y); input [6:0]F,A; output [6:0]Y; assign Y=F ~| A; endmodule
module NOR_1(J,I,X,P); input [1:0]J,I,X; output [1:0]P; assign P=J ~| I ~| X
module NOR_4(inp_T,inp_Q,inp_G,out_E); input [4:0]inp_T,inp_Q,inp_G; output [4:0]out_E; assign out_E=inp_T ~| inp_Q ~| inp_G; endmodule
module NOR_1(J,L,C); input [1:0]J,L; output [1:0]C; assign C=J ~| L
module NOR_7(L,J,A); input [7:0]L,J; output [7:0]A; assign A=L ~| J; endmodule
module NOR_7(inp_I,inp_M,inp_W,out_V); input [7:0]inp_I,inp_M,inp_W; output [7:0]out_V; assign out_V=inp_I ~| inp_M ~| inp_W; endmodule
module NOR_1(L,C,H,K); input [1:0]L,C,H; output [1:0]K; assign K=L ~| C ~| H
module NOR_5(G,F,I); input [5:0]G,F; output [5:0]I; assign I=G ~| F
module NOR_3(U,N,I,D); input [3:0]U,N,I; output [3:0]D; assign D=U ~| N ~| I; endmodule
module NOR_1(inp_B,inp_D,out_G); input [1:0]inp_B,inp_D; output [1:0]out_G; assign out_G=inp_B ~| inp_D; endmodule
module NOR_7(inp_F,inp_K,inp_I,out_Y); input [7:0]inp_F,inp_K,inp_I; output [7:0]out_Y; assign out_Y=inp_F ~| inp_K ~| inp_I; endmodule
module NOR_6(L,G,J); input [6:0]L,G; output [6:0]J; assign J=L ~| G; endmodule
module NOR_7(O,A,R); input [7:0]O,A; output [7:0]R; assign R=O ~| A
module NOR_2(inp_S,inp_M,inp_E,out_P); input [2:0]inp_S,inp_M,inp_E; output [2:0]out_P; assign out_P=inp_S ~| inp_M ~| inp_E
module NOR_4(D,K,M); input [4:0]D,K; output [4:0]M; assign M=D ~| K; endmodule
module NOR_1(inp_Y,inp_R,inp_L,out_A); input [1:0]inp_Y,inp_R,inp_L; output [1:0]out_A; assign out_A=inp_Y ~| inp_R ~| inp_L; endmodule
module NOR_6(inp_K,inp_C,out_I); input [6:0]inp_K,inp_C; output [6:0]out_I; assign out_I=inp_K ~| inp_C; endmodule
module NOR_2(inp_F,inp_E,out_U); input [2:0]inp_F,inp_E; output [2:0]out_U; assign out_U=inp_F ~| inp_E
module NOR_1(inp_K,inp_B,inp_N,out_A); input [1:0]inp_K,inp_B,inp_N; output [1:0]out_A; assign out_A=inp_K ~| inp_B ~| inp_N
module NOR_1(E,M,I,F); input [1:0]E,M,I; output [1:0]F; assign F=E ~| M ~| I
module NOR_1(inp_P,inp_T,out_U); input [1:0]inp_P,inp_T; output [1:0]out_U; assign out_U=inp_P ~| inp_T; endmodule
module NOR_6(F,X,G); input [6:0]F,X; output [6:0]G; assign G=F ~| X
module NOR_2(H,Y,L); input [2:0]H,Y; output [2:0]L; assign L=H ~| Y
module NOR_1(inp_U,inp_N,inp_J,out_L); input [1:0]inp_U,inp_N,inp_J; output [1:0]out_L; assign out_L=inp_U ~| inp_N ~| inp_J; endmodule
module NOR_4(inp_P,inp_X,out_L); input [4:0]inp_P,inp_X; output [4:0]out_L; assign out_L=inp_P ~| inp_X
module NOR_4(inp_B,inp_O,out_O); input [4:0]inp_B,inp_O; output [4:0]out_O; assign out_O=inp_B ~| inp_O; endmodule
module NOR_4(B,Z,P,A); input [4:0]B,Z,P; output [4:0]A; assign A=B ~| Z ~| P; endmodule
module NOR_2(inp_P,inp_L,inp_I,out_A); input [2:0]inp_P,inp_L,inp_I; output [2:0]out_A; assign out_A=inp_P ~| inp_L ~| inp_I
module NOR_3(inp_L,inp_Z,inp_P,out_J); input [3:0]inp_L,inp_Z,inp_P; output [3:0]out_J; assign out_J=inp_L ~| inp_Z ~| inp_P; endmodule
module NOR_3(W,S,C,X); input [3:0]W,S,C; output [3:0]X; assign X=W ~| S ~| C
module NOR_6(inp_P,inp_Y,out_Z); input [6:0]inp_P,inp_Y; output [6:0]out_Z; assign out_Z=inp_P ~| inp_Y; endmodule
module NOR_6(inp_F,inp_C,out_M); input [6:0]inp_F,inp_C; output [6:0]out_M; assign out_M=inp_F ~| inp_C
module NOR_1(F,N,S); input [1:0]F,N; output [1:0]S; assign S=F ~| N
module NOR_7(inp_E,inp_B,inp_H,out_R); input [7:0]inp_E,inp_B,inp_H; output [7:0]out_R; assign out_R=inp_E ~| inp_B ~| inp_H
module NOR_7(inp_A,inp_S,out_A); input [7:0]inp_A,inp_S; output [7:0]out_A; assign out_A=inp_A ~| inp_S
module NOR_6(U,S,I,D); input [6:0]U,S,I; output [6:0]D; assign D=U ~| S ~| I; endmodule
module NOR_2(inp_T,inp_I,out_Z); input [2:0]inp_T,inp_I; output [2:0]out_Z; assign out_Z=inp_T ~| inp_I; endmodule
module NOR_7(T,D,V,K); input [7:0]T,D,V; output [7:0]K; assign K=T ~| D ~| V; endmodule
module NOR_4(P,T,W); input [4:0]P,T; output [4:0]W; assign W=P ~| T; endmodule
module NOR_4(inp_O,inp_L,out_S); input [4:0]inp_O,inp_L; output [4:0]out_S; assign out_S=inp_O ~| inp_L; endmodule
module NOR_6(Y,T,H); input [6:0]Y,T; output [6:0]H; assign H=Y ~| T; endmodule
module NOR_2(B,Q,S,A); input [2:0]B,Q,S; output [2:0]A; assign A=B ~| Q ~| S; endmodule
module NOR_4(W,C,P); input [4:0]W,C; output [4:0]P; assign P=W ~| C; endmodule
module NOR_5(inp_X,inp_F,inp_T,out_I); input [5:0]inp_X,inp_F,inp_T; output [5:0]out_I; assign out_I=inp_X ~| inp_F ~| inp_T
module NOR_3(inp_E,inp_F,out_E); input [3:0]inp_E,inp_F; output [3:0]out_E; assign out_E=inp_E ~| inp_F; endmodule
module NOR_6(F,X,J); input [6:0]F,X; output [6:0]J; assign J=F ~| X; endmodule
module NOR_6(inp_U,inp_J,out_K); input [6:0]inp_U,inp_J; output [6:0]out_K; assign out_K=inp_U ~| inp_J
module NOR_6(inp_E,inp_F,inp_K,out_I); input [6:0]inp_E,inp_F,inp_K; output [6:0]out_I; assign out_I=inp_E ~| inp_F ~| inp_K
module NOR_3(inp_E,inp_O,inp_S,out_O); input [3:0]inp_E,inp_O,inp_S; output [3:0]out_O; assign out_O=inp_E ~| inp_O ~| inp_S
module NOR_4(inp_K,inp_I,out_I); input [4:0]inp_K,inp_I; output [4:0]out_I; assign out_I=inp_K ~| inp_I; endmodule
module NOR_6(F,D,K); input [6:0]F,D; output [6:0]K; assign K=F ~| D; endmodule
module NOR_5(inp_A,inp_O,inp_L,out_X); input [5:0]inp_A,inp_O,inp_L; output [5:0]out_X; assign out_X=inp_A ~| inp_O ~| inp_L
module NOR_2(U,P,W); input [2:0]U,P; output [2:0]W; assign W=U ~| P
module NOR_6(inp_E,inp_D,inp_H,out_W); input [6:0]inp_E,inp_D,inp_H; output [6:0]out_W; assign out_W=inp_E ~| inp_D ~| inp_H; endmodule
module NOR_2(inp_Q,inp_O,inp_M,out_Y); input [2:0]inp_Q,inp_O,inp_M; output [2:0]out_Y; assign out_Y=inp_Q ~| inp_O ~| inp_M
module NOR_1(M,R,Q,H); input [1:0]M,R,Q; output [1:0]H; assign H=M ~| R ~| Q; endmodule
module NOR_3(G,X,Z); input [3:0]G,X; output [3:0]Z; assign Z=G ~| X
module NOR_1(E,G,X); input [1:0]E,G; output [1:0]X; assign X=E ~| G
module NOR_3(E,A,M); input [3:0]E,A; output [3:0]M; assign M=E ~| A; endmodule
module NOR_1(R,X,P); input [1:0]R,X; output [1:0]P; assign P=R ~| X; endmodule
module NOR_7(inp_O,inp_G,out_R); input [7:0]inp_O,inp_G; output [7:0]out_R; assign out_R=inp_O ~| inp_G; endmodule
module NOR_7(inp_I,inp_Z,out_X); input [7:0]inp_I,inp_Z; output [7:0]out_X; assign out_X=inp_I ~| inp_Z
module NOR_5(Z,L,Q); input [5:0]Z,L; output [5:0]Q; assign Q=Z ~| L; endmodule
module NOR_6(X,B,L,O); input [6:0]X,B,L; output [6:0]O; assign O=X ~| B ~| L
module NOR_2(inp_A,inp_E,inp_W,out_K); input [2:0]inp_A,inp_E,inp_W; output [2:0]out_K; assign out_K=inp_A ~| inp_E ~| inp_W; endmodule
module NOR_2(M,F,Y,J); input [2:0]M,F,Y; output [2:0]J; assign J=M ~| F ~| Y
module NOR_3(inp_L,inp_P,out_I); input [3:0]inp_L,inp_P; output [3:0]out_I; assign out_I=inp_L ~| inp_P; endmodule
module NOR_2(inp_C,inp_F,inp_U,out_C); input [2:0]inp_C,inp_F,inp_U; output [2:0]out_C; assign out_C=inp_C ~| inp_F ~| inp_U; endmodule
module NOR_7(inp_O,inp_H,inp_Q,out_T); input [7:0]inp_O,inp_H,inp_Q; output [7:0]out_T; assign out_T=inp_O ~| inp_H ~| inp_Q; endmodule
module NOR_3(inp_Z,inp_E,out_D); input [3:0]inp_Z,inp_E; output [3:0]out_D; assign out_D=inp_Z ~| inp_E
module NOR_2(W,O,S); input [2:0]W,O; output [2:0]S; assign S=W ~| O
module NOR_4(R,A,B,G); input [4:0]R,A,B; output [4:0]G; assign G=R ~| A ~| B; endmodule
module NOR_1(inp_T,inp_Y,out_S); input [1:0]inp_T,inp_Y; output [1:0]out_S; assign out_S=inp_T ~| inp_Y; endmodule
module NOR_3(inp_N,inp_L,out_Z); input [3:0]inp_N,inp_L; output [3:0]out_Z; assign out_Z=inp_N ~| inp_L; endmodule
module NOR_7(inp_O,inp_D,out_L); input [7:0]inp_O,inp_D; output [7:0]out_L; assign out_L=inp_O ~| inp_D
module NOR_7(inp_Y,inp_C,out_S); input [7:0]inp_Y,inp_C; output [7:0]out_S; assign out_S=inp_Y ~| inp_C; endmodule
module NOR_6(inp_S,inp_E,inp_H,out_K); input [6:0]inp_S,inp_E,inp_H; output [6:0]out_K; assign out_K=inp_S ~| inp_E ~| inp_H; endmodule
module NOR_1(S,M,D); input [1:0]S,M; output [1:0]D; assign D=S ~| M
module NOR_4(inp_G,inp_X,out_Z); input [4:0]inp_G,inp_X; output [4:0]out_Z; assign out_Z=inp_G ~| inp_X; endmodule
module NOR_3(inp_V,inp_W,out_D); input [3:0]inp_V,inp_W; output [3:0]out_D; assign out_D=inp_V ~| inp_W; endmodule
module NOR_2(inp_B,inp_M,out_M); input [2:0]inp_B,inp_M; output [2:0]out_M; assign out_M=inp_B ~| inp_M
module NOR_1(O,R,C,S); input [1:0]O,R,C; output [1:0]S; assign S=O ~| R ~| C
module NOR_3(inp_Z,inp_A,inp_V,out_D); input [3:0]inp_Z,inp_A,inp_V; output [3:0]out_D; assign out_D=inp_Z ~| inp_A ~| inp_V
module NOR_4(inp_A,inp_X,inp_G,out_X); input [4:0]inp_A,inp_X,inp_G; output [4:0]out_X; assign out_X=inp_A ~| inp_X ~| inp_G; endmodule
module NOR_6(inp_Q,inp_F,out_Q); input [6:0]inp_Q,inp_F; output [6:0]out_Q; assign out_Q=inp_Q ~| inp_F; endmodule
module NOR_3(inp_P,inp_B,out_V); input [3:0]inp_P,inp_B; output [3:0]out_V; assign out_V=inp_P ~| inp_B; endmodule
module NOR_3(Y,Z,T); input [3:0]Y,Z; output [3:0]T; assign T=Y ~| Z; endmodule
module NOR_3(N,V,A,G); input [3:0]N,V,A; output [3:0]G; assign G=N ~| V ~| A
module NOR_5(inp_P,inp_G,inp_R,out_Q); input [5:0]inp_P,inp_G,inp_R; output [5:0]out_Q; assign out_Q=inp_P ~| inp_G ~| inp_R; endmodule
module NOR_7(inp_S,inp_O,inp_N,out_S); input [7:0]inp_S,inp_O,inp_N; output [7:0]out_S; assign out_S=inp_S ~| inp_O ~| inp_N; endmodule
module NOR_7(inp_L,inp_B,inp_R,out_A); input [7:0]inp_L,inp_B,inp_R; output [7:0]out_A; assign out_A=inp_L ~| inp_B ~| inp_R
module NOR_4(inp_I,inp_A,out_Z); input [4:0]inp_I,inp_A; output [4:0]out_Z; assign out_Z=inp_I ~| inp_A; endmodule
module NOR_7(inp_M,inp_J,out_R); input [7:0]inp_M,inp_J; output [7:0]out_R; assign out_R=inp_M ~| inp_J; endmodule
module NOR_3(R,T,W,X); input [3:0]R,T,W; output [3:0]X; assign X=R ~| T ~| W
module NOR_6(Q,M,L,V); input [6:0]Q,M,L; output [6:0]V; assign V=Q ~| M ~| L; endmodule
module NOR_6(inp_F,inp_Z,inp_I,out_D); input [6:0]inp_F,inp_Z,inp_I; output [6:0]out_D; assign out_D=inp_F ~| inp_Z ~| inp_I
module NOR_7(U,X,F); input [7:0]U,X; output [7:0]F; assign F=U ~| X
module NOR_5(inp_U,inp_B,inp_G,out_I); input [5:0]inp_U,inp_B,inp_G; output [5:0]out_I; assign out_I=inp_U ~| inp_B ~| inp_G
module NOR_2(inp_V,inp_S,inp_O,out_G); input [2:0]inp_V,inp_S,inp_O; output [2:0]out_G; assign out_G=inp_V ~| inp_S ~| inp_O
module NOR_1(X,B,K); input [1:0]X,B; output [1:0]K; assign K=X ~| B; endmodule
module NOR_2(inp_S,inp_I,out_U); input [2:0]inp_S,inp_I; output [2:0]out_U; assign out_U=inp_S ~| inp_I; endmodule
module NOR_2(inp_O,inp_J,out_B); input [2:0]inp_O,inp_J; output [2:0]out_B; assign out_B=inp_O ~| inp_J
module NOR_4(S,Z,O,P); input [4:0]S,Z,O; output [4:0]P; assign P=S ~| Z ~| O
module NOR_1(S,T,V); input [1:0]S,T; output [1:0]V; assign V=S ~| T; endmodule
module NOR_7(inp_D,inp_R,out_G); input [7:0]inp_D,inp_R; output [7:0]out_G; assign out_G=inp_D ~| inp_R; endmodule
module NOR_6(A,K,T); input [6:0]A,K; output [6:0]T; assign T=A ~| K
module NOR_4(inp_P,inp_C,inp_N,out_J); input [4:0]inp_P,inp_C,inp_N; output [4:0]out_J; assign out_J=inp_P ~| inp_C ~| inp_N
module NOR_1(U,T,O,B); input [1:0]U,T,O; output [1:0]B; assign B=U ~| T ~| O
module NOR_5(inp_V,inp_B,inp_N,out_T); input [5:0]inp_V,inp_B,inp_N; output [5:0]out_T; assign out_T=inp_V ~| inp_B ~| inp_N
module NOR_1(inp_B,inp_N,inp_I,out_G); input [1:0]inp_B,inp_N,inp_I; output [1:0]out_G; assign out_G=inp_B ~| inp_N ~| inp_I
module NOR_7(inp_D,inp_M,out_L); input [7:0]inp_D,inp_M; output [7:0]out_L; assign out_L=inp_D ~| inp_M; endmodule
module NOR_2(inp_F,inp_T,out_Y); input [2:0]inp_F,inp_T; output [2:0]out_Y; assign out_Y=inp_F ~| inp_T; endmodule
module NOR_6(P,J,E,T); input [6:0]P,J,E; output [6:0]T; assign T=P ~| J ~| E
module NOR_5(inp_C,inp_P,inp_R,out_Z); input [5:0]inp_C,inp_P,inp_R; output [5:0]out_Z; assign out_Z=inp_C ~| inp_P ~| inp_R; endmodule
module NOR_5(K,L,V,U); input [5:0]K,L,V; output [5:0]U; assign U=K ~| L ~| V; endmodule
module NOR_2(R,A,Z,H); input [2:0]R,A,Z; output [2:0]H; assign H=R ~| A ~| Z
module NOR_1(inp_T,inp_F,inp_N,out_R); input [1:0]inp_T,inp_F,inp_N; output [1:0]out_R; assign out_R=inp_T ~| inp_F ~| inp_N; endmodule
module NOR_4(inp_P,inp_U,out_E); input [4:0]inp_P,inp_U; output [4:0]out_E; assign out_E=inp_P ~| inp_U; endmodule
module NOR_5(inp_N,inp_A,inp_I,out_C); input [5:0]inp_N,inp_A,inp_I; output [5:0]out_C; assign out_C=inp_N ~| inp_A ~| inp_I
module NOR_1(inp_Z,inp_M,inp_H,out_E); input [1:0]inp_Z,inp_M,inp_H; output [1:0]out_E; assign out_E=inp_Z ~| inp_M ~| inp_H
module NOR_5(inp_V,inp_U,inp_P,out_I); input [5:0]inp_V,inp_U,inp_P; output [5:0]out_I; assign out_I=inp_V ~| inp_U ~| inp_P; endmodule
module NOR_6(inp_G,inp_C,out_Y); input [6:0]inp_G,inp_C; output [6:0]out_Y; assign out_Y=inp_G ~| inp_C
module NOR_6(O,C,U); input [6:0]O,C; output [6:0]U; assign U=O ~| C
module NOR_6(R,W,B,E); input [6:0]R,W,B; output [6:0]E; assign E=R ~| W ~| B
module NOR_2(inp_W,inp_B,out_U); input [2:0]inp_W,inp_B; output [2:0]out_U; assign out_U=inp_W ~| inp_B; endmodule
module NOR_5(inp_Y,inp_K,out_A); input [5:0]inp_Y,inp_K; output [5:0]out_A; assign out_A=inp_Y ~| inp_K; endmodule
module NOR_1(N,I,P); input [1:0]N,I; output [1:0]P; assign P=N ~| I
module NOR_1(U,O,B,I); input [1:0]U,O,B; output [1:0]I; assign I=U ~| O ~| B
module NOR_2(U,Y,C,W); input [2:0]U,Y,C; output [2:0]W; assign W=U ~| Y ~| C
module NOR_1(E,C,X,W); input [1:0]E,C,X; output [1:0]W; assign W=E ~| C ~| X
module NOR_6(inp_L,inp_J,inp_F,out_C); input [6:0]inp_L,inp_J,inp_F; output [6:0]out_C; assign out_C=inp_L ~| inp_J ~| inp_F; endmodule
module NOR_7(Y,W,N,X); input [7:0]Y,W,N; output [7:0]X; assign X=Y ~| W ~| N
module NOR_4(inp_P,inp_W,inp_S,out_R); input [4:0]inp_P,inp_W,inp_S; output [4:0]out_R; assign out_R=inp_P ~| inp_W ~| inp_S; endmodule
module NOR_7(V,H,M,L); input [7:0]V,H,M; output [7:0]L; assign L=V ~| H ~| M; endmodule
module NOR_4(inp_Z,inp_A,inp_Y,out_M); input [4:0]inp_Z,inp_A,inp_Y; output [4:0]out_M; assign out_M=inp_Z ~| inp_A ~| inp_Y
module NOR_3(inp_G,inp_U,inp_X,out_C); input [3:0]inp_G,inp_U,inp_X; output [3:0]out_C; assign out_C=inp_G ~| inp_U ~| inp_X
module NOR_7(U,M,R); input [7:0]U,M; output [7:0]R; assign R=U ~| M; endmodule
module NOR_3(inp_Y,inp_F,inp_L,out_J); input [3:0]inp_Y,inp_F,inp_L; output [3:0]out_J; assign out_J=inp_Y ~| inp_F ~| inp_L
module NOR_7(inp_Y,inp_V,inp_U,out_V); input [7:0]inp_Y,inp_V,inp_U; output [7:0]out_V; assign out_V=inp_Y ~| inp_V ~| inp_U; endmodule
module NOR_5(inp_O,inp_K,out_Q); input [5:0]inp_O,inp_K; output [5:0]out_Q; assign out_Q=inp_O ~| inp_K; endmodule
module NOR_2(S,T,M,Y); input [2:0]S,T,M; output [2:0]Y; assign Y=S ~| T ~| M
module NOR_6(I,T,V,M); input [6:0]I,T,V; output [6:0]M; assign M=I ~| T ~| V; endmodule
module NOR_6(P,X,N,B); input [6:0]P,X,N; output [6:0]B; assign B=P ~| X ~| N; endmodule
module NOR_3(inp_T,inp_D,out_T); input [3:0]inp_T,inp_D; output [3:0]out_T; assign out_T=inp_T ~| inp_D; endmodule
module NOR_5(inp_R,inp_N,inp_I,out_W); input [5:0]inp_R,inp_N,inp_I; output [5:0]out_W; assign out_W=inp_R ~| inp_N ~| inp_I
module NOR_1(B,J,L); input [1:0]B,J; output [1:0]L; assign L=B ~| J; endmodule
module NOR_5(inp_F,inp_C,inp_L,out_H); input [5:0]inp_F,inp_C,inp_L; output [5:0]out_H; assign out_H=inp_F ~| inp_C ~| inp_L; endmodule
module NOR_5(inp_F,inp_E,inp_M,out_T); input [5:0]inp_F,inp_E,inp_M; output [5:0]out_T; assign out_T=inp_F ~| inp_E ~| inp_M
module NOR_5(R,A,P,I); input [5:0]R,A,P; output [5:0]I; assign I=R ~| A ~| P
module NOR_5(L,V,Z,D); input [5:0]L,V,Z; output [5:0]D; assign D=L ~| V ~| Z
module NOR_3(M,S,D); input [3:0]M,S; output [3:0]D; assign D=M ~| S; endmodule
module NOR_4(Z,G,T); input [4:0]Z,G; output [4:0]T; assign T=Z ~| G; endmodule
module NOR_6(inp_P,inp_O,inp_B,out_S); input [6:0]inp_P,inp_O,inp_B; output [6:0]out_S; assign out_S=inp_P ~| inp_O ~| inp_B
module NOR_3(O,I,K); input [3:0]O,I; output [3:0]K; assign K=O ~| I; endmodule
module NOR_7(inp_T,inp_F,out_I); input [7:0]inp_T,inp_F; output [7:0]out_I; assign out_I=inp_T ~| inp_F
module NOR_6(inp_Z,inp_U,out_V); input [6:0]inp_Z,inp_U; output [6:0]out_V; assign out_V=inp_Z ~| inp_U
module NOR_7(inp_W,inp_T,inp_M,out_Y); input [7:0]inp_W,inp_T,inp_M; output [7:0]out_Y; assign out_Y=inp_W ~| inp_T ~| inp_M; endmodule
module NOR_4(C,G,A); input [4:0]C,G; output [4:0]A; assign A=C ~| G
module NOR_5(inp_B,inp_W,inp_F,out_U); input [5:0]inp_B,inp_W,inp_F; output [5:0]out_U; assign out_U=inp_B ~| inp_W ~| inp_F; endmodule
module NOR_4(inp_I,inp_V,inp_L,out_Z); input [4:0]inp_I,inp_V,inp_L; output [4:0]out_Z; assign out_Z=inp_I ~| inp_V ~| inp_L
module NOR_5(inp_X,inp_F,out_U); input [5:0]inp_X,inp_F; output [5:0]out_U; assign out_U=inp_X ~| inp_F; endmodule
module NOR_6(X,S,W); input [6:0]X,S; output [6:0]W; assign W=X ~| S
module NOR_1(E,W,P,C); input [1:0]E,W,P; output [1:0]C; assign C=E ~| W ~| P
module NOR_5(H,M,Q,X); input [5:0]H,M,Q; output [5:0]X; assign X=H ~| M ~| Q
module NOR_2(U,E,L,M); input [2:0]U,E,L; output [2:0]M; assign M=U ~| E ~| L; endmodule
module NOR_4(inp_A,inp_N,inp_O,out_A); input [4:0]inp_A,inp_N,inp_O; output [4:0]out_A; assign out_A=inp_A ~| inp_N ~| inp_O
module NOR_7(J,L,O); input [7:0]J,L; output [7:0]O; assign O=J ~| L
module NOR_6(U,Q,J); input [6:0]U,Q; output [6:0]J; assign J=U ~| Q
module NOR_4(inp_B,inp_Z,inp_L,out_F); input [4:0]inp_B,inp_Z,inp_L; output [4:0]out_F; assign out_F=inp_B ~| inp_Z ~| inp_L; endmodule
module NOR_4(Y,J,Q); input [4:0]Y,J; output [4:0]Q; assign Q=Y ~| J
module NOR_4(inp_G,inp_Y,inp_I,out_F); input [4:0]inp_G,inp_Y,inp_I; output [4:0]out_F; assign out_F=inp_G ~| inp_Y ~| inp_I
module NOR_7(J,A,Z); input [7:0]J,A; output [7:0]Z; assign Z=J ~| A
module NOR_5(inp_S,inp_Y,out_F); input [5:0]inp_S,inp_Y; output [5:0]out_F; assign out_F=inp_S ~| inp_Y; endmodule
module NOR_1(inp_Q,inp_H,inp_Z,out_U); input [1:0]inp_Q,inp_H,inp_Z; output [1:0]out_U; assign out_U=inp_Q ~| inp_H ~| inp_Z
module NOR_4(S,W,Z); input [4:0]S,W; output [4:0]Z; assign Z=S ~| W; endmodule
module NOR_2(inp_O,inp_Z,inp_L,out_J); input [2:0]inp_O,inp_Z,inp_L; output [2:0]out_J; assign out_J=inp_O ~| inp_Z ~| inp_L; endmodule
module NOR_2(H,I,P); input [2:0]H,I; output [2:0]P; assign P=H ~| I; endmodule
module NOR_6(inp_O,inp_X,inp_N,out_Z); input [6:0]inp_O,inp_X,inp_N; output [6:0]out_Z; assign out_Z=inp_O ~| inp_X ~| inp_N
module NOR_2(inp_I,inp_Q,inp_U,out_G); input [2:0]inp_I,inp_Q,inp_U; output [2:0]out_G; assign out_G=inp_I ~| inp_Q ~| inp_U; endmodule
module NOR_2(F,Y,U,J); input [2:0]F,Y,U; output [2:0]J; assign J=F ~| Y ~| U
module NOR_2(K,A,N,L); input [2:0]K,A,N; output [2:0]L; assign L=K ~| A ~| N
module NOR_6(inp_G,inp_O,inp_A,out_S); input [6:0]inp_G,inp_O,inp_A; output [6:0]out_S; assign out_S=inp_G ~| inp_O ~| inp_A
module NOR_3(inp_T,inp_Y,inp_U,out_N); input [3:0]inp_T,inp_Y,inp_U; output [3:0]out_N; assign out_N=inp_T ~| inp_Y ~| inp_U; endmodule
module NOR_2(inp_V,inp_S,out_J); input [2:0]inp_V,inp_S; output [2:0]out_J; assign out_J=inp_V ~| inp_S; endmodule
module NOR_1(inp_O,inp_T,out_S); input [1:0]inp_O,inp_T; output [1:0]out_S; assign out_S=inp_O ~| inp_T
module NOR_1(inp_Y,inp_T,inp_Q,out_H); input [1:0]inp_Y,inp_T,inp_Q; output [1:0]out_H; assign out_H=inp_Y ~| inp_T ~| inp_Q
module NOR_3(inp_Z,inp_Y,out_U); input [3:0]inp_Z,inp_Y; output [3:0]out_U; assign out_U=inp_Z ~| inp_Y; endmodule
module NOR_4(O,D,B); input [4:0]O,D; output [4:0]B; assign B=O ~| D; endmodule
module NOR_2(inp_O,inp_G,inp_R,out_X); input [2:0]inp_O,inp_G,inp_R; output [2:0]out_X; assign out_X=inp_O ~| inp_G ~| inp_R; endmodule
module NOR_2(Q,R,T,S); input [2:0]Q,R,T; output [2:0]S; assign S=Q ~| R ~| T; endmodule
module NOR_6(inp_Z,inp_T,out_R); input [6:0]inp_Z,inp_T; output [6:0]out_R; assign out_R=inp_Z ~| inp_T; endmodule
module NOR_2(A,B,N,F); input [2:0]A,B,N; output [2:0]F; assign F=A ~| B ~| N; endmodule
module NOR_6(L,M,K); input [6:0]L,M; output [6:0]K; assign K=L ~| M
module NOR_6(inp_Z,inp_W,out_X); input [6:0]inp_Z,inp_W; output [6:0]out_X; assign out_X=inp_Z ~| inp_W; endmodule
module NOR_2(D,H,P,M); input [2:0]D,H,P; output [2:0]M; assign M=D ~| H ~| P
module NOR_2(B,F,R,Q); input [2:0]B,F,R; output [2:0]Q; assign Q=B ~| F ~| R; endmodule
module NOR_1(inp_U,inp_Y,out_W); input [1:0]inp_U,inp_Y; output [1:0]out_W; assign out_W=inp_U ~| inp_Y
module NOR_7(inp_Q,inp_S,out_Y); input [7:0]inp_Q,inp_S; output [7:0]out_Y; assign out_Y=inp_Q ~| inp_S; endmodule
module NOR_5(X,H,V); input [5:0]X,H; output [5:0]V; assign V=X ~| H; endmodule
module NOR_6(inp_K,inp_Q,out_V); input [6:0]inp_K,inp_Q; output [6:0]out_V; assign out_V=inp_K ~| inp_Q
module NOR_6(B,M,U,A); input [6:0]B,M,U; output [6:0]A; assign A=B ~| M ~| U
module NOR_3(inp_J,inp_P,inp_D,out_A); input [3:0]inp_J,inp_P,inp_D; output [3:0]out_A; assign out_A=inp_J ~| inp_P ~| inp_D
module NOR_7(inp_D,inp_B,inp_C,out_E); input [7:0]inp_D,inp_B,inp_C; output [7:0]out_E; assign out_E=inp_D ~| inp_B ~| inp_C; endmodule
module NOR_6(inp_Z,inp_L,out_B); input [6:0]inp_Z,inp_L; output [6:0]out_B; assign out_B=inp_Z ~| inp_L
module NOR_2(K,U,M); input [2:0]K,U; output [2:0]M; assign M=K ~| U; endmodule
module NOR_6(inp_I,inp_S,inp_J,out_V); input [6:0]inp_I,inp_S,inp_J; output [6:0]out_V; assign out_V=inp_I ~| inp_S ~| inp_J
module NOR_5(inp_Q,inp_K,out_S); input [5:0]inp_Q,inp_K; output [5:0]out_S; assign out_S=inp_Q ~| inp_K; endmodule
module NOR_1(inp_R,inp_J,out_Y); input [1:0]inp_R,inp_J; output [1:0]out_Y; assign out_Y=inp_R ~| inp_J; endmodule
module NOR_2(inp_Q,inp_T,out_H); input [2:0]inp_Q,inp_T; output [2:0]out_H; assign out_H=inp_Q ~| inp_T; endmodule
module NOR_3(inp_B,inp_K,inp_F,out_Q); input [3:0]inp_B,inp_K,inp_F; output [3:0]out_Q; assign out_Q=inp_B ~| inp_K ~| inp_F; endmodule
module NOR_1(inp_J,inp_A,inp_U,out_D); input [1:0]inp_J,inp_A,inp_U; output [1:0]out_D; assign out_D=inp_J ~| inp_A ~| inp_U
module NOR_3(P,W,O,L); input [3:0]P,W,O; output [3:0]L; assign L=P ~| W ~| O; endmodule
module NOR_2(W,C,F); input [2:0]W,C; output [2:0]F; assign F=W ~| C; endmodule
module NOR_5(F,Y,N); input [5:0]F,Y; output [5:0]N; assign N=F ~| Y; endmodule
module NOR_1(B,G,W,Z); input [1:0]B,G,W; output [1:0]Z; assign Z=B ~| G ~| W; endmodule
module NOR_5(inp_B,inp_X,inp_J,out_G); input [5:0]inp_B,inp_X,inp_J; output [5:0]out_G; assign out_G=inp_B ~| inp_X ~| inp_J
module NOR_3(inp_A,inp_P,inp_B,out_C); input [3:0]inp_A,inp_P,inp_B; output [3:0]out_C; assign out_C=inp_A ~| inp_P ~| inp_B; endmodule
module NOR_1(inp_Y,inp_J,out_R); input [1:0]inp_Y,inp_J; output [1:0]out_R; assign out_R=inp_Y ~| inp_J
module NOR_2(Q,L,C,T); input [2:0]Q,L,C; output [2:0]T; assign T=Q ~| L ~| C
module NOR_2(L,P,Q); input [2:0]L,P; output [2:0]Q; assign Q=L ~| P
module NOR_2(inp_G,inp_S,inp_R,out_M); input [2:0]inp_G,inp_S,inp_R; output [2:0]out_M; assign out_M=inp_G ~| inp_S ~| inp_R
module NOR_6(T,E,L); input [6:0]T,E; output [6:0]L; assign L=T ~| E
module NOR_7(inp_Y,inp_S,inp_H,out_B); input [7:0]inp_Y,inp_S,inp_H; output [7:0]out_B; assign out_B=inp_Y ~| inp_S ~| inp_H; endmodule
module NOR_2(E,J,T); input [2:0]E,J; output [2:0]T; assign T=E ~| J
module NOR_3(inp_X,inp_B,out_A); input [3:0]inp_X,inp_B; output [3:0]out_A; assign out_A=inp_X ~| inp_B
module NOR_1(F,L,W); input [1:0]F,L; output [1:0]W; assign W=F ~| L; endmodule
module NOR_2(Y,W,R); input [2:0]Y,W; output [2:0]R; assign R=Y ~| W
module NOR_3(inp_Y,inp_N,inp_V,out_O); input [3:0]inp_Y,inp_N,inp_V; output [3:0]out_O; assign out_O=inp_Y ~| inp_N ~| inp_V
module NOR_2(Q,U,I,P); input [2:0]Q,U,I; output [2:0]P; assign P=Q ~| U ~| I; endmodule
module NOR_5(inp_W,inp_T,inp_S,out_O); input [5:0]inp_W,inp_T,inp_S; output [5:0]out_O; assign out_O=inp_W ~| inp_T ~| inp_S; endmodule
module NOR_6(inp_S,inp_Y,inp_K,out_K); input [6:0]inp_S,inp_Y,inp_K; output [6:0]out_K; assign out_K=inp_S ~| inp_Y ~| inp_K; endmodule
module NOR_2(W,S,U); input [2:0]W,S; output [2:0]U; assign U=W ~| S
module NOR_4(inp_C,inp_Z,out_E); input [4:0]inp_C,inp_Z; output [4:0]out_E; assign out_E=inp_C ~| inp_Z
module NOR_4(inp_N,inp_C,inp_W,out_Q); input [4:0]inp_N,inp_C,inp_W; output [4:0]out_Q; assign out_Q=inp_N ~| inp_C ~| inp_W
module NOR_5(P,A,X,W); input [5:0]P,A,X; output [5:0]W; assign W=P ~| A ~| X; endmodule
module NOR_4(K,H,T); input [4:0]K,H; output [4:0]T; assign T=K ~| H
module NOR_4(K,G,U,D); input [4:0]K,G,U; output [4:0]D; assign D=K ~| G ~| U; endmodule
module NOR_7(inp_X,inp_J,inp_M,out_A); input [7:0]inp_X,inp_J,inp_M; output [7:0]out_A; assign out_A=inp_X ~| inp_J ~| inp_M; endmodule
module NOR_6(inp_P,inp_F,out_T); input [6:0]inp_P,inp_F; output [6:0]out_T; assign out_T=inp_P ~| inp_F
module NOR_4(inp_V,inp_U,out_N); input [4:0]inp_V,inp_U; output [4:0]out_N; assign out_N=inp_V ~| inp_U
module NOR_4(H,V,O); input [4:0]H,V; output [4:0]O; assign O=H ~| V
module NOR_7(G,C,T,M); input [7:0]G,C,T; output [7:0]M; assign M=G ~| C ~| T; endmodule
module NOR_6(X,M,C); input [6:0]X,M; output [6:0]C; assign C=X ~| M
module NOR_5(L,W,A,I); input [5:0]L,W,A; output [5:0]I; assign I=L ~| W ~| A
module NOR_5(S,N,B); input [5:0]S,N; output [5:0]B; assign B=S ~| N
module NOR_6(inp_V,inp_L,inp_P,out_D); input [6:0]inp_V,inp_L,inp_P; output [6:0]out_D; assign out_D=inp_V ~| inp_L ~| inp_P; endmodule
module NOR_5(S,A,O,F); input [5:0]S,A,O; output [5:0]F; assign F=S ~| A ~| O; endmodule
module NOR_6(V,B,F); input [6:0]V,B; output [6:0]F; assign F=V ~| B; endmodule
module NOR_7(inp_L,inp_R,out_C); input [7:0]inp_L,inp_R; output [7:0]out_C; assign out_C=inp_L ~| inp_R
module NOR_3(S,K,Q,J); input [3:0]S,K,Q; output [3:0]J; assign J=S ~| K ~| Q; endmodule
module NOR_6(inp_K,inp_W,inp_Q,out_E); input [6:0]inp_K,inp_W,inp_Q; output [6:0]out_E; assign out_E=inp_K ~| inp_W ~| inp_Q; endmodule
module NOR_4(F,G,W); input [4:0]F,G; output [4:0]W; assign W=F ~| G; endmodule
module NOR_6(inp_Z,inp_S,inp_W,out_P); input [6:0]inp_Z,inp_S,inp_W; output [6:0]out_P; assign out_P=inp_Z ~| inp_S ~| inp_W
module NOR_6(L,G,A,D); input [6:0]L,G,A; output [6:0]D; assign D=L ~| G ~| A
module NOR_5(X,L,I); input [5:0]X,L; output [5:0]I; assign I=X ~| L; endmodule
module NOR_1(inp_B,inp_E,out_A); input [1:0]inp_B,inp_E; output [1:0]out_A; assign out_A=inp_B ~| inp_E
module NOR_2(inp_C,inp_X,out_E); input [2:0]inp_C,inp_X; output [2:0]out_E; assign out_E=inp_C ~| inp_X
module NOR_1(inp_Q,inp_M,inp_B,out_Y); input [1:0]inp_Q,inp_M,inp_B; output [1:0]out_Y; assign out_Y=inp_Q ~| inp_M ~| inp_B; endmodule
module NOR_1(I,M,B); input [1:0]I,M; output [1:0]B; assign B=I ~| M
module NOR_4(U,E,D); input [4:0]U,E; output [4:0]D; assign D=U ~| E; endmodule
module NOR_5(inp_Q,inp_F,out_R); input [5:0]inp_Q,inp_F; output [5:0]out_R; assign out_R=inp_Q ~| inp_F; endmodule
module NOR_7(inp_L,inp_V,out_I); input [7:0]inp_L,inp_V; output [7:0]out_I; assign out_I=inp_L ~| inp_V
module NOR_6(O,Y,H); input [6:0]O,Y; output [6:0]H; assign H=O ~| Y; endmodule
module NOR_1(inp_D,inp_B,inp_R,out_B); input [1:0]inp_D,inp_B,inp_R; output [1:0]out_B; assign out_B=inp_D ~| inp_B ~| inp_R
module NOR_4(inp_O,inp_A,out_Z); input [4:0]inp_O,inp_A; output [4:0]out_Z; assign out_Z=inp_O ~| inp_A; endmodule
module NOR_1(inp_I,inp_Z,inp_H,out_X); input [1:0]inp_I,inp_Z,inp_H; output [1:0]out_X; assign out_X=inp_I ~| inp_Z ~| inp_H
module NOR_4(inp_P,inp_W,out_J); input [4:0]inp_P,inp_W; output [4:0]out_J; assign out_J=inp_P ~| inp_W
module NOR_3(G,C,E); input [3:0]G,C; output [3:0]E; assign E=G ~| C
module NOR_2(V,C,L,S); input [2:0]V,C,L; output [2:0]S; assign S=V ~| C ~| L; endmodule
module NOR_2(N,P,U,V); input [2:0]N,P,U; output [2:0]V; assign V=N ~| P ~| U; endmodule
module NOR_2(inp_S,inp_N,out_X); input [2:0]inp_S,inp_N; output [2:0]out_X; assign out_X=inp_S ~| inp_N
module NOR_2(T,B,D); input [2:0]T,B; output [2:0]D; assign D=T ~| B
module NOR_1(inp_X,inp_J,inp_L,out_M); input [1:0]inp_X,inp_J,inp_L; output [1:0]out_M; assign out_M=inp_X ~| inp_J ~| inp_L
module NOR_6(K,U,O); input [6:0]K,U; output [6:0]O; assign O=K ~| U; endmodule
module NOR_7(J,Y,B,O); input [7:0]J,Y,B; output [7:0]O; assign O=J ~| Y ~| B
module NOR_6(N,T,Y); input [6:0]N,T; output [6:0]Y; assign Y=N ~| T
module NOR_4(F,N,I,S); input [4:0]F,N,I; output [4:0]S; assign S=F ~| N ~| I; endmodule
module NOR_5(D,F,W); input [5:0]D,F; output [5:0]W; assign W=D ~| F
module NOR_3(V,D,Y,P); input [3:0]V,D,Y; output [3:0]P; assign P=V ~| D ~| Y; endmodule
module NOR_2(inp_H,inp_D,inp_B,out_I); input [2:0]inp_H,inp_D,inp_B; output [2:0]out_I; assign out_I=inp_H ~| inp_D ~| inp_B; endmodule
module NOR_3(inp_Q,inp_H,out_N); input [3:0]inp_Q,inp_H; output [3:0]out_N; assign out_N=inp_Q ~| inp_H
module NOR_5(P,L,C); input [5:0]P,L; output [5:0]C; assign C=P ~| L; endmodule
module NOR_5(inp_I,inp_W,out_L); input [5:0]inp_I,inp_W; output [5:0]out_L; assign out_L=inp_I ~| inp_W
module NOR_1(inp_Z,inp_G,inp_P,out_C); input [1:0]inp_Z,inp_G,inp_P; output [1:0]out_C; assign out_C=inp_Z ~| inp_G ~| inp_P; endmodule
module NOR_6(inp_A,inp_P,inp_T,out_L); input [6:0]inp_A,inp_P,inp_T; output [6:0]out_L; assign out_L=inp_A ~| inp_P ~| inp_T; endmodule
module NOR_7(A,M,U); input [7:0]A,M; output [7:0]U; assign U=A ~| M
module NOR_4(Z,L,O); input [4:0]Z,L; output [4:0]O; assign O=Z ~| L
module NOR_1(K,F,G); input [1:0]K,F; output [1:0]G; assign G=K ~| F; endmodule
module NOR_4(E,S,F,M); input [4:0]E,S,F; output [4:0]M; assign M=E ~| S ~| F; endmodule
module NOR_1(inp_X,inp_Q,out_R); input [1:0]inp_X,inp_Q; output [1:0]out_R; assign out_R=inp_X ~| inp_Q; endmodule
module NOR_6(inp_L,inp_D,out_X); input [6:0]inp_L,inp_D; output [6:0]out_X; assign out_X=inp_L ~| inp_D
module NOR_1(A,L,A,U); input [1:0]A,L,A; output [1:0]U; assign U=A ~| L ~| A; endmodule
module NOR_3(inp_D,inp_U,inp_N,out_V); input [3:0]inp_D,inp_U,inp_N; output [3:0]out_V; assign out_V=inp_D ~| inp_U ~| inp_N; endmodule
module NOR_5(inp_I,inp_G,inp_U,out_V); input [5:0]inp_I,inp_G,inp_U; output [5:0]out_V; assign out_V=inp_I ~| inp_G ~| inp_U
module NOR_2(inp_L,inp_G,inp_A,out_C); input [2:0]inp_L,inp_G,inp_A; output [2:0]out_C; assign out_C=inp_L ~| inp_G ~| inp_A
module NOR_7(inp_H,inp_W,inp_M,out_E); input [7:0]inp_H,inp_W,inp_M; output [7:0]out_E; assign out_E=inp_H ~| inp_W ~| inp_M; endmodule
module NOR_3(inp_D,inp_Q,out_U); input [3:0]inp_D,inp_Q; output [3:0]out_U; assign out_U=inp_D ~| inp_Q; endmodule
module NOR_1(N,B,K); input [1:0]N,B; output [1:0]K; assign K=N ~| B
module NOR_1(inp_U,inp_F,out_E); input [1:0]inp_U,inp_F; output [1:0]out_E; assign out_E=inp_U ~| inp_F; endmodule
module NOR_6(J,Q,C,L); input [6:0]J,Q,C; output [6:0]L; assign L=J ~| Q ~| C; endmodule
module NOR_4(inp_W,inp_Y,inp_L,out_W); input [4:0]inp_W,inp_Y,inp_L; output [4:0]out_W; assign out_W=inp_W ~| inp_Y ~| inp_L
module NOR_4(S,P,B,Q); input [4:0]S,P,B; output [4:0]Q; assign Q=S ~| P ~| B
module NOR_3(inp_R,inp_G,out_J); input [3:0]inp_R,inp_G; output [3:0]out_J; assign out_J=inp_R ~| inp_G; endmodule
module NOR_4(inp_N,inp_O,inp_F,out_Q); input [4:0]inp_N,inp_O,inp_F; output [4:0]out_Q; assign out_Q=inp_N ~| inp_O ~| inp_F; endmodule
module NOR_3(B,R,T,K); input [3:0]B,R,T; output [3:0]K; assign K=B ~| R ~| T; endmodule
module NOR_4(C,F,M); input [4:0]C,F; output [4:0]M; assign M=C ~| F; endmodule
module NOR_2(inp_H,inp_Q,inp_I,out_S); input [2:0]inp_H,inp_Q,inp_I; output [2:0]out_S; assign out_S=inp_H ~| inp_Q ~| inp_I; endmodule
module NOR_7(inp_W,inp_L,inp_C,out_S); input [7:0]inp_W,inp_L,inp_C; output [7:0]out_S; assign out_S=inp_W ~| inp_L ~| inp_C; endmodule
module NOR_4(Q,W,H,T); input [4:0]Q,W,H; output [4:0]T; assign T=Q ~| W ~| H
module NOR_5(Z,U,L,I); input [5:0]Z,U,L; output [5:0]I; assign I=Z ~| U ~| L
module NOR_3(inp_H,inp_T,inp_F,out_T); input [3:0]inp_H,inp_T,inp_F; output [3:0]out_T; assign out_T=inp_H ~| inp_T ~| inp_F; endmodule
module NOR_2(S,N,Z); input [2:0]S,N; output [2:0]Z; assign Z=S ~| N
module NOR_4(inp_Z,inp_V,out_M); input [4:0]inp_Z,inp_V; output [4:0]out_M; assign out_M=inp_Z ~| inp_V; endmodule
module NOR_4(D,Q,M,R); input [4:0]D,Q,M; output [4:0]R; assign R=D ~| Q ~| M
module NOR_6(inp_S,inp_Z,out_J); input [6:0]inp_S,inp_Z; output [6:0]out_J; assign out_J=inp_S ~| inp_Z; endmodule
module NOR_5(J,P,I); input [5:0]J,P; output [5:0]I; assign I=J ~| P; endmodule
module NOR_3(P,W,Q); input [3:0]P,W; output [3:0]Q; assign Q=P ~| W
module NOR_4(inp_K,inp_C,inp_E,out_U); input [4:0]inp_K,inp_C,inp_E; output [4:0]out_U; assign out_U=inp_K ~| inp_C ~| inp_E; endmodule
module NOR_2(inp_E,inp_G,inp_S,out_Q); input [2:0]inp_E,inp_G,inp_S; output [2:0]out_Q; assign out_Q=inp_E ~| inp_G ~| inp_S
module NOR_7(W,Y,T,M); input [7:0]W,Y,T; output [7:0]M; assign M=W ~| Y ~| T; endmodule
module NOR_4(inp_O,inp_S,out_I); input [4:0]inp_O,inp_S; output [4:0]out_I; assign out_I=inp_O ~| inp_S; endmodule
module NOR_6(inp_G,inp_I,inp_W,out_K); input [6:0]inp_G,inp_I,inp_W; output [6:0]out_K; assign out_K=inp_G ~| inp_I ~| inp_W
module NOR_6(inp_Y,inp_N,out_P); input [6:0]inp_Y,inp_N; output [6:0]out_P; assign out_P=inp_Y ~| inp_N
module NOR_5(inp_L,inp_E,out_V); input [5:0]inp_L,inp_E; output [5:0]out_V; assign out_V=inp_L ~| inp_E
module NOR_5(Y,N,Q); input [5:0]Y,N; output [5:0]Q; assign Q=Y ~| N
module NOR_4(inp_F,inp_K,inp_M,out_H); input [4:0]inp_F,inp_K,inp_M; output [4:0]out_H; assign out_H=inp_F ~| inp_K ~| inp_M; endmodule
module NOR_5(inp_O,inp_D,out_N); input [5:0]inp_O,inp_D; output [5:0]out_N; assign out_N=inp_O ~| inp_D
module NOR_2(A,D,F,O); input [2:0]A,D,F; output [2:0]O; assign O=A ~| D ~| F; endmodule
module NOR_3(Q,J,A); input [3:0]Q,J; output [3:0]A; assign A=Q ~| J; endmodule
module NOR_7(inp_G,inp_R,out_I); input [7:0]inp_G,inp_R; output [7:0]out_I; assign out_I=inp_G ~| inp_R
module NOR_4(G,F,M,N); input [4:0]G,F,M; output [4:0]N; assign N=G ~| F ~| M
module NOR_1(M,E,F,U); input [1:0]M,E,F; output [1:0]U; assign U=M ~| E ~| F
module NOR_7(inp_A,inp_G,inp_H,out_P); input [7:0]inp_A,inp_G,inp_H; output [7:0]out_P; assign out_P=inp_A ~| inp_G ~| inp_H
module NOR_5(inp_X,inp_C,out_H); input [5:0]inp_X,inp_C; output [5:0]out_H; assign out_H=inp_X ~| inp_C
module NOR_7(V,M,X,L); input [7:0]V,M,X; output [7:0]L; assign L=V ~| M ~| X
module NOR_6(R,N,Q); input [6:0]R,N; output [6:0]Q; assign Q=R ~| N; endmodule
module NOR_1(F,N,V); input [1:0]F,N; output [1:0]V; assign V=F ~| N; endmodule
module NOR_4(inp_E,inp_G,inp_S,out_F); input [4:0]inp_E,inp_G,inp_S; output [4:0]out_F; assign out_F=inp_E ~| inp_G ~| inp_S
module NOR_6(inp_B,inp_U,inp_M,out_V); input [6:0]inp_B,inp_U,inp_M; output [6:0]out_V; assign out_V=inp_B ~| inp_U ~| inp_M
module NOR_3(inp_N,inp_M,inp_O,out_O); input [3:0]inp_N,inp_M,inp_O; output [3:0]out_O; assign out_O=inp_N ~| inp_M ~| inp_O
module NOR_6(O,D,B,Z); input [6:0]O,D,B; output [6:0]Z; assign Z=O ~| D ~| B
module NOR_5(F,S,B,X); input [5:0]F,S,B; output [5:0]X; assign X=F ~| S ~| B; endmodule
module NOR_1(inp_B,inp_Z,out_T); input [1:0]inp_B,inp_Z; output [1:0]out_T; assign out_T=inp_B ~| inp_Z
module NOR_5(A,V,T); input [5:0]A,V; output [5:0]T; assign T=A ~| V; endmodule
module NOR_6(inp_L,inp_K,out_D); input [6:0]inp_L,inp_K; output [6:0]out_D; assign out_D=inp_L ~| inp_K; endmodule
module NOR_4(inp_A,inp_L,inp_K,out_X); input [4:0]inp_A,inp_L,inp_K; output [4:0]out_X; assign out_X=inp_A ~| inp_L ~| inp_K; endmodule
module NOR_6(inp_K,inp_C,out_U); input [6:0]inp_K,inp_C; output [6:0]out_U; assign out_U=inp_K ~| inp_C
module NOR_2(R,M,X,E); input [2:0]R,M,X; output [2:0]E; assign E=R ~| M ~| X
module NOR_7(inp_R,inp_A,out_O); input [7:0]inp_R,inp_A; output [7:0]out_O; assign out_O=inp_R ~| inp_A; endmodule
module NOR_1(inp_S,inp_Y,inp_J,out_M); input [1:0]inp_S,inp_Y,inp_J; output [1:0]out_M; assign out_M=inp_S ~| inp_Y ~| inp_J; endmodule
module NOR_6(inp_B,inp_T,out_E); input [6:0]inp_B,inp_T; output [6:0]out_E; assign out_E=inp_B ~| inp_T
module NOR_5(D,U,Z); input [5:0]D,U; output [5:0]Z; assign Z=D ~| U
module NOR_7(G,Q,L); input [7:0]G,Q; output [7:0]L; assign L=G ~| Q; endmodule
module NOR_5(inp_R,inp_C,out_X); input [5:0]inp_R,inp_C; output [5:0]out_X; assign out_X=inp_R ~| inp_C; endmodule
module NOR_1(W,M,O); input [1:0]W,M; output [1:0]O; assign O=W ~| M; endmodule
module NOR_4(inp_I,inp_K,out_G); input [4:0]inp_I,inp_K; output [4:0]out_G; assign out_G=inp_I ~| inp_K; endmodule
module NOR_3(E,K,X,L); input [3:0]E,K,X; output [3:0]L; assign L=E ~| K ~| X; endmodule
module NOR_3(D,I,W); input [3:0]D,I; output [3:0]W; assign W=D ~| I; endmodule
module NOR_6(inp_U,inp_O,out_B); input [6:0]inp_U,inp_O; output [6:0]out_B; assign out_B=inp_U ~| inp_O; endmodule
module NOR_7(U,I,O,M); input [7:0]U,I,O; output [7:0]M; assign M=U ~| I ~| O
module NOR_3(H,C,R); input [3:0]H,C; output [3:0]R; assign R=H ~| C
module NOR_1(H,O,T); input [1:0]H,O; output [1:0]T; assign T=H ~| O; endmodule
module NOR_1(inp_L,inp_N,inp_G,out_B); input [1:0]inp_L,inp_N,inp_G; output [1:0]out_B; assign out_B=inp_L ~| inp_N ~| inp_G; endmodule
module NOR_6(O,T,G,Y); input [6:0]O,T,G; output [6:0]Y; assign Y=O ~| T ~| G; endmodule
module NOR_7(inp_H,inp_A,inp_Q,out_V); input [7:0]inp_H,inp_A,inp_Q; output [7:0]out_V; assign out_V=inp_H ~| inp_A ~| inp_Q
module NOR_1(I,U,X,H); input [1:0]I,U,X; output [1:0]H; assign H=I ~| U ~| X
module NOR_7(inp_N,inp_L,out_L); input [7:0]inp_N,inp_L; output [7:0]out_L; assign out_L=inp_N ~| inp_L; endmodule
module NOR_4(inp_K,inp_I,inp_T,out_T); input [4:0]inp_K,inp_I,inp_T; output [4:0]out_T; assign out_T=inp_K ~| inp_I ~| inp_T; endmodule
module NOR_3(inp_M,inp_L,out_A); input [3:0]inp_M,inp_L; output [3:0]out_A; assign out_A=inp_M ~| inp_L
module NOR_2(X,M,A,F); input [2:0]X,M,A; output [2:0]F; assign F=X ~| M ~| A; endmodule
module NOR_2(inp_H,inp_U,out_H); input [2:0]inp_H,inp_U; output [2:0]out_H; assign out_H=inp_H ~| inp_U; endmodule
module NOR_4(J,S,G,C); input [4:0]J,S,G; output [4:0]C; assign C=J ~| S ~| G; endmodule
module NOR_3(inp_T,inp_P,inp_O,out_N); input [3:0]inp_T,inp_P,inp_O; output [3:0]out_N; assign out_N=inp_T ~| inp_P ~| inp_O; endmodule
module NOR_5(M,Y,X,I); input [5:0]M,Y,X; output [5:0]I; assign I=M ~| Y ~| X; endmodule
module NOR_7(K,J,W,F); input [7:0]K,J,W; output [7:0]F; assign F=K ~| J ~| W; endmodule
module NOR_2(B,Z,P,K); input [2:0]B,Z,P; output [2:0]K; assign K=B ~| Z ~| P
module NOR_7(M,J,E); input [7:0]M,J; output [7:0]E; assign E=M ~| J
module NOR_5(inp_W,inp_H,out_O); input [5:0]inp_W,inp_H; output [5:0]out_O; assign out_O=inp_W ~| inp_H; endmodule
module NOR_5(L,W,B); input [5:0]L,W; output [5:0]B; assign B=L ~| W
module NOR_5(inp_M,inp_U,out_D); input [5:0]inp_M,inp_U; output [5:0]out_D; assign out_D=inp_M ~| inp_U; endmodule
module NOR_2(W,J,C); input [2:0]W,J; output [2:0]C; assign C=W ~| J; endmodule
module NOR_2(inp_D,inp_F,inp_O,out_O); input [2:0]inp_D,inp_F,inp_O; output [2:0]out_O; assign out_O=inp_D ~| inp_F ~| inp_O; endmodule
module NOR_5(inp_S,inp_X,out_W); input [5:0]inp_S,inp_X; output [5:0]out_W; assign out_W=inp_S ~| inp_X
module NOR_5(I,U,T); input [5:0]I,U; output [5:0]T; assign T=I ~| U; endmodule
module NOR_4(inp_A,inp_T,inp_O,out_G); input [4:0]inp_A,inp_T,inp_O; output [4:0]out_G; assign out_G=inp_A ~| inp_T ~| inp_O; endmodule
module NOR_2(inp_Y,inp_N,out_T); input [2:0]inp_Y,inp_N; output [2:0]out_T; assign out_T=inp_Y ~| inp_N
module NOR_4(E,W,P,R); input [4:0]E,W,P; output [4:0]R; assign R=E ~| W ~| P
module NOR_1(H,N,X,L); input [1:0]H,N,X; output [1:0]L; assign L=H ~| N ~| X
module NOR_4(inp_C,inp_H,inp_Q,out_Y); input [4:0]inp_C,inp_H,inp_Q; output [4:0]out_Y; assign out_Y=inp_C ~| inp_H ~| inp_Q
module NOR_4(inp_I,inp_Y,out_D); input [4:0]inp_I,inp_Y; output [4:0]out_D; assign out_D=inp_I ~| inp_Y
module NOR_3(inp_Y,inp_D,out_X); input [3:0]inp_Y,inp_D; output [3:0]out_X; assign out_X=inp_Y ~| inp_D
module NOR_2(R,O,U); input [2:0]R,O; output [2:0]U; assign U=R ~| O
module NOR_5(inp_G,inp_W,inp_O,out_B); input [5:0]inp_G,inp_W,inp_O; output [5:0]out_B; assign out_B=inp_G ~| inp_W ~| inp_O; endmodule
module NOR_2(N,Z,A); input [2:0]N,Z; output [2:0]A; assign A=N ~| Z; endmodule
module NOR_6(X,S,B); input [6:0]X,S; output [6:0]B; assign B=X ~| S; endmodule
module NOR_4(inp_C,inp_G,out_T); input [4:0]inp_C,inp_G; output [4:0]out_T; assign out_T=inp_C ~| inp_G; endmodule
module NOR_1(G,O,R,H); input [1:0]G,O,R; output [1:0]H; assign H=G ~| O ~| R; endmodule
module NOR_4(inp_T,inp_E,inp_D,out_E); input [4:0]inp_T,inp_E,inp_D; output [4:0]out_E; assign out_E=inp_T ~| inp_E ~| inp_D; endmodule
module NOR_2(C,I,R,M); input [2:0]C,I,R; output [2:0]M; assign M=C ~| I ~| R
module NOR_3(A,C,V,B); input [3:0]A,C,V; output [3:0]B; assign B=A ~| C ~| V
module NOR_1(B,T,O); input [1:0]B,T; output [1:0]O; assign O=B ~| T; endmodule
module NOR_7(inp_T,inp_Z,inp_D,out_A); input [7:0]inp_T,inp_Z,inp_D; output [7:0]out_A; assign out_A=inp_T ~| inp_Z ~| inp_D
module NOR_4(J,X,U); input [4:0]J,X; output [4:0]U; assign U=J ~| X; endmodule
module NOR_6(A,Q,P,I); input [6:0]A,Q,P; output [6:0]I; assign I=A ~| Q ~| P
module NOR_3(Q,Y,H); input [3:0]Q,Y; output [3:0]H; assign H=Q ~| Y
module NOR_7(R,I,Y,A); input [7:0]R,I,Y; output [7:0]A; assign A=R ~| I ~| Y; endmodule
module NOR_3(inp_I,inp_G,out_H); input [3:0]inp_I,inp_G; output [3:0]out_H; assign out_H=inp_I ~| inp_G
module NOR_2(J,R,I,M); input [2:0]J,R,I; output [2:0]M; assign M=J ~| R ~| I
module NOR_2(inp_X,inp_G,inp_C,out_O); input [2:0]inp_X,inp_G,inp_C; output [2:0]out_O; assign out_O=inp_X ~| inp_G ~| inp_C
module NOR_3(M,K,P,N); input [3:0]M,K,P; output [3:0]N; assign N=M ~| K ~| P; endmodule
module NOR_5(inp_N,inp_Q,inp_F,out_X); input [5:0]inp_N,inp_Q,inp_F; output [5:0]out_X; assign out_X=inp_N ~| inp_Q ~| inp_F; endmodule
module NOR_5(N,D,L); input [5:0]N,D; output [5:0]L; assign L=N ~| D; endmodule
module NOR_6(T,I,D); input [6:0]T,I; output [6:0]D; assign D=T ~| I; endmodule
module NOR_5(inp_D,inp_O,inp_V,out_A); input [5:0]inp_D,inp_O,inp_V; output [5:0]out_A; assign out_A=inp_D ~| inp_O ~| inp_V
module NOR_7(inp_S,inp_K,inp_O,out_A); input [7:0]inp_S,inp_K,inp_O; output [7:0]out_A; assign out_A=inp_S ~| inp_K ~| inp_O; endmodule
module NOR_1(inp_G,inp_V,inp_B,out_R); input [1:0]inp_G,inp_V,inp_B; output [1:0]out_R; assign out_R=inp_G ~| inp_V ~| inp_B; endmodule
module NOR_4(inp_B,inp_F,out_S); input [4:0]inp_B,inp_F; output [4:0]out_S; assign out_S=inp_B ~| inp_F; endmodule
module NOR_5(Y,W,D,O); input [5:0]Y,W,D; output [5:0]O; assign O=Y ~| W ~| D; endmodule
module NOR_1(B,P,S,E); input [1:0]B,P,S; output [1:0]E; assign E=B ~| P ~| S
module NOR_3(P,K,N,S); input [3:0]P,K,N; output [3:0]S; assign S=P ~| K ~| N
module NOR_7(inp_G,inp_X,inp_V,out_R); input [7:0]inp_G,inp_X,inp_V; output [7:0]out_R; assign out_R=inp_G ~| inp_X ~| inp_V; endmodule
module NOR_2(H,F,V,U); input [2:0]H,F,V; output [2:0]U; assign U=H ~| F ~| V
module NOR_3(P,N,L); input [3:0]P,N; output [3:0]L; assign L=P ~| N; endmodule
module NOR_7(H,V,G); input [7:0]H,V; output [7:0]G; assign G=H ~| V
module NOR_3(R,D,J,Q); input [3:0]R,D,J; output [3:0]Q; assign Q=R ~| D ~| J; endmodule
module NOR_4(inp_A,inp_J,out_I); input [4:0]inp_A,inp_J; output [4:0]out_I; assign out_I=inp_A ~| inp_J; endmodule
module NOR_5(inp_M,inp_V,inp_X,out_S); input [5:0]inp_M,inp_V,inp_X; output [5:0]out_S; assign out_S=inp_M ~| inp_V ~| inp_X
module NOR_2(inp_R,inp_G,out_I); input [2:0]inp_R,inp_G; output [2:0]out_I; assign out_I=inp_R ~| inp_G
module NOR_7(inp_L,inp_Z,inp_H,out_N); input [7:0]inp_L,inp_Z,inp_H; output [7:0]out_N; assign out_N=inp_L ~| inp_Z ~| inp_H; endmodule
module NOR_2(S,E,G); input [2:0]S,E; output [2:0]G; assign G=S ~| E; endmodule
module NOR_7(inp_O,inp_F,out_B); input [7:0]inp_O,inp_F; output [7:0]out_B; assign out_B=inp_O ~| inp_F
module NOR_4(inp_K,inp_W,out_V); input [4:0]inp_K,inp_W; output [4:0]out_V; assign out_V=inp_K ~| inp_W; endmodule
module NOR_6(W,O,B,T); input [6:0]W,O,B; output [6:0]T; assign T=W ~| O ~| B
module NOR_4(inp_M,inp_F,inp_A,out_P); input [4:0]inp_M,inp_F,inp_A; output [4:0]out_P; assign out_P=inp_M ~| inp_F ~| inp_A
module NOR_6(inp_L,inp_I,out_K); input [6:0]inp_L,inp_I; output [6:0]out_K; assign out_K=inp_L ~| inp_I; endmodule
module NOR_6(B,I,V); input [6:0]B,I; output [6:0]V; assign V=B ~| I
module NOR_3(inp_J,inp_Y,inp_W,out_Y); input [3:0]inp_J,inp_Y,inp_W; output [3:0]out_Y; assign out_Y=inp_J ~| inp_Y ~| inp_W; endmodule
module NOR_3(J,O,H); input [3:0]J,O; output [3:0]H; assign H=J ~| O; endmodule
module NOR_3(inp_K,inp_Q,inp_B,out_K); input [3:0]inp_K,inp_Q,inp_B; output [3:0]out_K; assign out_K=inp_K ~| inp_Q ~| inp_B; endmodule
module NOR_5(inp_H,inp_R,out_K); input [5:0]inp_H,inp_R; output [5:0]out_K; assign out_K=inp_H ~| inp_R
module NOR_5(G,S,B,W); input [5:0]G,S,B; output [5:0]W; assign W=G ~| S ~| B; endmodule
module NOR_1(R,P,M); input [1:0]R,P; output [1:0]M; assign M=R ~| P
module NOR_4(L,I,B); input [4:0]L,I; output [4:0]B; assign B=L ~| I; endmodule
module NOR_2(inp_B,inp_W,out_A); input [2:0]inp_B,inp_W; output [2:0]out_A; assign out_A=inp_B ~| inp_W; endmodule
module NOR_5(S,C,U); input [5:0]S,C; output [5:0]U; assign U=S ~| C; endmodule
module NOR_1(inp_M,inp_U,inp_H,out_Z); input [1:0]inp_M,inp_U,inp_H; output [1:0]out_Z; assign out_Z=inp_M ~| inp_U ~| inp_H; endmodule
module NOR_5(F,O,R,J); input [5:0]F,O,R; output [5:0]J; assign J=F ~| O ~| R
module NOR_7(I,F,E); input [7:0]I,F; output [7:0]E; assign E=I ~| F
module NOR_7(inp_S,inp_P,inp_H,out_G); input [7:0]inp_S,inp_P,inp_H; output [7:0]out_G; assign out_G=inp_S ~| inp_P ~| inp_H
module NOR_4(inp_G,inp_W,out_C); input [4:0]inp_G,inp_W; output [4:0]out_C; assign out_C=inp_G ~| inp_W
module NOR_3(X,V,U,T); input [3:0]X,V,U; output [3:0]T; assign T=X ~| V ~| U
module NOR_1(T,M,Y); input [1:0]T,M; output [1:0]Y; assign Y=T ~| M
module NOR_2(O,F,R); input [2:0]O,F; output [2:0]R; assign R=O ~| F; endmodule
module NOR_3(inp_P,inp_D,out_A); input [3:0]inp_P,inp_D; output [3:0]out_A; assign out_A=inp_P ~| inp_D; endmodule
module NOR_3(inp_I,inp_W,out_D); input [3:0]inp_I,inp_W; output [3:0]out_D; assign out_D=inp_I ~| inp_W
module NOR_6(B,N,V); input [6:0]B,N; output [6:0]V; assign V=B ~| N
module NOR_5(inp_Z,inp_S,inp_F,out_U); input [5:0]inp_Z,inp_S,inp_F; output [5:0]out_U; assign out_U=inp_Z ~| inp_S ~| inp_F
module NOR_7(inp_B,inp_L,inp_M,out_F); input [7:0]inp_B,inp_L,inp_M; output [7:0]out_F; assign out_F=inp_B ~| inp_L ~| inp_M; endmodule
module NOR_6(inp_F,inp_T,out_E); input [6:0]inp_F,inp_T; output [6:0]out_E; assign out_E=inp_F ~| inp_T
module NOR_1(C,G,P); input [1:0]C,G; output [1:0]P; assign P=C ~| G
module NOR_2(Z,J,C); input [2:0]Z,J; output [2:0]C; assign C=Z ~| J; endmodule
module NOR_4(F,A,S,K); input [4:0]F,A,S; output [4:0]K; assign K=F ~| A ~| S; endmodule
module NOR_4(inp_V,inp_R,out_C); input [4:0]inp_V,inp_R; output [4:0]out_C; assign out_C=inp_V ~| inp_R
module NOR_6(inp_N,inp_C,out_M); input [6:0]inp_N,inp_C; output [6:0]out_M; assign out_M=inp_N ~| inp_C
module NOR_5(Y,L,G); input [5:0]Y,L; output [5:0]G; assign G=Y ~| L; endmodule
module NOR_2(H,N,T,C); input [2:0]H,N,T; output [2:0]C; assign C=H ~| N ~| T
module NOR_2(A,T,X,H); input [2:0]A,T,X; output [2:0]H; assign H=A ~| T ~| X; endmodule
module NOR_1(inp_Q,inp_W,inp_Z,out_P); input [1:0]inp_Q,inp_W,inp_Z; output [1:0]out_P; assign out_P=inp_Q ~| inp_W ~| inp_Z; endmodule
module NOR_1(inp_N,inp_Q,inp_Y,out_Y); input [1:0]inp_N,inp_Q,inp_Y; output [1:0]out_Y; assign out_Y=inp_N ~| inp_Q ~| inp_Y; endmodule
module NOR_5(inp_Z,inp_V,inp_X,out_L); input [5:0]inp_Z,inp_V,inp_X; output [5:0]out_L; assign out_L=inp_Z ~| inp_V ~| inp_X
module NOR_1(inp_H,inp_K,out_X); input [1:0]inp_H,inp_K; output [1:0]out_X; assign out_X=inp_H ~| inp_K; endmodule
module NOR_3(inp_M,inp_S,out_K); input [3:0]inp_M,inp_S; output [3:0]out_K; assign out_K=inp_M ~| inp_S; endmodule
module NOR_2(inp_Y,inp_U,out_T); input [2:0]inp_Y,inp_U; output [2:0]out_T; assign out_T=inp_Y ~| inp_U
module NOR_7(K,L,D,Y); input [7:0]K,L,D; output [7:0]Y; assign Y=K ~| L ~| D; endmodule
module NOR_2(Z,V,H); input [2:0]Z,V; output [2:0]H; assign H=Z ~| V; endmodule
module NOR_7(inp_S,inp_R,out_G); input [7:0]inp_S,inp_R; output [7:0]out_G; assign out_G=inp_S ~| inp_R
module NOR_4(O,P,F); input [4:0]O,P; output [4:0]F; assign F=O ~| P; endmodule
module NOR_3(inp_J,inp_T,out_Y); input [3:0]inp_J,inp_T; output [3:0]out_Y; assign out_Y=inp_J ~| inp_T
module NOR_7(inp_R,inp_C,inp_L,out_U); input [7:0]inp_R,inp_C,inp_L; output [7:0]out_U; assign out_U=inp_R ~| inp_C ~| inp_L
module NOR_5(inp_R,inp_X,out_C); input [5:0]inp_R,inp_X; output [5:0]out_C; assign out_C=inp_R ~| inp_X
module NOR_4(inp_V,inp_I,out_K); input [4:0]inp_V,inp_I; output [4:0]out_K; assign out_K=inp_V ~| inp_I; endmodule
module NOR_1(P,L,T); input [1:0]P,L; output [1:0]T; assign T=P ~| L
module NOR_6(M,O,H,N); input [6:0]M,O,H; output [6:0]N; assign N=M ~| O ~| H; endmodule
module NOR_1(inp_H,inp_A,out_H); input [1:0]inp_H,inp_A; output [1:0]out_H; assign out_H=inp_H ~| inp_A; endmodule
module NOR_3(inp_X,inp_P,out_H); input [3:0]inp_X,inp_P; output [3:0]out_H; assign out_H=inp_X ~| inp_P; endmodule
module NOR_5(inp_E,inp_X,out_Y); input [5:0]inp_E,inp_X; output [5:0]out_Y; assign out_Y=inp_E ~| inp_X; endmodule
module NOR_6(X,A,I,C); input [6:0]X,A,I; output [6:0]C; assign C=X ~| A ~| I; endmodule
module NOR_2(inp_N,inp_F,inp_K,out_N); input [2:0]inp_N,inp_F,inp_K; output [2:0]out_N; assign out_N=inp_N ~| inp_F ~| inp_K
module NOR_2(H,M,Q); input [2:0]H,M; output [2:0]Q; assign Q=H ~| M; endmodule
module NOR_7(A,Z,L,T); input [7:0]A,Z,L; output [7:0]T; assign T=A ~| Z ~| L; endmodule
module NOR_4(inp_Q,inp_B,inp_U,out_R); input [4:0]inp_Q,inp_B,inp_U; output [4:0]out_R; assign out_R=inp_Q ~| inp_B ~| inp_U; endmodule
module NOR_6(P,K,J); input [6:0]P,K; output [6:0]J; assign J=P ~| K
module NOR_6(U,A,D,L); input [6:0]U,A,D; output [6:0]L; assign L=U ~| A ~| D
module NOR_5(inp_N,inp_U,inp_S,out_U); input [5:0]inp_N,inp_U,inp_S; output [5:0]out_U; assign out_U=inp_N ~| inp_U ~| inp_S; endmodule
module NOR_6(inp_R,inp_K,out_W); input [6:0]inp_R,inp_K; output [6:0]out_W; assign out_W=inp_R ~| inp_K; endmodule
module NOR_3(inp_F,inp_K,inp_C,out_C); input [3:0]inp_F,inp_K,inp_C; output [3:0]out_C; assign out_C=inp_F ~| inp_K ~| inp_C
module NOR_1(inp_P,inp_C,out_J); input [1:0]inp_P,inp_C; output [1:0]out_J; assign out_J=inp_P ~| inp_C
module NOR_5(P,U,F); input [5:0]P,U; output [5:0]F; assign F=P ~| U
module NOR_1(inp_B,inp_J,inp_G,out_Z); input [1:0]inp_B,inp_J,inp_G; output [1:0]out_Z; assign out_Z=inp_B ~| inp_J ~| inp_G
module NOR_5(P,H,X,T); input [5:0]P,H,X; output [5:0]T; assign T=P ~| H ~| X
module NOR_7(inp_H,inp_X,out_A); input [7:0]inp_H,inp_X; output [7:0]out_A; assign out_A=inp_H ~| inp_X; endmodule
module NOR_5(H,Q,S,I); input [5:0]H,Q,S; output [5:0]I; assign I=H ~| Q ~| S; endmodule
module NOR_2(inp_J,inp_W,inp_Z,out_O); input [2:0]inp_J,inp_W,inp_Z; output [2:0]out_O; assign out_O=inp_J ~| inp_W ~| inp_Z
module NOR_4(inp_V,inp_G,inp_P,out_I); input [4:0]inp_V,inp_G,inp_P; output [4:0]out_I; assign out_I=inp_V ~| inp_G ~| inp_P; endmodule
module NOR_6(W,Z,R); input [6:0]W,Z; output [6:0]R; assign R=W ~| Z
module NOR_3(inp_L,inp_S,inp_N,out_R); input [3:0]inp_L,inp_S,inp_N; output [3:0]out_R; assign out_R=inp_L ~| inp_S ~| inp_N
module NOR_2(A,U,C); input [2:0]A,U; output [2:0]C; assign C=A ~| U; endmodule
module NOR_3(C,B,F,K); input [3:0]C,B,F; output [3:0]K; assign K=C ~| B ~| F; endmodule
module NOR_4(inp_N,inp_X,inp_C,out_P); input [4:0]inp_N,inp_X,inp_C; output [4:0]out_P; assign out_P=inp_N ~| inp_X ~| inp_C
module NOR_3(S,U,M,W); input [3:0]S,U,M; output [3:0]W; assign W=S ~| U ~| M
module NOR_2(inp_L,inp_S,inp_D,out_S); input [2:0]inp_L,inp_S,inp_D; output [2:0]out_S; assign out_S=inp_L ~| inp_S ~| inp_D
module NOR_7(X,N,V,E); input [7:0]X,N,V; output [7:0]E; assign E=X ~| N ~| V; endmodule
module NOR_5(G,X,S); input [5:0]G,X; output [5:0]S; assign S=G ~| X
module NOR_1(R,K,I); input [1:0]R,K; output [1:0]I; assign I=R ~| K
module NOR_5(inp_C,inp_W,out_U); input [5:0]inp_C,inp_W; output [5:0]out_U; assign out_U=inp_C ~| inp_W
module NOR_4(inp_D,inp_J,out_Y); input [4:0]inp_D,inp_J; output [4:0]out_Y; assign out_Y=inp_D ~| inp_J; endmodule
module NOR_1(inp_R,inp_Z,inp_B,out_A); input [1:0]inp_R,inp_Z,inp_B; output [1:0]out_A; assign out_A=inp_R ~| inp_Z ~| inp_B
module NOR_2(H,M,P); input [2:0]H,M; output [2:0]P; assign P=H ~| M
module NOR_6(I,P,Z); input [6:0]I,P; output [6:0]Z; assign Z=I ~| P
module NOR_4(inp_M,inp_F,out_S); input [4:0]inp_M,inp_F; output [4:0]out_S; assign out_S=inp_M ~| inp_F; endmodule
module NOR_1(inp_C,inp_B,out_Y); input [1:0]inp_C,inp_B; output [1:0]out_Y; assign out_Y=inp_C ~| inp_B; endmodule
module NOR_1(inp_N,inp_F,out_V); input [1:0]inp_N,inp_F; output [1:0]out_V; assign out_V=inp_N ~| inp_F
module NOR_6(inp_M,inp_W,out_A); input [6:0]inp_M,inp_W; output [6:0]out_A; assign out_A=inp_M ~| inp_W; endmodule
module NOR_7(K,U,Z,I); input [7:0]K,U,Z; output [7:0]I; assign I=K ~| U ~| Z
module NOR_5(L,E,G,Y); input [5:0]L,E,G; output [5:0]Y; assign Y=L ~| E ~| G
module NOR_4(inp_Q,inp_W,inp_L,out_X); input [4:0]inp_Q,inp_W,inp_L; output [4:0]out_X; assign out_X=inp_Q ~| inp_W ~| inp_L
module NOR_5(N,Q,I); input [5:0]N,Q; output [5:0]I; assign I=N ~| Q
module NOR_1(inp_D,inp_B,out_X); input [1:0]inp_D,inp_B; output [1:0]out_X; assign out_X=inp_D ~| inp_B
module NOR_3(inp_A,inp_X,inp_U,out_D); input [3:0]inp_A,inp_X,inp_U; output [3:0]out_D; assign out_D=inp_A ~| inp_X ~| inp_U; endmodule
module NOR_5(inp_B,inp_S,out_N); input [5:0]inp_B,inp_S; output [5:0]out_N; assign out_N=inp_B ~| inp_S
module NOR_6(Q,V,O); input [6:0]Q,V; output [6:0]O; assign O=Q ~| V; endmodule
module NOR_7(E,M,I,K); input [7:0]E,M,I; output [7:0]K; assign K=E ~| M ~| I
module NOR_3(inp_S,inp_A,out_C); input [3:0]inp_S,inp_A; output [3:0]out_C; assign out_C=inp_S ~| inp_A; endmodule
module NOR_5(P,R,M,K); input [5:0]P,R,M; output [5:0]K; assign K=P ~| R ~| M
module NOR_6(R,M,D); input [6:0]R,M; output [6:0]D; assign D=R ~| M
module NOR_5(Z,R,I); input [5:0]Z,R; output [5:0]I; assign I=Z ~| R; endmodule
module NOR_4(inp_Q,inp_X,out_F); input [4:0]inp_Q,inp_X; output [4:0]out_F; assign out_F=inp_Q ~| inp_X
module NOR_7(inp_D,inp_Z,out_Z); input [7:0]inp_D,inp_Z; output [7:0]out_Z; assign out_Z=inp_D ~| inp_Z; endmodule
module NOR_7(H,D,J,X); input [7:0]H,D,J; output [7:0]X; assign X=H ~| D ~| J; endmodule
module NOR_1(inp_T,inp_O,inp_M,out_E); input [1:0]inp_T,inp_O,inp_M; output [1:0]out_E; assign out_E=inp_T ~| inp_O ~| inp_M; endmodule
module NOR_6(inp_G,inp_V,out_F); input [6:0]inp_G,inp_V; output [6:0]out_F; assign out_F=inp_G ~| inp_V; endmodule
module NOR_3(T,N,I,Y); input [3:0]T,N,I; output [3:0]Y; assign Y=T ~| N ~| I; endmodule
module NOR_1(inp_U,inp_Q,inp_H,out_V); input [1:0]inp_U,inp_Q,inp_H; output [1:0]out_V; assign out_V=inp_U ~| inp_Q ~| inp_H; endmodule
module NOR_3(inp_P,inp_D,inp_E,out_H); input [3:0]inp_P,inp_D,inp_E; output [3:0]out_H; assign out_H=inp_P ~| inp_D ~| inp_E; endmodule
module NOR_4(inp_T,inp_W,out_I); input [4:0]inp_T,inp_W; output [4:0]out_I; assign out_I=inp_T ~| inp_W; endmodule
module NOR_4(inp_T,inp_L,out_K); input [4:0]inp_T,inp_L; output [4:0]out_K; assign out_K=inp_T ~| inp_L
module NOR_7(inp_G,inp_D,inp_M,out_S); input [7:0]inp_G,inp_D,inp_M; output [7:0]out_S; assign out_S=inp_G ~| inp_D ~| inp_M
module NOR_3(inp_C,inp_G,out_T); input [3:0]inp_C,inp_G; output [3:0]out_T; assign out_T=inp_C ~| inp_G; endmodule
module NOR_4(inp_W,inp_M,inp_C,out_X); input [4:0]inp_W,inp_M,inp_C; output [4:0]out_X; assign out_X=inp_W ~| inp_M ~| inp_C; endmodule
module NOR_5(V,R,L); input [5:0]V,R; output [5:0]L; assign L=V ~| R; endmodule
module NOR_4(inp_L,inp_N,inp_F,out_G); input [4:0]inp_L,inp_N,inp_F; output [4:0]out_G; assign out_G=inp_L ~| inp_N ~| inp_F
module NOR_1(inp_C,inp_K,inp_U,out_L); input [1:0]inp_C,inp_K,inp_U; output [1:0]out_L; assign out_L=inp_C ~| inp_K ~| inp_U; endmodule
module NOR_1(inp_Z,inp_B,inp_I,out_X); input [1:0]inp_Z,inp_B,inp_I; output [1:0]out_X; assign out_X=inp_Z ~| inp_B ~| inp_I
module NOR_7(W,M,R); input [7:0]W,M; output [7:0]R; assign R=W ~| M
module NOR_1(inp_E,inp_P,out_Q); input [1:0]inp_E,inp_P; output [1:0]out_Q; assign out_Q=inp_E ~| inp_P; endmodule
module NOR_4(inp_Y,inp_D,out_P); input [4:0]inp_Y,inp_D; output [4:0]out_P; assign out_P=inp_Y ~| inp_D
module NOR_2(inp_P,inp_F,inp_A,out_U); input [2:0]inp_P,inp_F,inp_A; output [2:0]out_U; assign out_U=inp_P ~| inp_F ~| inp_A; endmodule
module NOR_1(inp_L,inp_K,out_M); input [1:0]inp_L,inp_K; output [1:0]out_M; assign out_M=inp_L ~| inp_K
module NOR_1(M,Y,E); input [1:0]M,Y; output [1:0]E; assign E=M ~| Y
module NOR_7(D,G,J); input [7:0]D,G; output [7:0]J; assign J=D ~| G; endmodule
module NOR_7(M,Z,U,S); input [7:0]M,Z,U; output [7:0]S; assign S=M ~| Z ~| U
module NOR_3(inp_J,inp_A,out_D); input [3:0]inp_J,inp_A; output [3:0]out_D; assign out_D=inp_J ~| inp_A
module NOR_4(X,I,D); input [4:0]X,I; output [4:0]D; assign D=X ~| I; endmodule
module NOR_6(inp_M,inp_K,out_E); input [6:0]inp_M,inp_K; output [6:0]out_E; assign out_E=inp_M ~| inp_K
module NOR_1(inp_K,inp_S,out_K); input [1:0]inp_K,inp_S; output [1:0]out_K; assign out_K=inp_K ~| inp_S
module NOR_5(inp_K,inp_B,out_S); input [5:0]inp_K,inp_B; output [5:0]out_S; assign out_S=inp_K ~| inp_B
module NOR_2(inp_Z,inp_J,out_B); input [2:0]inp_Z,inp_J; output [2:0]out_B; assign out_B=inp_Z ~| inp_J
module NOR_1(W,H,V,E); input [1:0]W,H,V; output [1:0]E; assign E=W ~| H ~| V
module NOR_2(G,S,C,V); input [2:0]G,S,C; output [2:0]V; assign V=G ~| S ~| C; endmodule
module NOR_7(inp_K,inp_M,inp_Z,out_C); input [7:0]inp_K,inp_M,inp_Z; output [7:0]out_C; assign out_C=inp_K ~| inp_M ~| inp_Z
module NOR_6(E,F,R); input [6:0]E,F; output [6:0]R; assign R=E ~| F
module NOR_6(T,Z,K); input [6:0]T,Z; output [6:0]K; assign K=T ~| Z; endmodule
module NOR_3(P,O,K); input [3:0]P,O; output [3:0]K; assign K=P ~| O; endmodule
module NOR_6(T,V,J,S); input [6:0]T,V,J; output [6:0]S; assign S=T ~| V ~| J
module NOR_7(E,A,F,G); input [7:0]E,A,F; output [7:0]G; assign G=E ~| A ~| F; endmodule
module NOR_1(Z,E,G,H); input [1:0]Z,E,G; output [1:0]H; assign H=Z ~| E ~| G
module NOR_1(inp_C,inp_Y,inp_R,out_G); input [1:0]inp_C,inp_Y,inp_R; output [1:0]out_G; assign out_G=inp_C ~| inp_Y ~| inp_R; endmodule
module NOR_7(inp_D,inp_L,inp_K,out_V); input [7:0]inp_D,inp_L,inp_K; output [7:0]out_V; assign out_V=inp_D ~| inp_L ~| inp_K; endmodule
module NOR_3(Q,F,E,B); input [3:0]Q,F,E; output [3:0]B; assign B=Q ~| F ~| E; endmodule
module NOR_7(inp_U,inp_Q,out_F); input [7:0]inp_U,inp_Q; output [7:0]out_F; assign out_F=inp_U ~| inp_Q; endmodule
module NOR_5(inp_G,inp_N,inp_Y,out_O); input [5:0]inp_G,inp_N,inp_Y; output [5:0]out_O; assign out_O=inp_G ~| inp_N ~| inp_Y; endmodule
module NOR_3(inp_Y,inp_V,out_N); input [3:0]inp_Y,inp_V; output [3:0]out_N; assign out_N=inp_Y ~| inp_V; endmodule
module NOR_6(inp_W,inp_M,inp_N,out_T); input [6:0]inp_W,inp_M,inp_N; output [6:0]out_T; assign out_T=inp_W ~| inp_M ~| inp_N; endmodule
module NOR_3(inp_S,inp_B,out_O); input [3:0]inp_S,inp_B; output [3:0]out_O; assign out_O=inp_S ~| inp_B
module NOR_4(Q,L,B); input [4:0]Q,L; output [4:0]B; assign B=Q ~| L; endmodule
module NOR_5(inp_L,inp_H,inp_H,out_K); input [5:0]inp_L,inp_H,inp_H; output [5:0]out_K; assign out_K=inp_L ~| inp_H ~| inp_H; endmodule
module NOR_6(inp_P,inp_J,out_Y); input [6:0]inp_P,inp_J; output [6:0]out_Y; assign out_Y=inp_P ~| inp_J
module NOR_5(inp_D,inp_M,out_V); input [5:0]inp_D,inp_M; output [5:0]out_V; assign out_V=inp_D ~| inp_M
module NOR_1(inp_L,inp_V,inp_U,out_U); input [1:0]inp_L,inp_V,inp_U; output [1:0]out_U; assign out_U=inp_L ~| inp_V ~| inp_U; endmodule
module NOR_4(inp_P,inp_G,inp_S,out_V); input [4:0]inp_P,inp_G,inp_S; output [4:0]out_V; assign out_V=inp_P ~| inp_G ~| inp_S; endmodule
module NOR_7(inp_X,inp_Q,inp_S,out_E); input [7:0]inp_X,inp_Q,inp_S; output [7:0]out_E; assign out_E=inp_X ~| inp_Q ~| inp_S; endmodule
module NOR_4(inp_B,inp_G,out_V); input [4:0]inp_B,inp_G; output [4:0]out_V; assign out_V=inp_B ~| inp_G; endmodule
module NOR_1(inp_N,inp_E,out_D); input [1:0]inp_N,inp_E; output [1:0]out_D; assign out_D=inp_N ~| inp_E; endmodule
module NOR_1(M,A,W,G); input [1:0]M,A,W; output [1:0]G; assign G=M ~| A ~| W
module NOR_6(N,Z,A); input [6:0]N,Z; output [6:0]A; assign A=N ~| Z
module NOR_7(inp_N,inp_C,inp_E,out_E); input [7:0]inp_N,inp_C,inp_E; output [7:0]out_E; assign out_E=inp_N ~| inp_C ~| inp_E; endmodule
module NOR_6(X,H,Q,D); input [6:0]X,H,Q; output [6:0]D; assign D=X ~| H ~| Q; endmodule
module NOR_4(inp_A,inp_S,inp_Y,out_L); input [4:0]inp_A,inp_S,inp_Y; output [4:0]out_L; assign out_L=inp_A ~| inp_S ~| inp_Y; endmodule
module NOR_3(inp_P,inp_S,inp_U,out_C); input [3:0]inp_P,inp_S,inp_U; output [3:0]out_C; assign out_C=inp_P ~| inp_S ~| inp_U
module NOR_2(inp_R,inp_A,out_Y); input [2:0]inp_R,inp_A; output [2:0]out_Y; assign out_Y=inp_R ~| inp_A
module NOR_4(B,Z,M,Q); input [4:0]B,Z,M; output [4:0]Q; assign Q=B ~| Z ~| M
module NOR_7(F,E,C); input [7:0]F,E; output [7:0]C; assign C=F ~| E
module NOR_5(inp_D,inp_R,inp_T,out_Q); input [5:0]inp_D,inp_R,inp_T; output [5:0]out_Q; assign out_Q=inp_D ~| inp_R ~| inp_T; endmodule
module NOR_1(inp_B,inp_U,out_B); input [1:0]inp_B,inp_U; output [1:0]out_B; assign out_B=inp_B ~| inp_U
module NOR_5(inp_D,inp_A,inp_S,out_Z); input [5:0]inp_D,inp_A,inp_S; output [5:0]out_Z; assign out_Z=inp_D ~| inp_A ~| inp_S
module NOR_2(B,H,C); input [2:0]B,H; output [2:0]C; assign C=B ~| H
module NOR_3(inp_P,inp_A,out_T); input [3:0]inp_P,inp_A; output [3:0]out_T; assign out_T=inp_P ~| inp_A
module NOR_3(I,T,U); input [3:0]I,T; output [3:0]U; assign U=I ~| T; endmodule
module NOR_5(inp_Z,inp_D,out_X); input [5:0]inp_Z,inp_D; output [5:0]out_X; assign out_X=inp_Z ~| inp_D; endmodule
module NOR_7(inp_D,inp_Z,out_P); input [7:0]inp_D,inp_Z; output [7:0]out_P; assign out_P=inp_D ~| inp_Z
module NOR_4(F,S,M,R); input [4:0]F,S,M; output [4:0]R; assign R=F ~| S ~| M
module NOR_1(inp_W,inp_H,out_O); input [1:0]inp_W,inp_H; output [1:0]out_O; assign out_O=inp_W ~| inp_H
module NOR_5(E,T,F,V); input [5:0]E,T,F; output [5:0]V; assign V=E ~| T ~| F
module NOR_2(inp_H,inp_Z,out_A); input [2:0]inp_H,inp_Z; output [2:0]out_A; assign out_A=inp_H ~| inp_Z; endmodule
module NOR_6(inp_F,inp_Q,inp_L,out_Z); input [6:0]inp_F,inp_Q,inp_L; output [6:0]out_Z; assign out_Z=inp_F ~| inp_Q ~| inp_L; endmodule
module NOR_2(inp_V,inp_D,inp_W,out_S); input [2:0]inp_V,inp_D,inp_W; output [2:0]out_S; assign out_S=inp_V ~| inp_D ~| inp_W; endmodule
module NOR_6(inp_L,inp_T,inp_N,out_B); input [6:0]inp_L,inp_T,inp_N; output [6:0]out_B; assign out_B=inp_L ~| inp_T ~| inp_N
module NOR_7(W,E,O); input [7:0]W,E; output [7:0]O; assign O=W ~| E; endmodule
module NOR_4(inp_U,inp_N,inp_X,out_Y); input [4:0]inp_U,inp_N,inp_X; output [4:0]out_Y; assign out_Y=inp_U ~| inp_N ~| inp_X; endmodule
module NOR_6(inp_E,inp_L,inp_U,out_P); input [6:0]inp_E,inp_L,inp_U; output [6:0]out_P; assign out_P=inp_E ~| inp_L ~| inp_U
module NOR_7(J,E,F); input [7:0]J,E; output [7:0]F; assign F=J ~| E; endmodule
module NOR_1(S,T,Z); input [1:0]S,T; output [1:0]Z; assign Z=S ~| T
module NOR_6(E,Z,I,U); input [6:0]E,Z,I; output [6:0]U; assign U=E ~| Z ~| I; endmodule
module NOR_4(D,Y,G); input [4:0]D,Y; output [4:0]G; assign G=D ~| Y; endmodule
module NOR_7(inp_T,inp_U,out_S); input [7:0]inp_T,inp_U; output [7:0]out_S; assign out_S=inp_T ~| inp_U; endmodule
module NOR_6(inp_F,inp_B,out_Q); input [6:0]inp_F,inp_B; output [6:0]out_Q; assign out_Q=inp_F ~| inp_B; endmodule
module NOR_5(B,Q,E,K); input [5:0]B,Q,E; output [5:0]K; assign K=B ~| Q ~| E; endmodule
module NOR_7(N,Q,P); input [7:0]N,Q; output [7:0]P; assign P=N ~| Q; endmodule
module NOR_6(inp_W,inp_N,out_T); input [6:0]inp_W,inp_N; output [6:0]out_T; assign out_T=inp_W ~| inp_N
module NOR_4(A,S,L,G); input [4:0]A,S,L; output [4:0]G; assign G=A ~| S ~| L
module NOR_5(E,J,K,R); input [5:0]E,J,K; output [5:0]R; assign R=E ~| J ~| K; endmodule
module NOR_5(L,S,F); input [5:0]L,S; output [5:0]F; assign F=L ~| S; endmodule
module NOR_1(P,Y,M,S); input [1:0]P,Y,M; output [1:0]S; assign S=P ~| Y ~| M
module NOR_3(inp_Q,inp_F,out_Z); input [3:0]inp_Q,inp_F; output [3:0]out_Z; assign out_Z=inp_Q ~| inp_F
module NOR_3(inp_U,inp_A,out_U); input [3:0]inp_U,inp_A; output [3:0]out_U; assign out_U=inp_U ~| inp_A
module NOR_3(inp_L,inp_U,inp_Z,out_U); input [3:0]inp_L,inp_U,inp_Z; output [3:0]out_U; assign out_U=inp_L ~| inp_U ~| inp_Z; endmodule
module NOR_7(inp_H,inp_X,out_Y); input [7:0]inp_H,inp_X; output [7:0]out_Y; assign out_Y=inp_H ~| inp_X; endmodule
module NOR_5(inp_Z,inp_M,out_M); input [5:0]inp_Z,inp_M; output [5:0]out_M; assign out_M=inp_Z ~| inp_M; endmodule
module NOR_6(inp_A,inp_X,inp_M,out_L); input [6:0]inp_A,inp_X,inp_M; output [6:0]out_L; assign out_L=inp_A ~| inp_X ~| inp_M
module NOR_6(inp_T,inp_B,out_Y); input [6:0]inp_T,inp_B; output [6:0]out_Y; assign out_Y=inp_T ~| inp_B
module NOR_5(Y,E,V); input [5:0]Y,E; output [5:0]V; assign V=Y ~| E
module NOR_1(P,U,Z,O); input [1:0]P,U,Z; output [1:0]O; assign O=P ~| U ~| Z; endmodule
module NOR_2(inp_H,inp_D,out_L); input [2:0]inp_H,inp_D; output [2:0]out_L; assign out_L=inp_H ~| inp_D; endmodule
module NOR_3(inp_X,inp_R,out_Z); input [3:0]inp_X,inp_R; output [3:0]out_Z; assign out_Z=inp_X ~| inp_R
module NOR_3(inp_Y,inp_K,inp_P,out_A); input [3:0]inp_Y,inp_K,inp_P; output [3:0]out_A; assign out_A=inp_Y ~| inp_K ~| inp_P; endmodule
module NOR_6(inp_N,inp_Z,inp_T,out_Q); input [6:0]inp_N,inp_Z,inp_T; output [6:0]out_Q; assign out_Q=inp_N ~| inp_Z ~| inp_T; endmodule
module NOR_6(inp_D,inp_J,out_F); input [6:0]inp_D,inp_J; output [6:0]out_F; assign out_F=inp_D ~| inp_J; endmodule
module NOR_2(inp_V,inp_I,inp_W,out_D); input [2:0]inp_V,inp_I,inp_W; output [2:0]out_D; assign out_D=inp_V ~| inp_I ~| inp_W; endmodule
module NOR_1(K,N,O,J); input [1:0]K,N,O; output [1:0]J; assign J=K ~| N ~| O
module NOR_5(inp_L,inp_A,inp_Q,out_Y); input [5:0]inp_L,inp_A,inp_Q; output [5:0]out_Y; assign out_Y=inp_L ~| inp_A ~| inp_Q; endmodule
module NOR_2(inp_N,inp_W,inp_Y,out_X); input [2:0]inp_N,inp_W,inp_Y; output [2:0]out_X; assign out_X=inp_N ~| inp_W ~| inp_Y; endmodule
module NOR_6(inp_T,inp_X,inp_R,out_M); input [6:0]inp_T,inp_X,inp_R; output [6:0]out_M; assign out_M=inp_T ~| inp_X ~| inp_R
module NOR_5(T,L,Z); input [5:0]T,L; output [5:0]Z; assign Z=T ~| L
module NOR_7(inp_V,inp_I,out_D); input [7:0]inp_V,inp_I; output [7:0]out_D; assign out_D=inp_V ~| inp_I; endmodule
module NOR_6(J,Q,K); input [6:0]J,Q; output [6:0]K; assign K=J ~| Q; endmodule
module NOR_2(inp_S,inp_I,inp_T,out_N); input [2:0]inp_S,inp_I,inp_T; output [2:0]out_N; assign out_N=inp_S ~| inp_I ~| inp_T; endmodule
module NOR_2(U,X,B,E); input [2:0]U,X,B; output [2:0]E; assign E=U ~| X ~| B; endmodule
module NOR_5(L,R,B,O); input [5:0]L,R,B; output [5:0]O; assign O=L ~| R ~| B
module NOR_3(G,V,R,F); input [3:0]G,V,R; output [3:0]F; assign F=G ~| V ~| R; endmodule
module NOR_3(W,S,A); input [3:0]W,S; output [3:0]A; assign A=W ~| S
module NOR_5(J,O,R); input [5:0]J,O; output [5:0]R; assign R=J ~| O
module NOR_4(inp_B,inp_X,inp_S,out_P); input [4:0]inp_B,inp_X,inp_S; output [4:0]out_P; assign out_P=inp_B ~| inp_X ~| inp_S; endmodule
module NOR_6(inp_V,inp_W,inp_F,out_S); input [6:0]inp_V,inp_W,inp_F; output [6:0]out_S; assign out_S=inp_V ~| inp_W ~| inp_F; endmodule
module NOR_6(F,S,C,T); input [6:0]F,S,C; output [6:0]T; assign T=F ~| S ~| C
module NOR_7(inp_J,inp_T,out_M); input [7:0]inp_J,inp_T; output [7:0]out_M; assign out_M=inp_J ~| inp_T
module NOR_2(M,O,R); input [2:0]M,O; output [2:0]R; assign R=M ~| O
module NOR_4(inp_K,inp_E,out_E); input [4:0]inp_K,inp_E; output [4:0]out_E; assign out_E=inp_K ~| inp_E; endmodule
module NOR_2(inp_T,inp_W,out_B); input [2:0]inp_T,inp_W; output [2:0]out_B; assign out_B=inp_T ~| inp_W; endmodule
module NOR_1(inp_J,inp_O,out_P); input [1:0]inp_J,inp_O; output [1:0]out_P; assign out_P=inp_J ~| inp_O; endmodule
module NOR_7(inp_K,inp_V,inp_D,out_Q); input [7:0]inp_K,inp_V,inp_D; output [7:0]out_Q; assign out_Q=inp_K ~| inp_V ~| inp_D
module NOR_2(S,E,I,K); input [2:0]S,E,I; output [2:0]K; assign K=S ~| E ~| I
module NOR_5(R,H,D,Y); input [5:0]R,H,D; output [5:0]Y; assign Y=R ~| H ~| D
module NOR_7(D,E,J); input [7:0]D,E; output [7:0]J; assign J=D ~| E
module NOR_2(inp_E,inp_V,inp_B,out_D); input [2:0]inp_E,inp_V,inp_B; output [2:0]out_D; assign out_D=inp_E ~| inp_V ~| inp_B; endmodule
module NOR_4(inp_V,inp_Z,inp_P,out_O); input [4:0]inp_V,inp_Z,inp_P; output [4:0]out_O; assign out_O=inp_V ~| inp_Z ~| inp_P; endmodule
module NOR_7(inp_L,inp_C,out_F); input [7:0]inp_L,inp_C; output [7:0]out_F; assign out_F=inp_L ~| inp_C
module NOR_7(O,I,L); input [7:0]O,I; output [7:0]L; assign L=O ~| I
module NOR_6(inp_O,inp_B,out_P); input [6:0]inp_O,inp_B; output [6:0]out_P; assign out_P=inp_O ~| inp_B
module NOR_7(inp_L,inp_E,out_M); input [7:0]inp_L,inp_E; output [7:0]out_M; assign out_M=inp_L ~| inp_E
module NOR_3(inp_E,inp_H,inp_D,out_Y); input [3:0]inp_E,inp_H,inp_D; output [3:0]out_Y; assign out_Y=inp_E ~| inp_H ~| inp_D; endmodule
module NOR_2(E,G,T,V); input [2:0]E,G,T; output [2:0]V; assign V=E ~| G ~| T
module NOR_7(inp_O,inp_E,inp_T,out_Y); input [7:0]inp_O,inp_E,inp_T; output [7:0]out_Y; assign out_Y=inp_O ~| inp_E ~| inp_T
module NOR_6(inp_M,inp_Q,out_I); input [6:0]inp_M,inp_Q; output [6:0]out_I; assign out_I=inp_M ~| inp_Q
module NOR_1(X,G,A,B); input [1:0]X,G,A; output [1:0]B; assign B=X ~| G ~| A; endmodule
module NOR_1(inp_N,inp_K,inp_O,out_C); input [1:0]inp_N,inp_K,inp_O; output [1:0]out_C; assign out_C=inp_N ~| inp_K ~| inp_O; endmodule
module NOR_2(inp_D,inp_G,out_B); input [2:0]inp_D,inp_G; output [2:0]out_B; assign out_B=inp_D ~| inp_G; endmodule
module NOR_7(inp_C,inp_R,out_R); input [7:0]inp_C,inp_R; output [7:0]out_R; assign out_R=inp_C ~| inp_R; endmodule
module NOR_4(inp_C,inp_T,inp_S,out_Q); input [4:0]inp_C,inp_T,inp_S; output [4:0]out_Q; assign out_Q=inp_C ~| inp_T ~| inp_S
module NOR_1(V,L,O); input [1:0]V,L; output [1:0]O; assign O=V ~| L; endmodule
module NOR_2(D,M,Y); input [2:0]D,M; output [2:0]Y; assign Y=D ~| M; endmodule
module NOR_6(inp_A,inp_W,out_P); input [6:0]inp_A,inp_W; output [6:0]out_P; assign out_P=inp_A ~| inp_W; endmodule
module NOR_6(O,U,W,I); input [6:0]O,U,W; output [6:0]I; assign I=O ~| U ~| W; endmodule
module NOR_1(inp_W,inp_L,out_S); input [1:0]inp_W,inp_L; output [1:0]out_S; assign out_S=inp_W ~| inp_L
module NOR_3(inp_L,inp_R,inp_Z,out_T); input [3:0]inp_L,inp_R,inp_Z; output [3:0]out_T; assign out_T=inp_L ~| inp_R ~| inp_Z
module NOR_4(S,K,V,U); input [4:0]S,K,V; output [4:0]U; assign U=S ~| K ~| V; endmodule
module NOR_7(inp_B,inp_X,out_Y); input [7:0]inp_B,inp_X; output [7:0]out_Y; assign out_Y=inp_B ~| inp_X; endmodule
module NOR_2(H,V,C); input [2:0]H,V; output [2:0]C; assign C=H ~| V; endmodule
module NOR_6(W,G,B,N); input [6:0]W,G,B; output [6:0]N; assign N=W ~| G ~| B; endmodule
module NOR_1(R,W,M); input [1:0]R,W; output [1:0]M; assign M=R ~| W
module NOR_1(inp_T,inp_U,inp_E,out_Y); input [1:0]inp_T,inp_U,inp_E; output [1:0]out_Y; assign out_Y=inp_T ~| inp_U ~| inp_E
module NOR_4(A,Y,W); input [4:0]A,Y; output [4:0]W; assign W=A ~| Y; endmodule
module NOR_1(V,L,E,P); input [1:0]V,L,E; output [1:0]P; assign P=V ~| L ~| E
module NOR_1(inp_V,inp_R,out_I); input [1:0]inp_V,inp_R; output [1:0]out_I; assign out_I=inp_V ~| inp_R
module NOR_1(inp_G,inp_S,out_W); input [1:0]inp_G,inp_S; output [1:0]out_W; assign out_W=inp_G ~| inp_S; endmodule
module NOR_1(inp_F,inp_R,out_E); input [1:0]inp_F,inp_R; output [1:0]out_E; assign out_E=inp_F ~| inp_R
module NOR_1(R,Z,T,E); input [1:0]R,Z,T; output [1:0]E; assign E=R ~| Z ~| T; endmodule
module NOR_7(M,X,U); input [7:0]M,X; output [7:0]U; assign U=M ~| X; endmodule
module NOR_1(inp_I,inp_K,out_F); input [1:0]inp_I,inp_K; output [1:0]out_F; assign out_F=inp_I ~| inp_K
module NOR_3(K,R,H); input [3:0]K,R; output [3:0]H; assign H=K ~| R; endmodule
module NOR_4(inp_Y,inp_X,inp_S,out_U); input [4:0]inp_Y,inp_X,inp_S; output [4:0]out_U; assign out_U=inp_Y ~| inp_X ~| inp_S
module NOR_4(inp_N,inp_M,out_I); input [4:0]inp_N,inp_M; output [4:0]out_I; assign out_I=inp_N ~| inp_M
module NOR_3(Y,T,K,F); input [3:0]Y,T,K; output [3:0]F; assign F=Y ~| T ~| K
module NOR_7(O,U,E); input [7:0]O,U; output [7:0]E; assign E=O ~| U; endmodule
module NOR_5(inp_J,inp_E,inp_C,out_T); input [5:0]inp_J,inp_E,inp_C; output [5:0]out_T; assign out_T=inp_J ~| inp_E ~| inp_C
module NOR_1(inp_P,inp_V,inp_C,out_D); input [1:0]inp_P,inp_V,inp_C; output [1:0]out_D; assign out_D=inp_P ~| inp_V ~| inp_C; endmodule
module NOR_5(Z,K,O,U); input [5:0]Z,K,O; output [5:0]U; assign U=Z ~| K ~| O; endmodule
module NOR_5(inp_C,inp_B,inp_K,out_Y); input [5:0]inp_C,inp_B,inp_K; output [5:0]out_Y; assign out_Y=inp_C ~| inp_B ~| inp_K; endmodule
module NOR_2(N,W,L,V); input [2:0]N,W,L; output [2:0]V; assign V=N ~| W ~| L; endmodule
module NOR_5(inp_L,inp_K,inp_X,out_A); input [5:0]inp_L,inp_K,inp_X; output [5:0]out_A; assign out_A=inp_L ~| inp_K ~| inp_X; endmodule
module NOR_4(inp_J,inp_U,inp_W,out_X); input [4:0]inp_J,inp_U,inp_W; output [4:0]out_X; assign out_X=inp_J ~| inp_U ~| inp_W; endmodule
module NOR_7(L,R,Q); input [7:0]L,R; output [7:0]Q; assign Q=L ~| R; endmodule
module NOR_7(inp_F,inp_M,inp_U,out_O); input [7:0]inp_F,inp_M,inp_U; output [7:0]out_O; assign out_O=inp_F ~| inp_M ~| inp_U; endmodule
module NOR_2(G,S,F,W); input [2:0]G,S,F; output [2:0]W; assign W=G ~| S ~| F; endmodule
module NOR_7(S,W,X,K); input [7:0]S,W,X; output [7:0]K; assign K=S ~| W ~| X
module NOR_1(V,T,N,H); input [1:0]V,T,N; output [1:0]H; assign H=V ~| T ~| N; endmodule
module NOR_4(R,L,M); input [4:0]R,L; output [4:0]M; assign M=R ~| L; endmodule
module NOR_3(V,S,O); input [3:0]V,S; output [3:0]O; assign O=V ~| S
module NOR_5(V,A,U,Y); input [5:0]V,A,U; output [5:0]Y; assign Y=V ~| A ~| U; endmodule
module NOR_4(D,Z,J); input [4:0]D,Z; output [4:0]J; assign J=D ~| Z
module NOR_6(inp_D,inp_T,out_E); input [6:0]inp_D,inp_T; output [6:0]out_E; assign out_E=inp_D ~| inp_T; endmodule
module NOR_1(inp_B,inp_T,inp_I,out_A); input [1:0]inp_B,inp_T,inp_I; output [1:0]out_A; assign out_A=inp_B ~| inp_T ~| inp_I; endmodule
module NOR_5(inp_K,inp_G,inp_M,out_K); input [5:0]inp_K,inp_G,inp_M; output [5:0]out_K; assign out_K=inp_K ~| inp_G ~| inp_M
module NOR_7(E,B,K); input [7:0]E,B; output [7:0]K; assign K=E ~| B; endmodule
module NOR_2(F,H,U); input [2:0]F,H; output [2:0]U; assign U=F ~| H; endmodule
module NOR_4(O,Z,V,M); input [4:0]O,Z,V; output [4:0]M; assign M=O ~| Z ~| V
module NOR_3(inp_N,inp_U,inp_K,out_B); input [3:0]inp_N,inp_U,inp_K; output [3:0]out_B; assign out_B=inp_N ~| inp_U ~| inp_K
module NOR_4(Z,P,V,U); input [4:0]Z,P,V; output [4:0]U; assign U=Z ~| P ~| V; endmodule
module NOR_2(inp_M,inp_C,out_T); input [2:0]inp_M,inp_C; output [2:0]out_T; assign out_T=inp_M ~| inp_C; endmodule
module NOR_7(inp_V,inp_T,out_P); input [7:0]inp_V,inp_T; output [7:0]out_P; assign out_P=inp_V ~| inp_T; endmodule
module NOR_5(C,Z,W); input [5:0]C,Z; output [5:0]W; assign W=C ~| Z; endmodule
module NOR_7(W,Q,Y,K); input [7:0]W,Q,Y; output [7:0]K; assign K=W ~| Q ~| Y
module NOR_4(inp_D,inp_S,out_S); input [4:0]inp_D,inp_S; output [4:0]out_S; assign out_S=inp_D ~| inp_S; endmodule
module NOR_4(inp_Q,inp_K,out_U); input [4:0]inp_Q,inp_K; output [4:0]out_U; assign out_U=inp_Q ~| inp_K
module NOR_7(O,N,P,V); input [7:0]O,N,P; output [7:0]V; assign V=O ~| N ~| P
module NOR_1(inp_I,inp_G,inp_V,out_C); input [1:0]inp_I,inp_G,inp_V; output [1:0]out_C; assign out_C=inp_I ~| inp_G ~| inp_V; endmodule
module NOR_2(F,A,X); input [2:0]F,A; output [2:0]X; assign X=F ~| A
module NOR_2(P,H,D,N); input [2:0]P,H,D; output [2:0]N; assign N=P ~| H ~| D; endmodule
module NOR_7(E,D,B,I); input [7:0]E,D,B; output [7:0]I; assign I=E ~| D ~| B; endmodule
module NOR_1(inp_W,inp_H,out_I); input [1:0]inp_W,inp_H; output [1:0]out_I; assign out_I=inp_W ~| inp_H; endmodule
module NOR_5(P,R,A,X); input [5:0]P,R,A; output [5:0]X; assign X=P ~| R ~| A; endmodule
module NOR_7(L,D,A); input [7:0]L,D; output [7:0]A; assign A=L ~| D
module NOR_1(inp_B,inp_K,inp_V,out_B); input [1:0]inp_B,inp_K,inp_V; output [1:0]out_B; assign out_B=inp_B ~| inp_K ~| inp_V; endmodule
module NOR_6(inp_T,inp_C,inp_N,out_S); input [6:0]inp_T,inp_C,inp_N; output [6:0]out_S; assign out_S=inp_T ~| inp_C ~| inp_N; endmodule
module NOR_3(inp_E,inp_Z,inp_G,out_X); input [3:0]inp_E,inp_Z,inp_G; output [3:0]out_X; assign out_X=inp_E ~| inp_Z ~| inp_G; endmodule
module NOR_1(inp_W,inp_E,inp_O,out_D); input [1:0]inp_W,inp_E,inp_O; output [1:0]out_D; assign out_D=inp_W ~| inp_E ~| inp_O
module NOR_1(inp_W,inp_F,inp_Z,out_H); input [1:0]inp_W,inp_F,inp_Z; output [1:0]out_H; assign out_H=inp_W ~| inp_F ~| inp_Z
module NOR_2(A,X,D,Q); input [2:0]A,X,D; output [2:0]Q; assign Q=A ~| X ~| D
module NOR_5(O,P,F,A); input [5:0]O,P,F; output [5:0]A; assign A=O ~| P ~| F; endmodule
module NOR_2(inp_D,inp_G,inp_W,out_D); input [2:0]inp_D,inp_G,inp_W; output [2:0]out_D; assign out_D=inp_D ~| inp_G ~| inp_W; endmodule
module NOR_4(inp_Q,inp_D,inp_P,out_I); input [4:0]inp_Q,inp_D,inp_P; output [4:0]out_I; assign out_I=inp_Q ~| inp_D ~| inp_P
module NOR_6(Z,A,M,J); input [6:0]Z,A,M; output [6:0]J; assign J=Z ~| A ~| M; endmodule
module NOR_1(inp_L,inp_F,inp_X,out_P); input [1:0]inp_L,inp_F,inp_X; output [1:0]out_P; assign out_P=inp_L ~| inp_F ~| inp_X
module NOR_4(A,U,N); input [4:0]A,U; output [4:0]N; assign N=A ~| U; endmodule
module NOR_1(J,C,Z,P); input [1:0]J,C,Z; output [1:0]P; assign P=J ~| C ~| Z
module NOR_4(inp_C,inp_X,inp_B,out_P); input [4:0]inp_C,inp_X,inp_B; output [4:0]out_P; assign out_P=inp_C ~| inp_X ~| inp_B
module NOR_6(inp_H,inp_A,inp_M,out_N); input [6:0]inp_H,inp_A,inp_M; output [6:0]out_N; assign out_N=inp_H ~| inp_A ~| inp_M
module NOR_2(T,U,V,Y); input [2:0]T,U,V; output [2:0]Y; assign Y=T ~| U ~| V; endmodule
module NOR_5(inp_H,inp_O,inp_C,out_U); input [5:0]inp_H,inp_O,inp_C; output [5:0]out_U; assign out_U=inp_H ~| inp_O ~| inp_C
module NOR_1(inp_L,inp_N,out_B); input [1:0]inp_L,inp_N; output [1:0]out_B; assign out_B=inp_L ~| inp_N
module NOR_1(inp_J,inp_N,out_J); input [1:0]inp_J,inp_N; output [1:0]out_J; assign out_J=inp_J ~| inp_N
module NOR_6(T,K,W,U); input [6:0]T,K,W; output [6:0]U; assign U=T ~| K ~| W; endmodule
module NOR_5(inp_S,inp_V,out_J); input [5:0]inp_S,inp_V; output [5:0]out_J; assign out_J=inp_S ~| inp_V; endmodule
module NOR_2(inp_R,inp_O,out_F); input [2:0]inp_R,inp_O; output [2:0]out_F; assign out_F=inp_R ~| inp_O; endmodule
module NOR_6(A,C,M); input [6:0]A,C; output [6:0]M; assign M=A ~| C
module NOR_4(Z,E,K); input [4:0]Z,E; output [4:0]K; assign K=Z ~| E; endmodule
module NOR_1(inp_Z,inp_M,inp_V,out_E); input [1:0]inp_Z,inp_M,inp_V; output [1:0]out_E; assign out_E=inp_Z ~| inp_M ~| inp_V; endmodule
module NOR_7(inp_M,inp_O,out_G); input [7:0]inp_M,inp_O; output [7:0]out_G; assign out_G=inp_M ~| inp_O
module NOR_3(T,D,B); input [3:0]T,D; output [3:0]B; assign B=T ~| D; endmodule
module NOR_7(inp_C,inp_V,out_R); input [7:0]inp_C,inp_V; output [7:0]out_R; assign out_R=inp_C ~| inp_V
module NOR_4(inp_Y,inp_M,inp_F,out_P); input [4:0]inp_Y,inp_M,inp_F; output [4:0]out_P; assign out_P=inp_Y ~| inp_M ~| inp_F; endmodule
module NOR_4(inp_D,inp_E,inp_V,out_C); input [4:0]inp_D,inp_E,inp_V; output [4:0]out_C; assign out_C=inp_D ~| inp_E ~| inp_V; endmodule
module NOR_7(Z,D,Y); input [7:0]Z,D; output [7:0]Y; assign Y=Z ~| D
module NOR_5(inp_C,inp_W,out_B); input [5:0]inp_C,inp_W; output [5:0]out_B; assign out_B=inp_C ~| inp_W; endmodule
module NOR_1(inp_X,inp_G,inp_D,out_C); input [1:0]inp_X,inp_G,inp_D; output [1:0]out_C; assign out_C=inp_X ~| inp_G ~| inp_D; endmodule
module NOR_2(inp_P,inp_S,inp_W,out_B); input [2:0]inp_P,inp_S,inp_W; output [2:0]out_B; assign out_B=inp_P ~| inp_S ~| inp_W; endmodule
module NOR_2(inp_X,inp_L,inp_K,out_B); input [2:0]inp_X,inp_L,inp_K; output [2:0]out_B; assign out_B=inp_X ~| inp_L ~| inp_K; endmodule
module NOR_7(inp_V,inp_R,out_U); input [7:0]inp_V,inp_R; output [7:0]out_U; assign out_U=inp_V ~| inp_R
module NOR_5(inp_R,inp_L,out_I); input [5:0]inp_R,inp_L; output [5:0]out_I; assign out_I=inp_R ~| inp_L; endmodule
module NOR_3(F,Z,J,Q); input [3:0]F,Z,J; output [3:0]Q; assign Q=F ~| Z ~| J; endmodule
module NOR_4(inp_E,inp_C,inp_M,out_A); input [4:0]inp_E,inp_C,inp_M; output [4:0]out_A; assign out_A=inp_E ~| inp_C ~| inp_M; endmodule
module NOR_4(inp_W,inp_J,out_T); input [4:0]inp_W,inp_J; output [4:0]out_T; assign out_T=inp_W ~| inp_J
module NOR_3(O,N,D); input [3:0]O,N; output [3:0]D; assign D=O ~| N
module NOR_1(inp_W,inp_J,out_N); input [1:0]inp_W,inp_J; output [1:0]out_N; assign out_N=inp_W ~| inp_J
module NOR_7(inp_N,inp_F,inp_G,out_V); input [7:0]inp_N,inp_F,inp_G; output [7:0]out_V; assign out_V=inp_N ~| inp_F ~| inp_G
module NOR_3(X,J,D); input [3:0]X,J; output [3:0]D; assign D=X ~| J; endmodule
module NOR_3(T,X,M,Z); input [3:0]T,X,M; output [3:0]Z; assign Z=T ~| X ~| M; endmodule
module NOR_3(C,O,Y,Q); input [3:0]C,O,Y; output [3:0]Q; assign Q=C ~| O ~| Y
module NOR_2(inp_D,inp_H,inp_A,out_F); input [2:0]inp_D,inp_H,inp_A; output [2:0]out_F; assign out_F=inp_D ~| inp_H ~| inp_A; endmodule
module NOR_2(Y,D,A,M); input [2:0]Y,D,A; output [2:0]M; assign M=Y ~| D ~| A
module NOR_5(R,C,K); input [5:0]R,C; output [5:0]K; assign K=R ~| C
module NOR_3(inp_K,inp_O,inp_T,out_X); input [3:0]inp_K,inp_O,inp_T; output [3:0]out_X; assign out_X=inp_K ~| inp_O ~| inp_T
module NOR_3(inp_W,inp_K,out_Z); input [3:0]inp_W,inp_K; output [3:0]out_Z; assign out_Z=inp_W ~| inp_K
module NOR_5(inp_K,inp_V,inp_F,out_A); input [5:0]inp_K,inp_V,inp_F; output [5:0]out_A; assign out_A=inp_K ~| inp_V ~| inp_F
module NOR_2(inp_D,inp_O,out_Y); input [2:0]inp_D,inp_O; output [2:0]out_Y; assign out_Y=inp_D ~| inp_O
module NOR_2(G,P,M); input [2:0]G,P; output [2:0]M; assign M=G ~| P; endmodule
module NOR_4(R,G,W); input [4:0]R,G; output [4:0]W; assign W=R ~| G
module NOR_2(inp_O,inp_E,out_U); input [2:0]inp_O,inp_E; output [2:0]out_U; assign out_U=inp_O ~| inp_E; endmodule
module NOR_1(M,B,Y,H); input [1:0]M,B,Y; output [1:0]H; assign H=M ~| B ~| Y
module NOR_2(O,U,Y); input [2:0]O,U; output [2:0]Y; assign Y=O ~| U; endmodule
module NOR_7(inp_Z,inp_J,inp_D,out_Q); input [7:0]inp_Z,inp_J,inp_D; output [7:0]out_Q; assign out_Q=inp_Z ~| inp_J ~| inp_D; endmodule
module NOR_7(inp_K,inp_C,out_Q); input [7:0]inp_K,inp_C; output [7:0]out_Q; assign out_Q=inp_K ~| inp_C
module NOR_7(X,O,Q); input [7:0]X,O; output [7:0]Q; assign Q=X ~| O
module NOR_1(M,D,Y); input [1:0]M,D; output [1:0]Y; assign Y=M ~| D
module NOR_4(C,H,E); input [4:0]C,H; output [4:0]E; assign E=C ~| H; endmodule
module NOR_6(inp_V,inp_O,inp_S,out_G); input [6:0]inp_V,inp_O,inp_S; output [6:0]out_G; assign out_G=inp_V ~| inp_O ~| inp_S; endmodule
module NOR_7(K,Y,O); input [7:0]K,Y; output [7:0]O; assign O=K ~| Y; endmodule
module NOR_6(inp_K,inp_I,out_Z); input [6:0]inp_K,inp_I; output [6:0]out_Z; assign out_Z=inp_K ~| inp_I
module NOR_7(inp_V,inp_G,out_P); input [7:0]inp_V,inp_G; output [7:0]out_P; assign out_P=inp_V ~| inp_G
module NOR_3(inp_X,inp_Z,inp_D,out_A); input [3:0]inp_X,inp_Z,inp_D; output [3:0]out_A; assign out_A=inp_X ~| inp_Z ~| inp_D; endmodule
module NOR_2(inp_C,inp_R,out_Q); input [2:0]inp_C,inp_R; output [2:0]out_Q; assign out_Q=inp_C ~| inp_R; endmodule
module NOR_7(I,B,D); input [7:0]I,B; output [7:0]D; assign D=I ~| B
module NOR_7(D,C,S); input [7:0]D,C; output [7:0]S; assign S=D ~| C; endmodule
module NOR_2(inp_B,inp_Z,inp_P,out_I); input [2:0]inp_B,inp_Z,inp_P; output [2:0]out_I; assign out_I=inp_B ~| inp_Z ~| inp_P
module NOR_1(inp_J,inp_Z,out_D); input [1:0]inp_J,inp_Z; output [1:0]out_D; assign out_D=inp_J ~| inp_Z; endmodule
module NOR_7(X,S,P); input [7:0]X,S; output [7:0]P; assign P=X ~| S; endmodule
module NOR_6(inp_U,inp_T,inp_B,out_U); input [6:0]inp_U,inp_T,inp_B; output [6:0]out_U; assign out_U=inp_U ~| inp_T ~| inp_B
module NOR_6(inp_S,inp_W,inp_Q,out_A); input [6:0]inp_S,inp_W,inp_Q; output [6:0]out_A; assign out_A=inp_S ~| inp_W ~| inp_Q; endmodule
module NOR_1(V,P,R,T); input [1:0]V,P,R; output [1:0]T; assign T=V ~| P ~| R; endmodule
module NOR_6(inp_W,inp_C,inp_Z,out_H); input [6:0]inp_W,inp_C,inp_Z; output [6:0]out_H; assign out_H=inp_W ~| inp_C ~| inp_Z; endmodule
module NOR_7(inp_W,inp_U,out_K); input [7:0]inp_W,inp_U; output [7:0]out_K; assign out_K=inp_W ~| inp_U
module NOR_7(I,Z,T); input [7:0]I,Z; output [7:0]T; assign T=I ~| Z; endmodule
module NOR_4(inp_B,inp_X,out_N); input [4:0]inp_B,inp_X; output [4:0]out_N; assign out_N=inp_B ~| inp_X; endmodule
module NOR_3(inp_F,inp_A,inp_B,out_Z); input [3:0]inp_F,inp_A,inp_B; output [3:0]out_Z; assign out_Z=inp_F ~| inp_A ~| inp_B; endmodule
module NOR_3(A,H,O,P); input [3:0]A,H,O; output [3:0]P; assign P=A ~| H ~| O; endmodule
module NOR_2(V,X,C,H); input [2:0]V,X,C; output [2:0]H; assign H=V ~| X ~| C; endmodule
module NOR_7(D,Q,S,R); input [7:0]D,Q,S; output [7:0]R; assign R=D ~| Q ~| S
module NOR_6(inp_N,inp_Q,out_G); input [6:0]inp_N,inp_Q; output [6:0]out_G; assign out_G=inp_N ~| inp_Q
module NOR_1(P,H,V); input [1:0]P,H; output [1:0]V; assign V=P ~| H
module NOR_4(inp_O,inp_G,out_Q); input [4:0]inp_O,inp_G; output [4:0]out_Q; assign out_Q=inp_O ~| inp_G
module NOR_3(K,P,B,O); input [3:0]K,P,B; output [3:0]O; assign O=K ~| P ~| B
module NOR_5(inp_S,inp_F,inp_U,out_V); input [5:0]inp_S,inp_F,inp_U; output [5:0]out_V; assign out_V=inp_S ~| inp_F ~| inp_U; endmodule
module NOR_3(R,D,T); input [3:0]R,D; output [3:0]T; assign T=R ~| D; endmodule
module NOR_4(V,P,Z,U); input [4:0]V,P,Z; output [4:0]U; assign U=V ~| P ~| Z
module NOR_3(G,T,L); input [3:0]G,T; output [3:0]L; assign L=G ~| T
module NOR_3(inp_U,inp_B,out_P); input [3:0]inp_U,inp_B; output [3:0]out_P; assign out_P=inp_U ~| inp_B
module NOR_7(inp_Y,inp_Z,inp_N,out_E); input [7:0]inp_Y,inp_Z,inp_N; output [7:0]out_E; assign out_E=inp_Y ~| inp_Z ~| inp_N; endmodule
module NOR_1(inp_Q,inp_T,out_M); input [1:0]inp_Q,inp_T; output [1:0]out_M; assign out_M=inp_Q ~| inp_T
module NOR_3(inp_U,inp_V,inp_Q,out_C); input [3:0]inp_U,inp_V,inp_Q; output [3:0]out_C; assign out_C=inp_U ~| inp_V ~| inp_Q
module NOR_6(K,P,T); input [6:0]K,P; output [6:0]T; assign T=K ~| P; endmodule
module NOR_7(inp_A,inp_J,inp_C,out_P); input [7:0]inp_A,inp_J,inp_C; output [7:0]out_P; assign out_P=inp_A ~| inp_J ~| inp_C
module NOR_6(inp_D,inp_A,inp_R,out_R); input [6:0]inp_D,inp_A,inp_R; output [6:0]out_R; assign out_R=inp_D ~| inp_A ~| inp_R
module NOR_2(inp_W,inp_T,out_M); input [2:0]inp_W,inp_T; output [2:0]out_M; assign out_M=inp_W ~| inp_T; endmodule
module NOR_1(Y,H,Q); input [1:0]Y,H; output [1:0]Q; assign Q=Y ~| H
module NOR_5(Y,F,T); input [5:0]Y,F; output [5:0]T; assign T=Y ~| F
module NOR_6(inp_Y,inp_W,inp_O,out_E); input [6:0]inp_Y,inp_W,inp_O; output [6:0]out_E; assign out_E=inp_Y ~| inp_W ~| inp_O
module NOR_2(inp_Z,inp_M,inp_W,out_O); input [2:0]inp_Z,inp_M,inp_W; output [2:0]out_O; assign out_O=inp_Z ~| inp_M ~| inp_W; endmodule
module NOR_6(X,Z,C,N); input [6:0]X,Z,C; output [6:0]N; assign N=X ~| Z ~| C; endmodule
module NOR_5(S,Q,E,U); input [5:0]S,Q,E; output [5:0]U; assign U=S ~| Q ~| E
module NOR_2(inp_Q,inp_X,out_H); input [2:0]inp_Q,inp_X; output [2:0]out_H; assign out_H=inp_Q ~| inp_X; endmodule
module NOR_3(inp_T,inp_U,out_O); input [3:0]inp_T,inp_U; output [3:0]out_O; assign out_O=inp_T ~| inp_U
module NOR_5(inp_T,inp_P,inp_X,out_D); input [5:0]inp_T,inp_P,inp_X; output [5:0]out_D; assign out_D=inp_T ~| inp_P ~| inp_X
module NOR_6(G,O,H,W); input [6:0]G,O,H; output [6:0]W; assign W=G ~| O ~| H; endmodule
module NOR_5(inp_W,inp_D,out_Y); input [5:0]inp_W,inp_D; output [5:0]out_Y; assign out_Y=inp_W ~| inp_D; endmodule
module NOR_1(inp_H,inp_L,inp_U,out_T); input [1:0]inp_H,inp_L,inp_U; output [1:0]out_T; assign out_T=inp_H ~| inp_L ~| inp_U; endmodule
module NOR_7(O,L,X,B); input [7:0]O,L,X; output [7:0]B; assign B=O ~| L ~| X; endmodule
module NOR_7(O,Z,V,C); input [7:0]O,Z,V; output [7:0]C; assign C=O ~| Z ~| V
module NOR_4(N,G,W,U); input [4:0]N,G,W; output [4:0]U; assign U=N ~| G ~| W; endmodule
module NOR_6(I,X,T,U); input [6:0]I,X,T; output [6:0]U; assign U=I ~| X ~| T
module NOR_7(inp_G,inp_P,out_V); input [7:0]inp_G,inp_P; output [7:0]out_V; assign out_V=inp_G ~| inp_P; endmodule
module NOR_2(R,S,Y,I); input [2:0]R,S,Y; output [2:0]I; assign I=R ~| S ~| Y; endmodule
module NOR_5(inp_X,inp_E,inp_R,out_O); input [5:0]inp_X,inp_E,inp_R; output [5:0]out_O; assign out_O=inp_X ~| inp_E ~| inp_R
module NOR_6(inp_W,inp_U,out_I); input [6:0]inp_W,inp_U; output [6:0]out_I; assign out_I=inp_W ~| inp_U; endmodule
module NOR_6(inp_U,inp_T,inp_V,out_D); input [6:0]inp_U,inp_T,inp_V; output [6:0]out_D; assign out_D=inp_U ~| inp_T ~| inp_V; endmodule
module NOR_5(inp_Z,inp_B,out_V); input [5:0]inp_Z,inp_B; output [5:0]out_V; assign out_V=inp_Z ~| inp_B
module NOR_6(inp_L,inp_H,out_U); input [6:0]inp_L,inp_H; output [6:0]out_U; assign out_U=inp_L ~| inp_H
module NOR_7(inp_K,inp_Y,inp_C,out_F); input [7:0]inp_K,inp_Y,inp_C; output [7:0]out_F; assign out_F=inp_K ~| inp_Y ~| inp_C; endmodule
module NOR_5(E,B,M); input [5:0]E,B; output [5:0]M; assign M=E ~| B
module NOR_4(Q,N,O,U); input [4:0]Q,N,O; output [4:0]U; assign U=Q ~| N ~| O
module NOR_4(inp_B,inp_J,out_W); input [4:0]inp_B,inp_J; output [4:0]out_W; assign out_W=inp_B ~| inp_J; endmodule
module NOR_5(J,Y,P); input [5:0]J,Y; output [5:0]P; assign P=J ~| Y; endmodule
module NOR_7(J,I,C,X); input [7:0]J,I,C; output [7:0]X; assign X=J ~| I ~| C; endmodule
module NOR_1(K,Z,Y,P); input [1:0]K,Z,Y; output [1:0]P; assign P=K ~| Z ~| Y
module NOR_2(inp_P,inp_A,out_V); input [2:0]inp_P,inp_A; output [2:0]out_V; assign out_V=inp_P ~| inp_A; endmodule
module NOR_3(N,D,T,L); input [3:0]N,D,T; output [3:0]L; assign L=N ~| D ~| T; endmodule
module NOR_2(inp_H,inp_A,out_B); input [2:0]inp_H,inp_A; output [2:0]out_B; assign out_B=inp_H ~| inp_A; endmodule
module NOR_7(inp_Q,inp_G,out_Y); input [7:0]inp_Q,inp_G; output [7:0]out_Y; assign out_Y=inp_Q ~| inp_G; endmodule
module NOR_3(U,X,C); input [3:0]U,X; output [3:0]C; assign C=U ~| X
module NOR_3(L,K,E); input [3:0]L,K; output [3:0]E; assign E=L ~| K; endmodule
module NOR_4(T,E,F); input [4:0]T,E; output [4:0]F; assign F=T ~| E; endmodule
module NOR_7(inp_T,inp_J,inp_H,out_U); input [7:0]inp_T,inp_J,inp_H; output [7:0]out_U; assign out_U=inp_T ~| inp_J ~| inp_H
module NOR_4(U,M,C,F); input [4:0]U,M,C; output [4:0]F; assign F=U ~| M ~| C; endmodule
module NOR_2(inp_U,inp_B,inp_L,out_A); input [2:0]inp_U,inp_B,inp_L; output [2:0]out_A; assign out_A=inp_U ~| inp_B ~| inp_L; endmodule
module NOR_7(inp_V,inp_E,out_V); input [7:0]inp_V,inp_E; output [7:0]out_V; assign out_V=inp_V ~| inp_E; endmodule
module NOR_5(inp_S,inp_R,inp_Z,out_R); input [5:0]inp_S,inp_R,inp_Z; output [5:0]out_R; assign out_R=inp_S ~| inp_R ~| inp_Z
module NOR_7(S,O,R); input [7:0]S,O; output [7:0]R; assign R=S ~| O; endmodule
module NOR_5(inp_J,inp_L,out_T); input [5:0]inp_J,inp_L; output [5:0]out_T; assign out_T=inp_J ~| inp_L
module NOR_3(inp_R,inp_G,out_T); input [3:0]inp_R,inp_G; output [3:0]out_T; assign out_T=inp_R ~| inp_G; endmodule
module NOR_6(M,N,P,S); input [6:0]M,N,P; output [6:0]S; assign S=M ~| N ~| P; endmodule
module NOR_7(inp_E,inp_I,inp_M,out_H); input [7:0]inp_E,inp_I,inp_M; output [7:0]out_H; assign out_H=inp_E ~| inp_I ~| inp_M
module NOR_4(inp_T,inp_R,out_U); input [4:0]inp_T,inp_R; output [4:0]out_U; assign out_U=inp_T ~| inp_R
module NOR_3(O,I,X); input [3:0]O,I; output [3:0]X; assign X=O ~| I; endmodule
module NOR_5(inp_T,inp_Y,inp_H,out_T); input [5:0]inp_T,inp_Y,inp_H; output [5:0]out_T; assign out_T=inp_T ~| inp_Y ~| inp_H
module NOR_7(inp_C,inp_N,inp_M,out_N); input [7:0]inp_C,inp_N,inp_M; output [7:0]out_N; assign out_N=inp_C ~| inp_N ~| inp_M
module NOR_1(N,W,O,T); input [1:0]N,W,O; output [1:0]T; assign T=N ~| W ~| O; endmodule
module NOR_4(inp_Q,inp_R,out_V); input [4:0]inp_Q,inp_R; output [4:0]out_V; assign out_V=inp_Q ~| inp_R; endmodule
module NOR_7(O,G,E); input [7:0]O,G; output [7:0]E; assign E=O ~| G; endmodule
module NOR_5(inp_D,inp_H,out_B); input [5:0]inp_D,inp_H; output [5:0]out_B; assign out_B=inp_D ~| inp_H
module NOR_2(L,F,S,E); input [2:0]L,F,S; output [2:0]E; assign E=L ~| F ~| S
module NOR_2(T,H,Q,D); input [2:0]T,H,Q; output [2:0]D; assign D=T ~| H ~| Q; endmodule
module NOR_2(R,G,P); input [2:0]R,G; output [2:0]P; assign P=R ~| G
module NOR_7(inp_N,inp_U,inp_H,out_P); input [7:0]inp_N,inp_U,inp_H; output [7:0]out_P; assign out_P=inp_N ~| inp_U ~| inp_H; endmodule
module NOR_6(inp_L,inp_U,inp_Q,out_Z); input [6:0]inp_L,inp_U,inp_Q; output [6:0]out_Z; assign out_Z=inp_L ~| inp_U ~| inp_Q
module NOR_4(R,F,U,I); input [4:0]R,F,U; output [4:0]I; assign I=R ~| F ~| U; endmodule
module NOR_1(inp_Z,inp_N,inp_I,out_M); input [1:0]inp_Z,inp_N,inp_I; output [1:0]out_M; assign out_M=inp_Z ~| inp_N ~| inp_I
module NOR_1(inp_K,inp_U,inp_F,out_C); input [1:0]inp_K,inp_U,inp_F; output [1:0]out_C; assign out_C=inp_K ~| inp_U ~| inp_F
module NOR_3(inp_J,inp_C,out_N); input [3:0]inp_J,inp_C; output [3:0]out_N; assign out_N=inp_J ~| inp_C; endmodule
module NOR_2(inp_N,inp_L,inp_C,out_H); input [2:0]inp_N,inp_L,inp_C; output [2:0]out_H; assign out_H=inp_N ~| inp_L ~| inp_C
module NOR_3(inp_L,inp_Z,inp_T,out_R); input [3:0]inp_L,inp_Z,inp_T; output [3:0]out_R; assign out_R=inp_L ~| inp_Z ~| inp_T; endmodule
module NOR_7(inp_W,inp_T,inp_N,out_V); input [7:0]inp_W,inp_T,inp_N; output [7:0]out_V; assign out_V=inp_W ~| inp_T ~| inp_N; endmodule
module NOR_6(P,Y,N); input [6:0]P,Y; output [6:0]N; assign N=P ~| Y; endmodule
module NOR_5(inp_G,inp_W,out_B); input [5:0]inp_G,inp_W; output [5:0]out_B; assign out_B=inp_G ~| inp_W
module NOR_2(J,N,B,S); input [2:0]J,N,B; output [2:0]S; assign S=J ~| N ~| B
module NOR_5(inp_V,inp_B,inp_D,out_F); input [5:0]inp_V,inp_B,inp_D; output [5:0]out_F; assign out_F=inp_V ~| inp_B ~| inp_D
module NOR_6(inp_X,inp_G,inp_I,out_C); input [6:0]inp_X,inp_G,inp_I; output [6:0]out_C; assign out_C=inp_X ~| inp_G ~| inp_I; endmodule
module NOR_6(R,H,M); input [6:0]R,H; output [6:0]M; assign M=R ~| H
module NOR_4(V,Q,X,F); input [4:0]V,Q,X; output [4:0]F; assign F=V ~| Q ~| X; endmodule
module NOR_4(H,A,I,L); input [4:0]H,A,I; output [4:0]L; assign L=H ~| A ~| I; endmodule
module NOR_3(Q,Z,G); input [3:0]Q,Z; output [3:0]G; assign G=Q ~| Z; endmodule
module NOR_1(inp_F,inp_K,inp_P,out_I); input [1:0]inp_F,inp_K,inp_P; output [1:0]out_I; assign out_I=inp_F ~| inp_K ~| inp_P; endmodule
module NOR_7(R,I,F); input [7:0]R,I; output [7:0]F; assign F=R ~| I
module NOR_6(N,Z,U,P); input [6:0]N,Z,U; output [6:0]P; assign P=N ~| Z ~| U; endmodule
module NOR_7(M,K,U,A); input [7:0]M,K,U; output [7:0]A; assign A=M ~| K ~| U
module NOR_4(R,P,I,E); input [4:0]R,P,I; output [4:0]E; assign E=R ~| P ~| I; endmodule
module NOR_1(inp_M,inp_J,inp_D,out_I); input [1:0]inp_M,inp_J,inp_D; output [1:0]out_I; assign out_I=inp_M ~| inp_J ~| inp_D
module NOR_3(inp_H,inp_P,out_G); input [3:0]inp_H,inp_P; output [3:0]out_G; assign out_G=inp_H ~| inp_P; endmodule
module NOR_7(inp_Q,inp_R,inp_G,out_H); input [7:0]inp_Q,inp_R,inp_G; output [7:0]out_H; assign out_H=inp_Q ~| inp_R ~| inp_G
module NOR_1(N,J,W); input [1:0]N,J; output [1:0]W; assign W=N ~| J; endmodule
module NOR_2(X,K,T); input [2:0]X,K; output [2:0]T; assign T=X ~| K
module NOR_4(inp_J,inp_Z,inp_I,out_Z); input [4:0]inp_J,inp_Z,inp_I; output [4:0]out_Z; assign out_Z=inp_J ~| inp_Z ~| inp_I
module NOR_2(T,P,Z); input [2:0]T,P; output [2:0]Z; assign Z=T ~| P
module NOR_4(inp_E,inp_X,inp_D,out_P); input [4:0]inp_E,inp_X,inp_D; output [4:0]out_P; assign out_P=inp_E ~| inp_X ~| inp_D
module NOR_4(inp_U,inp_L,out_V); input [4:0]inp_U,inp_L; output [4:0]out_V; assign out_V=inp_U ~| inp_L; endmodule
module NOR_3(H,J,L,W); input [3:0]H,J,L; output [3:0]W; assign W=H ~| J ~| L
module NOR_4(B,R,N); input [4:0]B,R; output [4:0]N; assign N=B ~| R
module NOR_6(G,R,F,K); input [6:0]G,R,F; output [6:0]K; assign K=G ~| R ~| F
module NOR_4(K,T,J,E); input [4:0]K,T,J; output [4:0]E; assign E=K ~| T ~| J
module NOR_4(D,Q,I,T); input [4:0]D,Q,I; output [4:0]T; assign T=D ~| Q ~| I; endmodule
module NOR_1(inp_K,inp_Z,inp_D,out_O); input [1:0]inp_K,inp_Z,inp_D; output [1:0]out_O; assign out_O=inp_K ~| inp_Z ~| inp_D
module NOR_4(Y,Q,T); input [4:0]Y,Q; output [4:0]T; assign T=Y ~| Q
module NOR_3(inp_M,inp_Q,inp_H,out_Q); input [3:0]inp_M,inp_Q,inp_H; output [3:0]out_Q; assign out_Q=inp_M ~| inp_Q ~| inp_H
module NOR_3(L,H,R,Q); input [3:0]L,H,R; output [3:0]Q; assign Q=L ~| H ~| R
module NOR_4(F,R,K); input [4:0]F,R; output [4:0]K; assign K=F ~| R; endmodule
module NOR_6(inp_R,inp_K,out_F); input [6:0]inp_R,inp_K; output [6:0]out_F; assign out_F=inp_R ~| inp_K; endmodule
module NOR_4(X,Q,H); input [4:0]X,Q; output [4:0]H; assign H=X ~| Q; endmodule
module NOR_7(E,A,O); input [7:0]E,A; output [7:0]O; assign O=E ~| A; endmodule
module NOR_3(N,Z,R,S); input [3:0]N,Z,R; output [3:0]S; assign S=N ~| Z ~| R; endmodule
module NOR_2(inp_A,inp_Q,out_B); input [2:0]inp_A,inp_Q; output [2:0]out_B; assign out_B=inp_A ~| inp_Q
module NOR_7(inp_H,inp_K,inp_O,out_P); input [7:0]inp_H,inp_K,inp_O; output [7:0]out_P; assign out_P=inp_H ~| inp_K ~| inp_O; endmodule
module NOR_1(C,U,O,W); input [1:0]C,U,O; output [1:0]W; assign W=C ~| U ~| O; endmodule
module NOR_1(P,M,G,Y); input [1:0]P,M,G; output [1:0]Y; assign Y=P ~| M ~| G
module NOR_3(inp_R,inp_X,out_P); input [3:0]inp_R,inp_X; output [3:0]out_P; assign out_P=inp_R ~| inp_X
module NOR_1(C,U,Y); input [1:0]C,U; output [1:0]Y; assign Y=C ~| U
module NOR_5(inp_G,inp_Z,out_U); input [5:0]inp_G,inp_Z; output [5:0]out_U; assign out_U=inp_G ~| inp_Z
module NOR_1(N,I,M); input [1:0]N,I; output [1:0]M; assign M=N ~| I
module NOR_3(inp_R,inp_F,inp_M,out_N); input [3:0]inp_R,inp_F,inp_M; output [3:0]out_N; assign out_N=inp_R ~| inp_F ~| inp_M
module NOR_4(inp_D,inp_O,inp_Y,out_D); input [4:0]inp_D,inp_O,inp_Y; output [4:0]out_D; assign out_D=inp_D ~| inp_O ~| inp_Y
module NOR_5(inp_F,inp_A,inp_R,out_Z); input [5:0]inp_F,inp_A,inp_R; output [5:0]out_Z; assign out_Z=inp_F ~| inp_A ~| inp_R; endmodule
module NOR_3(W,C,N,R); input [3:0]W,C,N; output [3:0]R; assign R=W ~| C ~| N
module NOR_7(inp_F,inp_B,out_Y); input [7:0]inp_F,inp_B; output [7:0]out_Y; assign out_Y=inp_F ~| inp_B; endmodule
module NOR_2(T,X,Z,J); input [2:0]T,X,Z; output [2:0]J; assign J=T ~| X ~| Z; endmodule
module NOR_1(L,N,U,J); input [1:0]L,N,U; output [1:0]J; assign J=L ~| N ~| U
module NOR_3(C,U,Q); input [3:0]C,U; output [3:0]Q; assign Q=C ~| U
module NOR_7(W,S,Y,F); input [7:0]W,S,Y; output [7:0]F; assign F=W ~| S ~| Y; endmodule
module NOR_3(inp_Y,inp_G,inp_D,out_I); input [3:0]inp_Y,inp_G,inp_D; output [3:0]out_I; assign out_I=inp_Y ~| inp_G ~| inp_D; endmodule
module NOR_7(W,Z,B); input [7:0]W,Z; output [7:0]B; assign B=W ~| Z
module NOR_5(inp_X,inp_O,out_F); input [5:0]inp_X,inp_O; output [5:0]out_F; assign out_F=inp_X ~| inp_O
module NOR_7(B,T,M,Q); input [7:0]B,T,M; output [7:0]Q; assign Q=B ~| T ~| M; endmodule
module NOR_3(O,D,K); input [3:0]O,D; output [3:0]K; assign K=O ~| D
module NOR_6(inp_W,inp_V,out_X); input [6:0]inp_W,inp_V; output [6:0]out_X; assign out_X=inp_W ~| inp_V
module NOR_4(G,M,T); input [4:0]G,M; output [4:0]T; assign T=G ~| M
module NOR_4(inp_Z,inp_D,inp_I,out_E); input [4:0]inp_Z,inp_D,inp_I; output [4:0]out_E; assign out_E=inp_Z ~| inp_D ~| inp_I
module NOR_7(inp_P,inp_A,inp_O,out_B); input [7:0]inp_P,inp_A,inp_O; output [7:0]out_B; assign out_B=inp_P ~| inp_A ~| inp_O
module NOR_2(B,D,Q); input [2:0]B,D; output [2:0]Q; assign Q=B ~| D; endmodule
module NOR_7(D,Q,P,G); input [7:0]D,Q,P; output [7:0]G; assign G=D ~| Q ~| P; endmodule
module XOR_3(inp_A,inp_B,inp_R,out_S); input [3:0]inp_A,inp_B,inp_R; output [3:0]out_S; assign out_S=inp_A ^ inp_B ^ inp_R; endmodule
module XOR_7(inp_M,inp_R,out_F); input [7:0]inp_M,inp_R; output [7:0]out_F; assign out_F=inp_M ^ inp_R; endmodule
module XOR_1(inp_F,inp_G,out_Z); input [1:0]inp_F,inp_G; output [1:0]out_Z; assign out_Z=inp_F ^ inp_G
module XOR_6(V,Q,E,F); input [6:0]V,Q,E; output [6:0]F; assign F=V ^ Q ^ E; endmodule
module XOR_5(inp_Z,inp_Q,inp_V,out_V); input [5:0]inp_Z,inp_Q,inp_V; output [5:0]out_V; assign out_V=inp_Z ^ inp_Q ^ inp_V
module XOR_7(inp_K,inp_Z,inp_B,out_V); input [7:0]inp_K,inp_Z,inp_B; output [7:0]out_V; assign out_V=inp_K ^ inp_Z ^ inp_B; endmodule
module XOR_1(inp_N,inp_R,inp_D,out_D); input [1:0]inp_N,inp_R,inp_D; output [1:0]out_D; assign out_D=inp_N ^ inp_R ^ inp_D; endmodule
module XOR_3(inp_B,inp_R,out_A); input [3:0]inp_B,inp_R; output [3:0]out_A; assign out_A=inp_B ^ inp_R
module XOR_7(inp_V,inp_Z,out_A); input [7:0]inp_V,inp_Z; output [7:0]out_A; assign out_A=inp_V ^ inp_Z; endmodule
module XOR_5(inp_P,inp_F,out_O); input [5:0]inp_P,inp_F; output [5:0]out_O; assign out_O=inp_P ^ inp_F
module XOR_6(H,G,I,O); input [6:0]H,G,I; output [6:0]O; assign O=H ^ G ^ I; endmodule
module XOR_5(inp_G,inp_D,inp_J,out_D); input [5:0]inp_G,inp_D,inp_J; output [5:0]out_D; assign out_D=inp_G ^ inp_D ^ inp_J
module XOR_2(inp_F,inp_I,out_Z); input [2:0]inp_F,inp_I; output [2:0]out_Z; assign out_Z=inp_F ^ inp_I
module XOR_4(inp_P,inp_K,inp_C,out_L); input [4:0]inp_P,inp_K,inp_C; output [4:0]out_L; assign out_L=inp_P ^ inp_K ^ inp_C
module XOR_1(E,R,N,V); input [1:0]E,R,N; output [1:0]V; assign V=E ^ R ^ N
module XOR_6(inp_N,inp_O,out_O); input [6:0]inp_N,inp_O; output [6:0]out_O; assign out_O=inp_N ^ inp_O
module XOR_5(inp_V,inp_Y,inp_G,out_Y); input [5:0]inp_V,inp_Y,inp_G; output [5:0]out_Y; assign out_Y=inp_V ^ inp_Y ^ inp_G; endmodule
module XOR_7(inp_K,inp_S,out_J); input [7:0]inp_K,inp_S; output [7:0]out_J; assign out_J=inp_K ^ inp_S; endmodule
module XOR_4(W,B,M); input [4:0]W,B; output [4:0]M; assign M=W ^ B
module XOR_6(inp_K,inp_S,inp_F,out_U); input [6:0]inp_K,inp_S,inp_F; output [6:0]out_U; assign out_U=inp_K ^ inp_S ^ inp_F; endmodule
module XOR_7(D,M,Y); input [7:0]D,M; output [7:0]Y; assign Y=D ^ M; endmodule
module XOR_4(N,Z,S); input [4:0]N,Z; output [4:0]S; assign S=N ^ Z; endmodule
module XOR_4(inp_Z,inp_B,inp_L,out_O); input [4:0]inp_Z,inp_B,inp_L; output [4:0]out_O; assign out_O=inp_Z ^ inp_B ^ inp_L; endmodule
module XOR_6(P,X,N,C); input [6:0]P,X,N; output [6:0]C; assign C=P ^ X ^ N
module XOR_7(D,B,R); input [7:0]D,B; output [7:0]R; assign R=D ^ B
module XOR_4(P,S,Q,N); input [4:0]P,S,Q; output [4:0]N; assign N=P ^ S ^ Q
module XOR_6(inp_O,inp_F,out_A); input [6:0]inp_O,inp_F; output [6:0]out_A; assign out_A=inp_O ^ inp_F
module XOR_2(B,N,W); input [2:0]B,N; output [2:0]W; assign W=B ^ N
module XOR_7(inp_R,inp_M,out_I); input [7:0]inp_R,inp_M; output [7:0]out_I; assign out_I=inp_R ^ inp_M
module XOR_7(V,H,K,X); input [7:0]V,H,K; output [7:0]X; assign X=V ^ H ^ K; endmodule
module XOR_6(R,X,U,O); input [6:0]R,X,U; output [6:0]O; assign O=R ^ X ^ U
module XOR_6(R,F,B,O); input [6:0]R,F,B; output [6:0]O; assign O=R ^ F ^ B; endmodule
module XOR_1(inp_B,inp_U,out_E); input [1:0]inp_B,inp_U; output [1:0]out_E; assign out_E=inp_B ^ inp_U; endmodule
module XOR_2(C,F,I,O); input [2:0]C,F,I; output [2:0]O; assign O=C ^ F ^ I
module XOR_3(W,D,O,I); input [3:0]W,D,O; output [3:0]I; assign I=W ^ D ^ O
module XOR_1(inp_F,inp_Y,out_D); input [1:0]inp_F,inp_Y; output [1:0]out_D; assign out_D=inp_F ^ inp_Y
module XOR_7(B,L,C); input [7:0]B,L; output [7:0]C; assign C=B ^ L; endmodule
module XOR_4(inp_E,inp_T,inp_H,out_L); input [4:0]inp_E,inp_T,inp_H; output [4:0]out_L; assign out_L=inp_E ^ inp_T ^ inp_H
module XOR_5(inp_R,inp_X,inp_B,out_P); input [5:0]inp_R,inp_X,inp_B; output [5:0]out_P; assign out_P=inp_R ^ inp_X ^ inp_B
module XOR_7(Y,B,L,X); input [7:0]Y,B,L; output [7:0]X; assign X=Y ^ B ^ L; endmodule
module XOR_1(inp_B,inp_Y,inp_C,out_A); input [1:0]inp_B,inp_Y,inp_C; output [1:0]out_A; assign out_A=inp_B ^ inp_Y ^ inp_C
module XOR_6(Q,O,F); input [6:0]Q,O; output [6:0]F; assign F=Q ^ O; endmodule
module XOR_3(G,F,U); input [3:0]G,F; output [3:0]U; assign U=G ^ F
module XOR_3(A,L,D); input [3:0]A,L; output [3:0]D; assign D=A ^ L; endmodule
module XOR_7(inp_Z,inp_X,inp_J,out_G); input [7:0]inp_Z,inp_X,inp_J; output [7:0]out_G; assign out_G=inp_Z ^ inp_X ^ inp_J; endmodule
module XOR_6(inp_T,inp_F,out_M); input [6:0]inp_T,inp_F; output [6:0]out_M; assign out_M=inp_T ^ inp_F; endmodule
module XOR_5(J,N,I,A); input [5:0]J,N,I; output [5:0]A; assign A=J ^ N ^ I
module XOR_5(B,V,D,L); input [5:0]B,V,D; output [5:0]L; assign L=B ^ V ^ D
module XOR_4(Z,J,T,H); input [4:0]Z,J,T; output [4:0]H; assign H=Z ^ J ^ T
module XOR_6(A,D,S); input [6:0]A,D; output [6:0]S; assign S=A ^ D; endmodule
module XOR_7(I,S,V); input [7:0]I,S; output [7:0]V; assign V=I ^ S; endmodule
module XOR_6(inp_M,inp_T,out_I); input [6:0]inp_M,inp_T; output [6:0]out_I; assign out_I=inp_M ^ inp_T
module XOR_7(inp_H,inp_W,out_L); input [7:0]inp_H,inp_W; output [7:0]out_L; assign out_L=inp_H ^ inp_W; endmodule
module XOR_1(inp_X,inp_U,out_Y); input [1:0]inp_X,inp_U; output [1:0]out_Y; assign out_Y=inp_X ^ inp_U; endmodule
module XOR_3(Z,P,X); input [3:0]Z,P; output [3:0]X; assign X=Z ^ P; endmodule
module XOR_7(inp_G,inp_V,out_D); input [7:0]inp_G,inp_V; output [7:0]out_D; assign out_D=inp_G ^ inp_V
module XOR_1(inp_R,inp_A,out_J); input [1:0]inp_R,inp_A; output [1:0]out_J; assign out_J=inp_R ^ inp_A
module XOR_4(I,C,J,Y); input [4:0]I,C,J; output [4:0]Y; assign Y=I ^ C ^ J
module XOR_1(O,H,V); input [1:0]O,H; output [1:0]V; assign V=O ^ H; endmodule
module XOR_3(inp_W,inp_O,inp_Y,out_O); input [3:0]inp_W,inp_O,inp_Y; output [3:0]out_O; assign out_O=inp_W ^ inp_O ^ inp_Y
module XOR_6(J,S,R); input [6:0]J,S; output [6:0]R; assign R=J ^ S; endmodule
module XOR_6(W,Y,B); input [6:0]W,Y; output [6:0]B; assign B=W ^ Y
module XOR_1(H,C,Q,W); input [1:0]H,C,Q; output [1:0]W; assign W=H ^ C ^ Q
module XOR_1(R,E,B); input [1:0]R,E; output [1:0]B; assign B=R ^ E; endmodule
module XOR_2(T,P,W,Y); input [2:0]T,P,W; output [2:0]Y; assign Y=T ^ P ^ W; endmodule
module XOR_5(M,X,O); input [5:0]M,X; output [5:0]O; assign O=M ^ X
module XOR_4(C,T,Z,F); input [4:0]C,T,Z; output [4:0]F; assign F=C ^ T ^ Z
module XOR_6(I,H,A); input [6:0]I,H; output [6:0]A; assign A=I ^ H
module XOR_6(F,P,W); input [6:0]F,P; output [6:0]W; assign W=F ^ P; endmodule
module XOR_7(inp_Y,inp_M,inp_B,out_V); input [7:0]inp_Y,inp_M,inp_B; output [7:0]out_V; assign out_V=inp_Y ^ inp_M ^ inp_B; endmodule
module XOR_7(C,M,W); input [7:0]C,M; output [7:0]W; assign W=C ^ M
module XOR_4(inp_L,inp_W,inp_F,out_O); input [4:0]inp_L,inp_W,inp_F; output [4:0]out_O; assign out_O=inp_L ^ inp_W ^ inp_F; endmodule
module XOR_1(inp_N,inp_A,out_F); input [1:0]inp_N,inp_A; output [1:0]out_F; assign out_F=inp_N ^ inp_A
module XOR_7(inp_E,inp_Q,inp_M,out_D); input [7:0]inp_E,inp_Q,inp_M; output [7:0]out_D; assign out_D=inp_E ^ inp_Q ^ inp_M; endmodule
module XOR_5(V,W,B); input [5:0]V,W; output [5:0]B; assign B=V ^ W; endmodule
module XOR_7(Q,O,R); input [7:0]Q,O; output [7:0]R; assign R=Q ^ O; endmodule
module XOR_1(Z,L,A); input [1:0]Z,L; output [1:0]A; assign A=Z ^ L; endmodule
module XOR_6(E,D,O); input [6:0]E,D; output [6:0]O; assign O=E ^ D; endmodule
module XOR_5(inp_M,inp_C,out_G); input [5:0]inp_M,inp_C; output [5:0]out_G; assign out_G=inp_M ^ inp_C; endmodule
module XOR_3(inp_N,inp_V,inp_X,out_A); input [3:0]inp_N,inp_V,inp_X; output [3:0]out_A; assign out_A=inp_N ^ inp_V ^ inp_X; endmodule
module XOR_6(inp_Y,inp_K,inp_F,out_Q); input [6:0]inp_Y,inp_K,inp_F; output [6:0]out_Q; assign out_Q=inp_Y ^ inp_K ^ inp_F; endmodule
module XOR_1(Q,Z,E,D); input [1:0]Q,Z,E; output [1:0]D; assign D=Q ^ Z ^ E
module XOR_1(Y,S,B); input [1:0]Y,S; output [1:0]B; assign B=Y ^ S; endmodule
module XOR_4(inp_D,inp_M,inp_F,out_I); input [4:0]inp_D,inp_M,inp_F; output [4:0]out_I; assign out_I=inp_D ^ inp_M ^ inp_F; endmodule
module XOR_4(N,P,J,C); input [4:0]N,P,J; output [4:0]C; assign C=N ^ P ^ J
module XOR_5(inp_M,inp_A,out_B); input [5:0]inp_M,inp_A; output [5:0]out_B; assign out_B=inp_M ^ inp_A; endmodule
module XOR_3(Z,H,I,J); input [3:0]Z,H,I; output [3:0]J; assign J=Z ^ H ^ I; endmodule
module XOR_4(A,U,O,I); input [4:0]A,U,O; output [4:0]I; assign I=A ^ U ^ O
module XOR_6(inp_O,inp_B,out_S); input [6:0]inp_O,inp_B; output [6:0]out_S; assign out_S=inp_O ^ inp_B; endmodule
module XOR_2(inp_N,inp_V,inp_S,out_I); input [2:0]inp_N,inp_V,inp_S; output [2:0]out_I; assign out_I=inp_N ^ inp_V ^ inp_S
module XOR_3(inp_Q,inp_F,out_Q); input [3:0]inp_Q,inp_F; output [3:0]out_Q; assign out_Q=inp_Q ^ inp_F
module XOR_7(X,D,C,Y); input [7:0]X,D,C; output [7:0]Y; assign Y=X ^ D ^ C
module XOR_5(B,P,X); input [5:0]B,P; output [5:0]X; assign X=B ^ P; endmodule
module XOR_4(inp_X,inp_R,inp_U,out_B); input [4:0]inp_X,inp_R,inp_U; output [4:0]out_B; assign out_B=inp_X ^ inp_R ^ inp_U
module XOR_6(inp_N,inp_X,out_M); input [6:0]inp_N,inp_X; output [6:0]out_M; assign out_M=inp_N ^ inp_X
module XOR_7(inp_J,inp_H,out_D); input [7:0]inp_J,inp_H; output [7:0]out_D; assign out_D=inp_J ^ inp_H; endmodule
module XOR_3(inp_H,inp_S,out_Z); input [3:0]inp_H,inp_S; output [3:0]out_Z; assign out_Z=inp_H ^ inp_S; endmodule
module XOR_4(H,U,Z,V); input [4:0]H,U,Z; output [4:0]V; assign V=H ^ U ^ Z; endmodule
module XOR_7(D,L,Z); input [7:0]D,L; output [7:0]Z; assign Z=D ^ L; endmodule
module XOR_1(inp_O,inp_Y,out_H); input [1:0]inp_O,inp_Y; output [1:0]out_H; assign out_H=inp_O ^ inp_Y; endmodule
module XOR_6(R,W,V); input [6:0]R,W; output [6:0]V; assign V=R ^ W
module XOR_5(A,X,R); input [5:0]A,X; output [5:0]R; assign R=A ^ X; endmodule
module XOR_3(inp_M,inp_D,out_N); input [3:0]inp_M,inp_D; output [3:0]out_N; assign out_N=inp_M ^ inp_D; endmodule
module XOR_7(Y,A,O); input [7:0]Y,A; output [7:0]O; assign O=Y ^ A; endmodule
module XOR_4(W,B,K); input [4:0]W,B; output [4:0]K; assign K=W ^ B; endmodule
module XOR_6(V,G,Z); input [6:0]V,G; output [6:0]Z; assign Z=V ^ G; endmodule
module XOR_2(F,Z,L,Q); input [2:0]F,Z,L; output [2:0]Q; assign Q=F ^ Z ^ L; endmodule
module XOR_7(C,Q,G); input [7:0]C,Q; output [7:0]G; assign G=C ^ Q
module XOR_7(inp_G,inp_J,inp_L,out_O); input [7:0]inp_G,inp_J,inp_L; output [7:0]out_O; assign out_O=inp_G ^ inp_J ^ inp_L; endmodule
module XOR_5(inp_C,inp_P,inp_D,out_G); input [5:0]inp_C,inp_P,inp_D; output [5:0]out_G; assign out_G=inp_C ^ inp_P ^ inp_D; endmodule
module XOR_4(D,R,G); input [4:0]D,R; output [4:0]G; assign G=D ^ R
module XOR_6(P,J,H); input [6:0]P,J; output [6:0]H; assign H=P ^ J
module XOR_3(D,I,J); input [3:0]D,I; output [3:0]J; assign J=D ^ I; endmodule
module XOR_1(inp_S,inp_U,inp_C,out_M); input [1:0]inp_S,inp_U,inp_C; output [1:0]out_M; assign out_M=inp_S ^ inp_U ^ inp_C
module XOR_4(R,L,P,V); input [4:0]R,L,P; output [4:0]V; assign V=R ^ L ^ P
module XOR_2(inp_Y,inp_H,out_A); input [2:0]inp_Y,inp_H; output [2:0]out_A; assign out_A=inp_Y ^ inp_H
module XOR_5(Y,L,S,W); input [5:0]Y,L,S; output [5:0]W; assign W=Y ^ L ^ S; endmodule
module XOR_5(B,W,S,R); input [5:0]B,W,S; output [5:0]R; assign R=B ^ W ^ S; endmodule
module XOR_3(X,N,I,G); input [3:0]X,N,I; output [3:0]G; assign G=X ^ N ^ I
module XOR_2(inp_Q,inp_A,out_W); input [2:0]inp_Q,inp_A; output [2:0]out_W; assign out_W=inp_Q ^ inp_A
module XOR_5(W,Q,V,Y); input [5:0]W,Q,V; output [5:0]Y; assign Y=W ^ Q ^ V
module XOR_5(inp_J,inp_Y,inp_A,out_A); input [5:0]inp_J,inp_Y,inp_A; output [5:0]out_A; assign out_A=inp_J ^ inp_Y ^ inp_A
module XOR_2(inp_M,inp_P,out_X); input [2:0]inp_M,inp_P; output [2:0]out_X; assign out_X=inp_M ^ inp_P; endmodule
module XOR_3(M,V,B); input [3:0]M,V; output [3:0]B; assign B=M ^ V; endmodule
module XOR_3(inp_Y,inp_K,inp_V,out_V); input [3:0]inp_Y,inp_K,inp_V; output [3:0]out_V; assign out_V=inp_Y ^ inp_K ^ inp_V; endmodule
module XOR_1(inp_O,inp_W,out_A); input [1:0]inp_O,inp_W; output [1:0]out_A; assign out_A=inp_O ^ inp_W; endmodule
module XOR_7(inp_J,inp_X,out_J); input [7:0]inp_J,inp_X; output [7:0]out_J; assign out_J=inp_J ^ inp_X
module XOR_6(inp_G,inp_H,out_E); input [6:0]inp_G,inp_H; output [6:0]out_E; assign out_E=inp_G ^ inp_H
module XOR_7(X,G,J,B); input [7:0]X,G,J; output [7:0]B; assign B=X ^ G ^ J; endmodule
module XOR_4(E,L,D); input [4:0]E,L; output [4:0]D; assign D=E ^ L
module XOR_5(inp_J,inp_A,out_T); input [5:0]inp_J,inp_A; output [5:0]out_T; assign out_T=inp_J ^ inp_A
module XOR_3(L,R,G,N); input [3:0]L,R,G; output [3:0]N; assign N=L ^ R ^ G; endmodule
module XOR_3(R,W,S); input [3:0]R,W; output [3:0]S; assign S=R ^ W
module XOR_7(inp_T,inp_G,inp_F,out_I); input [7:0]inp_T,inp_G,inp_F; output [7:0]out_I; assign out_I=inp_T ^ inp_G ^ inp_F; endmodule
module XOR_1(inp_U,inp_Y,inp_E,out_B); input [1:0]inp_U,inp_Y,inp_E; output [1:0]out_B; assign out_B=inp_U ^ inp_Y ^ inp_E; endmodule
module XOR_4(inp_X,inp_Y,inp_G,out_P); input [4:0]inp_X,inp_Y,inp_G; output [4:0]out_P; assign out_P=inp_X ^ inp_Y ^ inp_G
module XOR_3(A,T,J,B); input [3:0]A,T,J; output [3:0]B; assign B=A ^ T ^ J
module XOR_6(inp_Q,inp_C,inp_G,out_I); input [6:0]inp_Q,inp_C,inp_G; output [6:0]out_I; assign out_I=inp_Q ^ inp_C ^ inp_G; endmodule
module XOR_6(inp_M,inp_Q,inp_W,out_I); input [6:0]inp_M,inp_Q,inp_W; output [6:0]out_I; assign out_I=inp_M ^ inp_Q ^ inp_W; endmodule
module XOR_2(inp_A,inp_Y,out_U); input [2:0]inp_A,inp_Y; output [2:0]out_U; assign out_U=inp_A ^ inp_Y
module XOR_6(M,P,V,S); input [6:0]M,P,V; output [6:0]S; assign S=M ^ P ^ V; endmodule
module XOR_6(F,R,Y); input [6:0]F,R; output [6:0]Y; assign Y=F ^ R
module XOR_7(inp_L,inp_A,inp_M,out_J); input [7:0]inp_L,inp_A,inp_M; output [7:0]out_J; assign out_J=inp_L ^ inp_A ^ inp_M; endmodule
module XOR_1(inp_K,inp_R,inp_D,out_I); input [1:0]inp_K,inp_R,inp_D; output [1:0]out_I; assign out_I=inp_K ^ inp_R ^ inp_D; endmodule
module XOR_1(inp_G,inp_D,out_Q); input [1:0]inp_G,inp_D; output [1:0]out_Q; assign out_Q=inp_G ^ inp_D; endmodule
module XOR_3(X,U,I); input [3:0]X,U; output [3:0]I; assign I=X ^ U
module XOR_2(inp_N,inp_P,inp_U,out_R); input [2:0]inp_N,inp_P,inp_U; output [2:0]out_R; assign out_R=inp_N ^ inp_P ^ inp_U
module XOR_4(D,W,R,N); input [4:0]D,W,R; output [4:0]N; assign N=D ^ W ^ R
module XOR_6(G,C,A,N); input [6:0]G,C,A; output [6:0]N; assign N=G ^ C ^ A; endmodule
module XOR_7(X,F,S,C); input [7:0]X,F,S; output [7:0]C; assign C=X ^ F ^ S; endmodule
module XOR_6(inp_U,inp_A,inp_P,out_Z); input [6:0]inp_U,inp_A,inp_P; output [6:0]out_Z; assign out_Z=inp_U ^ inp_A ^ inp_P; endmodule
module XOR_7(V,A,L,Q); input [7:0]V,A,L; output [7:0]Q; assign Q=V ^ A ^ L
module XOR_6(F,G,Y,B); input [6:0]F,G,Y; output [6:0]B; assign B=F ^ G ^ Y
module XOR_1(M,V,S); input [1:0]M,V; output [1:0]S; assign S=M ^ V
module XOR_7(V,H,C,I); input [7:0]V,H,C; output [7:0]I; assign I=V ^ H ^ C; endmodule
module XOR_1(O,B,P,V); input [1:0]O,B,P; output [1:0]V; assign V=O ^ B ^ P
module XOR_1(G,C,K,U); input [1:0]G,C,K; output [1:0]U; assign U=G ^ C ^ K; endmodule
module XOR_7(inp_K,inp_Y,inp_E,out_W); input [7:0]inp_K,inp_Y,inp_E; output [7:0]out_W; assign out_W=inp_K ^ inp_Y ^ inp_E
module XOR_7(inp_D,inp_F,inp_K,out_Z); input [7:0]inp_D,inp_F,inp_K; output [7:0]out_Z; assign out_Z=inp_D ^ inp_F ^ inp_K; endmodule
module XOR_7(inp_I,inp_E,out_Z); input [7:0]inp_I,inp_E; output [7:0]out_Z; assign out_Z=inp_I ^ inp_E
module XOR_3(inp_P,inp_L,out_U); input [3:0]inp_P,inp_L; output [3:0]out_U; assign out_U=inp_P ^ inp_L; endmodule
module XOR_1(inp_H,inp_P,out_P); input [1:0]inp_H,inp_P; output [1:0]out_P; assign out_P=inp_H ^ inp_P
module XOR_2(D,G,O); input [2:0]D,G; output [2:0]O; assign O=D ^ G; endmodule
module XOR_3(H,O,P,Q); input [3:0]H,O,P; output [3:0]Q; assign Q=H ^ O ^ P; endmodule
module XOR_4(V,M,N); input [4:0]V,M; output [4:0]N; assign N=V ^ M
module XOR_7(T,V,K,T); input [7:0]T,V,K; output [7:0]T; assign T=T ^ V ^ K
module XOR_3(inp_V,inp_J,out_F); input [3:0]inp_V,inp_J; output [3:0]out_F; assign out_F=inp_V ^ inp_J
module XOR_3(J,L,G,F); input [3:0]J,L,G; output [3:0]F; assign F=J ^ L ^ G
module XOR_7(N,E,C,S); input [7:0]N,E,C; output [7:0]S; assign S=N ^ E ^ C
module XOR_4(inp_Q,inp_I,out_M); input [4:0]inp_Q,inp_I; output [4:0]out_M; assign out_M=inp_Q ^ inp_I; endmodule
module XOR_2(I,W,F); input [2:0]I,W; output [2:0]F; assign F=I ^ W; endmodule
module XOR_5(inp_U,inp_G,inp_O,out_J); input [5:0]inp_U,inp_G,inp_O; output [5:0]out_J; assign out_J=inp_U ^ inp_G ^ inp_O; endmodule
module XOR_4(Z,J,B,C); input [4:0]Z,J,B; output [4:0]C; assign C=Z ^ J ^ B
module XOR_1(inp_Q,inp_S,out_V); input [1:0]inp_Q,inp_S; output [1:0]out_V; assign out_V=inp_Q ^ inp_S
module XOR_1(M,F,D); input [1:0]M,F; output [1:0]D; assign D=M ^ F; endmodule
module XOR_6(inp_J,inp_P,out_K); input [6:0]inp_J,inp_P; output [6:0]out_K; assign out_K=inp_J ^ inp_P
module XOR_5(inp_V,inp_K,out_V); input [5:0]inp_V,inp_K; output [5:0]out_V; assign out_V=inp_V ^ inp_K
module XOR_2(inp_J,inp_P,inp_U,out_K); input [2:0]inp_J,inp_P,inp_U; output [2:0]out_K; assign out_K=inp_J ^ inp_P ^ inp_U; endmodule
module XOR_1(M,Y,T); input [1:0]M,Y; output [1:0]T; assign T=M ^ Y; endmodule
module XOR_6(inp_N,inp_R,inp_A,out_B); input [6:0]inp_N,inp_R,inp_A; output [6:0]out_B; assign out_B=inp_N ^ inp_R ^ inp_A; endmodule
module XOR_7(R,U,T); input [7:0]R,U; output [7:0]T; assign T=R ^ U; endmodule
module XOR_4(inp_Q,inp_H,out_X); input [4:0]inp_Q,inp_H; output [4:0]out_X; assign out_X=inp_Q ^ inp_H; endmodule
module XOR_3(C,T,K); input [3:0]C,T; output [3:0]K; assign K=C ^ T; endmodule
module XOR_6(inp_O,inp_U,inp_Q,out_S); input [6:0]inp_O,inp_U,inp_Q; output [6:0]out_S; assign out_S=inp_O ^ inp_U ^ inp_Q
module XOR_3(M,T,K,B); input [3:0]M,T,K; output [3:0]B; assign B=M ^ T ^ K
module XOR_1(N,U,V); input [1:0]N,U; output [1:0]V; assign V=N ^ U
module XOR_7(inp_C,inp_B,out_B); input [7:0]inp_C,inp_B; output [7:0]out_B; assign out_B=inp_C ^ inp_B
module XOR_5(inp_A,inp_J,out_Q); input [5:0]inp_A,inp_J; output [5:0]out_Q; assign out_Q=inp_A ^ inp_J
module XOR_1(S,B,X,T); input [1:0]S,B,X; output [1:0]T; assign T=S ^ B ^ X
module XOR_2(inp_G,inp_E,out_Q); input [2:0]inp_G,inp_E; output [2:0]out_Q; assign out_Q=inp_G ^ inp_E; endmodule
module XOR_1(Y,J,F,N); input [1:0]Y,J,F; output [1:0]N; assign N=Y ^ J ^ F; endmodule
module XOR_2(inp_Y,inp_I,out_S); input [2:0]inp_Y,inp_I; output [2:0]out_S; assign out_S=inp_Y ^ inp_I; endmodule
module XOR_4(inp_K,inp_P,out_F); input [4:0]inp_K,inp_P; output [4:0]out_F; assign out_F=inp_K ^ inp_P; endmodule
module XOR_1(E,W,N,G); input [1:0]E,W,N; output [1:0]G; assign G=E ^ W ^ N
module XOR_5(inp_C,inp_O,out_J); input [5:0]inp_C,inp_O; output [5:0]out_J; assign out_J=inp_C ^ inp_O; endmodule
module XOR_1(P,I,M); input [1:0]P,I; output [1:0]M; assign M=P ^ I
module XOR_6(inp_U,inp_I,inp_L,out_B); input [6:0]inp_U,inp_I,inp_L; output [6:0]out_B; assign out_B=inp_U ^ inp_I ^ inp_L
module XOR_4(inp_E,inp_P,inp_N,out_W); input [4:0]inp_E,inp_P,inp_N; output [4:0]out_W; assign out_W=inp_E ^ inp_P ^ inp_N; endmodule
module XOR_4(F,A,S); input [4:0]F,A; output [4:0]S; assign S=F ^ A
module XOR_5(inp_C,inp_R,out_S); input [5:0]inp_C,inp_R; output [5:0]out_S; assign out_S=inp_C ^ inp_R; endmodule
module XOR_7(W,H,M); input [7:0]W,H; output [7:0]M; assign M=W ^ H
module XOR_6(inp_R,inp_O,out_D); input [6:0]inp_R,inp_O; output [6:0]out_D; assign out_D=inp_R ^ inp_O
module XOR_3(inp_K,inp_A,inp_H,out_U); input [3:0]inp_K,inp_A,inp_H; output [3:0]out_U; assign out_U=inp_K ^ inp_A ^ inp_H; endmodule
module XOR_3(inp_B,inp_F,out_X); input [3:0]inp_B,inp_F; output [3:0]out_X; assign out_X=inp_B ^ inp_F
module XOR_7(inp_G,inp_P,out_I); input [7:0]inp_G,inp_P; output [7:0]out_I; assign out_I=inp_G ^ inp_P; endmodule
module XOR_2(A,N,Q,K); input [2:0]A,N,Q; output [2:0]K; assign K=A ^ N ^ Q
module XOR_5(inp_E,inp_S,out_F); input [5:0]inp_E,inp_S; output [5:0]out_F; assign out_F=inp_E ^ inp_S; endmodule
module XOR_6(C,Z,W,E); input [6:0]C,Z,W; output [6:0]E; assign E=C ^ Z ^ W; endmodule
module XOR_3(E,H,R); input [3:0]E,H; output [3:0]R; assign R=E ^ H; endmodule
module XOR_1(D,G,S); input [1:0]D,G; output [1:0]S; assign S=D ^ G; endmodule
module XOR_5(inp_T,inp_W,out_D); input [5:0]inp_T,inp_W; output [5:0]out_D; assign out_D=inp_T ^ inp_W; endmodule
module XOR_3(inp_Q,inp_R,inp_H,out_S); input [3:0]inp_Q,inp_R,inp_H; output [3:0]out_S; assign out_S=inp_Q ^ inp_R ^ inp_H; endmodule
module XOR_5(M,K,V); input [5:0]M,K; output [5:0]V; assign V=M ^ K
module XOR_4(N,G,L); input [4:0]N,G; output [4:0]L; assign L=N ^ G
module XOR_4(K,G,P); input [4:0]K,G; output [4:0]P; assign P=K ^ G
module XOR_6(inp_W,inp_A,inp_U,out_M); input [6:0]inp_W,inp_A,inp_U; output [6:0]out_M; assign out_M=inp_W ^ inp_A ^ inp_U
module XOR_5(S,H,Y); input [5:0]S,H; output [5:0]Y; assign Y=S ^ H
module XOR_1(Q,S,W,E); input [1:0]Q,S,W; output [1:0]E; assign E=Q ^ S ^ W
module XOR_6(Q,I,E); input [6:0]Q,I; output [6:0]E; assign E=Q ^ I; endmodule
module XOR_4(inp_C,inp_J,out_U); input [4:0]inp_C,inp_J; output [4:0]out_U; assign out_U=inp_C ^ inp_J
module XOR_4(E,Q,G); input [4:0]E,Q; output [4:0]G; assign G=E ^ Q; endmodule
module XOR_6(J,N,P); input [6:0]J,N; output [6:0]P; assign P=J ^ N
module XOR_7(D,A,J); input [7:0]D,A; output [7:0]J; assign J=D ^ A; endmodule
module XOR_2(inp_T,inp_W,inp_S,out_R); input [2:0]inp_T,inp_W,inp_S; output [2:0]out_R; assign out_R=inp_T ^ inp_W ^ inp_S; endmodule
module XOR_4(inp_S,inp_Y,inp_L,out_J); input [4:0]inp_S,inp_Y,inp_L; output [4:0]out_J; assign out_J=inp_S ^ inp_Y ^ inp_L; endmodule
module XOR_3(inp_P,inp_U,out_L); input [3:0]inp_P,inp_U; output [3:0]out_L; assign out_L=inp_P ^ inp_U; endmodule
module XOR_3(S,T,L,R); input [3:0]S,T,L; output [3:0]R; assign R=S ^ T ^ L; endmodule
module XOR_4(inp_N,inp_C,out_T); input [4:0]inp_N,inp_C; output [4:0]out_T; assign out_T=inp_N ^ inp_C; endmodule
module XOR_2(inp_Y,inp_J,out_V); input [2:0]inp_Y,inp_J; output [2:0]out_V; assign out_V=inp_Y ^ inp_J
module XOR_4(inp_Z,inp_R,inp_P,out_P); input [4:0]inp_Z,inp_R,inp_P; output [4:0]out_P; assign out_P=inp_Z ^ inp_R ^ inp_P; endmodule
module XOR_5(M,H,O,W); input [5:0]M,H,O; output [5:0]W; assign W=M ^ H ^ O
module XOR_2(K,Z,L,T); input [2:0]K,Z,L; output [2:0]T; assign T=K ^ Z ^ L; endmodule
module XOR_2(inp_C,inp_N,out_P); input [2:0]inp_C,inp_N; output [2:0]out_P; assign out_P=inp_C ^ inp_N; endmodule
module XOR_6(inp_R,inp_Q,inp_O,out_R); input [6:0]inp_R,inp_Q,inp_O; output [6:0]out_R; assign out_R=inp_R ^ inp_Q ^ inp_O
module XOR_2(inp_W,inp_F,out_R); input [2:0]inp_W,inp_F; output [2:0]out_R; assign out_R=inp_W ^ inp_F; endmodule
module XOR_3(inp_B,inp_U,out_N); input [3:0]inp_B,inp_U; output [3:0]out_N; assign out_N=inp_B ^ inp_U; endmodule
module XOR_1(P,V,T,I); input [1:0]P,V,T; output [1:0]I; assign I=P ^ V ^ T; endmodule
module XOR_5(inp_J,inp_C,inp_P,out_H); input [5:0]inp_J,inp_C,inp_P; output [5:0]out_H; assign out_H=inp_J ^ inp_C ^ inp_P
module XOR_2(I,Q,O,F); input [2:0]I,Q,O; output [2:0]F; assign F=I ^ Q ^ O
module XOR_6(inp_F,inp_Z,inp_U,out_E); input [6:0]inp_F,inp_Z,inp_U; output [6:0]out_E; assign out_E=inp_F ^ inp_Z ^ inp_U
module XOR_1(T,K,V); input [1:0]T,K; output [1:0]V; assign V=T ^ K
module XOR_5(G,X,Y,Z); input [5:0]G,X,Y; output [5:0]Z; assign Z=G ^ X ^ Y
module XOR_3(Z,V,W); input [3:0]Z,V; output [3:0]W; assign W=Z ^ V
module XOR_4(Y,P,L,Q); input [4:0]Y,P,L; output [4:0]Q; assign Q=Y ^ P ^ L; endmodule
module XOR_6(inp_A,inp_L,inp_H,out_V); input [6:0]inp_A,inp_L,inp_H; output [6:0]out_V; assign out_V=inp_A ^ inp_L ^ inp_H; endmodule
module XOR_3(F,S,T,H); input [3:0]F,S,T; output [3:0]H; assign H=F ^ S ^ T; endmodule
module XOR_3(inp_Q,inp_M,inp_I,out_N); input [3:0]inp_Q,inp_M,inp_I; output [3:0]out_N; assign out_N=inp_Q ^ inp_M ^ inp_I; endmodule
module XOR_2(inp_K,inp_S,inp_H,out_Z); input [2:0]inp_K,inp_S,inp_H; output [2:0]out_Z; assign out_Z=inp_K ^ inp_S ^ inp_H; endmodule
module XOR_7(O,E,U,N); input [7:0]O,E,U; output [7:0]N; assign N=O ^ E ^ U
module XOR_5(A,Z,X,O); input [5:0]A,Z,X; output [5:0]O; assign O=A ^ Z ^ X; endmodule
module XOR_4(inp_Z,inp_L,inp_N,out_K); input [4:0]inp_Z,inp_L,inp_N; output [4:0]out_K; assign out_K=inp_Z ^ inp_L ^ inp_N; endmodule
module XOR_3(G,T,C,D); input [3:0]G,T,C; output [3:0]D; assign D=G ^ T ^ C; endmodule
module XOR_4(inp_V,inp_X,out_Z); input [4:0]inp_V,inp_X; output [4:0]out_Z; assign out_Z=inp_V ^ inp_X
module XOR_4(inp_D,inp_N,out_A); input [4:0]inp_D,inp_N; output [4:0]out_A; assign out_A=inp_D ^ inp_N
module XOR_6(Q,Y,O); input [6:0]Q,Y; output [6:0]O; assign O=Q ^ Y
module XOR_7(S,P,K); input [7:0]S,P; output [7:0]K; assign K=S ^ P
module XOR_4(inp_F,inp_Q,out_A); input [4:0]inp_F,inp_Q; output [4:0]out_A; assign out_A=inp_F ^ inp_Q; endmodule
module XOR_5(inp_H,inp_I,inp_V,out_S); input [5:0]inp_H,inp_I,inp_V; output [5:0]out_S; assign out_S=inp_H ^ inp_I ^ inp_V
module XOR_5(N,C,U); input [5:0]N,C; output [5:0]U; assign U=N ^ C; endmodule
module XOR_7(inp_S,inp_H,inp_J,out_F); input [7:0]inp_S,inp_H,inp_J; output [7:0]out_F; assign out_F=inp_S ^ inp_H ^ inp_J; endmodule
module XOR_5(inp_S,inp_Y,out_E); input [5:0]inp_S,inp_Y; output [5:0]out_E; assign out_E=inp_S ^ inp_Y
module XOR_7(inp_O,inp_E,inp_K,out_L); input [7:0]inp_O,inp_E,inp_K; output [7:0]out_L; assign out_L=inp_O ^ inp_E ^ inp_K
module XOR_4(inp_O,inp_W,inp_I,out_D); input [4:0]inp_O,inp_W,inp_I; output [4:0]out_D; assign out_D=inp_O ^ inp_W ^ inp_I
module XOR_4(J,A,C,Q); input [4:0]J,A,C; output [4:0]Q; assign Q=J ^ A ^ C
module XOR_2(inp_A,inp_L,out_I); input [2:0]inp_A,inp_L; output [2:0]out_I; assign out_I=inp_A ^ inp_L
module XOR_5(Q,L,L,X); input [5:0]Q,L,L; output [5:0]X; assign X=Q ^ L ^ L; endmodule
module XOR_1(inp_A,inp_R,inp_C,out_R); input [1:0]inp_A,inp_R,inp_C; output [1:0]out_R; assign out_R=inp_A ^ inp_R ^ inp_C
module XOR_2(S,Q,V,F); input [2:0]S,Q,V; output [2:0]F; assign F=S ^ Q ^ V; endmodule
module XOR_1(M,B,M); input [1:0]M,B; output [1:0]M; assign M=M ^ B
module XOR_2(V,C,N); input [2:0]V,C; output [2:0]N; assign N=V ^ C; endmodule
module XOR_3(J,R,Q); input [3:0]J,R; output [3:0]Q; assign Q=J ^ R
module XOR_2(inp_D,inp_R,inp_Y,out_X); input [2:0]inp_D,inp_R,inp_Y; output [2:0]out_X; assign out_X=inp_D ^ inp_R ^ inp_Y; endmodule
module XOR_2(inp_O,inp_L,inp_F,out_X); input [2:0]inp_O,inp_L,inp_F; output [2:0]out_X; assign out_X=inp_O ^ inp_L ^ inp_F
module XOR_3(inp_K,inp_C,out_W); input [3:0]inp_K,inp_C; output [3:0]out_W; assign out_W=inp_K ^ inp_C; endmodule
module XOR_5(T,G,N,F); input [5:0]T,G,N; output [5:0]F; assign F=T ^ G ^ N
module XOR_4(K,J,I); input [4:0]K,J; output [4:0]I; assign I=K ^ J; endmodule
module XOR_6(Z,H,P); input [6:0]Z,H; output [6:0]P; assign P=Z ^ H
module XOR_4(inp_G,inp_S,inp_V,out_U); input [4:0]inp_G,inp_S,inp_V; output [4:0]out_U; assign out_U=inp_G ^ inp_S ^ inp_V; endmodule
module XOR_4(inp_N,inp_T,out_K); input [4:0]inp_N,inp_T; output [4:0]out_K; assign out_K=inp_N ^ inp_T; endmodule
module XOR_3(inp_P,inp_J,out_Q); input [3:0]inp_P,inp_J; output [3:0]out_Q; assign out_Q=inp_P ^ inp_J
module XOR_6(F,M,T,R); input [6:0]F,M,T; output [6:0]R; assign R=F ^ M ^ T; endmodule
module XOR_3(T,X,W,S); input [3:0]T,X,W; output [3:0]S; assign S=T ^ X ^ W; endmodule
module XOR_5(E,O,T); input [5:0]E,O; output [5:0]T; assign T=E ^ O; endmodule
module XOR_6(inp_Z,inp_W,out_K); input [6:0]inp_Z,inp_W; output [6:0]out_K; assign out_K=inp_Z ^ inp_W
module XOR_6(inp_G,inp_P,inp_X,out_M); input [6:0]inp_G,inp_P,inp_X; output [6:0]out_M; assign out_M=inp_G ^ inp_P ^ inp_X
module XOR_6(W,N,C,A); input [6:0]W,N,C; output [6:0]A; assign A=W ^ N ^ C
module XOR_6(inp_X,inp_P,out_H); input [6:0]inp_X,inp_P; output [6:0]out_H; assign out_H=inp_X ^ inp_P; endmodule
module XOR_6(R,K,I,N); input [6:0]R,K,I; output [6:0]N; assign N=R ^ K ^ I
module XOR_2(inp_X,inp_E,out_S); input [2:0]inp_X,inp_E; output [2:0]out_S; assign out_S=inp_X ^ inp_E
module XOR_5(inp_A,inp_S,out_T); input [5:0]inp_A,inp_S; output [5:0]out_T; assign out_T=inp_A ^ inp_S; endmodule
module XOR_1(R,I,F); input [1:0]R,I; output [1:0]F; assign F=R ^ I; endmodule
module XOR_6(inp_C,inp_U,inp_E,out_F); input [6:0]inp_C,inp_U,inp_E; output [6:0]out_F; assign out_F=inp_C ^ inp_U ^ inp_E; endmodule
module XOR_3(Y,T,Z,H); input [3:0]Y,T,Z; output [3:0]H; assign H=Y ^ T ^ Z
module XOR_7(P,M,D); input [7:0]P,M; output [7:0]D; assign D=P ^ M
module XOR_2(inp_D,inp_C,inp_Q,out_T); input [2:0]inp_D,inp_C,inp_Q; output [2:0]out_T; assign out_T=inp_D ^ inp_C ^ inp_Q
module XOR_2(inp_M,inp_E,out_A); input [2:0]inp_M,inp_E; output [2:0]out_A; assign out_A=inp_M ^ inp_E
module XOR_4(F,Q,Y,H); input [4:0]F,Q,Y; output [4:0]H; assign H=F ^ Q ^ Y; endmodule
module XOR_5(Q,L,H); input [5:0]Q,L; output [5:0]H; assign H=Q ^ L
module XOR_4(inp_H,inp_Q,inp_U,out_Z); input [4:0]inp_H,inp_Q,inp_U; output [4:0]out_Z; assign out_Z=inp_H ^ inp_Q ^ inp_U
module XOR_3(inp_A,inp_R,out_E); input [3:0]inp_A,inp_R; output [3:0]out_E; assign out_E=inp_A ^ inp_R; endmodule
module XOR_1(inp_Z,inp_R,inp_M,out_H); input [1:0]inp_Z,inp_R,inp_M; output [1:0]out_H; assign out_H=inp_Z ^ inp_R ^ inp_M
module XOR_5(B,X,S); input [5:0]B,X; output [5:0]S; assign S=B ^ X
module XOR_7(O,L,S); input [7:0]O,L; output [7:0]S; assign S=O ^ L
module XOR_7(inp_R,inp_U,out_N); input [7:0]inp_R,inp_U; output [7:0]out_N; assign out_N=inp_R ^ inp_U
module XOR_1(inp_G,inp_X,out_X); input [1:0]inp_G,inp_X; output [1:0]out_X; assign out_X=inp_G ^ inp_X; endmodule
module XOR_2(X,O,M); input [2:0]X,O; output [2:0]M; assign M=X ^ O
module XOR_6(P,H,E,M); input [6:0]P,H,E; output [6:0]M; assign M=P ^ H ^ E
module XOR_3(inp_Z,inp_F,inp_J,out_O); input [3:0]inp_Z,inp_F,inp_J; output [3:0]out_O; assign out_O=inp_Z ^ inp_F ^ inp_J
module XOR_5(S,P,K,J); input [5:0]S,P,K; output [5:0]J; assign J=S ^ P ^ K; endmodule
module XOR_7(inp_Z,inp_E,inp_I,out_K); input [7:0]inp_Z,inp_E,inp_I; output [7:0]out_K; assign out_K=inp_Z ^ inp_E ^ inp_I
module XOR_1(I,J,A,C); input [1:0]I,J,A; output [1:0]C; assign C=I ^ J ^ A; endmodule
module XOR_7(inp_W,inp_K,out_P); input [7:0]inp_W,inp_K; output [7:0]out_P; assign out_P=inp_W ^ inp_K
module XOR_4(E,I,K,D); input [4:0]E,I,K; output [4:0]D; assign D=E ^ I ^ K
module XOR_7(V,A,L,O); input [7:0]V,A,L; output [7:0]O; assign O=V ^ A ^ L; endmodule
module XOR_3(Q,Z,N); input [3:0]Q,Z; output [3:0]N; assign N=Q ^ Z; endmodule
module XOR_6(N,G,L); input [6:0]N,G; output [6:0]L; assign L=N ^ G
module XOR_3(inp_J,inp_X,out_L); input [3:0]inp_J,inp_X; output [3:0]out_L; assign out_L=inp_J ^ inp_X
module XOR_4(W,P,D,Q); input [4:0]W,P,D; output [4:0]Q; assign Q=W ^ P ^ D; endmodule
module XOR_4(I,E,U,X); input [4:0]I,E,U; output [4:0]X; assign X=I ^ E ^ U
module XOR_6(W,M,T,N); input [6:0]W,M,T; output [6:0]N; assign N=W ^ M ^ T; endmodule
module XOR_3(U,B,R); input [3:0]U,B; output [3:0]R; assign R=U ^ B
module XOR_4(inp_R,inp_M,inp_Y,out_H); input [4:0]inp_R,inp_M,inp_Y; output [4:0]out_H; assign out_H=inp_R ^ inp_M ^ inp_Y; endmodule
module XOR_2(N,U,D); input [2:0]N,U; output [2:0]D; assign D=N ^ U; endmodule
module XOR_1(X,O,E,U); input [1:0]X,O,E; output [1:0]U; assign U=X ^ O ^ E; endmodule
module XOR_4(inp_E,inp_G,out_A); input [4:0]inp_E,inp_G; output [4:0]out_A; assign out_A=inp_E ^ inp_G
module XOR_7(C,O,K); input [7:0]C,O; output [7:0]K; assign K=C ^ O
module XOR_1(inp_Q,inp_C,out_D); input [1:0]inp_Q,inp_C; output [1:0]out_D; assign out_D=inp_Q ^ inp_C
module XOR_5(X,G,K,P); input [5:0]X,G,K; output [5:0]P; assign P=X ^ G ^ K; endmodule
module XOR_7(inp_U,inp_A,out_J); input [7:0]inp_U,inp_A; output [7:0]out_J; assign out_J=inp_U ^ inp_A; endmodule
module XOR_4(S,T,F,J); input [4:0]S,T,F; output [4:0]J; assign J=S ^ T ^ F
module XOR_2(P,I,T,R); input [2:0]P,I,T; output [2:0]R; assign R=P ^ I ^ T; endmodule
module XOR_5(R,F,K,S); input [5:0]R,F,K; output [5:0]S; assign S=R ^ F ^ K; endmodule
module XOR_2(inp_B,inp_O,inp_L,out_Z); input [2:0]inp_B,inp_O,inp_L; output [2:0]out_Z; assign out_Z=inp_B ^ inp_O ^ inp_L; endmodule
module XOR_2(W,P,N,U); input [2:0]W,P,N; output [2:0]U; assign U=W ^ P ^ N
module XOR_1(G,W,K); input [1:0]G,W; output [1:0]K; assign K=G ^ W; endmodule
module XOR_1(M,L,W,H); input [1:0]M,L,W; output [1:0]H; assign H=M ^ L ^ W
module XOR_3(inp_P,inp_T,out_C); input [3:0]inp_P,inp_T; output [3:0]out_C; assign out_C=inp_P ^ inp_T
module XOR_4(inp_S,inp_Z,inp_U,out_N); input [4:0]inp_S,inp_Z,inp_U; output [4:0]out_N; assign out_N=inp_S ^ inp_Z ^ inp_U
module XOR_7(inp_U,inp_W,out_Q); input [7:0]inp_U,inp_W; output [7:0]out_Q; assign out_Q=inp_U ^ inp_W
module XOR_1(inp_A,inp_X,inp_G,out_Q); input [1:0]inp_A,inp_X,inp_G; output [1:0]out_Q; assign out_Q=inp_A ^ inp_X ^ inp_G; endmodule
module XOR_2(inp_L,inp_F,inp_J,out_C); input [2:0]inp_L,inp_F,inp_J; output [2:0]out_C; assign out_C=inp_L ^ inp_F ^ inp_J; endmodule
module XOR_4(inp_I,inp_Q,inp_O,out_B); input [4:0]inp_I,inp_Q,inp_O; output [4:0]out_B; assign out_B=inp_I ^ inp_Q ^ inp_O
module XOR_5(G,Z,W); input [5:0]G,Z; output [5:0]W; assign W=G ^ Z
module XOR_4(inp_C,inp_K,inp_J,out_U); input [4:0]inp_C,inp_K,inp_J; output [4:0]out_U; assign out_U=inp_C ^ inp_K ^ inp_J
module XOR_7(inp_H,inp_R,out_Z); input [7:0]inp_H,inp_R; output [7:0]out_Z; assign out_Z=inp_H ^ inp_R
module XOR_6(inp_H,inp_X,inp_F,out_U); input [6:0]inp_H,inp_X,inp_F; output [6:0]out_U; assign out_U=inp_H ^ inp_X ^ inp_F; endmodule
module XOR_6(S,L,P); input [6:0]S,L; output [6:0]P; assign P=S ^ L; endmodule
module XOR_1(inp_J,inp_Z,inp_C,out_A); input [1:0]inp_J,inp_Z,inp_C; output [1:0]out_A; assign out_A=inp_J ^ inp_Z ^ inp_C
module XOR_2(N,M,Y); input [2:0]N,M; output [2:0]Y; assign Y=N ^ M
module XOR_4(L,C,B); input [4:0]L,C; output [4:0]B; assign B=L ^ C
module XOR_2(R,F,S,V); input [2:0]R,F,S; output [2:0]V; assign V=R ^ F ^ S
module XOR_5(inp_I,inp_N,inp_F,out_B); input [5:0]inp_I,inp_N,inp_F; output [5:0]out_B; assign out_B=inp_I ^ inp_N ^ inp_F
module XOR_3(inp_Q,inp_Y,inp_S,out_H); input [3:0]inp_Q,inp_Y,inp_S; output [3:0]out_H; assign out_H=inp_Q ^ inp_Y ^ inp_S; endmodule
module XOR_1(S,Q,F); input [1:0]S,Q; output [1:0]F; assign F=S ^ Q
module XOR_6(S,Q,H,L); input [6:0]S,Q,H; output [6:0]L; assign L=S ^ Q ^ H; endmodule
module XOR_3(O,Z,T,G); input [3:0]O,Z,T; output [3:0]G; assign G=O ^ Z ^ T
module XOR_7(J,B,Z,W); input [7:0]J,B,Z; output [7:0]W; assign W=J ^ B ^ Z
module XOR_2(T,F,J); input [2:0]T,F; output [2:0]J; assign J=T ^ F; endmodule
module XOR_4(inp_Z,inp_Y,inp_F,out_J); input [4:0]inp_Z,inp_Y,inp_F; output [4:0]out_J; assign out_J=inp_Z ^ inp_Y ^ inp_F
module XOR_1(C,B,R); input [1:0]C,B; output [1:0]R; assign R=C ^ B
module XOR_2(Q,Y,A); input [2:0]Q,Y; output [2:0]A; assign A=Q ^ Y
module XOR_1(L,G,J,N); input [1:0]L,G,J; output [1:0]N; assign N=L ^ G ^ J; endmodule
module XOR_5(C,Z,V,Q); input [5:0]C,Z,V; output [5:0]Q; assign Q=C ^ Z ^ V; endmodule
module XOR_5(inp_O,inp_G,inp_P,out_E); input [5:0]inp_O,inp_G,inp_P; output [5:0]out_E; assign out_E=inp_O ^ inp_G ^ inp_P; endmodule
module XOR_5(L,W,D); input [5:0]L,W; output [5:0]D; assign D=L ^ W; endmodule
module XOR_4(H,A,B,S); input [4:0]H,A,B; output [4:0]S; assign S=H ^ A ^ B; endmodule
module XOR_3(inp_K,inp_O,out_Q); input [3:0]inp_K,inp_O; output [3:0]out_Q; assign out_Q=inp_K ^ inp_O; endmodule
module XOR_5(Y,A,J); input [5:0]Y,A; output [5:0]J; assign J=Y ^ A
module XOR_1(M,E,G,K); input [1:0]M,E,G; output [1:0]K; assign K=M ^ E ^ G; endmodule
module XOR_5(W,Q,N,S); input [5:0]W,Q,N; output [5:0]S; assign S=W ^ Q ^ N; endmodule
module XOR_2(inp_N,inp_Y,inp_M,out_V); input [2:0]inp_N,inp_Y,inp_M; output [2:0]out_V; assign out_V=inp_N ^ inp_Y ^ inp_M
module XOR_3(inp_L,inp_Q,inp_D,out_N); input [3:0]inp_L,inp_Q,inp_D; output [3:0]out_N; assign out_N=inp_L ^ inp_Q ^ inp_D
module XOR_7(inp_A,inp_Q,out_M); input [7:0]inp_A,inp_Q; output [7:0]out_M; assign out_M=inp_A ^ inp_Q
module XOR_2(inp_T,inp_C,inp_Z,out_I); input [2:0]inp_T,inp_C,inp_Z; output [2:0]out_I; assign out_I=inp_T ^ inp_C ^ inp_Z
module XOR_6(E,U,S,W); input [6:0]E,U,S; output [6:0]W; assign W=E ^ U ^ S; endmodule
module XOR_4(Z,E,P,L); input [4:0]Z,E,P; output [4:0]L; assign L=Z ^ E ^ P; endmodule
module XOR_6(Y,N,L); input [6:0]Y,N; output [6:0]L; assign L=Y ^ N
module XOR_5(inp_T,inp_V,out_W); input [5:0]inp_T,inp_V; output [5:0]out_W; assign out_W=inp_T ^ inp_V; endmodule
module XOR_1(inp_K,inp_R,out_L); input [1:0]inp_K,inp_R; output [1:0]out_L; assign out_L=inp_K ^ inp_R
module XOR_3(M,W,Y); input [3:0]M,W; output [3:0]Y; assign Y=M ^ W; endmodule
module XOR_5(inp_N,inp_I,out_G); input [5:0]inp_N,inp_I; output [5:0]out_G; assign out_G=inp_N ^ inp_I; endmodule
module XOR_1(inp_D,inp_U,out_V); input [1:0]inp_D,inp_U; output [1:0]out_V; assign out_V=inp_D ^ inp_U
module XOR_4(Q,R,A); input [4:0]Q,R; output [4:0]A; assign A=Q ^ R
module XOR_2(inp_A,inp_M,inp_Y,out_R); input [2:0]inp_A,inp_M,inp_Y; output [2:0]out_R; assign out_R=inp_A ^ inp_M ^ inp_Y; endmodule
module XOR_6(inp_S,inp_M,inp_F,out_E); input [6:0]inp_S,inp_M,inp_F; output [6:0]out_E; assign out_E=inp_S ^ inp_M ^ inp_F
module XOR_3(G,M,L); input [3:0]G,M; output [3:0]L; assign L=G ^ M; endmodule
module XOR_4(inp_E,inp_O,out_G); input [4:0]inp_E,inp_O; output [4:0]out_G; assign out_G=inp_E ^ inp_O; endmodule
module XOR_4(inp_O,inp_X,out_W); input [4:0]inp_O,inp_X; output [4:0]out_W; assign out_W=inp_O ^ inp_X; endmodule
module XOR_3(M,H,F); input [3:0]M,H; output [3:0]F; assign F=M ^ H; endmodule
module XOR_2(inp_Y,inp_I,out_W); input [2:0]inp_Y,inp_I; output [2:0]out_W; assign out_W=inp_Y ^ inp_I; endmodule
module XOR_5(Q,H,T,S); input [5:0]Q,H,T; output [5:0]S; assign S=Q ^ H ^ T
module XOR_4(E,Y,O,X); input [4:0]E,Y,O; output [4:0]X; assign X=E ^ Y ^ O
module XOR_2(A,Q,U); input [2:0]A,Q; output [2:0]U; assign U=A ^ Q; endmodule
module XOR_6(V,Y,D); input [6:0]V,Y; output [6:0]D; assign D=V ^ Y; endmodule
module XOR_3(L,T,P,J); input [3:0]L,T,P; output [3:0]J; assign J=L ^ T ^ P
module XOR_5(inp_R,inp_H,out_I); input [5:0]inp_R,inp_H; output [5:0]out_I; assign out_I=inp_R ^ inp_H; endmodule
module XOR_2(inp_N,inp_R,inp_D,out_E); input [2:0]inp_N,inp_R,inp_D; output [2:0]out_E; assign out_E=inp_N ^ inp_R ^ inp_D
module XOR_4(O,Q,K,F); input [4:0]O,Q,K; output [4:0]F; assign F=O ^ Q ^ K
module XOR_4(M,E,D,O); input [4:0]M,E,D; output [4:0]O; assign O=M ^ E ^ D
module XOR_7(inp_U,inp_W,inp_F,out_A); input [7:0]inp_U,inp_W,inp_F; output [7:0]out_A; assign out_A=inp_U ^ inp_W ^ inp_F; endmodule
module XOR_4(inp_F,inp_B,out_R); input [4:0]inp_F,inp_B; output [4:0]out_R; assign out_R=inp_F ^ inp_B
module XOR_6(L,W,I); input [6:0]L,W; output [6:0]I; assign I=L ^ W
module XOR_2(inp_X,inp_H,inp_W,out_Z); input [2:0]inp_X,inp_H,inp_W; output [2:0]out_Z; assign out_Z=inp_X ^ inp_H ^ inp_W
module XOR_2(inp_A,inp_M,out_R); input [2:0]inp_A,inp_M; output [2:0]out_R; assign out_R=inp_A ^ inp_M
module XOR_6(N,H,S); input [6:0]N,H; output [6:0]S; assign S=N ^ H; endmodule
module XOR_6(Y,E,S); input [6:0]Y,E; output [6:0]S; assign S=Y ^ E
module XOR_5(R,X,V,O); input [5:0]R,X,V; output [5:0]O; assign O=R ^ X ^ V
module XOR_1(E,A,H,I); input [1:0]E,A,H; output [1:0]I; assign I=E ^ A ^ H; endmodule
module XOR_7(R,Q,S,F); input [7:0]R,Q,S; output [7:0]F; assign F=R ^ Q ^ S
module XOR_1(inp_F,inp_Z,out_I); input [1:0]inp_F,inp_Z; output [1:0]out_I; assign out_I=inp_F ^ inp_Z; endmodule
module XOR_5(inp_F,inp_L,out_A); input [5:0]inp_F,inp_L; output [5:0]out_A; assign out_A=inp_F ^ inp_L
module XOR_7(inp_W,inp_R,out_Z); input [7:0]inp_W,inp_R; output [7:0]out_Z; assign out_Z=inp_W ^ inp_R
module XOR_1(V,H,K); input [1:0]V,H; output [1:0]K; assign K=V ^ H
module XOR_3(inp_D,inp_Y,inp_F,out_J); input [3:0]inp_D,inp_Y,inp_F; output [3:0]out_J; assign out_J=inp_D ^ inp_Y ^ inp_F
module XOR_3(inp_O,inp_H,out_U); input [3:0]inp_O,inp_H; output [3:0]out_U; assign out_U=inp_O ^ inp_H; endmodule
module XOR_5(inp_D,inp_B,inp_Y,out_O); input [5:0]inp_D,inp_B,inp_Y; output [5:0]out_O; assign out_O=inp_D ^ inp_B ^ inp_Y
module XOR_1(O,P,H); input [1:0]O,P; output [1:0]H; assign H=O ^ P; endmodule
module XOR_1(inp_E,inp_Y,inp_Q,out_E); input [1:0]inp_E,inp_Y,inp_Q; output [1:0]out_E; assign out_E=inp_E ^ inp_Y ^ inp_Q
module XOR_5(inp_U,inp_S,inp_R,out_B); input [5:0]inp_U,inp_S,inp_R; output [5:0]out_B; assign out_B=inp_U ^ inp_S ^ inp_R
module XOR_6(inp_W,inp_S,inp_C,out_Y); input [6:0]inp_W,inp_S,inp_C; output [6:0]out_Y; assign out_Y=inp_W ^ inp_S ^ inp_C; endmodule
module XOR_5(L,H,G,N); input [5:0]L,H,G; output [5:0]N; assign N=L ^ H ^ G; endmodule
module XOR_2(D,Q,S,M); input [2:0]D,Q,S; output [2:0]M; assign M=D ^ Q ^ S
module XOR_5(D,I,Q); input [5:0]D,I; output [5:0]Q; assign Q=D ^ I; endmodule
module XOR_6(inp_H,inp_T,out_Z); input [6:0]inp_H,inp_T; output [6:0]out_Z; assign out_Z=inp_H ^ inp_T; endmodule
module XOR_3(L,E,J,X); input [3:0]L,E,J; output [3:0]X; assign X=L ^ E ^ J; endmodule
module XOR_1(I,C,G); input [1:0]I,C; output [1:0]G; assign G=I ^ C; endmodule
module XOR_1(O,Q,H,M); input [1:0]O,Q,H; output [1:0]M; assign M=O ^ Q ^ H
module XOR_6(S,R,Q,M); input [6:0]S,R,Q; output [6:0]M; assign M=S ^ R ^ Q
module XOR_2(D,H,L); input [2:0]D,H; output [2:0]L; assign L=D ^ H; endmodule
module XOR_1(inp_F,inp_Y,inp_D,out_D); input [1:0]inp_F,inp_Y,inp_D; output [1:0]out_D; assign out_D=inp_F ^ inp_Y ^ inp_D
module XOR_7(M,C,H,V); input [7:0]M,C,H; output [7:0]V; assign V=M ^ C ^ H
module XOR_5(inp_G,inp_Y,out_K); input [5:0]inp_G,inp_Y; output [5:0]out_K; assign out_K=inp_G ^ inp_Y; endmodule
module XOR_7(A,R,G); input [7:0]A,R; output [7:0]G; assign G=A ^ R; endmodule
module XOR_6(S,L,K,R); input [6:0]S,L,K; output [6:0]R; assign R=S ^ L ^ K
module XOR_3(inp_R,inp_Q,out_M); input [3:0]inp_R,inp_Q; output [3:0]out_M; assign out_M=inp_R ^ inp_Q; endmodule
module XOR_4(inp_B,inp_L,inp_S,out_E); input [4:0]inp_B,inp_L,inp_S; output [4:0]out_E; assign out_E=inp_B ^ inp_L ^ inp_S
module XOR_4(Z,E,X); input [4:0]Z,E; output [4:0]X; assign X=Z ^ E
module XOR_4(inp_L,inp_O,inp_X,out_U); input [4:0]inp_L,inp_O,inp_X; output [4:0]out_U; assign out_U=inp_L ^ inp_O ^ inp_X; endmodule
module XOR_1(inp_Z,inp_X,out_Y); input [1:0]inp_Z,inp_X; output [1:0]out_Y; assign out_Y=inp_Z ^ inp_X
module XOR_2(inp_T,inp_L,inp_K,out_E); input [2:0]inp_T,inp_L,inp_K; output [2:0]out_E; assign out_E=inp_T ^ inp_L ^ inp_K
module XOR_7(inp_S,inp_C,inp_N,out_C); input [7:0]inp_S,inp_C,inp_N; output [7:0]out_C; assign out_C=inp_S ^ inp_C ^ inp_N
module XOR_5(W,Y,G); input [5:0]W,Y; output [5:0]G; assign G=W ^ Y; endmodule
module XOR_7(inp_E,inp_S,inp_O,out_P); input [7:0]inp_E,inp_S,inp_O; output [7:0]out_P; assign out_P=inp_E ^ inp_S ^ inp_O; endmodule
module XOR_2(I,J,R); input [2:0]I,J; output [2:0]R; assign R=I ^ J
module XOR_2(inp_P,inp_T,out_C); input [2:0]inp_P,inp_T; output [2:0]out_C; assign out_C=inp_P ^ inp_T
module XOR_2(inp_V,inp_G,inp_K,out_N); input [2:0]inp_V,inp_G,inp_K; output [2:0]out_N; assign out_N=inp_V ^ inp_G ^ inp_K
module XOR_2(C,P,S); input [2:0]C,P; output [2:0]S; assign S=C ^ P
module XOR_4(inp_N,inp_P,inp_A,out_S); input [4:0]inp_N,inp_P,inp_A; output [4:0]out_S; assign out_S=inp_N ^ inp_P ^ inp_A
module XOR_4(inp_D,inp_L,inp_X,out_Y); input [4:0]inp_D,inp_L,inp_X; output [4:0]out_Y; assign out_Y=inp_D ^ inp_L ^ inp_X
module XOR_5(inp_Q,inp_D,inp_B,out_X); input [5:0]inp_Q,inp_D,inp_B; output [5:0]out_X; assign out_X=inp_Q ^ inp_D ^ inp_B; endmodule
module XOR_4(U,A,D,V); input [4:0]U,A,D; output [4:0]V; assign V=U ^ A ^ D
module XOR_5(inp_P,inp_M,out_M); input [5:0]inp_P,inp_M; output [5:0]out_M; assign out_M=inp_P ^ inp_M
module XOR_5(inp_Q,inp_C,out_N); input [5:0]inp_Q,inp_C; output [5:0]out_N; assign out_N=inp_Q ^ inp_C; endmodule
module XOR_1(inp_K,inp_O,inp_B,out_Z); input [1:0]inp_K,inp_O,inp_B; output [1:0]out_Z; assign out_Z=inp_K ^ inp_O ^ inp_B
module XOR_3(T,B,H); input [3:0]T,B; output [3:0]H; assign H=T ^ B
module XOR_2(inp_S,inp_H,out_V); input [2:0]inp_S,inp_H; output [2:0]out_V; assign out_V=inp_S ^ inp_H; endmodule
module XOR_1(N,I,K,G); input [1:0]N,I,K; output [1:0]G; assign G=N ^ I ^ K; endmodule
module XOR_2(inp_V,inp_S,out_I); input [2:0]inp_V,inp_S; output [2:0]out_I; assign out_I=inp_V ^ inp_S; endmodule
module XOR_5(V,I,R,R); input [5:0]V,I,R; output [5:0]R; assign R=V ^ I ^ R
module XOR_3(inp_T,inp_F,out_D); input [3:0]inp_T,inp_F; output [3:0]out_D; assign out_D=inp_T ^ inp_F
module XOR_6(K,D,I,E); input [6:0]K,D,I; output [6:0]E; assign E=K ^ D ^ I; endmodule
module XOR_3(inp_Q,inp_L,inp_P,out_I); input [3:0]inp_Q,inp_L,inp_P; output [3:0]out_I; assign out_I=inp_Q ^ inp_L ^ inp_P; endmodule
module XOR_6(Z,O,P,D); input [6:0]Z,O,P; output [6:0]D; assign D=Z ^ O ^ P
module XOR_7(I,O,F,M); input [7:0]I,O,F; output [7:0]M; assign M=I ^ O ^ F; endmodule
module XOR_3(G,X,U); input [3:0]G,X; output [3:0]U; assign U=G ^ X
module XOR_3(E,P,T); input [3:0]E,P; output [3:0]T; assign T=E ^ P; endmodule
module XOR_7(inp_N,inp_A,out_Y); input [7:0]inp_N,inp_A; output [7:0]out_Y; assign out_Y=inp_N ^ inp_A
module XOR_5(inp_H,inp_O,out_U); input [5:0]inp_H,inp_O; output [5:0]out_U; assign out_U=inp_H ^ inp_O
module XOR_2(inp_T,inp_R,inp_J,out_K); input [2:0]inp_T,inp_R,inp_J; output [2:0]out_K; assign out_K=inp_T ^ inp_R ^ inp_J
module XOR_5(inp_C,inp_P,out_N); input [5:0]inp_C,inp_P; output [5:0]out_N; assign out_N=inp_C ^ inp_P
module XOR_5(inp_C,inp_D,out_O); input [5:0]inp_C,inp_D; output [5:0]out_O; assign out_O=inp_C ^ inp_D
module XOR_1(X,S,Q,O); input [1:0]X,S,Q; output [1:0]O; assign O=X ^ S ^ Q; endmodule
module XOR_4(inp_V,inp_Y,inp_B,out_G); input [4:0]inp_V,inp_Y,inp_B; output [4:0]out_G; assign out_G=inp_V ^ inp_Y ^ inp_B; endmodule
module XOR_1(H,S,U,J); input [1:0]H,S,U; output [1:0]J; assign J=H ^ S ^ U; endmodule
module XOR_3(inp_W,inp_L,inp_G,out_F); input [3:0]inp_W,inp_L,inp_G; output [3:0]out_F; assign out_F=inp_W ^ inp_L ^ inp_G
module XOR_6(inp_I,inp_P,inp_L,out_E); input [6:0]inp_I,inp_P,inp_L; output [6:0]out_E; assign out_E=inp_I ^ inp_P ^ inp_L
module XOR_2(inp_Z,inp_F,out_F); input [2:0]inp_Z,inp_F; output [2:0]out_F; assign out_F=inp_Z ^ inp_F
module XOR_1(inp_Z,inp_B,inp_T,out_A); input [1:0]inp_Z,inp_B,inp_T; output [1:0]out_A; assign out_A=inp_Z ^ inp_B ^ inp_T
module XOR_7(inp_H,inp_O,inp_Y,out_N); input [7:0]inp_H,inp_O,inp_Y; output [7:0]out_N; assign out_N=inp_H ^ inp_O ^ inp_Y
module XOR_4(inp_N,inp_Z,out_Q); input [4:0]inp_N,inp_Z; output [4:0]out_Q; assign out_Q=inp_N ^ inp_Z
module XOR_7(inp_T,inp_V,inp_J,out_G); input [7:0]inp_T,inp_V,inp_J; output [7:0]out_G; assign out_G=inp_T ^ inp_V ^ inp_J; endmodule
module XOR_7(P,W,I); input [7:0]P,W; output [7:0]I; assign I=P ^ W
module XOR_2(L,G,F,Q); input [2:0]L,G,F; output [2:0]Q; assign Q=L ^ G ^ F; endmodule
module XOR_7(inp_P,inp_W,out_S); input [7:0]inp_P,inp_W; output [7:0]out_S; assign out_S=inp_P ^ inp_W
module XOR_6(inp_T,inp_M,out_U); input [6:0]inp_T,inp_M; output [6:0]out_U; assign out_U=inp_T ^ inp_M; endmodule
module XOR_4(inp_E,inp_M,out_A); input [4:0]inp_E,inp_M; output [4:0]out_A; assign out_A=inp_E ^ inp_M; endmodule
module XOR_1(inp_Z,inp_P,out_P); input [1:0]inp_Z,inp_P; output [1:0]out_P; assign out_P=inp_Z ^ inp_P; endmodule
module XOR_5(inp_D,inp_B,out_E); input [5:0]inp_D,inp_B; output [5:0]out_E; assign out_E=inp_D ^ inp_B
module XOR_7(A,Q,O,Y); input [7:0]A,Q,O; output [7:0]Y; assign Y=A ^ Q ^ O; endmodule
module XOR_5(T,A,L,U); input [5:0]T,A,L; output [5:0]U; assign U=T ^ A ^ L
module XOR_5(P,A,G,O); input [5:0]P,A,G; output [5:0]O; assign O=P ^ A ^ G; endmodule
module XOR_3(inp_W,inp_Z,out_P); input [3:0]inp_W,inp_Z; output [3:0]out_P; assign out_P=inp_W ^ inp_Z
module XOR_7(inp_R,inp_F,out_B); input [7:0]inp_R,inp_F; output [7:0]out_B; assign out_B=inp_R ^ inp_F; endmodule
module XOR_6(T,Z,R,C); input [6:0]T,Z,R; output [6:0]C; assign C=T ^ Z ^ R
module XOR_7(inp_R,inp_W,out_L); input [7:0]inp_R,inp_W; output [7:0]out_L; assign out_L=inp_R ^ inp_W
module XOR_4(J,P,Y,U); input [4:0]J,P,Y; output [4:0]U; assign U=J ^ P ^ Y
module XOR_1(inp_Q,inp_Y,out_D); input [1:0]inp_Q,inp_Y; output [1:0]out_D; assign out_D=inp_Q ^ inp_Y; endmodule
module XOR_3(N,C,U); input [3:0]N,C; output [3:0]U; assign U=N ^ C
module XOR_5(A,P,Z); input [5:0]A,P; output [5:0]Z; assign Z=A ^ P; endmodule
module XOR_2(Y,D,P); input [2:0]Y,D; output [2:0]P; assign P=Y ^ D; endmodule
module XOR_4(inp_X,inp_H,out_U); input [4:0]inp_X,inp_H; output [4:0]out_U; assign out_U=inp_X ^ inp_H
module XOR_1(inp_S,inp_B,out_C); input [1:0]inp_S,inp_B; output [1:0]out_C; assign out_C=inp_S ^ inp_B; endmodule
module XOR_2(inp_C,inp_V,inp_E,out_A); input [2:0]inp_C,inp_V,inp_E; output [2:0]out_A; assign out_A=inp_C ^ inp_V ^ inp_E
module XOR_4(I,S,F,H); input [4:0]I,S,F; output [4:0]H; assign H=I ^ S ^ F; endmodule
module XOR_3(inp_Q,inp_Z,out_V); input [3:0]inp_Q,inp_Z; output [3:0]out_V; assign out_V=inp_Q ^ inp_Z
module XOR_7(inp_V,inp_E,out_J); input [7:0]inp_V,inp_E; output [7:0]out_J; assign out_J=inp_V ^ inp_E
module XOR_6(inp_Q,inp_C,inp_M,out_I); input [6:0]inp_Q,inp_C,inp_M; output [6:0]out_I; assign out_I=inp_Q ^ inp_C ^ inp_M
module XOR_7(inp_U,inp_B,inp_A,out_O); input [7:0]inp_U,inp_B,inp_A; output [7:0]out_O; assign out_O=inp_U ^ inp_B ^ inp_A; endmodule
module XOR_7(J,D,K); input [7:0]J,D; output [7:0]K; assign K=J ^ D; endmodule
module XOR_1(V,Z,G); input [1:0]V,Z; output [1:0]G; assign G=V ^ Z; endmodule
module XOR_6(C,K,J,B); input [6:0]C,K,J; output [6:0]B; assign B=C ^ K ^ J; endmodule
module XOR_2(G,E,Y,J); input [2:0]G,E,Y; output [2:0]J; assign J=G ^ E ^ Y
module XOR_6(inp_P,inp_C,out_N); input [6:0]inp_P,inp_C; output [6:0]out_N; assign out_N=inp_P ^ inp_C; endmodule
module XOR_2(L,Y,S); input [2:0]L,Y; output [2:0]S; assign S=L ^ Y
module XOR_7(inp_E,inp_S,inp_K,out_Z); input [7:0]inp_E,inp_S,inp_K; output [7:0]out_Z; assign out_Z=inp_E ^ inp_S ^ inp_K
module XOR_5(M,G,A,J); input [5:0]M,G,A; output [5:0]J; assign J=M ^ G ^ A
module XOR_2(M,A,Y,T); input [2:0]M,A,Y; output [2:0]T; assign T=M ^ A ^ Y
module XOR_6(inp_F,inp_R,inp_W,out_L); input [6:0]inp_F,inp_R,inp_W; output [6:0]out_L; assign out_L=inp_F ^ inp_R ^ inp_W; endmodule
module XOR_2(inp_N,inp_I,out_N); input [2:0]inp_N,inp_I; output [2:0]out_N; assign out_N=inp_N ^ inp_I; endmodule
module XOR_4(inp_K,inp_N,inp_I,out_O); input [4:0]inp_K,inp_N,inp_I; output [4:0]out_O; assign out_O=inp_K ^ inp_N ^ inp_I; endmodule
module XOR_2(V,A,S); input [2:0]V,A; output [2:0]S; assign S=V ^ A; endmodule
module XOR_4(T,G,R,Q); input [4:0]T,G,R; output [4:0]Q; assign Q=T ^ G ^ R; endmodule
module XOR_1(B,F,W,V); input [1:0]B,F,W; output [1:0]V; assign V=B ^ F ^ W
module XOR_6(inp_P,inp_X,inp_D,out_I); input [6:0]inp_P,inp_X,inp_D; output [6:0]out_I; assign out_I=inp_P ^ inp_X ^ inp_D
module XOR_7(O,J,B); input [7:0]O,J; output [7:0]B; assign B=O ^ J; endmodule
module XOR_6(E,Y,D,C); input [6:0]E,Y,D; output [6:0]C; assign C=E ^ Y ^ D; endmodule
module XOR_4(M,W,F); input [4:0]M,W; output [4:0]F; assign F=M ^ W
module XOR_1(O,F,E,S); input [1:0]O,F,E; output [1:0]S; assign S=O ^ F ^ E; endmodule
module XOR_2(inp_S,inp_T,out_M); input [2:0]inp_S,inp_T; output [2:0]out_M; assign out_M=inp_S ^ inp_T; endmodule
module XOR_7(inp_B,inp_A,inp_Y,out_H); input [7:0]inp_B,inp_A,inp_Y; output [7:0]out_H; assign out_H=inp_B ^ inp_A ^ inp_Y
module XOR_4(V,Y,N); input [4:0]V,Y; output [4:0]N; assign N=V ^ Y; endmodule
module XOR_4(inp_U,inp_V,inp_S,out_X); input [4:0]inp_U,inp_V,inp_S; output [4:0]out_X; assign out_X=inp_U ^ inp_V ^ inp_S; endmodule
module XOR_3(H,C,B,E); input [3:0]H,C,B; output [3:0]E; assign E=H ^ C ^ B; endmodule
module XOR_4(inp_H,inp_T,out_R); input [4:0]inp_H,inp_T; output [4:0]out_R; assign out_R=inp_H ^ inp_T; endmodule
module XOR_3(inp_V,inp_B,out_B); input [3:0]inp_V,inp_B; output [3:0]out_B; assign out_B=inp_V ^ inp_B; endmodule
module XOR_2(L,T,R,C); input [2:0]L,T,R; output [2:0]C; assign C=L ^ T ^ R
module XOR_3(A,M,B,N); input [3:0]A,M,B; output [3:0]N; assign N=A ^ M ^ B; endmodule
module XOR_4(Y,W,V); input [4:0]Y,W; output [4:0]V; assign V=Y ^ W
module XOR_3(P,N,R); input [3:0]P,N; output [3:0]R; assign R=P ^ N; endmodule
module XOR_7(J,V,M); input [7:0]J,V; output [7:0]M; assign M=J ^ V; endmodule
module XOR_5(Y,T,R); input [5:0]Y,T; output [5:0]R; assign R=Y ^ T
module XOR_3(Z,P,C,K); input [3:0]Z,P,C; output [3:0]K; assign K=Z ^ P ^ C
module XOR_1(inp_H,inp_W,inp_S,out_U); input [1:0]inp_H,inp_W,inp_S; output [1:0]out_U; assign out_U=inp_H ^ inp_W ^ inp_S; endmodule
module XOR_2(inp_M,inp_P,inp_F,out_S); input [2:0]inp_M,inp_P,inp_F; output [2:0]out_S; assign out_S=inp_M ^ inp_P ^ inp_F
module XOR_3(F,C,K,Q); input [3:0]F,C,K; output [3:0]Q; assign Q=F ^ C ^ K
module XOR_2(inp_G,inp_K,out_U); input [2:0]inp_G,inp_K; output [2:0]out_U; assign out_U=inp_G ^ inp_K; endmodule
module XOR_7(inp_J,inp_W,out_E); input [7:0]inp_J,inp_W; output [7:0]out_E; assign out_E=inp_J ^ inp_W
module XOR_2(W,U,N,N); input [2:0]W,U,N; output [2:0]N; assign N=W ^ U ^ N
module XOR_1(J,I,N,L); input [1:0]J,I,N; output [1:0]L; assign L=J ^ I ^ N; endmodule
module XOR_1(H,D,X); input [1:0]H,D; output [1:0]X; assign X=H ^ D
module XOR_5(A,N,T,M); input [5:0]A,N,T; output [5:0]M; assign M=A ^ N ^ T; endmodule
module XOR_5(inp_S,inp_J,out_R); input [5:0]inp_S,inp_J; output [5:0]out_R; assign out_R=inp_S ^ inp_J
module XOR_2(inp_X,inp_G,out_W); input [2:0]inp_X,inp_G; output [2:0]out_W; assign out_W=inp_X ^ inp_G
module XOR_6(inp_X,inp_D,out_Q); input [6:0]inp_X,inp_D; output [6:0]out_Q; assign out_Q=inp_X ^ inp_D; endmodule
module XOR_2(inp_C,inp_M,out_H); input [2:0]inp_C,inp_M; output [2:0]out_H; assign out_H=inp_C ^ inp_M; endmodule
module XOR_5(inp_I,inp_Z,out_S); input [5:0]inp_I,inp_Z; output [5:0]out_S; assign out_S=inp_I ^ inp_Z
module XOR_6(inp_U,inp_W,out_H); input [6:0]inp_U,inp_W; output [6:0]out_H; assign out_H=inp_U ^ inp_W; endmodule
module XOR_6(R,N,X,L); input [6:0]R,N,X; output [6:0]L; assign L=R ^ N ^ X; endmodule
module XOR_7(inp_P,inp_S,out_T); input [7:0]inp_P,inp_S; output [7:0]out_T; assign out_T=inp_P ^ inp_S; endmodule
module XOR_3(N,S,G,F); input [3:0]N,S,G; output [3:0]F; assign F=N ^ S ^ G; endmodule
module XOR_7(inp_Y,inp_Z,out_C); input [7:0]inp_Y,inp_Z; output [7:0]out_C; assign out_C=inp_Y ^ inp_Z
module XOR_5(inp_B,inp_T,out_D); input [5:0]inp_B,inp_T; output [5:0]out_D; assign out_D=inp_B ^ inp_T
module XOR_2(W,N,S,R); input [2:0]W,N,S; output [2:0]R; assign R=W ^ N ^ S
module XOR_3(X,F,E,L); input [3:0]X,F,E; output [3:0]L; assign L=X ^ F ^ E; endmodule
module XOR_2(P,I,F,J); input [2:0]P,I,F; output [2:0]J; assign J=P ^ I ^ F
module XOR_4(inp_T,inp_C,out_N); input [4:0]inp_T,inp_C; output [4:0]out_N; assign out_N=inp_T ^ inp_C
module XOR_3(B,H,P,K); input [3:0]B,H,P; output [3:0]K; assign K=B ^ H ^ P; endmodule
module XOR_3(inp_C,inp_R,inp_P,out_V); input [3:0]inp_C,inp_R,inp_P; output [3:0]out_V; assign out_V=inp_C ^ inp_R ^ inp_P; endmodule
module XOR_7(C,B,F); input [7:0]C,B; output [7:0]F; assign F=C ^ B; endmodule
module XOR_4(inp_U,inp_H,out_V); input [4:0]inp_U,inp_H; output [4:0]out_V; assign out_V=inp_U ^ inp_H
module XOR_7(E,G,K); input [7:0]E,G; output [7:0]K; assign K=E ^ G; endmodule
module XOR_6(inp_M,inp_Y,inp_B,out_H); input [6:0]inp_M,inp_Y,inp_B; output [6:0]out_H; assign out_H=inp_M ^ inp_Y ^ inp_B; endmodule
module XOR_2(inp_A,inp_U,inp_Q,out_C); input [2:0]inp_A,inp_U,inp_Q; output [2:0]out_C; assign out_C=inp_A ^ inp_U ^ inp_Q
module XOR_6(J,Z,U); input [6:0]J,Z; output [6:0]U; assign U=J ^ Z
module XOR_2(R,K,D); input [2:0]R,K; output [2:0]D; assign D=R ^ K
module XOR_4(inp_U,inp_J,inp_M,out_Z); input [4:0]inp_U,inp_J,inp_M; output [4:0]out_Z; assign out_Z=inp_U ^ inp_J ^ inp_M; endmodule
module XOR_3(Z,T,D,H); input [3:0]Z,T,D; output [3:0]H; assign H=Z ^ T ^ D
module XOR_5(S,N,Q,C); input [5:0]S,N,Q; output [5:0]C; assign C=S ^ N ^ Q; endmodule
module XOR_1(inp_N,inp_G,inp_W,out_O); input [1:0]inp_N,inp_G,inp_W; output [1:0]out_O; assign out_O=inp_N ^ inp_G ^ inp_W; endmodule
module XOR_6(L,Q,F); input [6:0]L,Q; output [6:0]F; assign F=L ^ Q
module XOR_1(F,W,C,D); input [1:0]F,W,C; output [1:0]D; assign D=F ^ W ^ C
module XOR_6(J,U,E,M); input [6:0]J,U,E; output [6:0]M; assign M=J ^ U ^ E
module XOR_5(inp_Q,inp_V,out_D); input [5:0]inp_Q,inp_V; output [5:0]out_D; assign out_D=inp_Q ^ inp_V
module XOR_1(inp_J,inp_H,out_H); input [1:0]inp_J,inp_H; output [1:0]out_H; assign out_H=inp_J ^ inp_H; endmodule
module XOR_6(inp_P,inp_Z,out_I); input [6:0]inp_P,inp_Z; output [6:0]out_I; assign out_I=inp_P ^ inp_Z
module XOR_5(B,P,D,Z); input [5:0]B,P,D; output [5:0]Z; assign Z=B ^ P ^ D
module XOR_1(G,R,J,F); input [1:0]G,R,J; output [1:0]F; assign F=G ^ R ^ J; endmodule
module XOR_3(inp_I,inp_P,out_H); input [3:0]inp_I,inp_P; output [3:0]out_H; assign out_H=inp_I ^ inp_P; endmodule
module XOR_2(G,C,I,E); input [2:0]G,C,I; output [2:0]E; assign E=G ^ C ^ I
module XOR_4(inp_P,inp_R,inp_C,out_D); input [4:0]inp_P,inp_R,inp_C; output [4:0]out_D; assign out_D=inp_P ^ inp_R ^ inp_C; endmodule
module XOR_4(inp_G,inp_O,out_F); input [4:0]inp_G,inp_O; output [4:0]out_F; assign out_F=inp_G ^ inp_O
module XOR_6(inp_X,inp_W,out_Y); input [6:0]inp_X,inp_W; output [6:0]out_Y; assign out_Y=inp_X ^ inp_W; endmodule
module XOR_3(inp_B,inp_N,inp_M,out_J); input [3:0]inp_B,inp_N,inp_M; output [3:0]out_J; assign out_J=inp_B ^ inp_N ^ inp_M
module XOR_5(inp_C,inp_L,inp_E,out_O); input [5:0]inp_C,inp_L,inp_E; output [5:0]out_O; assign out_O=inp_C ^ inp_L ^ inp_E
module XOR_7(C,E,U,H); input [7:0]C,E,U; output [7:0]H; assign H=C ^ E ^ U
module XOR_4(inp_P,inp_Z,inp_U,out_X); input [4:0]inp_P,inp_Z,inp_U; output [4:0]out_X; assign out_X=inp_P ^ inp_Z ^ inp_U
module XOR_6(inp_K,inp_F,out_S); input [6:0]inp_K,inp_F; output [6:0]out_S; assign out_S=inp_K ^ inp_F
module XOR_6(inp_X,inp_S,inp_G,out_Z); input [6:0]inp_X,inp_S,inp_G; output [6:0]out_Z; assign out_Z=inp_X ^ inp_S ^ inp_G
module XOR_1(inp_T,inp_Z,out_N); input [1:0]inp_T,inp_Z; output [1:0]out_N; assign out_N=inp_T ^ inp_Z
module XOR_5(T,X,R,Q); input [5:0]T,X,R; output [5:0]Q; assign Q=T ^ X ^ R; endmodule
module XOR_1(S,L,K); input [1:0]S,L; output [1:0]K; assign K=S ^ L
module XOR_1(inp_B,inp_D,out_O); input [1:0]inp_B,inp_D; output [1:0]out_O; assign out_O=inp_B ^ inp_D; endmodule
module XOR_7(Z,H,M); input [7:0]Z,H; output [7:0]M; assign M=Z ^ H
module XOR_1(inp_M,inp_R,inp_F,out_A); input [1:0]inp_M,inp_R,inp_F; output [1:0]out_A; assign out_A=inp_M ^ inp_R ^ inp_F; endmodule
module XOR_7(S,O,B); input [7:0]S,O; output [7:0]B; assign B=S ^ O
module XOR_7(W,G,U,V); input [7:0]W,G,U; output [7:0]V; assign V=W ^ G ^ U; endmodule
module XOR_2(inp_R,inp_T,inp_O,out_L); input [2:0]inp_R,inp_T,inp_O; output [2:0]out_L; assign out_L=inp_R ^ inp_T ^ inp_O
module XOR_3(inp_S,inp_Z,inp_I,out_D); input [3:0]inp_S,inp_Z,inp_I; output [3:0]out_D; assign out_D=inp_S ^ inp_Z ^ inp_I; endmodule
module XOR_5(C,M,R); input [5:0]C,M; output [5:0]R; assign R=C ^ M
module XOR_7(Y,A,C,R); input [7:0]Y,A,C; output [7:0]R; assign R=Y ^ A ^ C
module XOR_6(H,R,C,X); input [6:0]H,R,C; output [6:0]X; assign X=H ^ R ^ C; endmodule
module XOR_2(inp_Z,inp_L,inp_W,out_X); input [2:0]inp_Z,inp_L,inp_W; output [2:0]out_X; assign out_X=inp_Z ^ inp_L ^ inp_W
module XOR_6(inp_S,inp_C,inp_I,out_J); input [6:0]inp_S,inp_C,inp_I; output [6:0]out_J; assign out_J=inp_S ^ inp_C ^ inp_I; endmodule
module XOR_6(inp_C,inp_V,out_C); input [6:0]inp_C,inp_V; output [6:0]out_C; assign out_C=inp_C ^ inp_V; endmodule
module XOR_1(inp_T,inp_M,inp_N,out_D); input [1:0]inp_T,inp_M,inp_N; output [1:0]out_D; assign out_D=inp_T ^ inp_M ^ inp_N
module XOR_1(L,N,F,S); input [1:0]L,N,F; output [1:0]S; assign S=L ^ N ^ F
module XOR_4(inp_L,inp_T,out_P); input [4:0]inp_L,inp_T; output [4:0]out_P; assign out_P=inp_L ^ inp_T
module XOR_2(M,Q,O); input [2:0]M,Q; output [2:0]O; assign O=M ^ Q; endmodule
module XOR_4(inp_W,inp_V,out_I); input [4:0]inp_W,inp_V; output [4:0]out_I; assign out_I=inp_W ^ inp_V; endmodule
module XOR_3(A,N,W); input [3:0]A,N; output [3:0]W; assign W=A ^ N; endmodule
module XOR_2(inp_F,inp_W,out_M); input [2:0]inp_F,inp_W; output [2:0]out_M; assign out_M=inp_F ^ inp_W; endmodule
module XOR_3(M,A,G,X); input [3:0]M,A,G; output [3:0]X; assign X=M ^ A ^ G
module XOR_3(U,C,Q); input [3:0]U,C; output [3:0]Q; assign Q=U ^ C
module XOR_1(X,Q,O,A); input [1:0]X,Q,O; output [1:0]A; assign A=X ^ Q ^ O
module XOR_5(S,E,N); input [5:0]S,E; output [5:0]N; assign N=S ^ E
module XOR_4(inp_R,inp_X,inp_D,out_Q); input [4:0]inp_R,inp_X,inp_D; output [4:0]out_Q; assign out_Q=inp_R ^ inp_X ^ inp_D
module XOR_3(inp_H,inp_W,inp_F,out_D); input [3:0]inp_H,inp_W,inp_F; output [3:0]out_D; assign out_D=inp_H ^ inp_W ^ inp_F; endmodule
module XOR_1(inp_J,inp_N,out_D); input [1:0]inp_J,inp_N; output [1:0]out_D; assign out_D=inp_J ^ inp_N; endmodule
module XOR_7(I,K,O); input [7:0]I,K; output [7:0]O; assign O=I ^ K; endmodule
module XOR_1(inp_E,inp_U,out_D); input [1:0]inp_E,inp_U; output [1:0]out_D; assign out_D=inp_E ^ inp_U
module XOR_2(inp_S,inp_A,out_X); input [2:0]inp_S,inp_A; output [2:0]out_X; assign out_X=inp_S ^ inp_A
module XOR_7(K,D,G,A); input [7:0]K,D,G; output [7:0]A; assign A=K ^ D ^ G; endmodule
module XOR_1(W,Z,K); input [1:0]W,Z; output [1:0]K; assign K=W ^ Z; endmodule
module XOR_6(G,L,Q); input [6:0]G,L; output [6:0]Q; assign Q=G ^ L; endmodule
module XOR_6(B,O,X,U); input [6:0]B,O,X; output [6:0]U; assign U=B ^ O ^ X; endmodule
module XOR_6(inp_E,inp_K,inp_P,out_V); input [6:0]inp_E,inp_K,inp_P; output [6:0]out_V; assign out_V=inp_E ^ inp_K ^ inp_P; endmodule
module XOR_2(inp_U,inp_S,inp_J,out_K); input [2:0]inp_U,inp_S,inp_J; output [2:0]out_K; assign out_K=inp_U ^ inp_S ^ inp_J
module XOR_1(inp_Q,inp_V,out_Z); input [1:0]inp_Q,inp_V; output [1:0]out_Z; assign out_Z=inp_Q ^ inp_V; endmodule
module XOR_6(inp_Z,inp_Q,out_E); input [6:0]inp_Z,inp_Q; output [6:0]out_E; assign out_E=inp_Z ^ inp_Q; endmodule
module XOR_7(I,B,Q); input [7:0]I,B; output [7:0]Q; assign Q=I ^ B
module XOR_4(inp_B,inp_T,inp_N,out_L); input [4:0]inp_B,inp_T,inp_N; output [4:0]out_L; assign out_L=inp_B ^ inp_T ^ inp_N; endmodule
module XOR_2(inp_G,inp_C,out_D); input [2:0]inp_G,inp_C; output [2:0]out_D; assign out_D=inp_G ^ inp_C
module XOR_4(inp_Z,inp_E,out_H); input [4:0]inp_Z,inp_E; output [4:0]out_H; assign out_H=inp_Z ^ inp_E
module XOR_1(U,I,N,A); input [1:0]U,I,N; output [1:0]A; assign A=U ^ I ^ N; endmodule
module XOR_2(B,U,K); input [2:0]B,U; output [2:0]K; assign K=B ^ U
module XOR_7(inp_L,inp_F,out_D); input [7:0]inp_L,inp_F; output [7:0]out_D; assign out_D=inp_L ^ inp_F
module XOR_5(M,Q,B,P); input [5:0]M,Q,B; output [5:0]P; assign P=M ^ Q ^ B
module XOR_5(A,T,E); input [5:0]A,T; output [5:0]E; assign E=A ^ T
module XOR_6(H,T,S); input [6:0]H,T; output [6:0]S; assign S=H ^ T; endmodule
module XOR_5(inp_I,inp_X,out_G); input [5:0]inp_I,inp_X; output [5:0]out_G; assign out_G=inp_I ^ inp_X
module XOR_4(G,V,L); input [4:0]G,V; output [4:0]L; assign L=G ^ V; endmodule
module XOR_5(inp_T,inp_C,out_B); input [5:0]inp_T,inp_C; output [5:0]out_B; assign out_B=inp_T ^ inp_C
module XOR_2(inp_Q,inp_N,inp_P,out_V); input [2:0]inp_Q,inp_N,inp_P; output [2:0]out_V; assign out_V=inp_Q ^ inp_N ^ inp_P
module XOR_3(F,R,I); input [3:0]F,R; output [3:0]I; assign I=F ^ R
module XOR_6(inp_Q,inp_Z,out_N); input [6:0]inp_Q,inp_Z; output [6:0]out_N; assign out_N=inp_Q ^ inp_Z
module XOR_4(P,S,K,W); input [4:0]P,S,K; output [4:0]W; assign W=P ^ S ^ K
module XOR_2(S,C,T,S); input [2:0]S,C,T; output [2:0]S; assign S=S ^ C ^ T; endmodule
module XOR_3(U,Y,U); input [3:0]U,Y; output [3:0]U; assign U=U ^ Y
module XOR_2(C,D,J,M); input [2:0]C,D,J; output [2:0]M; assign M=C ^ D ^ J
module XOR_2(X,D,F,B); input [2:0]X,D,F; output [2:0]B; assign B=X ^ D ^ F; endmodule
module XOR_6(R,L,A,N); input [6:0]R,L,A; output [6:0]N; assign N=R ^ L ^ A
module XOR_7(inp_M,inp_K,inp_I,out_U); input [7:0]inp_M,inp_K,inp_I; output [7:0]out_U; assign out_U=inp_M ^ inp_K ^ inp_I; endmodule
module XOR_5(inp_Q,inp_U,out_W); input [5:0]inp_Q,inp_U; output [5:0]out_W; assign out_W=inp_Q ^ inp_U
module XOR_3(T,J,M,L); input [3:0]T,J,M; output [3:0]L; assign L=T ^ J ^ M; endmodule
module XOR_3(inp_Z,inp_Y,out_M); input [3:0]inp_Z,inp_Y; output [3:0]out_M; assign out_M=inp_Z ^ inp_Y
module XOR_4(inp_C,inp_W,out_Z); input [4:0]inp_C,inp_W; output [4:0]out_Z; assign out_Z=inp_C ^ inp_W
module XOR_2(inp_F,inp_Z,out_S); input [2:0]inp_F,inp_Z; output [2:0]out_S; assign out_S=inp_F ^ inp_Z; endmodule
module XOR_2(Q,H,E); input [2:0]Q,H; output [2:0]E; assign E=Q ^ H
module XOR_7(O,L,G,P); input [7:0]O,L,G; output [7:0]P; assign P=O ^ L ^ G; endmodule
module XOR_2(inp_P,inp_O,out_B); input [2:0]inp_P,inp_O; output [2:0]out_B; assign out_B=inp_P ^ inp_O
module XOR_1(M,J,B,G); input [1:0]M,J,B; output [1:0]G; assign G=M ^ J ^ B
module XOR_6(inp_K,inp_V,inp_Q,out_A); input [6:0]inp_K,inp_V,inp_Q; output [6:0]out_A; assign out_A=inp_K ^ inp_V ^ inp_Q
module XOR_3(B,H,D,W); input [3:0]B,H,D; output [3:0]W; assign W=B ^ H ^ D
module XOR_5(inp_N,inp_L,inp_E,out_S); input [5:0]inp_N,inp_L,inp_E; output [5:0]out_S; assign out_S=inp_N ^ inp_L ^ inp_E; endmodule
module XOR_3(inp_V,inp_S,inp_Q,out_A); input [3:0]inp_V,inp_S,inp_Q; output [3:0]out_A; assign out_A=inp_V ^ inp_S ^ inp_Q
module XOR_6(inp_L,inp_Q,inp_R,out_O); input [6:0]inp_L,inp_Q,inp_R; output [6:0]out_O; assign out_O=inp_L ^ inp_Q ^ inp_R
module XOR_3(V,W,Z); input [3:0]V,W; output [3:0]Z; assign Z=V ^ W
module XOR_3(A,H,U,A); input [3:0]A,H,U; output [3:0]A; assign A=A ^ H ^ U
module XOR_2(V,I,J,U); input [2:0]V,I,J; output [2:0]U; assign U=V ^ I ^ J
module XOR_6(I,C,Z,R); input [6:0]I,C,Z; output [6:0]R; assign R=I ^ C ^ Z
module XOR_4(inp_F,inp_R,inp_J,out_E); input [4:0]inp_F,inp_R,inp_J; output [4:0]out_E; assign out_E=inp_F ^ inp_R ^ inp_J
module XOR_4(Q,R,P,B); input [4:0]Q,R,P; output [4:0]B; assign B=Q ^ R ^ P
module XOR_6(W,Z,D); input [6:0]W,Z; output [6:0]D; assign D=W ^ Z
module XOR_3(J,F,O); input [3:0]J,F; output [3:0]O; assign O=J ^ F
module XOR_6(inp_B,inp_O,out_I); input [6:0]inp_B,inp_O; output [6:0]out_I; assign out_I=inp_B ^ inp_O
module XOR_4(L,D,A,S); input [4:0]L,D,A; output [4:0]S; assign S=L ^ D ^ A
module XOR_1(L,E,C); input [1:0]L,E; output [1:0]C; assign C=L ^ E
module XOR_2(W,H,D,G); input [2:0]W,H,D; output [2:0]G; assign G=W ^ H ^ D
module XOR_1(inp_A,inp_U,out_X); input [1:0]inp_A,inp_U; output [1:0]out_X; assign out_X=inp_A ^ inp_U
module XOR_3(inp_F,inp_M,out_T); input [3:0]inp_F,inp_M; output [3:0]out_T; assign out_T=inp_F ^ inp_M
module XOR_5(S,W,V); input [5:0]S,W; output [5:0]V; assign V=S ^ W
module XOR_4(B,G,X,F); input [4:0]B,G,X; output [4:0]F; assign F=B ^ G ^ X; endmodule
module XOR_1(inp_D,inp_U,inp_H,out_T); input [1:0]inp_D,inp_U,inp_H; output [1:0]out_T; assign out_T=inp_D ^ inp_U ^ inp_H; endmodule
module XOR_3(H,M,T,W); input [3:0]H,M,T; output [3:0]W; assign W=H ^ M ^ T; endmodule
module XOR_3(inp_E,inp_F,out_U); input [3:0]inp_E,inp_F; output [3:0]out_U; assign out_U=inp_E ^ inp_F; endmodule
module XOR_4(I,D,T); input [4:0]I,D; output [4:0]T; assign T=I ^ D
module XOR_7(inp_S,inp_X,out_Y); input [7:0]inp_S,inp_X; output [7:0]out_Y; assign out_Y=inp_S ^ inp_X; endmodule
module XOR_2(W,L,S); input [2:0]W,L; output [2:0]S; assign S=W ^ L; endmodule
module XOR_3(Q,S,L,A); input [3:0]Q,S,L; output [3:0]A; assign A=Q ^ S ^ L
module XOR_2(A,M,Y,Z); input [2:0]A,M,Y; output [2:0]Z; assign Z=A ^ M ^ Y; endmodule
module XOR_7(A,I,V,R); input [7:0]A,I,V; output [7:0]R; assign R=A ^ I ^ V; endmodule
module XOR_6(inp_F,inp_S,out_C); input [6:0]inp_F,inp_S; output [6:0]out_C; assign out_C=inp_F ^ inp_S; endmodule
module XOR_6(inp_W,inp_L,inp_J,out_Z); input [6:0]inp_W,inp_L,inp_J; output [6:0]out_Z; assign out_Z=inp_W ^ inp_L ^ inp_J; endmodule
module XOR_6(P,Z,L,Y); input [6:0]P,Z,L; output [6:0]Y; assign Y=P ^ Z ^ L
module XOR_5(inp_G,inp_V,inp_J,out_L); input [5:0]inp_G,inp_V,inp_J; output [5:0]out_L; assign out_L=inp_G ^ inp_V ^ inp_J; endmodule
module XOR_5(inp_O,inp_F,inp_H,out_N); input [5:0]inp_O,inp_F,inp_H; output [5:0]out_N; assign out_N=inp_O ^ inp_F ^ inp_H
module XOR_6(inp_D,inp_E,out_U); input [6:0]inp_D,inp_E; output [6:0]out_U; assign out_U=inp_D ^ inp_E
module XOR_2(inp_P,inp_L,inp_X,out_H); input [2:0]inp_P,inp_L,inp_X; output [2:0]out_H; assign out_H=inp_P ^ inp_L ^ inp_X
module XOR_1(inp_K,inp_N,out_Q); input [1:0]inp_K,inp_N; output [1:0]out_Q; assign out_Q=inp_K ^ inp_N
module XOR_3(N,G,T,V); input [3:0]N,G,T; output [3:0]V; assign V=N ^ G ^ T
module XOR_1(L,M,X,P); input [1:0]L,M,X; output [1:0]P; assign P=L ^ M ^ X
module XOR_2(V,D,E,C); input [2:0]V,D,E; output [2:0]C; assign C=V ^ D ^ E
module XOR_1(Y,R,I); input [1:0]Y,R; output [1:0]I; assign I=Y ^ R
module XOR_7(U,W,B,Y); input [7:0]U,W,B; output [7:0]Y; assign Y=U ^ W ^ B
module XOR_5(Y,S,X,M); input [5:0]Y,S,X; output [5:0]M; assign M=Y ^ S ^ X; endmodule
module XOR_4(inp_A,inp_F,inp_M,out_A); input [4:0]inp_A,inp_F,inp_M; output [4:0]out_A; assign out_A=inp_A ^ inp_F ^ inp_M; endmodule
module XOR_2(inp_K,inp_D,out_N); input [2:0]inp_K,inp_D; output [2:0]out_N; assign out_N=inp_K ^ inp_D; endmodule
module XOR_2(inp_Z,inp_Y,out_U); input [2:0]inp_Z,inp_Y; output [2:0]out_U; assign out_U=inp_Z ^ inp_Y
module XOR_5(inp_V,inp_J,out_G); input [5:0]inp_V,inp_J; output [5:0]out_G; assign out_G=inp_V ^ inp_J; endmodule
module XOR_5(inp_Z,inp_W,out_J); input [5:0]inp_Z,inp_W; output [5:0]out_J; assign out_J=inp_Z ^ inp_W; endmodule
module XOR_2(inp_J,inp_Y,out_H); input [2:0]inp_J,inp_Y; output [2:0]out_H; assign out_H=inp_J ^ inp_Y
module XOR_6(inp_D,inp_A,inp_J,out_B); input [6:0]inp_D,inp_A,inp_J; output [6:0]out_B; assign out_B=inp_D ^ inp_A ^ inp_J
module XOR_7(F,D,C,U); input [7:0]F,D,C; output [7:0]U; assign U=F ^ D ^ C
module XOR_6(inp_E,inp_N,out_C); input [6:0]inp_E,inp_N; output [6:0]out_C; assign out_C=inp_E ^ inp_N; endmodule
module XOR_3(inp_W,inp_Z,inp_E,out_S); input [3:0]inp_W,inp_Z,inp_E; output [3:0]out_S; assign out_S=inp_W ^ inp_Z ^ inp_E; endmodule
module XOR_6(inp_B,inp_U,out_T); input [6:0]inp_B,inp_U; output [6:0]out_T; assign out_T=inp_B ^ inp_U
module XOR_5(Y,W,S); input [5:0]Y,W; output [5:0]S; assign S=Y ^ W; endmodule
module XOR_7(O,F,K); input [7:0]O,F; output [7:0]K; assign K=O ^ F
module XOR_7(inp_R,inp_V,inp_N,out_P); input [7:0]inp_R,inp_V,inp_N; output [7:0]out_P; assign out_P=inp_R ^ inp_V ^ inp_N; endmodule
module XOR_3(inp_E,inp_F,out_J); input [3:0]inp_E,inp_F; output [3:0]out_J; assign out_J=inp_E ^ inp_F
module XOR_6(C,S,T,S); input [6:0]C,S,T; output [6:0]S; assign S=C ^ S ^ T
module XOR_7(R,N,J); input [7:0]R,N; output [7:0]J; assign J=R ^ N
module XOR_1(inp_M,inp_B,inp_D,out_Q); input [1:0]inp_M,inp_B,inp_D; output [1:0]out_Q; assign out_Q=inp_M ^ inp_B ^ inp_D; endmodule
module XOR_4(I,W,L); input [4:0]I,W; output [4:0]L; assign L=I ^ W; endmodule
module XOR_1(M,R,D,H); input [1:0]M,R,D; output [1:0]H; assign H=M ^ R ^ D; endmodule
module XOR_5(N,E,Y,L); input [5:0]N,E,Y; output [5:0]L; assign L=N ^ E ^ Y; endmodule
module XOR_5(inp_O,inp_T,out_O); input [5:0]inp_O,inp_T; output [5:0]out_O; assign out_O=inp_O ^ inp_T
module XOR_4(W,Q,Y,A); input [4:0]W,Q,Y; output [4:0]A; assign A=W ^ Q ^ Y
module XOR_7(A,O,D,H); input [7:0]A,O,D; output [7:0]H; assign H=A ^ O ^ D
module XOR_7(inp_C,inp_S,out_Y); input [7:0]inp_C,inp_S; output [7:0]out_Y; assign out_Y=inp_C ^ inp_S
module XOR_6(inp_F,inp_R,inp_J,out_T); input [6:0]inp_F,inp_R,inp_J; output [6:0]out_T; assign out_T=inp_F ^ inp_R ^ inp_J; endmodule
module XOR_6(inp_X,inp_N,inp_Z,out_O); input [6:0]inp_X,inp_N,inp_Z; output [6:0]out_O; assign out_O=inp_X ^ inp_N ^ inp_Z; endmodule
module XOR_3(inp_U,inp_R,out_F); input [3:0]inp_U,inp_R; output [3:0]out_F; assign out_F=inp_U ^ inp_R
module XOR_5(inp_C,inp_H,out_S); input [5:0]inp_C,inp_H; output [5:0]out_S; assign out_S=inp_C ^ inp_H
module XOR_1(inp_P,inp_N,inp_M,out_R); input [1:0]inp_P,inp_N,inp_M; output [1:0]out_R; assign out_R=inp_P ^ inp_N ^ inp_M; endmodule
module XOR_1(inp_S,inp_I,out_L); input [1:0]inp_S,inp_I; output [1:0]out_L; assign out_L=inp_S ^ inp_I; endmodule
module XOR_7(Y,E,C); input [7:0]Y,E; output [7:0]C; assign C=Y ^ E; endmodule
module XOR_6(G,M,W,X); input [6:0]G,M,W; output [6:0]X; assign X=G ^ M ^ W
module XOR_2(U,P,S); input [2:0]U,P; output [2:0]S; assign S=U ^ P; endmodule
module XOR_3(inp_F,inp_I,inp_O,out_P); input [3:0]inp_F,inp_I,inp_O; output [3:0]out_P; assign out_P=inp_F ^ inp_I ^ inp_O; endmodule
module XOR_6(O,Q,H,T); input [6:0]O,Q,H; output [6:0]T; assign T=O ^ Q ^ H
module XOR_1(S,G,Z,B); input [1:0]S,G,Z; output [1:0]B; assign B=S ^ G ^ Z
module XOR_6(Z,P,N,M); input [6:0]Z,P,N; output [6:0]M; assign M=Z ^ P ^ N; endmodule
module XOR_5(M,E,J,H); input [5:0]M,E,J; output [5:0]H; assign H=M ^ E ^ J
module XOR_6(inp_P,inp_G,out_K); input [6:0]inp_P,inp_G; output [6:0]out_K; assign out_K=inp_P ^ inp_G
module XOR_2(S,V,M); input [2:0]S,V; output [2:0]M; assign M=S ^ V
module XOR_5(inp_G,inp_X,out_O); input [5:0]inp_G,inp_X; output [5:0]out_O; assign out_O=inp_G ^ inp_X
module XOR_2(W,J,U,C); input [2:0]W,J,U; output [2:0]C; assign C=W ^ J ^ U; endmodule
module XOR_2(inp_W,inp_H,out_T); input [2:0]inp_W,inp_H; output [2:0]out_T; assign out_T=inp_W ^ inp_H; endmodule
module XOR_7(N,Y,A,T); input [7:0]N,Y,A; output [7:0]T; assign T=N ^ Y ^ A; endmodule
module XOR_2(M,B,V); input [2:0]M,B; output [2:0]V; assign V=M ^ B
module XOR_4(T,Q,H); input [4:0]T,Q; output [4:0]H; assign H=T ^ Q
module XOR_1(inp_K,inp_V,inp_T,out_L); input [1:0]inp_K,inp_V,inp_T; output [1:0]out_L; assign out_L=inp_K ^ inp_V ^ inp_T; endmodule
module XOR_3(S,Y,J,F); input [3:0]S,Y,J; output [3:0]F; assign F=S ^ Y ^ J
module XOR_4(X,I,F); input [4:0]X,I; output [4:0]F; assign F=X ^ I
module XOR_2(inp_Q,inp_N,out_F); input [2:0]inp_Q,inp_N; output [2:0]out_F; assign out_F=inp_Q ^ inp_N; endmodule
module XOR_2(inp_F,inp_S,inp_R,out_F); input [2:0]inp_F,inp_S,inp_R; output [2:0]out_F; assign out_F=inp_F ^ inp_S ^ inp_R; endmodule
module XOR_6(U,T,K); input [6:0]U,T; output [6:0]K; assign K=U ^ T
module XOR_3(A,I,H); input [3:0]A,I; output [3:0]H; assign H=A ^ I
module XOR_3(V,J,A,H); input [3:0]V,J,A; output [3:0]H; assign H=V ^ J ^ A; endmodule
module XOR_4(W,U,O,Q); input [4:0]W,U,O; output [4:0]Q; assign Q=W ^ U ^ O; endmodule
module XOR_3(inp_Q,inp_F,out_U); input [3:0]inp_Q,inp_F; output [3:0]out_U; assign out_U=inp_Q ^ inp_F
module XOR_6(B,L,N,Q); input [6:0]B,L,N; output [6:0]Q; assign Q=B ^ L ^ N
module XOR_1(D,N,J,U); input [1:0]D,N,J; output [1:0]U; assign U=D ^ N ^ J; endmodule
module XOR_3(C,G,B,D); input [3:0]C,G,B; output [3:0]D; assign D=C ^ G ^ B; endmodule
module XOR_6(inp_A,inp_P,out_V); input [6:0]inp_A,inp_P; output [6:0]out_V; assign out_V=inp_A ^ inp_P
module XOR_6(inp_N,inp_Y,out_G); input [6:0]inp_N,inp_Y; output [6:0]out_G; assign out_G=inp_N ^ inp_Y; endmodule
module XOR_5(N,Y,S); input [5:0]N,Y; output [5:0]S; assign S=N ^ Y; endmodule
module XOR_5(D,E,Z); input [5:0]D,E; output [5:0]Z; assign Z=D ^ E; endmodule
module XOR_2(J,W,I); input [2:0]J,W; output [2:0]I; assign I=J ^ W; endmodule
module XOR_6(F,S,W); input [6:0]F,S; output [6:0]W; assign W=F ^ S
module XOR_1(inp_P,inp_N,out_F); input [1:0]inp_P,inp_N; output [1:0]out_F; assign out_F=inp_P ^ inp_N; endmodule
module XOR_4(N,C,S); input [4:0]N,C; output [4:0]S; assign S=N ^ C; endmodule
module XOR_6(O,X,F); input [6:0]O,X; output [6:0]F; assign F=O ^ X
module XOR_1(I,X,Q); input [1:0]I,X; output [1:0]Q; assign Q=I ^ X; endmodule
module XOR_5(inp_T,inp_X,inp_G,out_H); input [5:0]inp_T,inp_X,inp_G; output [5:0]out_H; assign out_H=inp_T ^ inp_X ^ inp_G; endmodule
module XOR_1(inp_K,inp_M,out_B); input [1:0]inp_K,inp_M; output [1:0]out_B; assign out_B=inp_K ^ inp_M
module XOR_4(inp_B,inp_D,out_L); input [4:0]inp_B,inp_D; output [4:0]out_L; assign out_L=inp_B ^ inp_D
module XOR_1(E,L,K); input [1:0]E,L; output [1:0]K; assign K=E ^ L; endmodule
module XOR_7(A,I,E); input [7:0]A,I; output [7:0]E; assign E=A ^ I
module XOR_7(T,K,V,W); input [7:0]T,K,V; output [7:0]W; assign W=T ^ K ^ V
module XOR_5(C,O,T); input [5:0]C,O; output [5:0]T; assign T=C ^ O; endmodule
module XOR_7(inp_V,inp_W,inp_A,out_J); input [7:0]inp_V,inp_W,inp_A; output [7:0]out_J; assign out_J=inp_V ^ inp_W ^ inp_A
module XOR_5(Q,V,X,Z); input [5:0]Q,V,X; output [5:0]Z; assign Z=Q ^ V ^ X; endmodule
module XOR_3(inp_Y,inp_V,out_V); input [3:0]inp_Y,inp_V; output [3:0]out_V; assign out_V=inp_Y ^ inp_V; endmodule
module XOR_4(V,Z,P); input [4:0]V,Z; output [4:0]P; assign P=V ^ Z; endmodule
module XOR_6(B,I,U); input [6:0]B,I; output [6:0]U; assign U=B ^ I; endmodule
module XOR_5(inp_R,inp_W,inp_F,out_T); input [5:0]inp_R,inp_W,inp_F; output [5:0]out_T; assign out_T=inp_R ^ inp_W ^ inp_F; endmodule
module XOR_2(inp_E,inp_V,out_Z); input [2:0]inp_E,inp_V; output [2:0]out_Z; assign out_Z=inp_E ^ inp_V
module XOR_5(inp_I,inp_V,inp_J,out_Z); input [5:0]inp_I,inp_V,inp_J; output [5:0]out_Z; assign out_Z=inp_I ^ inp_V ^ inp_J; endmodule
module XOR_5(inp_J,inp_D,out_N); input [5:0]inp_J,inp_D; output [5:0]out_N; assign out_N=inp_J ^ inp_D
module XOR_2(inp_Y,inp_V,out_C); input [2:0]inp_Y,inp_V; output [2:0]out_C; assign out_C=inp_Y ^ inp_V; endmodule
module XOR_2(X,K,T); input [2:0]X,K; output [2:0]T; assign T=X ^ K
module XOR_3(inp_X,inp_R,out_W); input [3:0]inp_X,inp_R; output [3:0]out_W; assign out_W=inp_X ^ inp_R; endmodule
module XOR_2(K,F,N); input [2:0]K,F; output [2:0]N; assign N=K ^ F; endmodule
module XOR_1(inp_V,inp_L,out_O); input [1:0]inp_V,inp_L; output [1:0]out_O; assign out_O=inp_V ^ inp_L
module XOR_4(C,Y,H); input [4:0]C,Y; output [4:0]H; assign H=C ^ Y
module XOR_6(U,F,Z); input [6:0]U,F; output [6:0]Z; assign Z=U ^ F; endmodule
module XOR_4(inp_W,inp_G,inp_C,out_B); input [4:0]inp_W,inp_G,inp_C; output [4:0]out_B; assign out_B=inp_W ^ inp_G ^ inp_C; endmodule
module XOR_5(O,Q,K,C); input [5:0]O,Q,K; output [5:0]C; assign C=O ^ Q ^ K; endmodule
module XOR_3(inp_S,inp_R,out_E); input [3:0]inp_S,inp_R; output [3:0]out_E; assign out_E=inp_S ^ inp_R
module XOR_2(inp_Y,inp_B,inp_U,out_N); input [2:0]inp_Y,inp_B,inp_U; output [2:0]out_N; assign out_N=inp_Y ^ inp_B ^ inp_U
module XOR_3(C,D,Z); input [3:0]C,D; output [3:0]Z; assign Z=C ^ D
module XOR_3(X,O,T,C); input [3:0]X,O,T; output [3:0]C; assign C=X ^ O ^ T
module XOR_3(O,P,K,Q); input [3:0]O,P,K; output [3:0]Q; assign Q=O ^ P ^ K; endmodule
module XOR_7(inp_Z,inp_Y,inp_G,out_X); input [7:0]inp_Z,inp_Y,inp_G; output [7:0]out_X; assign out_X=inp_Z ^ inp_Y ^ inp_G; endmodule
module XOR_6(inp_H,inp_Z,out_M); input [6:0]inp_H,inp_Z; output [6:0]out_M; assign out_M=inp_H ^ inp_Z
module XOR_3(P,Y,F); input [3:0]P,Y; output [3:0]F; assign F=P ^ Y; endmodule
module XOR_5(inp_Q,inp_Y,inp_A,out_Q); input [5:0]inp_Q,inp_Y,inp_A; output [5:0]out_Q; assign out_Q=inp_Q ^ inp_Y ^ inp_A
module XOR_3(F,K,I); input [3:0]F,K; output [3:0]I; assign I=F ^ K; endmodule
module XOR_1(inp_V,inp_J,out_K); input [1:0]inp_V,inp_J; output [1:0]out_K; assign out_K=inp_V ^ inp_J; endmodule
module XOR_4(inp_N,inp_S,out_E); input [4:0]inp_N,inp_S; output [4:0]out_E; assign out_E=inp_N ^ inp_S
module XOR_1(B,Z,R,C); input [1:0]B,Z,R; output [1:0]C; assign C=B ^ Z ^ R; endmodule
module XOR_1(I,D,M,C); input [1:0]I,D,M; output [1:0]C; assign C=I ^ D ^ M
module XOR_3(J,U,F,L); input [3:0]J,U,F; output [3:0]L; assign L=J ^ U ^ F; endmodule
module XOR_3(P,I,U,A); input [3:0]P,I,U; output [3:0]A; assign A=P ^ I ^ U
module XOR_6(M,R,N); input [6:0]M,R; output [6:0]N; assign N=M ^ R; endmodule
module XOR_7(N,B,Q); input [7:0]N,B; output [7:0]Q; assign Q=N ^ B; endmodule
module XOR_6(Z,E,U,J); input [6:0]Z,E,U; output [6:0]J; assign J=Z ^ E ^ U; endmodule
module XOR_5(inp_D,inp_U,out_T); input [5:0]inp_D,inp_U; output [5:0]out_T; assign out_T=inp_D ^ inp_U; endmodule
module XOR_1(inp_F,inp_W,inp_P,out_W); input [1:0]inp_F,inp_W,inp_P; output [1:0]out_W; assign out_W=inp_F ^ inp_W ^ inp_P
module XOR_5(inp_Z,inp_W,out_F); input [5:0]inp_Z,inp_W; output [5:0]out_F; assign out_F=inp_Z ^ inp_W
module XOR_7(P,N,E,T); input [7:0]P,N,E; output [7:0]T; assign T=P ^ N ^ E
module XOR_2(inp_I,inp_L,out_P); input [2:0]inp_I,inp_L; output [2:0]out_P; assign out_P=inp_I ^ inp_L
module XOR_6(inp_C,inp_L,inp_B,out_T); input [6:0]inp_C,inp_L,inp_B; output [6:0]out_T; assign out_T=inp_C ^ inp_L ^ inp_B; endmodule
module XOR_1(P,D,X,A); input [1:0]P,D,X; output [1:0]A; assign A=P ^ D ^ X; endmodule
module XOR_6(inp_G,inp_Q,out_Q); input [6:0]inp_G,inp_Q; output [6:0]out_Q; assign out_Q=inp_G ^ inp_Q
module XOR_6(inp_X,inp_B,inp_Q,out_S); input [6:0]inp_X,inp_B,inp_Q; output [6:0]out_S; assign out_S=inp_X ^ inp_B ^ inp_Q; endmodule
module XOR_2(inp_K,inp_L,inp_E,out_Q); input [2:0]inp_K,inp_L,inp_E; output [2:0]out_Q; assign out_Q=inp_K ^ inp_L ^ inp_E; endmodule
module XOR_6(inp_H,inp_X,out_W); input [6:0]inp_H,inp_X; output [6:0]out_W; assign out_W=inp_H ^ inp_X
module XOR_2(inp_Z,inp_C,inp_A,out_W); input [2:0]inp_Z,inp_C,inp_A; output [2:0]out_W; assign out_W=inp_Z ^ inp_C ^ inp_A
module XOR_4(X,D,S,U); input [4:0]X,D,S; output [4:0]U; assign U=X ^ D ^ S; endmodule
module XOR_1(inp_X,inp_L,inp_D,out_I); input [1:0]inp_X,inp_L,inp_D; output [1:0]out_I; assign out_I=inp_X ^ inp_L ^ inp_D; endmodule
module XOR_1(inp_E,inp_B,inp_H,out_Y); input [1:0]inp_E,inp_B,inp_H; output [1:0]out_Y; assign out_Y=inp_E ^ inp_B ^ inp_H
module XOR_5(inp_L,inp_I,out_R); input [5:0]inp_L,inp_I; output [5:0]out_R; assign out_R=inp_L ^ inp_I
module XOR_5(N,K,C); input [5:0]N,K; output [5:0]C; assign C=N ^ K
module XOR_2(inp_N,inp_B,out_R); input [2:0]inp_N,inp_B; output [2:0]out_R; assign out_R=inp_N ^ inp_B
module XOR_2(Z,S,H,V); input [2:0]Z,S,H; output [2:0]V; assign V=Z ^ S ^ H; endmodule
module XOR_1(inp_X,inp_V,out_Y); input [1:0]inp_X,inp_V; output [1:0]out_Y; assign out_Y=inp_X ^ inp_V
module XOR_5(P,L,E); input [5:0]P,L; output [5:0]E; assign E=P ^ L; endmodule
module XOR_3(inp_O,inp_J,inp_D,out_P); input [3:0]inp_O,inp_J,inp_D; output [3:0]out_P; assign out_P=inp_O ^ inp_J ^ inp_D; endmodule
module XOR_7(N,T,B); input [7:0]N,T; output [7:0]B; assign B=N ^ T; endmodule
module XOR_6(D,K,T,P); input [6:0]D,K,T; output [6:0]P; assign P=D ^ K ^ T; endmodule
module XOR_2(C,O,B); input [2:0]C,O; output [2:0]B; assign B=C ^ O; endmodule
module XOR_1(H,R,Y,I); input [1:0]H,R,Y; output [1:0]I; assign I=H ^ R ^ Y; endmodule
module XOR_6(K,D,J,W); input [6:0]K,D,J; output [6:0]W; assign W=K ^ D ^ J
module XOR_4(inp_I,inp_G,out_G); input [4:0]inp_I,inp_G; output [4:0]out_G; assign out_G=inp_I ^ inp_G
module XOR_5(inp_X,inp_J,out_J); input [5:0]inp_X,inp_J; output [5:0]out_J; assign out_J=inp_X ^ inp_J; endmodule
module XOR_2(inp_K,inp_Y,inp_N,out_S); input [2:0]inp_K,inp_Y,inp_N; output [2:0]out_S; assign out_S=inp_K ^ inp_Y ^ inp_N
module XOR_3(P,L,E,K); input [3:0]P,L,E; output [3:0]K; assign K=P ^ L ^ E
module XOR_4(B,D,N); input [4:0]B,D; output [4:0]N; assign N=B ^ D; endmodule
module XOR_7(Z,Q,K,G); input [7:0]Z,Q,K; output [7:0]G; assign G=Z ^ Q ^ K; endmodule
module XOR_4(inp_W,inp_I,out_K); input [4:0]inp_W,inp_I; output [4:0]out_K; assign out_K=inp_W ^ inp_I
module XOR_2(inp_M,inp_T,out_V); input [2:0]inp_M,inp_T; output [2:0]out_V; assign out_V=inp_M ^ inp_T
module XOR_7(inp_D,inp_V,inp_N,out_Y); input [7:0]inp_D,inp_V,inp_N; output [7:0]out_Y; assign out_Y=inp_D ^ inp_V ^ inp_N
module XOR_3(inp_M,inp_I,inp_H,out_M); input [3:0]inp_M,inp_I,inp_H; output [3:0]out_M; assign out_M=inp_M ^ inp_I ^ inp_H; endmodule
module XOR_3(inp_C,inp_H,inp_J,out_O); input [3:0]inp_C,inp_H,inp_J; output [3:0]out_O; assign out_O=inp_C ^ inp_H ^ inp_J
module XOR_1(inp_O,inp_R,inp_T,out_L); input [1:0]inp_O,inp_R,inp_T; output [1:0]out_L; assign out_L=inp_O ^ inp_R ^ inp_T
module XOR_4(inp_S,inp_Q,inp_A,out_J); input [4:0]inp_S,inp_Q,inp_A; output [4:0]out_J; assign out_J=inp_S ^ inp_Q ^ inp_A
module XOR_5(inp_J,inp_Y,out_X); input [5:0]inp_J,inp_Y; output [5:0]out_X; assign out_X=inp_J ^ inp_Y
module XOR_6(inp_P,inp_E,inp_U,out_L); input [6:0]inp_P,inp_E,inp_U; output [6:0]out_L; assign out_L=inp_P ^ inp_E ^ inp_U; endmodule
module XOR_6(F,U,A); input [6:0]F,U; output [6:0]A; assign A=F ^ U; endmodule
module XOR_6(inp_I,inp_H,out_Z); input [6:0]inp_I,inp_H; output [6:0]out_Z; assign out_Z=inp_I ^ inp_H; endmodule
module XOR_6(E,M,Q); input [6:0]E,M; output [6:0]Q; assign Q=E ^ M; endmodule
module XOR_3(inp_C,inp_D,out_L); input [3:0]inp_C,inp_D; output [3:0]out_L; assign out_L=inp_C ^ inp_D; endmodule
module XOR_4(inp_S,inp_C,inp_O,out_M); input [4:0]inp_S,inp_C,inp_O; output [4:0]out_M; assign out_M=inp_S ^ inp_C ^ inp_O
module XOR_3(C,Q,E); input [3:0]C,Q; output [3:0]E; assign E=C ^ Q; endmodule
module XOR_5(Y,A,V); input [5:0]Y,A; output [5:0]V; assign V=Y ^ A; endmodule
module XOR_2(inp_A,inp_P,out_S); input [2:0]inp_A,inp_P; output [2:0]out_S; assign out_S=inp_A ^ inp_P
module XOR_1(T,A,Z); input [1:0]T,A; output [1:0]Z; assign Z=T ^ A
module XOR_2(inp_G,inp_Q,out_A); input [2:0]inp_G,inp_Q; output [2:0]out_A; assign out_A=inp_G ^ inp_Q
module XOR_3(E,X,I,Y); input [3:0]E,X,I; output [3:0]Y; assign Y=E ^ X ^ I; endmodule
module XOR_5(K,O,J,L); input [5:0]K,O,J; output [5:0]L; assign L=K ^ O ^ J
module XOR_1(K,Y,M); input [1:0]K,Y; output [1:0]M; assign M=K ^ Y; endmodule
module XOR_4(inp_E,inp_J,out_W); input [4:0]inp_E,inp_J; output [4:0]out_W; assign out_W=inp_E ^ inp_J
module XOR_5(inp_B,inp_M,inp_X,out_X); input [5:0]inp_B,inp_M,inp_X; output [5:0]out_X; assign out_X=inp_B ^ inp_M ^ inp_X; endmodule
module XOR_3(inp_Q,inp_Y,inp_Q,out_V); input [3:0]inp_Q,inp_Y,inp_Q; output [3:0]out_V; assign out_V=inp_Q ^ inp_Y ^ inp_Q
module XOR_4(G,O,F); input [4:0]G,O; output [4:0]F; assign F=G ^ O; endmodule
module XOR_5(inp_Q,inp_E,inp_C,out_M); input [5:0]inp_Q,inp_E,inp_C; output [5:0]out_M; assign out_M=inp_Q ^ inp_E ^ inp_C
module XOR_3(A,V,C,X); input [3:0]A,V,C; output [3:0]X; assign X=A ^ V ^ C
module XOR_5(T,L,P,U); input [5:0]T,L,P; output [5:0]U; assign U=T ^ L ^ P
module XOR_3(I,L,G); input [3:0]I,L; output [3:0]G; assign G=I ^ L
module XOR_7(inp_R,inp_P,inp_V,out_B); input [7:0]inp_R,inp_P,inp_V; output [7:0]out_B; assign out_B=inp_R ^ inp_P ^ inp_V
module XOR_7(inp_R,inp_K,out_K); input [7:0]inp_R,inp_K; output [7:0]out_K; assign out_K=inp_R ^ inp_K
module XOR_6(inp_V,inp_C,inp_F,out_G); input [6:0]inp_V,inp_C,inp_F; output [6:0]out_G; assign out_G=inp_V ^ inp_C ^ inp_F
module XOR_7(inp_E,inp_O,out_K); input [7:0]inp_E,inp_O; output [7:0]out_K; assign out_K=inp_E ^ inp_O
module XOR_5(inp_T,inp_W,inp_E,out_I); input [5:0]inp_T,inp_W,inp_E; output [5:0]out_I; assign out_I=inp_T ^ inp_W ^ inp_E
module XOR_4(inp_L,inp_E,out_V); input [4:0]inp_L,inp_E; output [4:0]out_V; assign out_V=inp_L ^ inp_E; endmodule
module XOR_7(E,S,H,C); input [7:0]E,S,H; output [7:0]C; assign C=E ^ S ^ H; endmodule
module XOR_2(inp_E,inp_P,inp_Z,out_Y); input [2:0]inp_E,inp_P,inp_Z; output [2:0]out_Y; assign out_Y=inp_E ^ inp_P ^ inp_Z; endmodule
module XOR_6(Y,M,R); input [6:0]Y,M; output [6:0]R; assign R=Y ^ M
module XOR_7(D,V,U,Q); input [7:0]D,V,U; output [7:0]Q; assign Q=D ^ V ^ U
module XOR_1(X,I,V,W); input [1:0]X,I,V; output [1:0]W; assign W=X ^ I ^ V
module XOR_7(inp_L,inp_K,inp_P,out_N); input [7:0]inp_L,inp_K,inp_P; output [7:0]out_N; assign out_N=inp_L ^ inp_K ^ inp_P; endmodule
module XOR_3(inp_W,inp_C,inp_E,out_E); input [3:0]inp_W,inp_C,inp_E; output [3:0]out_E; assign out_E=inp_W ^ inp_C ^ inp_E; endmodule
module XOR_2(inp_X,inp_D,out_X); input [2:0]inp_X,inp_D; output [2:0]out_X; assign out_X=inp_X ^ inp_D; endmodule
module XOR_3(L,C,W,K); input [3:0]L,C,W; output [3:0]K; assign K=L ^ C ^ W
module XOR_3(E,I,P); input [3:0]E,I; output [3:0]P; assign P=E ^ I
module XOR_1(inp_X,inp_N,out_F); input [1:0]inp_X,inp_N; output [1:0]out_F; assign out_F=inp_X ^ inp_N
module XOR_1(inp_H,inp_T,out_Z); input [1:0]inp_H,inp_T; output [1:0]out_Z; assign out_Z=inp_H ^ inp_T; endmodule
module XOR_5(inp_M,inp_O,inp_L,out_P); input [5:0]inp_M,inp_O,inp_L; output [5:0]out_P; assign out_P=inp_M ^ inp_O ^ inp_L
module XOR_6(inp_E,inp_K,out_K); input [6:0]inp_E,inp_K; output [6:0]out_K; assign out_K=inp_E ^ inp_K; endmodule
module XOR_3(U,N,G,Q); input [3:0]U,N,G; output [3:0]Q; assign Q=U ^ N ^ G
module XOR_5(B,M,S,J); input [5:0]B,M,S; output [5:0]J; assign J=B ^ M ^ S
module XOR_1(B,A,C); input [1:0]B,A; output [1:0]C; assign C=B ^ A; endmodule
module XOR_5(inp_V,inp_B,inp_Q,out_K); input [5:0]inp_V,inp_B,inp_Q; output [5:0]out_K; assign out_K=inp_V ^ inp_B ^ inp_Q
module XOR_4(Z,Y,G,E); input [4:0]Z,Y,G; output [4:0]E; assign E=Z ^ Y ^ G; endmodule
module XOR_7(inp_S,inp_Q,inp_F,out_S); input [7:0]inp_S,inp_Q,inp_F; output [7:0]out_S; assign out_S=inp_S ^ inp_Q ^ inp_F; endmodule
module XOR_1(H,M,E); input [1:0]H,M; output [1:0]E; assign E=H ^ M; endmodule
module XOR_6(K,E,H,W); input [6:0]K,E,H; output [6:0]W; assign W=K ^ E ^ H; endmodule
module XOR_3(A,J,X,U); input [3:0]A,J,X; output [3:0]U; assign U=A ^ J ^ X
module XOR_6(U,T,P); input [6:0]U,T; output [6:0]P; assign P=U ^ T; endmodule
module XOR_2(inp_S,inp_P,inp_M,out_O); input [2:0]inp_S,inp_P,inp_M; output [2:0]out_O; assign out_O=inp_S ^ inp_P ^ inp_M; endmodule
module XOR_6(D,O,L,Z); input [6:0]D,O,L; output [6:0]Z; assign Z=D ^ O ^ L
module XOR_6(inp_K,inp_T,out_M); input [6:0]inp_K,inp_T; output [6:0]out_M; assign out_M=inp_K ^ inp_T
module XOR_5(inp_M,inp_F,inp_N,out_V); input [5:0]inp_M,inp_F,inp_N; output [5:0]out_V; assign out_V=inp_M ^ inp_F ^ inp_N
module XOR_7(G,P,O); input [7:0]G,P; output [7:0]O; assign O=G ^ P; endmodule
module XOR_7(inp_T,inp_O,out_D); input [7:0]inp_T,inp_O; output [7:0]out_D; assign out_D=inp_T ^ inp_O
module XOR_4(inp_Y,inp_F,out_E); input [4:0]inp_Y,inp_F; output [4:0]out_E; assign out_E=inp_Y ^ inp_F
module XOR_6(inp_L,inp_K,inp_Q,out_Z); input [6:0]inp_L,inp_K,inp_Q; output [6:0]out_Z; assign out_Z=inp_L ^ inp_K ^ inp_Q
module XOR_6(inp_I,inp_F,inp_R,out_F); input [6:0]inp_I,inp_F,inp_R; output [6:0]out_F; assign out_F=inp_I ^ inp_F ^ inp_R
module XOR_7(G,M,K,T); input [7:0]G,M,K; output [7:0]T; assign T=G ^ M ^ K
module XOR_6(M,F,G,C); input [6:0]M,F,G; output [6:0]C; assign C=M ^ F ^ G; endmodule
module XOR_3(K,P,X,Z); input [3:0]K,P,X; output [3:0]Z; assign Z=K ^ P ^ X; endmodule
module XOR_1(W,K,L,Z); input [1:0]W,K,L; output [1:0]Z; assign Z=W ^ K ^ L
module XOR_3(inp_T,inp_B,inp_F,out_Z); input [3:0]inp_T,inp_B,inp_F; output [3:0]out_Z; assign out_Z=inp_T ^ inp_B ^ inp_F
module XOR_2(V,O,Q); input [2:0]V,O; output [2:0]Q; assign Q=V ^ O
module XOR_3(L,R,X); input [3:0]L,R; output [3:0]X; assign X=L ^ R; endmodule
module XOR_1(U,X,A); input [1:0]U,X; output [1:0]A; assign A=U ^ X
module XOR_5(inp_N,inp_K,inp_L,out_O); input [5:0]inp_N,inp_K,inp_L; output [5:0]out_O; assign out_O=inp_N ^ inp_K ^ inp_L; endmodule
module XOR_4(inp_Z,inp_T,out_F); input [4:0]inp_Z,inp_T; output [4:0]out_F; assign out_F=inp_Z ^ inp_T
module XOR_5(N,G,B,Q); input [5:0]N,G,B; output [5:0]Q; assign Q=N ^ G ^ B
module XOR_3(K,J,H); input [3:0]K,J; output [3:0]H; assign H=K ^ J
module XOR_6(U,V,W); input [6:0]U,V; output [6:0]W; assign W=U ^ V
module XOR_4(inp_D,inp_H,inp_Z,out_H); input [4:0]inp_D,inp_H,inp_Z; output [4:0]out_H; assign out_H=inp_D ^ inp_H ^ inp_Z; endmodule
module XOR_6(R,T,N); input [6:0]R,T; output [6:0]N; assign N=R ^ T
module XOR_2(inp_M,inp_U,out_K); input [2:0]inp_M,inp_U; output [2:0]out_K; assign out_K=inp_M ^ inp_U; endmodule
module XOR_5(inp_B,inp_S,inp_P,out_B); input [5:0]inp_B,inp_S,inp_P; output [5:0]out_B; assign out_B=inp_B ^ inp_S ^ inp_P; endmodule
module XOR_5(inp_C,inp_Y,inp_D,out_O); input [5:0]inp_C,inp_Y,inp_D; output [5:0]out_O; assign out_O=inp_C ^ inp_Y ^ inp_D
module XOR_5(N,E,U,D); input [5:0]N,E,U; output [5:0]D; assign D=N ^ E ^ U
module XOR_4(inp_E,inp_Z,out_C); input [4:0]inp_E,inp_Z; output [4:0]out_C; assign out_C=inp_E ^ inp_Z; endmodule
module XOR_5(inp_E,inp_Z,out_L); input [5:0]inp_E,inp_Z; output [5:0]out_L; assign out_L=inp_E ^ inp_Z
module XOR_1(inp_D,inp_M,out_C); input [1:0]inp_D,inp_M; output [1:0]out_C; assign out_C=inp_D ^ inp_M; endmodule
module XOR_4(P,H,Z); input [4:0]P,H; output [4:0]Z; assign Z=P ^ H
module XOR_1(L,J,P); input [1:0]L,J; output [1:0]P; assign P=L ^ J
module XOR_5(T,H,Q); input [5:0]T,H; output [5:0]Q; assign Q=T ^ H; endmodule
module XOR_1(inp_J,inp_L,out_H); input [1:0]inp_J,inp_L; output [1:0]out_H; assign out_H=inp_J ^ inp_L
module XOR_4(X,N,D); input [4:0]X,N; output [4:0]D; assign D=X ^ N; endmodule
module XOR_5(inp_V,inp_F,inp_R,out_I); input [5:0]inp_V,inp_F,inp_R; output [5:0]out_I; assign out_I=inp_V ^ inp_F ^ inp_R
module XOR_1(M,L,M,I); input [1:0]M,L,M; output [1:0]I; assign I=M ^ L ^ M; endmodule
module XOR_3(A,R,B,S); input [3:0]A,R,B; output [3:0]S; assign S=A ^ R ^ B; endmodule
module XOR_5(P,J,O,U); input [5:0]P,J,O; output [5:0]U; assign U=P ^ J ^ O
module XOR_2(H,W,L); input [2:0]H,W; output [2:0]L; assign L=H ^ W
module XOR_3(inp_H,inp_F,inp_D,out_W); input [3:0]inp_H,inp_F,inp_D; output [3:0]out_W; assign out_W=inp_H ^ inp_F ^ inp_D
module XOR_2(inp_Y,inp_P,inp_J,out_Q); input [2:0]inp_Y,inp_P,inp_J; output [2:0]out_Q; assign out_Q=inp_Y ^ inp_P ^ inp_J; endmodule
module XOR_2(E,Z,U); input [2:0]E,Z; output [2:0]U; assign U=E ^ Z
module XOR_3(inp_K,inp_B,out_L); input [3:0]inp_K,inp_B; output [3:0]out_L; assign out_L=inp_K ^ inp_B; endmodule
module XOR_5(inp_B,inp_U,out_X); input [5:0]inp_B,inp_U; output [5:0]out_X; assign out_X=inp_B ^ inp_U; endmodule
module XOR_4(inp_C,inp_R,inp_G,out_A); input [4:0]inp_C,inp_R,inp_G; output [4:0]out_A; assign out_A=inp_C ^ inp_R ^ inp_G; endmodule
module XOR_4(inp_E,inp_F,out_Q); input [4:0]inp_E,inp_F; output [4:0]out_Q; assign out_Q=inp_E ^ inp_F
module XOR_7(I,H,K); input [7:0]I,H; output [7:0]K; assign K=I ^ H
module XOR_6(inp_I,inp_V,out_Y); input [6:0]inp_I,inp_V; output [6:0]out_Y; assign out_Y=inp_I ^ inp_V; endmodule
module XOR_6(inp_R,inp_U,inp_F,out_U); input [6:0]inp_R,inp_U,inp_F; output [6:0]out_U; assign out_U=inp_R ^ inp_U ^ inp_F; endmodule
module XOR_1(inp_H,inp_X,inp_C,out_C); input [1:0]inp_H,inp_X,inp_C; output [1:0]out_C; assign out_C=inp_H ^ inp_X ^ inp_C; endmodule
module XOR_7(Z,Q,U); input [7:0]Z,Q; output [7:0]U; assign U=Z ^ Q; endmodule
module XOR_1(U,Q,W); input [1:0]U,Q; output [1:0]W; assign W=U ^ Q; endmodule
module XOR_7(inp_B,inp_G,inp_R,out_U); input [7:0]inp_B,inp_G,inp_R; output [7:0]out_U; assign out_U=inp_B ^ inp_G ^ inp_R
module XOR_2(inp_C,inp_T,inp_Y,out_C); input [2:0]inp_C,inp_T,inp_Y; output [2:0]out_C; assign out_C=inp_C ^ inp_T ^ inp_Y; endmodule
module XOR_2(inp_G,inp_F,out_M); input [2:0]inp_G,inp_F; output [2:0]out_M; assign out_M=inp_G ^ inp_F
module XOR_4(inp_A,inp_T,out_K); input [4:0]inp_A,inp_T; output [4:0]out_K; assign out_K=inp_A ^ inp_T
module XOR_7(inp_Z,inp_E,inp_Q,out_E); input [7:0]inp_Z,inp_E,inp_Q; output [7:0]out_E; assign out_E=inp_Z ^ inp_E ^ inp_Q
module XOR_7(inp_I,inp_B,inp_D,out_R); input [7:0]inp_I,inp_B,inp_D; output [7:0]out_R; assign out_R=inp_I ^ inp_B ^ inp_D
module XOR_3(inp_F,inp_X,inp_K,out_Q); input [3:0]inp_F,inp_X,inp_K; output [3:0]out_Q; assign out_Q=inp_F ^ inp_X ^ inp_K; endmodule
module XOR_3(inp_S,inp_Q,out_Q); input [3:0]inp_S,inp_Q; output [3:0]out_Q; assign out_Q=inp_S ^ inp_Q; endmodule
module XOR_3(inp_B,inp_S,inp_R,out_M); input [3:0]inp_B,inp_S,inp_R; output [3:0]out_M; assign out_M=inp_B ^ inp_S ^ inp_R
module XOR_3(inp_F,inp_B,out_C); input [3:0]inp_F,inp_B; output [3:0]out_C; assign out_C=inp_F ^ inp_B
module XOR_6(inp_H,inp_Q,inp_B,out_H); input [6:0]inp_H,inp_Q,inp_B; output [6:0]out_H; assign out_H=inp_H ^ inp_Q ^ inp_B; endmodule
module XOR_6(inp_G,inp_B,out_G); input [6:0]inp_G,inp_B; output [6:0]out_G; assign out_G=inp_G ^ inp_B
module XOR_4(inp_S,inp_W,inp_R,out_I); input [4:0]inp_S,inp_W,inp_R; output [4:0]out_I; assign out_I=inp_S ^ inp_W ^ inp_R
module XOR_5(inp_C,inp_G,out_T); input [5:0]inp_C,inp_G; output [5:0]out_T; assign out_T=inp_C ^ inp_G
module XOR_2(inp_E,inp_H,inp_A,out_Q); input [2:0]inp_E,inp_H,inp_A; output [2:0]out_Q; assign out_Q=inp_E ^ inp_H ^ inp_A
module XOR_6(T,X,Y,N); input [6:0]T,X,Y; output [6:0]N; assign N=T ^ X ^ Y; endmodule
module XOR_1(inp_Y,inp_R,out_S); input [1:0]inp_Y,inp_R; output [1:0]out_S; assign out_S=inp_Y ^ inp_R
module XOR_7(B,N,T,Y); input [7:0]B,N,T; output [7:0]Y; assign Y=B ^ N ^ T; endmodule
module XOR_7(inp_R,inp_M,inp_U,out_D); input [7:0]inp_R,inp_M,inp_U; output [7:0]out_D; assign out_D=inp_R ^ inp_M ^ inp_U
module XOR_2(inp_P,inp_L,out_G); input [2:0]inp_P,inp_L; output [2:0]out_G; assign out_G=inp_P ^ inp_L
module XOR_7(I,S,H); input [7:0]I,S; output [7:0]H; assign H=I ^ S
module XOR_4(inp_I,inp_W,inp_U,out_U); input [4:0]inp_I,inp_W,inp_U; output [4:0]out_U; assign out_U=inp_I ^ inp_W ^ inp_U; endmodule
module XOR_1(C,R,X,V); input [1:0]C,R,X; output [1:0]V; assign V=C ^ R ^ X; endmodule
module XOR_5(K,M,B); input [5:0]K,M; output [5:0]B; assign B=K ^ M
module full(inp_S,inp_U,Carry,Cout,Sum); input inp_S,inp_U; output Cout,Sum; assign Sum=inp_S ^ inp_U ^ Carry; assign Cout=inp_S&inp_U|(inp_S^inp_U) & Carry; endmodule
module full(K,J,Carry,Cout,Sum); input K,J; output Cout,Sum; assign Sum=K ^ J ^ Carry; assign Cout=K&J|(K^J) & Carry;
module full(inp_Q,inp_A,Carry,Cout,Sum); input inp_Q,inp_A; output Cout,Sum; assign Sum=inp_Q ^ inp_A ^ Carry; assign Cout=inp_Q&inp_A|(inp_Q^inp_A) & Carry;
module full(inp_P,inp_Q,Carry,Cout,Sum); input inp_P,inp_Q; output Cout,Sum; assign Sum=inp_P ^ inp_Q ^ Carry; assign Cout=inp_P&inp_Q|(inp_P^inp_Q) & Carry; endmodule
module full(I,B,Carry,Cout,Sum); input I,B; output Cout,Sum; assign Sum=I ^ B ^ Carry; assign Cout=I&B|(I^B) & Carry;
module full(M,C,Carry,Cout,Sum); input M,C; output Cout,Sum; assign Sum=M ^ C ^ Carry; assign Cout=M&C|(M^C) & Carry; endmodule
module full(inp_K,inp_F,Carry,Cout,Sum); input inp_K,inp_F; output Cout,Sum; assign Sum=inp_K ^ inp_F ^ Carry; assign Cout=inp_K&inp_F|(inp_K^inp_F) & Carry; endmodule
module full(inp_Y,inp_K,Carry,Cout,Sum); input inp_Y,inp_K; output Cout,Sum; assign Sum=inp_Y ^ inp_K ^ Carry; assign Cout=inp_Y&inp_K|(inp_Y^inp_K) & Carry;
module full(inp_R,inp_W,Carry,Cout,Sum); input inp_R,inp_W; output Cout,Sum; assign Sum=inp_R ^ inp_W ^ Carry; assign Cout=inp_R&inp_W|(inp_R^inp_W) & Carry;
module full(W,R,Carry,Cout,Sum); input W,R; output Cout,Sum; assign Sum=W ^ R ^ Carry; assign Cout=W&R|(W^R) & Carry; endmodule
module full(inp_Z,inp_O,Carry,Cout,Sum); input inp_Z,inp_O; output Cout,Sum; assign Sum=inp_Z ^ inp_O ^ Carry; assign Cout=inp_Z&inp_O|(inp_Z^inp_O) & Carry; endmodule
module full(inp_K,inp_J,Carry,Cout,Sum); input inp_K,inp_J; output Cout,Sum; assign Sum=inp_K ^ inp_J ^ Carry; assign Cout=inp_K&inp_J|(inp_K^inp_J) & Carry; endmodule
module full(M,A,Carry,Cout,Sum); input M,A; output Cout,Sum; assign Sum=M ^ A ^ Carry; assign Cout=M&A|(M^A) & Carry;
module full(inp_Z,inp_L,Carry,Cout,Sum); input inp_Z,inp_L; output Cout,Sum; assign Sum=inp_Z ^ inp_L ^ Carry; assign Cout=inp_Z&inp_L|(inp_Z^inp_L) & Carry; endmodule
module full(P,X,Carry,Cout,Sum); input P,X; output Cout,Sum; assign Sum=P ^ X ^ Carry; assign Cout=P&X|(P^X) & Carry;
module full(D,B,Carry,Cout,Sum); input D,B; output Cout,Sum; assign Sum=D ^ B ^ Carry; assign Cout=D&B|(D^B) & Carry;
module full(inp_H,inp_D,Carry,Cout,Sum); input inp_H,inp_D; output Cout,Sum; assign Sum=inp_H ^ inp_D ^ Carry; assign Cout=inp_H&inp_D|(inp_H^inp_D) & Carry;
module full(M,Y,Carry,Cout,Sum); input M,Y; output Cout,Sum; assign Sum=M ^ Y ^ Carry; assign Cout=M&Y|(M^Y) & Carry;
module full(D,C,Carry,Cout,Sum); input D,C; output Cout,Sum; assign Sum=D ^ C ^ Carry; assign Cout=D&C|(D^C) & Carry;
module full(inp_X,inp_F,Carry,Cout,Sum); input inp_X,inp_F; output Cout,Sum; assign Sum=inp_X ^ inp_F ^ Carry; assign Cout=inp_X&inp_F|(inp_X^inp_F) & Carry; endmodule
module full(inp_Z,inp_Q,Carry,Cout,Sum); input inp_Z,inp_Q; output Cout,Sum; assign Sum=inp_Z ^ inp_Q ^ Carry; assign Cout=inp_Z&inp_Q|(inp_Z^inp_Q) & Carry; endmodule
module full(O,P,Carry,Cout,Sum); input O,P; output Cout,Sum; assign Sum=O ^ P ^ Carry; assign Cout=O&P|(O^P) & Carry; endmodule
module full(R,D,Carry,Cout,Sum); input R,D; output Cout,Sum; assign Sum=R ^ D ^ Carry; assign Cout=R&D|(R^D) & Carry; endmodule
module full(U,H,Carry,Cout,Sum); input U,H; output Cout,Sum; assign Sum=U ^ H ^ Carry; assign Cout=U&H|(U^H) & Carry;
module full(inp_N,inp_P,Carry,Cout,Sum); input inp_N,inp_P; output Cout,Sum; assign Sum=inp_N ^ inp_P ^ Carry; assign Cout=inp_N&inp_P|(inp_N^inp_P) & Carry;
module full(G,W,Carry,Cout,Sum); input G,W; output Cout,Sum; assign Sum=G ^ W ^ Carry; assign Cout=G&W|(G^W) & Carry;
module full(inp_D,inp_R,Carry,Cout,Sum); input inp_D,inp_R; output Cout,Sum; assign Sum=inp_D ^ inp_R ^ Carry; assign Cout=inp_D&inp_R|(inp_D^inp_R) & Carry; endmodule
module full(G,L,Carry,Cout,Sum); input G,L; output Cout,Sum; assign Sum=G ^ L ^ Carry; assign Cout=G&L|(G^L) & Carry;
module full(inp_O,inp_S,Carry,Cout,Sum); input inp_O,inp_S; output Cout,Sum; assign Sum=inp_O ^ inp_S ^ Carry; assign Cout=inp_O&inp_S|(inp_O^inp_S) & Carry; endmodule
module full(H,K,Carry,Cout,Sum); input H,K; output Cout,Sum; assign Sum=H ^ K ^ Carry; assign Cout=H&K|(H^K) & Carry;
module full(Q,P,Carry,Cout,Sum); input Q,P; output Cout,Sum; assign Sum=Q ^ P ^ Carry; assign Cout=Q&P|(Q^P) & Carry; endmodule
module full(P,I,Carry,Cout,Sum); input P,I; output Cout,Sum; assign Sum=P ^ I ^ Carry; assign Cout=P&I|(P^I) & Carry;
module full(T,E,Carry,Cout,Sum); input T,E; output Cout,Sum; assign Sum=T ^ E ^ Carry; assign Cout=T&E|(T^E) & Carry;
module full(inp_S,inp_K,Carry,Cout,Sum); input inp_S,inp_K; output Cout,Sum; assign Sum=inp_S ^ inp_K ^ Carry; assign Cout=inp_S&inp_K|(inp_S^inp_K) & Carry; endmodule
module full(inp_T,inp_R,Carry,Cout,Sum); input inp_T,inp_R; output Cout,Sum; assign Sum=inp_T ^ inp_R ^ Carry; assign Cout=inp_T&inp_R|(inp_T^inp_R) & Carry;
module full(O,Z,Carry,Cout,Sum); input O,Z; output Cout,Sum; assign Sum=O ^ Z ^ Carry; assign Cout=O&Z|(O^Z) & Carry;
module full(B,H,Carry,Cout,Sum); input B,H; output Cout,Sum; assign Sum=B ^ H ^ Carry; assign Cout=B&H|(B^H) & Carry;
module full(inp_U,inp_V,Carry,Cout,Sum); input inp_U,inp_V; output Cout,Sum; assign Sum=inp_U ^ inp_V ^ Carry; assign Cout=inp_U&inp_V|(inp_U^inp_V) & Carry; endmodule
module full(inp_U,inp_Q,Carry,Cout,Sum); input inp_U,inp_Q; output Cout,Sum; assign Sum=inp_U ^ inp_Q ^ Carry; assign Cout=inp_U&inp_Q|(inp_U^inp_Q) & Carry;
module full(inp_S,inp_O,Carry,Cout,Sum); input inp_S,inp_O; output Cout,Sum; assign Sum=inp_S ^ inp_O ^ Carry; assign Cout=inp_S&inp_O|(inp_S^inp_O) & Carry; endmodule
module full(Y,D,Carry,Cout,Sum); input Y,D; output Cout,Sum; assign Sum=Y ^ D ^ Carry; assign Cout=Y&D|(Y^D) & Carry;
module full(inp_D,inp_I,Carry,Cout,Sum); input inp_D,inp_I; output Cout,Sum; assign Sum=inp_D ^ inp_I ^ Carry; assign Cout=inp_D&inp_I|(inp_D^inp_I) & Carry;
module full(N,S,Carry,Cout,Sum); input N,S; output Cout,Sum; assign Sum=N ^ S ^ Carry; assign Cout=N&S|(N^S) & Carry; endmodule
module full(inp_M,inp_N,Carry,Cout,Sum); input inp_M,inp_N; output Cout,Sum; assign Sum=inp_M ^ inp_N ^ Carry; assign Cout=inp_M&inp_N|(inp_M^inp_N) & Carry;
module full(inp_S,inp_F,Carry,Cout,Sum); input inp_S,inp_F; output Cout,Sum; assign Sum=inp_S ^ inp_F ^ Carry; assign Cout=inp_S&inp_F|(inp_S^inp_F) & Carry;
module full(X,H,Carry,Cout,Sum); input X,H; output Cout,Sum; assign Sum=X ^ H ^ Carry; assign Cout=X&H|(X^H) & Carry; endmodule
module full(Y,M,Carry,Cout,Sum); input Y,M; output Cout,Sum; assign Sum=Y ^ M ^ Carry; assign Cout=Y&M|(Y^M) & Carry;
module full(F,I,Carry,Cout,Sum); input F,I; output Cout,Sum; assign Sum=F ^ I ^ Carry; assign Cout=F&I|(F^I) & Carry; endmodule
module full(inp_Z,inp_K,Carry,Cout,Sum); input inp_Z,inp_K; output Cout,Sum; assign Sum=inp_Z ^ inp_K ^ Carry; assign Cout=inp_Z&inp_K|(inp_Z^inp_K) & Carry; endmodule
module full(X,T,Carry,Cout,Sum); input X,T; output Cout,Sum; assign Sum=X ^ T ^ Carry; assign Cout=X&T|(X^T) & Carry; endmodule
module full(H,Z,Carry,Cout,Sum); input H,Z; output Cout,Sum; assign Sum=H ^ Z ^ Carry; assign Cout=H&Z|(H^Z) & Carry; endmodule
module full(inp_E,inp_O,Carry,Cout,Sum); input inp_E,inp_O; output Cout,Sum; assign Sum=inp_E ^ inp_O ^ Carry; assign Cout=inp_E&inp_O|(inp_E^inp_O) & Carry;
module full(V,Z,Carry,Cout,Sum); input V,Z; output Cout,Sum; assign Sum=V ^ Z ^ Carry; assign Cout=V&Z|(V^Z) & Carry; endmodule
module full(K,B,Carry,Cout,Sum); input K,B; output Cout,Sum; assign Sum=K ^ B ^ Carry; assign Cout=K&B|(K^B) & Carry;
module full(inp_G,inp_T,Carry,Cout,Sum); input inp_G,inp_T; output Cout,Sum; assign Sum=inp_G ^ inp_T ^ Carry; assign Cout=inp_G&inp_T|(inp_G^inp_T) & Carry; endmodule
module full(inp_S,inp_K,Carry,Cout,Sum); input inp_S,inp_K; output Cout,Sum; assign Sum=inp_S ^ inp_K ^ Carry; assign Cout=inp_S&inp_K|(inp_S^inp_K) & Carry;
module full(U,E,Carry,Cout,Sum); input U,E; output Cout,Sum; assign Sum=U ^ E ^ Carry; assign Cout=U&E|(U^E) & Carry; endmodule
module full(N,J,Carry,Cout,Sum); input N,J; output Cout,Sum; assign Sum=N ^ J ^ Carry; assign Cout=N&J|(N^J) & Carry; endmodule
module full(inp_Y,inp_H,Carry,Cout,Sum); input inp_Y,inp_H; output Cout,Sum; assign Sum=inp_Y ^ inp_H ^ Carry; assign Cout=inp_Y&inp_H|(inp_Y^inp_H) & Carry;
module full(G,R,Carry,Cout,Sum); input G,R; output Cout,Sum; assign Sum=G ^ R ^ Carry; assign Cout=G&R|(G^R) & Carry;
module full(inp_K,inp_S,Carry,Cout,Sum); input inp_K,inp_S; output Cout,Sum; assign Sum=inp_K ^ inp_S ^ Carry; assign Cout=inp_K&inp_S|(inp_K^inp_S) & Carry;
module full(M,E,Carry,Cout,Sum); input M,E; output Cout,Sum; assign Sum=M ^ E ^ Carry; assign Cout=M&E|(M^E) & Carry;
module full(L,M,Carry,Cout,Sum); input L,M; output Cout,Sum; assign Sum=L ^ M ^ Carry; assign Cout=L&M|(L^M) & Carry; endmodule
module full(K,Y,Carry,Cout,Sum); input K,Y; output Cout,Sum; assign Sum=K ^ Y ^ Carry; assign Cout=K&Y|(K^Y) & Carry;
module full(inp_P,inp_Z,Carry,Cout,Sum); input inp_P,inp_Z; output Cout,Sum; assign Sum=inp_P ^ inp_Z ^ Carry; assign Cout=inp_P&inp_Z|(inp_P^inp_Z) & Carry;
module full(H,F,Carry,Cout,Sum); input H,F; output Cout,Sum; assign Sum=H ^ F ^ Carry; assign Cout=H&F|(H^F) & Carry;
module full(E,F,Carry,Cout,Sum); input E,F; output Cout,Sum; assign Sum=E ^ F ^ Carry; assign Cout=E&F|(E^F) & Carry;
module full(inp_R,inp_U,Carry,Cout,Sum); input inp_R,inp_U; output Cout,Sum; assign Sum=inp_R ^ inp_U ^ Carry; assign Cout=inp_R&inp_U|(inp_R^inp_U) & Carry; endmodule
module full(inp_A,inp_D,Carry,Cout,Sum); input inp_A,inp_D; output Cout,Sum; assign Sum=inp_A ^ inp_D ^ Carry; assign Cout=inp_A&inp_D|(inp_A^inp_D) & Carry; endmodule
module full(inp_J,inp_K,Carry,Cout,Sum); input inp_J,inp_K; output Cout,Sum; assign Sum=inp_J ^ inp_K ^ Carry; assign Cout=inp_J&inp_K|(inp_J^inp_K) & Carry; endmodule
module full(E,A,Carry,Cout,Sum); input E,A; output Cout,Sum; assign Sum=E ^ A ^ Carry; assign Cout=E&A|(E^A) & Carry;
module full(V,N,Carry,Cout,Sum); input V,N; output Cout,Sum; assign Sum=V ^ N ^ Carry; assign Cout=V&N|(V^N) & Carry; endmodule
module full(inp_Q,inp_L,Carry,Cout,Sum); input inp_Q,inp_L; output Cout,Sum; assign Sum=inp_Q ^ inp_L ^ Carry; assign Cout=inp_Q&inp_L|(inp_Q^inp_L) & Carry; endmodule
module full(M,I,Carry,Cout,Sum); input M,I; output Cout,Sum; assign Sum=M ^ I ^ Carry; assign Cout=M&I|(M^I) & Carry;
module full(inp_J,inp_S,Carry,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S ^ Carry; assign Cout=inp_J&inp_S|(inp_J^inp_S) & Carry;
module full(inp_Y,inp_W,Carry,Cout,Sum); input inp_Y,inp_W; output Cout,Sum; assign Sum=inp_Y ^ inp_W ^ Carry; assign Cout=inp_Y&inp_W|(inp_Y^inp_W) & Carry; endmodule
module full(inp_E,inp_O,Carry,Cout,Sum); input inp_E,inp_O; output Cout,Sum; assign Sum=inp_E ^ inp_O ^ Carry; assign Cout=inp_E&inp_O|(inp_E^inp_O) & Carry;
module full(K,D,Carry,Cout,Sum); input K,D; output Cout,Sum; assign Sum=K ^ D ^ Carry; assign Cout=K&D|(K^D) & Carry; endmodule
module full(X,K,Carry,Cout,Sum); input X,K; output Cout,Sum; assign Sum=X ^ K ^ Carry; assign Cout=X&K|(X^K) & Carry;
module full(V,A,Carry,Cout,Sum); input V,A; output Cout,Sum; assign Sum=V ^ A ^ Carry; assign Cout=V&A|(V^A) & Carry;
module full(inp_W,inp_Y,Carry,Cout,Sum); input inp_W,inp_Y; output Cout,Sum; assign Sum=inp_W ^ inp_Y ^ Carry; assign Cout=inp_W&inp_Y|(inp_W^inp_Y) & Carry; endmodule
module full(T,O,Carry,Cout,Sum); input T,O; output Cout,Sum; assign Sum=T ^ O ^ Carry; assign Cout=T&O|(T^O) & Carry;
module full(H,A,Carry,Cout,Sum); input H,A; output Cout,Sum; assign Sum=H ^ A ^ Carry; assign Cout=H&A|(H^A) & Carry; endmodule
module full(inp_P,inp_L,Carry,Cout,Sum); input inp_P,inp_L; output Cout,Sum; assign Sum=inp_P ^ inp_L ^ Carry; assign Cout=inp_P&inp_L|(inp_P^inp_L) & Carry;
module full(inp_F,inp_S,Carry,Cout,Sum); input inp_F,inp_S; output Cout,Sum; assign Sum=inp_F ^ inp_S ^ Carry; assign Cout=inp_F&inp_S|(inp_F^inp_S) & Carry; endmodule
module full(inp_P,inp_W,Carry,Cout,Sum); input inp_P,inp_W; output Cout,Sum; assign Sum=inp_P ^ inp_W ^ Carry; assign Cout=inp_P&inp_W|(inp_P^inp_W) & Carry;
module full(inp_G,inp_I,Carry,Cout,Sum); input inp_G,inp_I; output Cout,Sum; assign Sum=inp_G ^ inp_I ^ Carry; assign Cout=inp_G&inp_I|(inp_G^inp_I) & Carry; endmodule
module full(H,M,Carry,Cout,Sum); input H,M; output Cout,Sum; assign Sum=H ^ M ^ Carry; assign Cout=H&M|(H^M) & Carry; endmodule
module full(inp_Q,inp_V,Carry,Cout,Sum); input inp_Q,inp_V; output Cout,Sum; assign Sum=inp_Q ^ inp_V ^ Carry; assign Cout=inp_Q&inp_V|(inp_Q^inp_V) & Carry;
module full(inp_P,inp_G,Carry,Cout,Sum); input inp_P,inp_G; output Cout,Sum; assign Sum=inp_P ^ inp_G ^ Carry; assign Cout=inp_P&inp_G|(inp_P^inp_G) & Carry;
module full(K,I,Carry,Cout,Sum); input K,I; output Cout,Sum; assign Sum=K ^ I ^ Carry; assign Cout=K&I|(K^I) & Carry;
module full(L,D,Carry,Cout,Sum); input L,D; output Cout,Sum; assign Sum=L ^ D ^ Carry; assign Cout=L&D|(L^D) & Carry; endmodule
module full(inp_G,inp_Z,Carry,Cout,Sum); input inp_G,inp_Z; output Cout,Sum; assign Sum=inp_G ^ inp_Z ^ Carry; assign Cout=inp_G&inp_Z|(inp_G^inp_Z) & Carry; endmodule
module full(inp_A,inp_P,Carry,Cout,Sum); input inp_A,inp_P; output Cout,Sum; assign Sum=inp_A ^ inp_P ^ Carry; assign Cout=inp_A&inp_P|(inp_A^inp_P) & Carry; endmodule
module full(inp_C,inp_Y,Carry,Cout,Sum); input inp_C,inp_Y; output Cout,Sum; assign Sum=inp_C ^ inp_Y ^ Carry; assign Cout=inp_C&inp_Y|(inp_C^inp_Y) & Carry; endmodule
module full(inp_V,inp_H,Carry,Cout,Sum); input inp_V,inp_H; output Cout,Sum; assign Sum=inp_V ^ inp_H ^ Carry; assign Cout=inp_V&inp_H|(inp_V^inp_H) & Carry; endmodule
module full(inp_J,inp_G,Carry,Cout,Sum); input inp_J,inp_G; output Cout,Sum; assign Sum=inp_J ^ inp_G ^ Carry; assign Cout=inp_J&inp_G|(inp_J^inp_G) & Carry; endmodule
module full(inp_I,inp_V,Carry,Cout,Sum); input inp_I,inp_V; output Cout,Sum; assign Sum=inp_I ^ inp_V ^ Carry; assign Cout=inp_I&inp_V|(inp_I^inp_V) & Carry;
module full(inp_D,inp_G,Carry,Cout,Sum); input inp_D,inp_G; output Cout,Sum; assign Sum=inp_D ^ inp_G ^ Carry; assign Cout=inp_D&inp_G|(inp_D^inp_G) & Carry;
module full(inp_D,inp_H,Carry,Cout,Sum); input inp_D,inp_H; output Cout,Sum; assign Sum=inp_D ^ inp_H ^ Carry; assign Cout=inp_D&inp_H|(inp_D^inp_H) & Carry; endmodule
module full(inp_P,inp_Y,Carry,Cout,Sum); input inp_P,inp_Y; output Cout,Sum; assign Sum=inp_P ^ inp_Y ^ Carry; assign Cout=inp_P&inp_Y|(inp_P^inp_Y) & Carry; endmodule
module full(inp_G,inp_U,Carry,Cout,Sum); input inp_G,inp_U; output Cout,Sum; assign Sum=inp_G ^ inp_U ^ Carry; assign Cout=inp_G&inp_U|(inp_G^inp_U) & Carry;
module full(Y,E,Carry,Cout,Sum); input Y,E; output Cout,Sum; assign Sum=Y ^ E ^ Carry; assign Cout=Y&E|(Y^E) & Carry;
module full(inp_A,inp_O,Carry,Cout,Sum); input inp_A,inp_O; output Cout,Sum; assign Sum=inp_A ^ inp_O ^ Carry; assign Cout=inp_A&inp_O|(inp_A^inp_O) & Carry;
module full(Q,I,Carry,Cout,Sum); input Q,I; output Cout,Sum; assign Sum=Q ^ I ^ Carry; assign Cout=Q&I|(Q^I) & Carry; endmodule
module full(Y,J,Carry,Cout,Sum); input Y,J; output Cout,Sum; assign Sum=Y ^ J ^ Carry; assign Cout=Y&J|(Y^J) & Carry; endmodule
module full(inp_L,inp_T,Carry,Cout,Sum); input inp_L,inp_T; output Cout,Sum; assign Sum=inp_L ^ inp_T ^ Carry; assign Cout=inp_L&inp_T|(inp_L^inp_T) & Carry; endmodule
module full(inp_M,inp_E,Carry,Cout,Sum); input inp_M,inp_E; output Cout,Sum; assign Sum=inp_M ^ inp_E ^ Carry; assign Cout=inp_M&inp_E|(inp_M^inp_E) & Carry;
module full(Q,K,Carry,Cout,Sum); input Q,K; output Cout,Sum; assign Sum=Q ^ K ^ Carry; assign Cout=Q&K|(Q^K) & Carry;
module full(Y,W,Carry,Cout,Sum); input Y,W; output Cout,Sum; assign Sum=Y ^ W ^ Carry; assign Cout=Y&W|(Y^W) & Carry;
module full(H,V,Carry,Cout,Sum); input H,V; output Cout,Sum; assign Sum=H ^ V ^ Carry; assign Cout=H&V|(H^V) & Carry;
module full(K,C,Carry,Cout,Sum); input K,C; output Cout,Sum; assign Sum=K ^ C ^ Carry; assign Cout=K&C|(K^C) & Carry; endmodule
module full(inp_T,inp_G,Carry,Cout,Sum); input inp_T,inp_G; output Cout,Sum; assign Sum=inp_T ^ inp_G ^ Carry; assign Cout=inp_T&inp_G|(inp_T^inp_G) & Carry;
module full(inp_I,inp_L,Carry,Cout,Sum); input inp_I,inp_L; output Cout,Sum; assign Sum=inp_I ^ inp_L ^ Carry; assign Cout=inp_I&inp_L|(inp_I^inp_L) & Carry; endmodule
module full(inp_P,inp_X,Carry,Cout,Sum); input inp_P,inp_X; output Cout,Sum; assign Sum=inp_P ^ inp_X ^ Carry; assign Cout=inp_P&inp_X|(inp_P^inp_X) & Carry; endmodule
module full(inp_Q,inp_P,Carry,Cout,Sum); input inp_Q,inp_P; output Cout,Sum; assign Sum=inp_Q ^ inp_P ^ Carry; assign Cout=inp_Q&inp_P|(inp_Q^inp_P) & Carry; endmodule
module full(U,C,Carry,Cout,Sum); input U,C; output Cout,Sum; assign Sum=U ^ C ^ Carry; assign Cout=U&C|(U^C) & Carry;
module full(inp_N,inp_R,Carry,Cout,Sum); input inp_N,inp_R; output Cout,Sum; assign Sum=inp_N ^ inp_R ^ Carry; assign Cout=inp_N&inp_R|(inp_N^inp_R) & Carry; endmodule
module full(inp_S,inp_H,Carry,Cout,Sum); input inp_S,inp_H; output Cout,Sum; assign Sum=inp_S ^ inp_H ^ Carry; assign Cout=inp_S&inp_H|(inp_S^inp_H) & Carry;
module full(inp_H,inp_L,Carry,Cout,Sum); input inp_H,inp_L; output Cout,Sum; assign Sum=inp_H ^ inp_L ^ Carry; assign Cout=inp_H&inp_L|(inp_H^inp_L) & Carry;
module full(M,B,Carry,Cout,Sum); input M,B; output Cout,Sum; assign Sum=M ^ B ^ Carry; assign Cout=M&B|(M^B) & Carry;
module full(inp_D,inp_S,Carry,Cout,Sum); input inp_D,inp_S; output Cout,Sum; assign Sum=inp_D ^ inp_S ^ Carry; assign Cout=inp_D&inp_S|(inp_D^inp_S) & Carry; endmodule
module full(inp_Y,inp_C,Carry,Cout,Sum); input inp_Y,inp_C; output Cout,Sum; assign Sum=inp_Y ^ inp_C ^ Carry; assign Cout=inp_Y&inp_C|(inp_Y^inp_C) & Carry; endmodule
module full(G,J,Carry,Cout,Sum); input G,J; output Cout,Sum; assign Sum=G ^ J ^ Carry; assign Cout=G&J|(G^J) & Carry; endmodule
module full(inp_R,inp_F,Carry,Cout,Sum); input inp_R,inp_F; output Cout,Sum; assign Sum=inp_R ^ inp_F ^ Carry; assign Cout=inp_R&inp_F|(inp_R^inp_F) & Carry;
module full(inp_D,inp_R,Carry,Cout,Sum); input inp_D,inp_R; output Cout,Sum; assign Sum=inp_D ^ inp_R ^ Carry; assign Cout=inp_D&inp_R|(inp_D^inp_R) & Carry; endmodule
module full(inp_L,inp_Q,Carry,Cout,Sum); input inp_L,inp_Q; output Cout,Sum; assign Sum=inp_L ^ inp_Q ^ Carry; assign Cout=inp_L&inp_Q|(inp_L^inp_Q) & Carry;
module full(W,N,Carry,Cout,Sum); input W,N; output Cout,Sum; assign Sum=W ^ N ^ Carry; assign Cout=W&N|(W^N) & Carry; endmodule
module full(G,L,Carry,Cout,Sum); input G,L; output Cout,Sum; assign Sum=G ^ L ^ Carry; assign Cout=G&L|(G^L) & Carry;
module full(inp_J,inp_M,Carry,Cout,Sum); input inp_J,inp_M; output Cout,Sum; assign Sum=inp_J ^ inp_M ^ Carry; assign Cout=inp_J&inp_M|(inp_J^inp_M) & Carry;
module full(T,H,Carry,Cout,Sum); input T,H; output Cout,Sum; assign Sum=T ^ H ^ Carry; assign Cout=T&H|(T^H) & Carry; endmodule
module full(inp_O,inp_W,Carry,Cout,Sum); input inp_O,inp_W; output Cout,Sum; assign Sum=inp_O ^ inp_W ^ Carry; assign Cout=inp_O&inp_W|(inp_O^inp_W) & Carry;
module full(J,A,Carry,Cout,Sum); input J,A; output Cout,Sum; assign Sum=J ^ A ^ Carry; assign Cout=J&A|(J^A) & Carry;
module full(I,M,Carry,Cout,Sum); input I,M; output Cout,Sum; assign Sum=I ^ M ^ Carry; assign Cout=I&M|(I^M) & Carry; endmodule
module full(T,Y,Carry,Cout,Sum); input T,Y; output Cout,Sum; assign Sum=T ^ Y ^ Carry; assign Cout=T&Y|(T^Y) & Carry; endmodule
module full(X,M,Carry,Cout,Sum); input X,M; output Cout,Sum; assign Sum=X ^ M ^ Carry; assign Cout=X&M|(X^M) & Carry;
module full(inp_L,inp_R,Carry,Cout,Sum); input inp_L,inp_R; output Cout,Sum; assign Sum=inp_L ^ inp_R ^ Carry; assign Cout=inp_L&inp_R|(inp_L^inp_R) & Carry;
module full(Q,A,Carry,Cout,Sum); input Q,A; output Cout,Sum; assign Sum=Q ^ A ^ Carry; assign Cout=Q&A|(Q^A) & Carry;
module full(inp_P,inp_Q,Carry,Cout,Sum); input inp_P,inp_Q; output Cout,Sum; assign Sum=inp_P ^ inp_Q ^ Carry; assign Cout=inp_P&inp_Q|(inp_P^inp_Q) & Carry; endmodule
module full(J,F,Carry,Cout,Sum); input J,F; output Cout,Sum; assign Sum=J ^ F ^ Carry; assign Cout=J&F|(J^F) & Carry; endmodule
module full(T,I,Carry,Cout,Sum); input T,I; output Cout,Sum; assign Sum=T ^ I ^ Carry; assign Cout=T&I|(T^I) & Carry;
module full(inp_U,inp_D,Carry,Cout,Sum); input inp_U,inp_D; output Cout,Sum; assign Sum=inp_U ^ inp_D ^ Carry; assign Cout=inp_U&inp_D|(inp_U^inp_D) & Carry; endmodule
module full(inp_Z,inp_H,Carry,Cout,Sum); input inp_Z,inp_H; output Cout,Sum; assign Sum=inp_Z ^ inp_H ^ Carry; assign Cout=inp_Z&inp_H|(inp_Z^inp_H) & Carry; endmodule
module full(inp_R,inp_J,Carry,Cout,Sum); input inp_R,inp_J; output Cout,Sum; assign Sum=inp_R ^ inp_J ^ Carry; assign Cout=inp_R&inp_J|(inp_R^inp_J) & Carry; endmodule
module full(inp_N,inp_C,Carry,Cout,Sum); input inp_N,inp_C; output Cout,Sum; assign Sum=inp_N ^ inp_C ^ Carry; assign Cout=inp_N&inp_C|(inp_N^inp_C) & Carry; endmodule
module full(inp_M,inp_G,Carry,Cout,Sum); input inp_M,inp_G; output Cout,Sum; assign Sum=inp_M ^ inp_G ^ Carry; assign Cout=inp_M&inp_G|(inp_M^inp_G) & Carry; endmodule
module full(M,Y,Carry,Cout,Sum); input M,Y; output Cout,Sum; assign Sum=M ^ Y ^ Carry; assign Cout=M&Y|(M^Y) & Carry; endmodule
module full(Z,H,Carry,Cout,Sum); input Z,H; output Cout,Sum; assign Sum=Z ^ H ^ Carry; assign Cout=Z&H|(Z^H) & Carry;
module full(inp_G,inp_Z,Carry,Cout,Sum); input inp_G,inp_Z; output Cout,Sum; assign Sum=inp_G ^ inp_Z ^ Carry; assign Cout=inp_G&inp_Z|(inp_G^inp_Z) & Carry;
module full(inp_D,inp_K,Carry,Cout,Sum); input inp_D,inp_K; output Cout,Sum; assign Sum=inp_D ^ inp_K ^ Carry; assign Cout=inp_D&inp_K|(inp_D^inp_K) & Carry;
module full(M,J,Carry,Cout,Sum); input M,J; output Cout,Sum; assign Sum=M ^ J ^ Carry; assign Cout=M&J|(M^J) & Carry;
module full(A,J,Carry,Cout,Sum); input A,J; output Cout,Sum; assign Sum=A ^ J ^ Carry; assign Cout=A&J|(A^J) & Carry;
module full(inp_T,inp_S,Carry,Cout,Sum); input inp_T,inp_S; output Cout,Sum; assign Sum=inp_T ^ inp_S ^ Carry; assign Cout=inp_T&inp_S|(inp_T^inp_S) & Carry; endmodule
module full(W,G,Carry,Cout,Sum); input W,G; output Cout,Sum; assign Sum=W ^ G ^ Carry; assign Cout=W&G|(W^G) & Carry; endmodule
module full(inp_A,inp_T,Carry,Cout,Sum); input inp_A,inp_T; output Cout,Sum; assign Sum=inp_A ^ inp_T ^ Carry; assign Cout=inp_A&inp_T|(inp_A^inp_T) & Carry;
module full(inp_B,inp_L,Carry,Cout,Sum); input inp_B,inp_L; output Cout,Sum; assign Sum=inp_B ^ inp_L ^ Carry; assign Cout=inp_B&inp_L|(inp_B^inp_L) & Carry;
module full(inp_H,inp_P,Carry,Cout,Sum); input inp_H,inp_P; output Cout,Sum; assign Sum=inp_H ^ inp_P ^ Carry; assign Cout=inp_H&inp_P|(inp_H^inp_P) & Carry; endmodule
module full(F,G,Carry,Cout,Sum); input F,G; output Cout,Sum; assign Sum=F ^ G ^ Carry; assign Cout=F&G|(F^G) & Carry;
module full(F,Y,Carry,Cout,Sum); input F,Y; output Cout,Sum; assign Sum=F ^ Y ^ Carry; assign Cout=F&Y|(F^Y) & Carry; endmodule
module full(inp_H,inp_L,Carry,Cout,Sum); input inp_H,inp_L; output Cout,Sum; assign Sum=inp_H ^ inp_L ^ Carry; assign Cout=inp_H&inp_L|(inp_H^inp_L) & Carry; endmodule
module full(inp_X,inp_Z,Carry,Cout,Sum); input inp_X,inp_Z; output Cout,Sum; assign Sum=inp_X ^ inp_Z ^ Carry; assign Cout=inp_X&inp_Z|(inp_X^inp_Z) & Carry;
module full(inp_I,inp_Y,Carry,Cout,Sum); input inp_I,inp_Y; output Cout,Sum; assign Sum=inp_I ^ inp_Y ^ Carry; assign Cout=inp_I&inp_Y|(inp_I^inp_Y) & Carry; endmodule
module full(inp_E,inp_Q,Carry,Cout,Sum); input inp_E,inp_Q; output Cout,Sum; assign Sum=inp_E ^ inp_Q ^ Carry; assign Cout=inp_E&inp_Q|(inp_E^inp_Q) & Carry;
module full(S,Y,Carry,Cout,Sum); input S,Y; output Cout,Sum; assign Sum=S ^ Y ^ Carry; assign Cout=S&Y|(S^Y) & Carry;
module full(inp_P,inp_T,Carry,Cout,Sum); input inp_P,inp_T; output Cout,Sum; assign Sum=inp_P ^ inp_T ^ Carry; assign Cout=inp_P&inp_T|(inp_P^inp_T) & Carry;
module full(T,A,Carry,Cout,Sum); input T,A; output Cout,Sum; assign Sum=T ^ A ^ Carry; assign Cout=T&A|(T^A) & Carry; endmodule
module full(A,K,Carry,Cout,Sum); input A,K; output Cout,Sum; assign Sum=A ^ K ^ Carry; assign Cout=A&K|(A^K) & Carry; endmodule
module full(U,W,Carry,Cout,Sum); input U,W; output Cout,Sum; assign Sum=U ^ W ^ Carry; assign Cout=U&W|(U^W) & Carry;
module full(inp_Q,inp_C,Carry,Cout,Sum); input inp_Q,inp_C; output Cout,Sum; assign Sum=inp_Q ^ inp_C ^ Carry; assign Cout=inp_Q&inp_C|(inp_Q^inp_C) & Carry;
module full(O,P,Carry,Cout,Sum); input O,P; output Cout,Sum; assign Sum=O ^ P ^ Carry; assign Cout=O&P|(O^P) & Carry; endmodule
module full(inp_B,inp_A,Carry,Cout,Sum); input inp_B,inp_A; output Cout,Sum; assign Sum=inp_B ^ inp_A ^ Carry; assign Cout=inp_B&inp_A|(inp_B^inp_A) & Carry;
module full(inp_X,inp_H,Carry,Cout,Sum); input inp_X,inp_H; output Cout,Sum; assign Sum=inp_X ^ inp_H ^ Carry; assign Cout=inp_X&inp_H|(inp_X^inp_H) & Carry; endmodule
module full(Z,L,Carry,Cout,Sum); input Z,L; output Cout,Sum; assign Sum=Z ^ L ^ Carry; assign Cout=Z&L|(Z^L) & Carry;
module full(inp_L,inp_S,Carry,Cout,Sum); input inp_L,inp_S; output Cout,Sum; assign Sum=inp_L ^ inp_S ^ Carry; assign Cout=inp_L&inp_S|(inp_L^inp_S) & Carry; endmodule
module full(M,L,Carry,Cout,Sum); input M,L; output Cout,Sum; assign Sum=M ^ L ^ Carry; assign Cout=M&L|(M^L) & Carry; endmodule
module full(C,P,Carry,Cout,Sum); input C,P; output Cout,Sum; assign Sum=C ^ P ^ Carry; assign Cout=C&P|(C^P) & Carry; endmodule
module full(inp_W,inp_U,Carry,Cout,Sum); input inp_W,inp_U; output Cout,Sum; assign Sum=inp_W ^ inp_U ^ Carry; assign Cout=inp_W&inp_U|(inp_W^inp_U) & Carry; endmodule
module full(T,G,Carry,Cout,Sum); input T,G; output Cout,Sum; assign Sum=T ^ G ^ Carry; assign Cout=T&G|(T^G) & Carry;
module full(inp_P,inp_R,Carry,Cout,Sum); input inp_P,inp_R; output Cout,Sum; assign Sum=inp_P ^ inp_R ^ Carry; assign Cout=inp_P&inp_R|(inp_P^inp_R) & Carry; endmodule
module full(C,L,Carry,Cout,Sum); input C,L; output Cout,Sum; assign Sum=C ^ L ^ Carry; assign Cout=C&L|(C^L) & Carry;
module full(inp_B,inp_W,Carry,Cout,Sum); input inp_B,inp_W; output Cout,Sum; assign Sum=inp_B ^ inp_W ^ Carry; assign Cout=inp_B&inp_W|(inp_B^inp_W) & Carry;
module full(B,V,Carry,Cout,Sum); input B,V; output Cout,Sum; assign Sum=B ^ V ^ Carry; assign Cout=B&V|(B^V) & Carry;
module full(inp_D,inp_X,Carry,Cout,Sum); input inp_D,inp_X; output Cout,Sum; assign Sum=inp_D ^ inp_X ^ Carry; assign Cout=inp_D&inp_X|(inp_D^inp_X) & Carry; endmodule
module full(Y,W,Carry,Cout,Sum); input Y,W; output Cout,Sum; assign Sum=Y ^ W ^ Carry; assign Cout=Y&W|(Y^W) & Carry; endmodule
module full(inp_G,inp_L,Carry,Cout,Sum); input inp_G,inp_L; output Cout,Sum; assign Sum=inp_G ^ inp_L ^ Carry; assign Cout=inp_G&inp_L|(inp_G^inp_L) & Carry; endmodule
module full(inp_V,inp_S,Carry,Cout,Sum); input inp_V,inp_S; output Cout,Sum; assign Sum=inp_V ^ inp_S ^ Carry; assign Cout=inp_V&inp_S|(inp_V^inp_S) & Carry; endmodule
module full(A,M,Carry,Cout,Sum); input A,M; output Cout,Sum; assign Sum=A ^ M ^ Carry; assign Cout=A&M|(A^M) & Carry; endmodule
module full(inp_U,inp_O,Carry,Cout,Sum); input inp_U,inp_O; output Cout,Sum; assign Sum=inp_U ^ inp_O ^ Carry; assign Cout=inp_U&inp_O|(inp_U^inp_O) & Carry; endmodule
module full(inp_H,inp_E,Carry,Cout,Sum); input inp_H,inp_E; output Cout,Sum; assign Sum=inp_H ^ inp_E ^ Carry; assign Cout=inp_H&inp_E|(inp_H^inp_E) & Carry; endmodule
module full(O,V,Carry,Cout,Sum); input O,V; output Cout,Sum; assign Sum=O ^ V ^ Carry; assign Cout=O&V|(O^V) & Carry; endmodule
module full(inp_A,inp_L,Carry,Cout,Sum); input inp_A,inp_L; output Cout,Sum; assign Sum=inp_A ^ inp_L ^ Carry; assign Cout=inp_A&inp_L|(inp_A^inp_L) & Carry; endmodule
module full(K,Q,Carry,Cout,Sum); input K,Q; output Cout,Sum; assign Sum=K ^ Q ^ Carry; assign Cout=K&Q|(K^Q) & Carry; endmodule
module full(L,U,Carry,Cout,Sum); input L,U; output Cout,Sum; assign Sum=L ^ U ^ Carry; assign Cout=L&U|(L^U) & Carry; endmodule
module full(M,X,Carry,Cout,Sum); input M,X; output Cout,Sum; assign Sum=M ^ X ^ Carry; assign Cout=M&X|(M^X) & Carry; endmodule
module full(inp_T,inp_I,Carry,Cout,Sum); input inp_T,inp_I; output Cout,Sum; assign Sum=inp_T ^ inp_I ^ Carry; assign Cout=inp_T&inp_I|(inp_T^inp_I) & Carry; endmodule
module full(inp_J,inp_S,Carry,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S ^ Carry; assign Cout=inp_J&inp_S|(inp_J^inp_S) & Carry;
module full(G,M,Carry,Cout,Sum); input G,M; output Cout,Sum; assign Sum=G ^ M ^ Carry; assign Cout=G&M|(G^M) & Carry; endmodule
module full(inp_Y,inp_K,Carry,Cout,Sum); input inp_Y,inp_K; output Cout,Sum; assign Sum=inp_Y ^ inp_K ^ Carry; assign Cout=inp_Y&inp_K|(inp_Y^inp_K) & Carry;
module full(E,U,Carry,Cout,Sum); input E,U; output Cout,Sum; assign Sum=E ^ U ^ Carry; assign Cout=E&U|(E^U) & Carry; endmodule
module full(inp_I,inp_M,Carry,Cout,Sum); input inp_I,inp_M; output Cout,Sum; assign Sum=inp_I ^ inp_M ^ Carry; assign Cout=inp_I&inp_M|(inp_I^inp_M) & Carry;
module full(inp_Y,inp_S,Carry,Cout,Sum); input inp_Y,inp_S; output Cout,Sum; assign Sum=inp_Y ^ inp_S ^ Carry; assign Cout=inp_Y&inp_S|(inp_Y^inp_S) & Carry; endmodule
module full(inp_H,inp_B,Carry,Cout,Sum); input inp_H,inp_B; output Cout,Sum; assign Sum=inp_H ^ inp_B ^ Carry; assign Cout=inp_H&inp_B|(inp_H^inp_B) & Carry;
module full(S,V,Carry,Cout,Sum); input S,V; output Cout,Sum; assign Sum=S ^ V ^ Carry; assign Cout=S&V|(S^V) & Carry; endmodule
module full(inp_P,inp_A,Carry,Cout,Sum); input inp_P,inp_A; output Cout,Sum; assign Sum=inp_P ^ inp_A ^ Carry; assign Cout=inp_P&inp_A|(inp_P^inp_A) & Carry; endmodule
module full(inp_H,inp_I,Carry,Cout,Sum); input inp_H,inp_I; output Cout,Sum; assign Sum=inp_H ^ inp_I ^ Carry; assign Cout=inp_H&inp_I|(inp_H^inp_I) & Carry;
module full(D,Y,Carry,Cout,Sum); input D,Y; output Cout,Sum; assign Sum=D ^ Y ^ Carry; assign Cout=D&Y|(D^Y) & Carry;
module full(inp_W,inp_G,Carry,Cout,Sum); input inp_W,inp_G; output Cout,Sum; assign Sum=inp_W ^ inp_G ^ Carry; assign Cout=inp_W&inp_G|(inp_W^inp_G) & Carry;
module full(inp_Y,inp_C,Carry,Cout,Sum); input inp_Y,inp_C; output Cout,Sum; assign Sum=inp_Y ^ inp_C ^ Carry; assign Cout=inp_Y&inp_C|(inp_Y^inp_C) & Carry;
module full(inp_Y,inp_B,Carry,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B ^ Carry; assign Cout=inp_Y&inp_B|(inp_Y^inp_B) & Carry;
module full(F,T,Carry,Cout,Sum); input F,T; output Cout,Sum; assign Sum=F ^ T ^ Carry; assign Cout=F&T|(F^T) & Carry; endmodule
module full(inp_H,inp_W,Carry,Cout,Sum); input inp_H,inp_W; output Cout,Sum; assign Sum=inp_H ^ inp_W ^ Carry; assign Cout=inp_H&inp_W|(inp_H^inp_W) & Carry; endmodule
module full(inp_S,inp_W,Carry,Cout,Sum); input inp_S,inp_W; output Cout,Sum; assign Sum=inp_S ^ inp_W ^ Carry; assign Cout=inp_S&inp_W|(inp_S^inp_W) & Carry; endmodule
module full(U,Q,Carry,Cout,Sum); input U,Q; output Cout,Sum; assign Sum=U ^ Q ^ Carry; assign Cout=U&Q|(U^Q) & Carry;
module full(W,Y,Carry,Cout,Sum); input W,Y; output Cout,Sum; assign Sum=W ^ Y ^ Carry; assign Cout=W&Y|(W^Y) & Carry;
module full(inp_W,inp_U,Carry,Cout,Sum); input inp_W,inp_U; output Cout,Sum; assign Sum=inp_W ^ inp_U ^ Carry; assign Cout=inp_W&inp_U|(inp_W^inp_U) & Carry; endmodule
module full(E,G,Carry,Cout,Sum); input E,G; output Cout,Sum; assign Sum=E ^ G ^ Carry; assign Cout=E&G|(E^G) & Carry; endmodule
module full(inp_M,inp_E,Carry,Cout,Sum); input inp_M,inp_E; output Cout,Sum; assign Sum=inp_M ^ inp_E ^ Carry; assign Cout=inp_M&inp_E|(inp_M^inp_E) & Carry;
module full(inp_N,inp_A,Carry,Cout,Sum); input inp_N,inp_A; output Cout,Sum; assign Sum=inp_N ^ inp_A ^ Carry; assign Cout=inp_N&inp_A|(inp_N^inp_A) & Carry;
module full(inp_G,inp_R,Carry,Cout,Sum); input inp_G,inp_R; output Cout,Sum; assign Sum=inp_G ^ inp_R ^ Carry; assign Cout=inp_G&inp_R|(inp_G^inp_R) & Carry;
module full(X,S,Carry,Cout,Sum); input X,S; output Cout,Sum; assign Sum=X ^ S ^ Carry; assign Cout=X&S|(X^S) & Carry;
module full(U,H,Carry,Cout,Sum); input U,H; output Cout,Sum; assign Sum=U ^ H ^ Carry; assign Cout=U&H|(U^H) & Carry; endmodule
module full(F,B,Carry,Cout,Sum); input F,B; output Cout,Sum; assign Sum=F ^ B ^ Carry; assign Cout=F&B|(F^B) & Carry;
module full(O,Y,Carry,Cout,Sum); input O,Y; output Cout,Sum; assign Sum=O ^ Y ^ Carry; assign Cout=O&Y|(O^Y) & Carry;
module full(inp_J,inp_O,Carry,Cout,Sum); input inp_J,inp_O; output Cout,Sum; assign Sum=inp_J ^ inp_O ^ Carry; assign Cout=inp_J&inp_O|(inp_J^inp_O) & Carry; endmodule
module full(H,L,Carry,Cout,Sum); input H,L; output Cout,Sum; assign Sum=H ^ L ^ Carry; assign Cout=H&L|(H^L) & Carry;
module full(Z,S,Carry,Cout,Sum); input Z,S; output Cout,Sum; assign Sum=Z ^ S ^ Carry; assign Cout=Z&S|(Z^S) & Carry;
module full(X,V,Carry,Cout,Sum); input X,V; output Cout,Sum; assign Sum=X ^ V ^ Carry; assign Cout=X&V|(X^V) & Carry; endmodule
module full(inp_Z,inp_K,Carry,Cout,Sum); input inp_Z,inp_K; output Cout,Sum; assign Sum=inp_Z ^ inp_K ^ Carry; assign Cout=inp_Z&inp_K|(inp_Z^inp_K) & Carry;
module full(inp_Q,inp_B,Carry,Cout,Sum); input inp_Q,inp_B; output Cout,Sum; assign Sum=inp_Q ^ inp_B ^ Carry; assign Cout=inp_Q&inp_B|(inp_Q^inp_B) & Carry;
module full(inp_Y,inp_H,Carry,Cout,Sum); input inp_Y,inp_H; output Cout,Sum; assign Sum=inp_Y ^ inp_H ^ Carry; assign Cout=inp_Y&inp_H|(inp_Y^inp_H) & Carry; endmodule
module full(U,V,Carry,Cout,Sum); input U,V; output Cout,Sum; assign Sum=U ^ V ^ Carry; assign Cout=U&V|(U^V) & Carry;
module full(K,X,Carry,Cout,Sum); input K,X; output Cout,Sum; assign Sum=K ^ X ^ Carry; assign Cout=K&X|(K^X) & Carry; endmodule
module full(inp_N,inp_S,Carry,Cout,Sum); input inp_N,inp_S; output Cout,Sum; assign Sum=inp_N ^ inp_S ^ Carry; assign Cout=inp_N&inp_S|(inp_N^inp_S) & Carry; endmodule
module full(L,M,Carry,Cout,Sum); input L,M; output Cout,Sum; assign Sum=L ^ M ^ Carry; assign Cout=L&M|(L^M) & Carry; endmodule
module full(A,H,Carry,Cout,Sum); input A,H; output Cout,Sum; assign Sum=A ^ H ^ Carry; assign Cout=A&H|(A^H) & Carry;
module full(U,G,Carry,Cout,Sum); input U,G; output Cout,Sum; assign Sum=U ^ G ^ Carry; assign Cout=U&G|(U^G) & Carry; endmodule
module full(X,O,Carry,Cout,Sum); input X,O; output Cout,Sum; assign Sum=X ^ O ^ Carry; assign Cout=X&O|(X^O) & Carry; endmodule
module full(inp_H,inp_R,Carry,Cout,Sum); input inp_H,inp_R; output Cout,Sum; assign Sum=inp_H ^ inp_R ^ Carry; assign Cout=inp_H&inp_R|(inp_H^inp_R) & Carry; endmodule
module full(inp_O,inp_U,Carry,Cout,Sum); input inp_O,inp_U; output Cout,Sum; assign Sum=inp_O ^ inp_U ^ Carry; assign Cout=inp_O&inp_U|(inp_O^inp_U) & Carry; endmodule
module full(O,D,Carry,Cout,Sum); input O,D; output Cout,Sum; assign Sum=O ^ D ^ Carry; assign Cout=O&D|(O^D) & Carry;
module full(inp_P,inp_M,Carry,Cout,Sum); input inp_P,inp_M; output Cout,Sum; assign Sum=inp_P ^ inp_M ^ Carry; assign Cout=inp_P&inp_M|(inp_P^inp_M) & Carry;
module full(inp_G,inp_J,Carry,Cout,Sum); input inp_G,inp_J; output Cout,Sum; assign Sum=inp_G ^ inp_J ^ Carry; assign Cout=inp_G&inp_J|(inp_G^inp_J) & Carry; endmodule
module full(inp_U,inp_G,Carry,Cout,Sum); input inp_U,inp_G; output Cout,Sum; assign Sum=inp_U ^ inp_G ^ Carry; assign Cout=inp_U&inp_G|(inp_U^inp_G) & Carry;
module full(I,S,Carry,Cout,Sum); input I,S; output Cout,Sum; assign Sum=I ^ S ^ Carry; assign Cout=I&S|(I^S) & Carry; endmodule
module full(inp_W,inp_T,Carry,Cout,Sum); input inp_W,inp_T; output Cout,Sum; assign Sum=inp_W ^ inp_T ^ Carry; assign Cout=inp_W&inp_T|(inp_W^inp_T) & Carry;
module full(inp_E,inp_G,Carry,Cout,Sum); input inp_E,inp_G; output Cout,Sum; assign Sum=inp_E ^ inp_G ^ Carry; assign Cout=inp_E&inp_G|(inp_E^inp_G) & Carry; endmodule
module full(D,Q,Carry,Cout,Sum); input D,Q; output Cout,Sum; assign Sum=D ^ Q ^ Carry; assign Cout=D&Q|(D^Q) & Carry; endmodule
module full(O,V,Carry,Cout,Sum); input O,V; output Cout,Sum; assign Sum=O ^ V ^ Carry; assign Cout=O&V|(O^V) & Carry;
module full(inp_H,inp_A,Carry,Cout,Sum); input inp_H,inp_A; output Cout,Sum; assign Sum=inp_H ^ inp_A ^ Carry; assign Cout=inp_H&inp_A|(inp_H^inp_A) & Carry;
module full(inp_H,inp_R,Carry,Cout,Sum); input inp_H,inp_R; output Cout,Sum; assign Sum=inp_H ^ inp_R ^ Carry; assign Cout=inp_H&inp_R|(inp_H^inp_R) & Carry;
module full(inp_B,inp_S,Carry,Cout,Sum); input inp_B,inp_S; output Cout,Sum; assign Sum=inp_B ^ inp_S ^ Carry; assign Cout=inp_B&inp_S|(inp_B^inp_S) & Carry;
module full(inp_E,inp_U,Carry,Cout,Sum); input inp_E,inp_U; output Cout,Sum; assign Sum=inp_E ^ inp_U ^ Carry; assign Cout=inp_E&inp_U|(inp_E^inp_U) & Carry;
module full(inp_M,inp_I,Carry,Cout,Sum); input inp_M,inp_I; output Cout,Sum; assign Sum=inp_M ^ inp_I ^ Carry; assign Cout=inp_M&inp_I|(inp_M^inp_I) & Carry;
module full(inp_G,inp_M,Carry,Cout,Sum); input inp_G,inp_M; output Cout,Sum; assign Sum=inp_G ^ inp_M ^ Carry; assign Cout=inp_G&inp_M|(inp_G^inp_M) & Carry; endmodule
module full(C,K,Carry,Cout,Sum); input C,K; output Cout,Sum; assign Sum=C ^ K ^ Carry; assign Cout=C&K|(C^K) & Carry;
module full(inp_V,inp_X,Carry,Cout,Sum); input inp_V,inp_X; output Cout,Sum; assign Sum=inp_V ^ inp_X ^ Carry; assign Cout=inp_V&inp_X|(inp_V^inp_X) & Carry; endmodule
module full(Y,E,Carry,Cout,Sum); input Y,E; output Cout,Sum; assign Sum=Y ^ E ^ Carry; assign Cout=Y&E|(Y^E) & Carry;
module full(inp_N,inp_Q,Carry,Cout,Sum); input inp_N,inp_Q; output Cout,Sum; assign Sum=inp_N ^ inp_Q ^ Carry; assign Cout=inp_N&inp_Q|(inp_N^inp_Q) & Carry;
module full(A,V,Carry,Cout,Sum); input A,V; output Cout,Sum; assign Sum=A ^ V ^ Carry; assign Cout=A&V|(A^V) & Carry;
module full(M,N,Carry,Cout,Sum); input M,N; output Cout,Sum; assign Sum=M ^ N ^ Carry; assign Cout=M&N|(M^N) & Carry;
module full(inp_W,inp_X,Carry,Cout,Sum); input inp_W,inp_X; output Cout,Sum; assign Sum=inp_W ^ inp_X ^ Carry; assign Cout=inp_W&inp_X|(inp_W^inp_X) & Carry; endmodule
module full(inp_M,inp_Z,Carry,Cout,Sum); input inp_M,inp_Z; output Cout,Sum; assign Sum=inp_M ^ inp_Z ^ Carry; assign Cout=inp_M&inp_Z|(inp_M^inp_Z) & Carry; endmodule
module full(A,I,Carry,Cout,Sum); input A,I; output Cout,Sum; assign Sum=A ^ I ^ Carry; assign Cout=A&I|(A^I) & Carry; endmodule
module full(inp_Z,inp_O,Carry,Cout,Sum); input inp_Z,inp_O; output Cout,Sum; assign Sum=inp_Z ^ inp_O ^ Carry; assign Cout=inp_Z&inp_O|(inp_Z^inp_O) & Carry;
module full(inp_T,inp_S,Carry,Cout,Sum); input inp_T,inp_S; output Cout,Sum; assign Sum=inp_T ^ inp_S ^ Carry; assign Cout=inp_T&inp_S|(inp_T^inp_S) & Carry; endmodule
module full(inp_Y,inp_F,Carry,Cout,Sum); input inp_Y,inp_F; output Cout,Sum; assign Sum=inp_Y ^ inp_F ^ Carry; assign Cout=inp_Y&inp_F|(inp_Y^inp_F) & Carry;
module full(H,D,Carry,Cout,Sum); input H,D; output Cout,Sum; assign Sum=H ^ D ^ Carry; assign Cout=H&D|(H^D) & Carry;
module full(inp_U,inp_D,Carry,Cout,Sum); input inp_U,inp_D; output Cout,Sum; assign Sum=inp_U ^ inp_D ^ Carry; assign Cout=inp_U&inp_D|(inp_U^inp_D) & Carry;
module full(inp_H,inp_S,Carry,Cout,Sum); input inp_H,inp_S; output Cout,Sum; assign Sum=inp_H ^ inp_S ^ Carry; assign Cout=inp_H&inp_S|(inp_H^inp_S) & Carry;
module full(E,Y,Carry,Cout,Sum); input E,Y; output Cout,Sum; assign Sum=E ^ Y ^ Carry; assign Cout=E&Y|(E^Y) & Carry; endmodule
module full(N,D,Carry,Cout,Sum); input N,D; output Cout,Sum; assign Sum=N ^ D ^ Carry; assign Cout=N&D|(N^D) & Carry;
module full(inp_G,inp_L,Carry,Cout,Sum); input inp_G,inp_L; output Cout,Sum; assign Sum=inp_G ^ inp_L ^ Carry; assign Cout=inp_G&inp_L|(inp_G^inp_L) & Carry;
module full(inp_A,inp_R,Carry,Cout,Sum); input inp_A,inp_R; output Cout,Sum; assign Sum=inp_A ^ inp_R ^ Carry; assign Cout=inp_A&inp_R|(inp_A^inp_R) & Carry; endmodule
module full(inp_M,inp_U,Carry,Cout,Sum); input inp_M,inp_U; output Cout,Sum; assign Sum=inp_M ^ inp_U ^ Carry; assign Cout=inp_M&inp_U|(inp_M^inp_U) & Carry; endmodule
module full(Y,P,Carry,Cout,Sum); input Y,P; output Cout,Sum; assign Sum=Y ^ P ^ Carry; assign Cout=Y&P|(Y^P) & Carry; endmodule
module full(inp_V,inp_E,Carry,Cout,Sum); input inp_V,inp_E; output Cout,Sum; assign Sum=inp_V ^ inp_E ^ Carry; assign Cout=inp_V&inp_E|(inp_V^inp_E) & Carry; endmodule
module full(inp_C,inp_R,Carry,Cout,Sum); input inp_C,inp_R; output Cout,Sum; assign Sum=inp_C ^ inp_R ^ Carry; assign Cout=inp_C&inp_R|(inp_C^inp_R) & Carry;
module full(E,O,Carry,Cout,Sum); input E,O; output Cout,Sum; assign Sum=E ^ O ^ Carry; assign Cout=E&O|(E^O) & Carry;
module full(W,D,Carry,Cout,Sum); input W,D; output Cout,Sum; assign Sum=W ^ D ^ Carry; assign Cout=W&D|(W^D) & Carry; endmodule
module full(U,C,Carry,Cout,Sum); input U,C; output Cout,Sum; assign Sum=U ^ C ^ Carry; assign Cout=U&C|(U^C) & Carry; endmodule
module full(Z,M,Carry,Cout,Sum); input Z,M; output Cout,Sum; assign Sum=Z ^ M ^ Carry; assign Cout=Z&M|(Z^M) & Carry; endmodule
module full(inp_Q,inp_E,Carry,Cout,Sum); input inp_Q,inp_E; output Cout,Sum; assign Sum=inp_Q ^ inp_E ^ Carry; assign Cout=inp_Q&inp_E|(inp_Q^inp_E) & Carry; endmodule
module full(inp_I,inp_S,Carry,Cout,Sum); input inp_I,inp_S; output Cout,Sum; assign Sum=inp_I ^ inp_S ^ Carry; assign Cout=inp_I&inp_S|(inp_I^inp_S) & Carry; endmodule
module full(O,W,Carry,Cout,Sum); input O,W; output Cout,Sum; assign Sum=O ^ W ^ Carry; assign Cout=O&W|(O^W) & Carry; endmodule
module full(inp_Q,inp_P,Carry,Cout,Sum); input inp_Q,inp_P; output Cout,Sum; assign Sum=inp_Q ^ inp_P ^ Carry; assign Cout=inp_Q&inp_P|(inp_Q^inp_P) & Carry; endmodule
module full(inp_F,inp_J,Carry,Cout,Sum); input inp_F,inp_J; output Cout,Sum; assign Sum=inp_F ^ inp_J ^ Carry; assign Cout=inp_F&inp_J|(inp_F^inp_J) & Carry;
module full(inp_O,inp_F,Carry,Cout,Sum); input inp_O,inp_F; output Cout,Sum; assign Sum=inp_O ^ inp_F ^ Carry; assign Cout=inp_O&inp_F|(inp_O^inp_F) & Carry;
module full(inp_R,inp_L,Carry,Cout,Sum); input inp_R,inp_L; output Cout,Sum; assign Sum=inp_R ^ inp_L ^ Carry; assign Cout=inp_R&inp_L|(inp_R^inp_L) & Carry; endmodule
module full(U,I,Carry,Cout,Sum); input U,I; output Cout,Sum; assign Sum=U ^ I ^ Carry; assign Cout=U&I|(U^I) & Carry; endmodule
module full(G,E,Carry,Cout,Sum); input G,E; output Cout,Sum; assign Sum=G ^ E ^ Carry; assign Cout=G&E|(G^E) & Carry; endmodule
module full(inp_Z,inp_W,Carry,Cout,Sum); input inp_Z,inp_W; output Cout,Sum; assign Sum=inp_Z ^ inp_W ^ Carry; assign Cout=inp_Z&inp_W|(inp_Z^inp_W) & Carry; endmodule
module full(inp_R,inp_A,Carry,Cout,Sum); input inp_R,inp_A; output Cout,Sum; assign Sum=inp_R ^ inp_A ^ Carry; assign Cout=inp_R&inp_A|(inp_R^inp_A) & Carry;
module full(inp_H,inp_G,Carry,Cout,Sum); input inp_H,inp_G; output Cout,Sum; assign Sum=inp_H ^ inp_G ^ Carry; assign Cout=inp_H&inp_G|(inp_H^inp_G) & Carry;
module full(inp_X,inp_Q,Carry,Cout,Sum); input inp_X,inp_Q; output Cout,Sum; assign Sum=inp_X ^ inp_Q ^ Carry; assign Cout=inp_X&inp_Q|(inp_X^inp_Q) & Carry;
module full(I,V,Carry,Cout,Sum); input I,V; output Cout,Sum; assign Sum=I ^ V ^ Carry; assign Cout=I&V|(I^V) & Carry; endmodule
module full(M,W,Carry,Cout,Sum); input M,W; output Cout,Sum; assign Sum=M ^ W ^ Carry; assign Cout=M&W|(M^W) & Carry;
module full(I,V,Carry,Cout,Sum); input I,V; output Cout,Sum; assign Sum=I ^ V ^ Carry; assign Cout=I&V|(I^V) & Carry; endmodule
module full(inp_R,inp_K,Carry,Cout,Sum); input inp_R,inp_K; output Cout,Sum; assign Sum=inp_R ^ inp_K ^ Carry; assign Cout=inp_R&inp_K|(inp_R^inp_K) & Carry; endmodule
module full(inp_E,inp_F,Carry,Cout,Sum); input inp_E,inp_F; output Cout,Sum; assign Sum=inp_E ^ inp_F ^ Carry; assign Cout=inp_E&inp_F|(inp_E^inp_F) & Carry; endmodule
module full(K,S,Carry,Cout,Sum); input K,S; output Cout,Sum; assign Sum=K ^ S ^ Carry; assign Cout=K&S|(K^S) & Carry; endmodule
module full(C,Z,Carry,Cout,Sum); input C,Z; output Cout,Sum; assign Sum=C ^ Z ^ Carry; assign Cout=C&Z|(C^Z) & Carry; endmodule
module full(inp_Y,inp_K,Carry,Cout,Sum); input inp_Y,inp_K; output Cout,Sum; assign Sum=inp_Y ^ inp_K ^ Carry; assign Cout=inp_Y&inp_K|(inp_Y^inp_K) & Carry; endmodule
module full(F,E,Carry,Cout,Sum); input F,E; output Cout,Sum; assign Sum=F ^ E ^ Carry; assign Cout=F&E|(F^E) & Carry; endmodule
module full(W,T,Carry,Cout,Sum); input W,T; output Cout,Sum; assign Sum=W ^ T ^ Carry; assign Cout=W&T|(W^T) & Carry;
module full(X,F,Carry,Cout,Sum); input X,F; output Cout,Sum; assign Sum=X ^ F ^ Carry; assign Cout=X&F|(X^F) & Carry; endmodule
module full(inp_K,inp_C,Carry,Cout,Sum); input inp_K,inp_C; output Cout,Sum; assign Sum=inp_K ^ inp_C ^ Carry; assign Cout=inp_K&inp_C|(inp_K^inp_C) & Carry; endmodule
module full(M,K,Carry,Cout,Sum); input M,K; output Cout,Sum; assign Sum=M ^ K ^ Carry; assign Cout=M&K|(M^K) & Carry; endmodule
module full(inp_F,inp_L,Carry,Cout,Sum); input inp_F,inp_L; output Cout,Sum; assign Sum=inp_F ^ inp_L ^ Carry; assign Cout=inp_F&inp_L|(inp_F^inp_L) & Carry; endmodule
module full(J,D,Carry,Cout,Sum); input J,D; output Cout,Sum; assign Sum=J ^ D ^ Carry; assign Cout=J&D|(J^D) & Carry; endmodule
module full(S,Q,Carry,Cout,Sum); input S,Q; output Cout,Sum; assign Sum=S ^ Q ^ Carry; assign Cout=S&Q|(S^Q) & Carry;
module full(inp_Q,inp_J,Carry,Cout,Sum); input inp_Q,inp_J; output Cout,Sum; assign Sum=inp_Q ^ inp_J ^ Carry; assign Cout=inp_Q&inp_J|(inp_Q^inp_J) & Carry;
module full(O,D,Carry,Cout,Sum); input O,D; output Cout,Sum; assign Sum=O ^ D ^ Carry; assign Cout=O&D|(O^D) & Carry;
module full(G,N,Carry,Cout,Sum); input G,N; output Cout,Sum; assign Sum=G ^ N ^ Carry; assign Cout=G&N|(G^N) & Carry; endmodule
module full(inp_O,inp_G,Carry,Cout,Sum); input inp_O,inp_G; output Cout,Sum; assign Sum=inp_O ^ inp_G ^ Carry; assign Cout=inp_O&inp_G|(inp_O^inp_G) & Carry;
module full(T,P,Carry,Cout,Sum); input T,P; output Cout,Sum; assign Sum=T ^ P ^ Carry; assign Cout=T&P|(T^P) & Carry;
module full(inp_Q,inp_S,Carry,Cout,Sum); input inp_Q,inp_S; output Cout,Sum; assign Sum=inp_Q ^ inp_S ^ Carry; assign Cout=inp_Q&inp_S|(inp_Q^inp_S) & Carry;
module full(G,H,Carry,Cout,Sum); input G,H; output Cout,Sum; assign Sum=G ^ H ^ Carry; assign Cout=G&H|(G^H) & Carry;
module full(inp_O,inp_Y,Carry,Cout,Sum); input inp_O,inp_Y; output Cout,Sum; assign Sum=inp_O ^ inp_Y ^ Carry; assign Cout=inp_O&inp_Y|(inp_O^inp_Y) & Carry; endmodule
module full(A,P,Carry,Cout,Sum); input A,P; output Cout,Sum; assign Sum=A ^ P ^ Carry; assign Cout=A&P|(A^P) & Carry; endmodule
module full(inp_X,inp_I,Carry,Cout,Sum); input inp_X,inp_I; output Cout,Sum; assign Sum=inp_X ^ inp_I ^ Carry; assign Cout=inp_X&inp_I|(inp_X^inp_I) & Carry; endmodule
module full(inp_W,inp_C,Carry,Cout,Sum); input inp_W,inp_C; output Cout,Sum; assign Sum=inp_W ^ inp_C ^ Carry; assign Cout=inp_W&inp_C|(inp_W^inp_C) & Carry;
module full(O,D,Carry,Cout,Sum); input O,D; output Cout,Sum; assign Sum=O ^ D ^ Carry; assign Cout=O&D|(O^D) & Carry; endmodule
module full(M,N,Carry,Cout,Sum); input M,N; output Cout,Sum; assign Sum=M ^ N ^ Carry; assign Cout=M&N|(M^N) & Carry; endmodule
module full(inp_T,inp_E,Carry,Cout,Sum); input inp_T,inp_E; output Cout,Sum; assign Sum=inp_T ^ inp_E ^ Carry; assign Cout=inp_T&inp_E|(inp_T^inp_E) & Carry;
module full(inp_D,inp_A,Carry,Cout,Sum); input inp_D,inp_A; output Cout,Sum; assign Sum=inp_D ^ inp_A ^ Carry; assign Cout=inp_D&inp_A|(inp_D^inp_A) & Carry;
module full(inp_D,inp_W,Carry,Cout,Sum); input inp_D,inp_W; output Cout,Sum; assign Sum=inp_D ^ inp_W ^ Carry; assign Cout=inp_D&inp_W|(inp_D^inp_W) & Carry;
module full(R,O,Carry,Cout,Sum); input R,O; output Cout,Sum; assign Sum=R ^ O ^ Carry; assign Cout=R&O|(R^O) & Carry;
module full(inp_O,inp_V,Carry,Cout,Sum); input inp_O,inp_V; output Cout,Sum; assign Sum=inp_O ^ inp_V ^ Carry; assign Cout=inp_O&inp_V|(inp_O^inp_V) & Carry; endmodule
module full(B,O,Carry,Cout,Sum); input B,O; output Cout,Sum; assign Sum=B ^ O ^ Carry; assign Cout=B&O|(B^O) & Carry;
module full(I,D,Carry,Cout,Sum); input I,D; output Cout,Sum; assign Sum=I ^ D ^ Carry; assign Cout=I&D|(I^D) & Carry; endmodule
module full(inp_A,inp_P,Carry,Cout,Sum); input inp_A,inp_P; output Cout,Sum; assign Sum=inp_A ^ inp_P ^ Carry; assign Cout=inp_A&inp_P|(inp_A^inp_P) & Carry; endmodule
module full(inp_Z,inp_P,Carry,Cout,Sum); input inp_Z,inp_P; output Cout,Sum; assign Sum=inp_Z ^ inp_P ^ Carry; assign Cout=inp_Z&inp_P|(inp_Z^inp_P) & Carry; endmodule
module full(J,K,Carry,Cout,Sum); input J,K; output Cout,Sum; assign Sum=J ^ K ^ Carry; assign Cout=J&K|(J^K) & Carry; endmodule
module full(K,T,Carry,Cout,Sum); input K,T; output Cout,Sum; assign Sum=K ^ T ^ Carry; assign Cout=K&T|(K^T) & Carry;
module full(N,F,Carry,Cout,Sum); input N,F; output Cout,Sum; assign Sum=N ^ F ^ Carry; assign Cout=N&F|(N^F) & Carry;
module full(D,R,Carry,Cout,Sum); input D,R; output Cout,Sum; assign Sum=D ^ R ^ Carry; assign Cout=D&R|(D^R) & Carry; endmodule
module full(J,U,Carry,Cout,Sum); input J,U; output Cout,Sum; assign Sum=J ^ U ^ Carry; assign Cout=J&U|(J^U) & Carry;
module full(C,L,Carry,Cout,Sum); input C,L; output Cout,Sum; assign Sum=C ^ L ^ Carry; assign Cout=C&L|(C^L) & Carry; endmodule
module full(U,Z,Carry,Cout,Sum); input U,Z; output Cout,Sum; assign Sum=U ^ Z ^ Carry; assign Cout=U&Z|(U^Z) & Carry;
module full(inp_I,inp_Q,Carry,Cout,Sum); input inp_I,inp_Q; output Cout,Sum; assign Sum=inp_I ^ inp_Q ^ Carry; assign Cout=inp_I&inp_Q|(inp_I^inp_Q) & Carry;
module full(H,G,Carry,Cout,Sum); input H,G; output Cout,Sum; assign Sum=H ^ G ^ Carry; assign Cout=H&G|(H^G) & Carry; endmodule
module full(K,N,Carry,Cout,Sum); input K,N; output Cout,Sum; assign Sum=K ^ N ^ Carry; assign Cout=K&N|(K^N) & Carry;
module full(N,P,Carry,Cout,Sum); input N,P; output Cout,Sum; assign Sum=N ^ P ^ Carry; assign Cout=N&P|(N^P) & Carry; endmodule
module full(N,A,Carry,Cout,Sum); input N,A; output Cout,Sum; assign Sum=N ^ A ^ Carry; assign Cout=N&A|(N^A) & Carry;
module full(inp_Q,inp_J,Carry,Cout,Sum); input inp_Q,inp_J; output Cout,Sum; assign Sum=inp_Q ^ inp_J ^ Carry; assign Cout=inp_Q&inp_J|(inp_Q^inp_J) & Carry; endmodule
module full(V,Z,Carry,Cout,Sum); input V,Z; output Cout,Sum; assign Sum=V ^ Z ^ Carry; assign Cout=V&Z|(V^Z) & Carry;
module full(J,H,Carry,Cout,Sum); input J,H; output Cout,Sum; assign Sum=J ^ H ^ Carry; assign Cout=J&H|(J^H) & Carry; endmodule
module full(H,A,Carry,Cout,Sum); input H,A; output Cout,Sum; assign Sum=H ^ A ^ Carry; assign Cout=H&A|(H^A) & Carry;
module full(inp_V,inp_Q,Carry,Cout,Sum); input inp_V,inp_Q; output Cout,Sum; assign Sum=inp_V ^ inp_Q ^ Carry; assign Cout=inp_V&inp_Q|(inp_V^inp_Q) & Carry; endmodule
module full(H,Z,Carry,Cout,Sum); input H,Z; output Cout,Sum; assign Sum=H ^ Z ^ Carry; assign Cout=H&Z|(H^Z) & Carry;
module full(S,V,Carry,Cout,Sum); input S,V; output Cout,Sum; assign Sum=S ^ V ^ Carry; assign Cout=S&V|(S^V) & Carry; endmodule
module full(inp_T,inp_B,Carry,Cout,Sum); input inp_T,inp_B; output Cout,Sum; assign Sum=inp_T ^ inp_B ^ Carry; assign Cout=inp_T&inp_B|(inp_T^inp_B) & Carry; endmodule
module full(inp_R,inp_M,Carry,Cout,Sum); input inp_R,inp_M; output Cout,Sum; assign Sum=inp_R ^ inp_M ^ Carry; assign Cout=inp_R&inp_M|(inp_R^inp_M) & Carry;
module full(I,X,Carry,Cout,Sum); input I,X; output Cout,Sum; assign Sum=I ^ X ^ Carry; assign Cout=I&X|(I^X) & Carry;
module full(H,M,Carry,Cout,Sum); input H,M; output Cout,Sum; assign Sum=H ^ M ^ Carry; assign Cout=H&M|(H^M) & Carry; endmodule
module full(inp_D,inp_E,Carry,Cout,Sum); input inp_D,inp_E; output Cout,Sum; assign Sum=inp_D ^ inp_E ^ Carry; assign Cout=inp_D&inp_E|(inp_D^inp_E) & Carry;
module full(E,Q,Carry,Cout,Sum); input E,Q; output Cout,Sum; assign Sum=E ^ Q ^ Carry; assign Cout=E&Q|(E^Q) & Carry;
module full(I,P,Carry,Cout,Sum); input I,P; output Cout,Sum; assign Sum=I ^ P ^ Carry; assign Cout=I&P|(I^P) & Carry;
module full(F,X,Carry,Cout,Sum); input F,X; output Cout,Sum; assign Sum=F ^ X ^ Carry; assign Cout=F&X|(F^X) & Carry; endmodule
module full(Q,T,Carry,Cout,Sum); input Q,T; output Cout,Sum; assign Sum=Q ^ T ^ Carry; assign Cout=Q&T|(Q^T) & Carry;
module full(inp_K,inp_Q,Carry,Cout,Sum); input inp_K,inp_Q; output Cout,Sum; assign Sum=inp_K ^ inp_Q ^ Carry; assign Cout=inp_K&inp_Q|(inp_K^inp_Q) & Carry; endmodule
module full(inp_A,inp_S,Carry,Cout,Sum); input inp_A,inp_S; output Cout,Sum; assign Sum=inp_A ^ inp_S ^ Carry; assign Cout=inp_A&inp_S|(inp_A^inp_S) & Carry; endmodule
module full(inp_T,inp_E,Carry,Cout,Sum); input inp_T,inp_E; output Cout,Sum; assign Sum=inp_T ^ inp_E ^ Carry; assign Cout=inp_T&inp_E|(inp_T^inp_E) & Carry; endmodule
module full(B,H,Carry,Cout,Sum); input B,H; output Cout,Sum; assign Sum=B ^ H ^ Carry; assign Cout=B&H|(B^H) & Carry; endmodule
module full(X,U,Carry,Cout,Sum); input X,U; output Cout,Sum; assign Sum=X ^ U ^ Carry; assign Cout=X&U|(X^U) & Carry;
module full(V,S,Carry,Cout,Sum); input V,S; output Cout,Sum; assign Sum=V ^ S ^ Carry; assign Cout=V&S|(V^S) & Carry;
module full(inp_P,inp_S,Carry,Cout,Sum); input inp_P,inp_S; output Cout,Sum; assign Sum=inp_P ^ inp_S ^ Carry; assign Cout=inp_P&inp_S|(inp_P^inp_S) & Carry;
module full(A,D,Carry,Cout,Sum); input A,D; output Cout,Sum; assign Sum=A ^ D ^ Carry; assign Cout=A&D|(A^D) & Carry; endmodule
module full(S,V,Carry,Cout,Sum); input S,V; output Cout,Sum; assign Sum=S ^ V ^ Carry; assign Cout=S&V|(S^V) & Carry;
module full(U,P,Carry,Cout,Sum); input U,P; output Cout,Sum; assign Sum=U ^ P ^ Carry; assign Cout=U&P|(U^P) & Carry; endmodule
module full(P,J,Carry,Cout,Sum); input P,J; output Cout,Sum; assign Sum=P ^ J ^ Carry; assign Cout=P&J|(P^J) & Carry;
module full(inp_F,inp_C,Carry,Cout,Sum); input inp_F,inp_C; output Cout,Sum; assign Sum=inp_F ^ inp_C ^ Carry; assign Cout=inp_F&inp_C|(inp_F^inp_C) & Carry; endmodule
module full(S,P,Carry,Cout,Sum); input S,P; output Cout,Sum; assign Sum=S ^ P ^ Carry; assign Cout=S&P|(S^P) & Carry; endmodule
module full(inp_W,inp_Z,Carry,Cout,Sum); input inp_W,inp_Z; output Cout,Sum; assign Sum=inp_W ^ inp_Z ^ Carry; assign Cout=inp_W&inp_Z|(inp_W^inp_Z) & Carry;
module full(inp_C,inp_D,Carry,Cout,Sum); input inp_C,inp_D; output Cout,Sum; assign Sum=inp_C ^ inp_D ^ Carry; assign Cout=inp_C&inp_D|(inp_C^inp_D) & Carry; endmodule
module full(inp_N,inp_I,Carry,Cout,Sum); input inp_N,inp_I; output Cout,Sum; assign Sum=inp_N ^ inp_I ^ Carry; assign Cout=inp_N&inp_I|(inp_N^inp_I) & Carry; endmodule
module full(inp_P,inp_H,Carry,Cout,Sum); input inp_P,inp_H; output Cout,Sum; assign Sum=inp_P ^ inp_H ^ Carry; assign Cout=inp_P&inp_H|(inp_P^inp_H) & Carry;
module full(J,H,Carry,Cout,Sum); input J,H; output Cout,Sum; assign Sum=J ^ H ^ Carry; assign Cout=J&H|(J^H) & Carry; endmodule
module full(D,C,Carry,Cout,Sum); input D,C; output Cout,Sum; assign Sum=D ^ C ^ Carry; assign Cout=D&C|(D^C) & Carry;
module full(inp_V,inp_N,Carry,Cout,Sum); input inp_V,inp_N; output Cout,Sum; assign Sum=inp_V ^ inp_N ^ Carry; assign Cout=inp_V&inp_N|(inp_V^inp_N) & Carry;
module full(D,J,Carry,Cout,Sum); input D,J; output Cout,Sum; assign Sum=D ^ J ^ Carry; assign Cout=D&J|(D^J) & Carry;
module full(inp_G,inp_N,Carry,Cout,Sum); input inp_G,inp_N; output Cout,Sum; assign Sum=inp_G ^ inp_N ^ Carry; assign Cout=inp_G&inp_N|(inp_G^inp_N) & Carry;
module full(V,H,Carry,Cout,Sum); input V,H; output Cout,Sum; assign Sum=V ^ H ^ Carry; assign Cout=V&H|(V^H) & Carry;
module full(S,R,Carry,Cout,Sum); input S,R; output Cout,Sum; assign Sum=S ^ R ^ Carry; assign Cout=S&R|(S^R) & Carry;
module full(inp_E,inp_N,Carry,Cout,Sum); input inp_E,inp_N; output Cout,Sum; assign Sum=inp_E ^ inp_N ^ Carry; assign Cout=inp_E&inp_N|(inp_E^inp_N) & Carry; endmodule
module full(I,Q,Carry,Cout,Sum); input I,Q; output Cout,Sum; assign Sum=I ^ Q ^ Carry; assign Cout=I&Q|(I^Q) & Carry; endmodule
module full(inp_J,inp_U,Carry,Cout,Sum); input inp_J,inp_U; output Cout,Sum; assign Sum=inp_J ^ inp_U ^ Carry; assign Cout=inp_J&inp_U|(inp_J^inp_U) & Carry;
module full(F,J,Carry,Cout,Sum); input F,J; output Cout,Sum; assign Sum=F ^ J ^ Carry; assign Cout=F&J|(F^J) & Carry; endmodule
module full(inp_R,inp_W,Carry,Cout,Sum); input inp_R,inp_W; output Cout,Sum; assign Sum=inp_R ^ inp_W ^ Carry; assign Cout=inp_R&inp_W|(inp_R^inp_W) & Carry; endmodule
module full(inp_D,inp_N,Carry,Cout,Sum); input inp_D,inp_N; output Cout,Sum; assign Sum=inp_D ^ inp_N ^ Carry; assign Cout=inp_D&inp_N|(inp_D^inp_N) & Carry; endmodule
module full(P,J,Carry,Cout,Sum); input P,J; output Cout,Sum; assign Sum=P ^ J ^ Carry; assign Cout=P&J|(P^J) & Carry; endmodule
module full(inp_Z,inp_M,Carry,Cout,Sum); input inp_Z,inp_M; output Cout,Sum; assign Sum=inp_Z ^ inp_M ^ Carry; assign Cout=inp_Z&inp_M|(inp_Z^inp_M) & Carry; endmodule
module full(E,A,Carry,Cout,Sum); input E,A; output Cout,Sum; assign Sum=E ^ A ^ Carry; assign Cout=E&A|(E^A) & Carry; endmodule
module full(inp_M,inp_T,Carry,Cout,Sum); input inp_M,inp_T; output Cout,Sum; assign Sum=inp_M ^ inp_T ^ Carry; assign Cout=inp_M&inp_T|(inp_M^inp_T) & Carry; endmodule
module full(inp_V,inp_G,Carry,Cout,Sum); input inp_V,inp_G; output Cout,Sum; assign Sum=inp_V ^ inp_G ^ Carry; assign Cout=inp_V&inp_G|(inp_V^inp_G) & Carry;
module full(N,A,Carry,Cout,Sum); input N,A; output Cout,Sum; assign Sum=N ^ A ^ Carry; assign Cout=N&A|(N^A) & Carry; endmodule
module full(inp_C,inp_V,Carry,Cout,Sum); input inp_C,inp_V; output Cout,Sum; assign Sum=inp_C ^ inp_V ^ Carry; assign Cout=inp_C&inp_V|(inp_C^inp_V) & Carry; endmodule
module full(inp_W,inp_L,Carry,Cout,Sum); input inp_W,inp_L; output Cout,Sum; assign Sum=inp_W ^ inp_L ^ Carry; assign Cout=inp_W&inp_L|(inp_W^inp_L) & Carry;
module full(inp_V,inp_C,Carry,Cout,Sum); input inp_V,inp_C; output Cout,Sum; assign Sum=inp_V ^ inp_C ^ Carry; assign Cout=inp_V&inp_C|(inp_V^inp_C) & Carry;
module full(inp_D,inp_B,Carry,Cout,Sum); input inp_D,inp_B; output Cout,Sum; assign Sum=inp_D ^ inp_B ^ Carry; assign Cout=inp_D&inp_B|(inp_D^inp_B) & Carry; endmodule
module full(inp_C,inp_P,Carry,Cout,Sum); input inp_C,inp_P; output Cout,Sum; assign Sum=inp_C ^ inp_P ^ Carry; assign Cout=inp_C&inp_P|(inp_C^inp_P) & Carry; endmodule
module full(inp_K,inp_X,Carry,Cout,Sum); input inp_K,inp_X; output Cout,Sum; assign Sum=inp_K ^ inp_X ^ Carry; assign Cout=inp_K&inp_X|(inp_K^inp_X) & Carry; endmodule
module full(inp_X,inp_Y,Carry,Cout,Sum); input inp_X,inp_Y; output Cout,Sum; assign Sum=inp_X ^ inp_Y ^ Carry; assign Cout=inp_X&inp_Y|(inp_X^inp_Y) & Carry;
module full(inp_F,inp_I,Carry,Cout,Sum); input inp_F,inp_I; output Cout,Sum; assign Sum=inp_F ^ inp_I ^ Carry; assign Cout=inp_F&inp_I|(inp_F^inp_I) & Carry;
module full(I,F,Carry,Cout,Sum); input I,F; output Cout,Sum; assign Sum=I ^ F ^ Carry; assign Cout=I&F|(I^F) & Carry; endmodule
module full(S,U,Carry,Cout,Sum); input S,U; output Cout,Sum; assign Sum=S ^ U ^ Carry; assign Cout=S&U|(S^U) & Carry;
module full(D,R,Carry,Cout,Sum); input D,R; output Cout,Sum; assign Sum=D ^ R ^ Carry; assign Cout=D&R|(D^R) & Carry; endmodule
module full(inp_H,inp_I,Carry,Cout,Sum); input inp_H,inp_I; output Cout,Sum; assign Sum=inp_H ^ inp_I ^ Carry; assign Cout=inp_H&inp_I|(inp_H^inp_I) & Carry; endmodule
module full(inp_X,inp_W,Carry,Cout,Sum); input inp_X,inp_W; output Cout,Sum; assign Sum=inp_X ^ inp_W ^ Carry; assign Cout=inp_X&inp_W|(inp_X^inp_W) & Carry; endmodule
module full(inp_R,inp_F,Carry,Cout,Sum); input inp_R,inp_F; output Cout,Sum; assign Sum=inp_R ^ inp_F ^ Carry; assign Cout=inp_R&inp_F|(inp_R^inp_F) & Carry;
module full(inp_M,inp_Q,Carry,Cout,Sum); input inp_M,inp_Q; output Cout,Sum; assign Sum=inp_M ^ inp_Q ^ Carry; assign Cout=inp_M&inp_Q|(inp_M^inp_Q) & Carry;
module full(inp_V,inp_Y,Carry,Cout,Sum); input inp_V,inp_Y; output Cout,Sum; assign Sum=inp_V ^ inp_Y ^ Carry; assign Cout=inp_V&inp_Y|(inp_V^inp_Y) & Carry; endmodule
module full(inp_K,inp_N,Carry,Cout,Sum); input inp_K,inp_N; output Cout,Sum; assign Sum=inp_K ^ inp_N ^ Carry; assign Cout=inp_K&inp_N|(inp_K^inp_N) & Carry; endmodule
module full(O,G,Carry,Cout,Sum); input O,G; output Cout,Sum; assign Sum=O ^ G ^ Carry; assign Cout=O&G|(O^G) & Carry; endmodule
module full(N,R,Carry,Cout,Sum); input N,R; output Cout,Sum; assign Sum=N ^ R ^ Carry; assign Cout=N&R|(N^R) & Carry; endmodule
module full(H,C,Carry,Cout,Sum); input H,C; output Cout,Sum; assign Sum=H ^ C ^ Carry; assign Cout=H&C|(H^C) & Carry;
module full(inp_Z,inp_X,Carry,Cout,Sum); input inp_Z,inp_X; output Cout,Sum; assign Sum=inp_Z ^ inp_X ^ Carry; assign Cout=inp_Z&inp_X|(inp_Z^inp_X) & Carry;
module full(F,K,Carry,Cout,Sum); input F,K; output Cout,Sum; assign Sum=F ^ K ^ Carry; assign Cout=F&K|(F^K) & Carry;
module full(Z,E,Carry,Cout,Sum); input Z,E; output Cout,Sum; assign Sum=Z ^ E ^ Carry; assign Cout=Z&E|(Z^E) & Carry; endmodule
module full(N,T,Carry,Cout,Sum); input N,T; output Cout,Sum; assign Sum=N ^ T ^ Carry; assign Cout=N&T|(N^T) & Carry;
module full(inp_S,inp_W,Carry,Cout,Sum); input inp_S,inp_W; output Cout,Sum; assign Sum=inp_S ^ inp_W ^ Carry; assign Cout=inp_S&inp_W|(inp_S^inp_W) & Carry; endmodule
module full(inp_F,inp_L,Carry,Cout,Sum); input inp_F,inp_L; output Cout,Sum; assign Sum=inp_F ^ inp_L ^ Carry; assign Cout=inp_F&inp_L|(inp_F^inp_L) & Carry;
module full(inp_O,inp_P,Carry,Cout,Sum); input inp_O,inp_P; output Cout,Sum; assign Sum=inp_O ^ inp_P ^ Carry; assign Cout=inp_O&inp_P|(inp_O^inp_P) & Carry; endmodule
module full(A,Y,Carry,Cout,Sum); input A,Y; output Cout,Sum; assign Sum=A ^ Y ^ Carry; assign Cout=A&Y|(A^Y) & Carry;
module full(inp_I,inp_C,Carry,Cout,Sum); input inp_I,inp_C; output Cout,Sum; assign Sum=inp_I ^ inp_C ^ Carry; assign Cout=inp_I&inp_C|(inp_I^inp_C) & Carry; endmodule
module full(inp_Q,inp_O,Carry,Cout,Sum); input inp_Q,inp_O; output Cout,Sum; assign Sum=inp_Q ^ inp_O ^ Carry; assign Cout=inp_Q&inp_O|(inp_Q^inp_O) & Carry; endmodule
module full(J,E,Carry,Cout,Sum); input J,E; output Cout,Sum; assign Sum=J ^ E ^ Carry; assign Cout=J&E|(J^E) & Carry;
module full(R,V,Carry,Cout,Sum); input R,V; output Cout,Sum; assign Sum=R ^ V ^ Carry; assign Cout=R&V|(R^V) & Carry; endmodule
module full(P,I,Carry,Cout,Sum); input P,I; output Cout,Sum; assign Sum=P ^ I ^ Carry; assign Cout=P&I|(P^I) & Carry;
module full(R,L,Carry,Cout,Sum); input R,L; output Cout,Sum; assign Sum=R ^ L ^ Carry; assign Cout=R&L|(R^L) & Carry;
module full(inp_A,inp_M,Carry,Cout,Sum); input inp_A,inp_M; output Cout,Sum; assign Sum=inp_A ^ inp_M ^ Carry; assign Cout=inp_A&inp_M|(inp_A^inp_M) & Carry; endmodule
module full(L,A,Carry,Cout,Sum); input L,A; output Cout,Sum; assign Sum=L ^ A ^ Carry; assign Cout=L&A|(L^A) & Carry;
module full(inp_E,inp_L,Carry,Cout,Sum); input inp_E,inp_L; output Cout,Sum; assign Sum=inp_E ^ inp_L ^ Carry; assign Cout=inp_E&inp_L|(inp_E^inp_L) & Carry; endmodule
module full(E,V,Carry,Cout,Sum); input E,V; output Cout,Sum; assign Sum=E ^ V ^ Carry; assign Cout=E&V|(E^V) & Carry;
module full(inp_N,inp_H,Carry,Cout,Sum); input inp_N,inp_H; output Cout,Sum; assign Sum=inp_N ^ inp_H ^ Carry; assign Cout=inp_N&inp_H|(inp_N^inp_H) & Carry;
module full(inp_S,inp_A,Carry,Cout,Sum); input inp_S,inp_A; output Cout,Sum; assign Sum=inp_S ^ inp_A ^ Carry; assign Cout=inp_S&inp_A|(inp_S^inp_A) & Carry; endmodule
module full(N,J,Carry,Cout,Sum); input N,J; output Cout,Sum; assign Sum=N ^ J ^ Carry; assign Cout=N&J|(N^J) & Carry;
module full(S,P,Carry,Cout,Sum); input S,P; output Cout,Sum; assign Sum=S ^ P ^ Carry; assign Cout=S&P|(S^P) & Carry; endmodule
module full(inp_P,inp_D,Carry,Cout,Sum); input inp_P,inp_D; output Cout,Sum; assign Sum=inp_P ^ inp_D ^ Carry; assign Cout=inp_P&inp_D|(inp_P^inp_D) & Carry; endmodule
module full(inp_T,inp_X,Carry,Cout,Sum); input inp_T,inp_X; output Cout,Sum; assign Sum=inp_T ^ inp_X ^ Carry; assign Cout=inp_T&inp_X|(inp_T^inp_X) & Carry; endmodule
module full(inp_K,inp_L,Carry,Cout,Sum); input inp_K,inp_L; output Cout,Sum; assign Sum=inp_K ^ inp_L ^ Carry; assign Cout=inp_K&inp_L|(inp_K^inp_L) & Carry;
module full(J,Z,Carry,Cout,Sum); input J,Z; output Cout,Sum; assign Sum=J ^ Z ^ Carry; assign Cout=J&Z|(J^Z) & Carry; endmodule
module full(Z,U,Carry,Cout,Sum); input Z,U; output Cout,Sum; assign Sum=Z ^ U ^ Carry; assign Cout=Z&U|(Z^U) & Carry; endmodule
module full(C,O,Carry,Cout,Sum); input C,O; output Cout,Sum; assign Sum=C ^ O ^ Carry; assign Cout=C&O|(C^O) & Carry;
module full(inp_L,inp_Q,Carry,Cout,Sum); input inp_L,inp_Q; output Cout,Sum; assign Sum=inp_L ^ inp_Q ^ Carry; assign Cout=inp_L&inp_Q|(inp_L^inp_Q) & Carry; endmodule
module full(M,I,Carry,Cout,Sum); input M,I; output Cout,Sum; assign Sum=M ^ I ^ Carry; assign Cout=M&I|(M^I) & Carry; endmodule
module full(inp_A,inp_R,Carry,Cout,Sum); input inp_A,inp_R; output Cout,Sum; assign Sum=inp_A ^ inp_R ^ Carry; assign Cout=inp_A&inp_R|(inp_A^inp_R) & Carry;
module full(inp_F,inp_K,Carry,Cout,Sum); input inp_F,inp_K; output Cout,Sum; assign Sum=inp_F ^ inp_K ^ Carry; assign Cout=inp_F&inp_K|(inp_F^inp_K) & Carry; endmodule
module full(M,O,Carry,Cout,Sum); input M,O; output Cout,Sum; assign Sum=M ^ O ^ Carry; assign Cout=M&O|(M^O) & Carry;
module full(R,P,Carry,Cout,Sum); input R,P; output Cout,Sum; assign Sum=R ^ P ^ Carry; assign Cout=R&P|(R^P) & Carry;
module full(inp_L,inp_S,Carry,Cout,Sum); input inp_L,inp_S; output Cout,Sum; assign Sum=inp_L ^ inp_S ^ Carry; assign Cout=inp_L&inp_S|(inp_L^inp_S) & Carry;
module full(inp_H,inp_J,Carry,Cout,Sum); input inp_H,inp_J; output Cout,Sum; assign Sum=inp_H ^ inp_J ^ Carry; assign Cout=inp_H&inp_J|(inp_H^inp_J) & Carry; endmodule
module full(inp_R,inp_Y,Carry,Cout,Sum); input inp_R,inp_Y; output Cout,Sum; assign Sum=inp_R ^ inp_Y ^ Carry; assign Cout=inp_R&inp_Y|(inp_R^inp_Y) & Carry;
module full(T,E,Carry,Cout,Sum); input T,E; output Cout,Sum; assign Sum=T ^ E ^ Carry; assign Cout=T&E|(T^E) & Carry;
module full(inp_M,inp_C,Carry,Cout,Sum); input inp_M,inp_C; output Cout,Sum; assign Sum=inp_M ^ inp_C ^ Carry; assign Cout=inp_M&inp_C|(inp_M^inp_C) & Carry; endmodule
module full(inp_Y,inp_E,Carry,Cout,Sum); input inp_Y,inp_E; output Cout,Sum; assign Sum=inp_Y ^ inp_E ^ Carry; assign Cout=inp_Y&inp_E|(inp_Y^inp_E) & Carry; endmodule
module full(G,B,Carry,Cout,Sum); input G,B; output Cout,Sum; assign Sum=G ^ B ^ Carry; assign Cout=G&B|(G^B) & Carry; endmodule
module full(U,E,Carry,Cout,Sum); input U,E; output Cout,Sum; assign Sum=U ^ E ^ Carry; assign Cout=U&E|(U^E) & Carry; endmodule
module full(N,Y,Carry,Cout,Sum); input N,Y; output Cout,Sum; assign Sum=N ^ Y ^ Carry; assign Cout=N&Y|(N^Y) & Carry; endmodule
module full(inp_M,inp_J,Carry,Cout,Sum); input inp_M,inp_J; output Cout,Sum; assign Sum=inp_M ^ inp_J ^ Carry; assign Cout=inp_M&inp_J|(inp_M^inp_J) & Carry; endmodule
module full(inp_K,inp_X,Carry,Cout,Sum); input inp_K,inp_X; output Cout,Sum; assign Sum=inp_K ^ inp_X ^ Carry; assign Cout=inp_K&inp_X|(inp_K^inp_X) & Carry;
module full(inp_Q,inp_W,Carry,Cout,Sum); input inp_Q,inp_W; output Cout,Sum; assign Sum=inp_Q ^ inp_W ^ Carry; assign Cout=inp_Q&inp_W|(inp_Q^inp_W) & Carry;
module full(C,Z,Carry,Cout,Sum); input C,Z; output Cout,Sum; assign Sum=C ^ Z ^ Carry; assign Cout=C&Z|(C^Z) & Carry;
module full(inp_O,inp_I,Carry,Cout,Sum); input inp_O,inp_I; output Cout,Sum; assign Sum=inp_O ^ inp_I ^ Carry; assign Cout=inp_O&inp_I|(inp_O^inp_I) & Carry; endmodule
module full(H,R,Carry,Cout,Sum); input H,R; output Cout,Sum; assign Sum=H ^ R ^ Carry; assign Cout=H&R|(H^R) & Carry; endmodule
module full(inp_N,inp_O,Carry,Cout,Sum); input inp_N,inp_O; output Cout,Sum; assign Sum=inp_N ^ inp_O ^ Carry; assign Cout=inp_N&inp_O|(inp_N^inp_O) & Carry;
module full(K,E,Carry,Cout,Sum); input K,E; output Cout,Sum; assign Sum=K ^ E ^ Carry; assign Cout=K&E|(K^E) & Carry;
module full(D,O,Carry,Cout,Sum); input D,O; output Cout,Sum; assign Sum=D ^ O ^ Carry; assign Cout=D&O|(D^O) & Carry; endmodule
module full(inp_R,inp_P,Carry,Cout,Sum); input inp_R,inp_P; output Cout,Sum; assign Sum=inp_R ^ inp_P ^ Carry; assign Cout=inp_R&inp_P|(inp_R^inp_P) & Carry;
module full(inp_E,inp_R,Carry,Cout,Sum); input inp_E,inp_R; output Cout,Sum; assign Sum=inp_E ^ inp_R ^ Carry; assign Cout=inp_E&inp_R|(inp_E^inp_R) & Carry;
module full(inp_J,inp_Q,Carry,Cout,Sum); input inp_J,inp_Q; output Cout,Sum; assign Sum=inp_J ^ inp_Q ^ Carry; assign Cout=inp_J&inp_Q|(inp_J^inp_Q) & Carry; endmodule
module full(inp_G,inp_E,Carry,Cout,Sum); input inp_G,inp_E; output Cout,Sum; assign Sum=inp_G ^ inp_E ^ Carry; assign Cout=inp_G&inp_E|(inp_G^inp_E) & Carry;
module full(V,O,Carry,Cout,Sum); input V,O; output Cout,Sum; assign Sum=V ^ O ^ Carry; assign Cout=V&O|(V^O) & Carry;
module full(Y,E,Carry,Cout,Sum); input Y,E; output Cout,Sum; assign Sum=Y ^ E ^ Carry; assign Cout=Y&E|(Y^E) & Carry;
module full(Z,F,Carry,Cout,Sum); input Z,F; output Cout,Sum; assign Sum=Z ^ F ^ Carry; assign Cout=Z&F|(Z^F) & Carry;
module full(D,E,Carry,Cout,Sum); input D,E; output Cout,Sum; assign Sum=D ^ E ^ Carry; assign Cout=D&E|(D^E) & Carry; endmodule
module full(X,A,Carry,Cout,Sum); input X,A; output Cout,Sum; assign Sum=X ^ A ^ Carry; assign Cout=X&A|(X^A) & Carry; endmodule
module full(K,X,Carry,Cout,Sum); input K,X; output Cout,Sum; assign Sum=K ^ X ^ Carry; assign Cout=K&X|(K^X) & Carry;
module full(M,K,Carry,Cout,Sum); input M,K; output Cout,Sum; assign Sum=M ^ K ^ Carry; assign Cout=M&K|(M^K) & Carry; endmodule
module full(inp_I,inp_F,Carry,Cout,Sum); input inp_I,inp_F; output Cout,Sum; assign Sum=inp_I ^ inp_F ^ Carry; assign Cout=inp_I&inp_F|(inp_I^inp_F) & Carry; endmodule
module full(M,T,Carry,Cout,Sum); input M,T; output Cout,Sum; assign Sum=M ^ T ^ Carry; assign Cout=M&T|(M^T) & Carry; endmodule
module full(inp_P,inp_N,Carry,Cout,Sum); input inp_P,inp_N; output Cout,Sum; assign Sum=inp_P ^ inp_N ^ Carry; assign Cout=inp_P&inp_N|(inp_P^inp_N) & Carry;
module full(inp_S,inp_L,Carry,Cout,Sum); input inp_S,inp_L; output Cout,Sum; assign Sum=inp_S ^ inp_L ^ Carry; assign Cout=inp_S&inp_L|(inp_S^inp_L) & Carry;
module full(inp_D,inp_H,Carry,Cout,Sum); input inp_D,inp_H; output Cout,Sum; assign Sum=inp_D ^ inp_H ^ Carry; assign Cout=inp_D&inp_H|(inp_D^inp_H) & Carry;
module full(U,R,Carry,Cout,Sum); input U,R; output Cout,Sum; assign Sum=U ^ R ^ Carry; assign Cout=U&R|(U^R) & Carry; endmodule
module full(O,A,Carry,Cout,Sum); input O,A; output Cout,Sum; assign Sum=O ^ A ^ Carry; assign Cout=O&A|(O^A) & Carry;
module full(inp_Z,inp_J,Carry,Cout,Sum); input inp_Z,inp_J; output Cout,Sum; assign Sum=inp_Z ^ inp_J ^ Carry; assign Cout=inp_Z&inp_J|(inp_Z^inp_J) & Carry; endmodule
module full(inp_F,inp_X,Carry,Cout,Sum); input inp_F,inp_X; output Cout,Sum; assign Sum=inp_F ^ inp_X ^ Carry; assign Cout=inp_F&inp_X|(inp_F^inp_X) & Carry;
module full(Z,A,Carry,Cout,Sum); input Z,A; output Cout,Sum; assign Sum=Z ^ A ^ Carry; assign Cout=Z&A|(Z^A) & Carry;
module full(inp_V,inp_I,Carry,Cout,Sum); input inp_V,inp_I; output Cout,Sum; assign Sum=inp_V ^ inp_I ^ Carry; assign Cout=inp_V&inp_I|(inp_V^inp_I) & Carry;
module full(inp_V,inp_O,Carry,Cout,Sum); input inp_V,inp_O; output Cout,Sum; assign Sum=inp_V ^ inp_O ^ Carry; assign Cout=inp_V&inp_O|(inp_V^inp_O) & Carry;
module full(C,T,Carry,Cout,Sum); input C,T; output Cout,Sum; assign Sum=C ^ T ^ Carry; assign Cout=C&T|(C^T) & Carry;
module full(inp_F,inp_Q,Carry,Cout,Sum); input inp_F,inp_Q; output Cout,Sum; assign Sum=inp_F ^ inp_Q ^ Carry; assign Cout=inp_F&inp_Q|(inp_F^inp_Q) & Carry;
module full(inp_C,inp_P,Carry,Cout,Sum); input inp_C,inp_P; output Cout,Sum; assign Sum=inp_C ^ inp_P ^ Carry; assign Cout=inp_C&inp_P|(inp_C^inp_P) & Carry;
module full(T,U,Carry,Cout,Sum); input T,U; output Cout,Sum; assign Sum=T ^ U ^ Carry; assign Cout=T&U|(T^U) & Carry;
module full(I,E,Carry,Cout,Sum); input I,E; output Cout,Sum; assign Sum=I ^ E ^ Carry; assign Cout=I&E|(I^E) & Carry;
module full(P,E,Carry,Cout,Sum); input P,E; output Cout,Sum; assign Sum=P ^ E ^ Carry; assign Cout=P&E|(P^E) & Carry;
module full(inp_M,inp_Q,Carry,Cout,Sum); input inp_M,inp_Q; output Cout,Sum; assign Sum=inp_M ^ inp_Q ^ Carry; assign Cout=inp_M&inp_Q|(inp_M^inp_Q) & Carry;
module full(U,Q,Carry,Cout,Sum); input U,Q; output Cout,Sum; assign Sum=U ^ Q ^ Carry; assign Cout=U&Q|(U^Q) & Carry;
module full(inp_C,inp_W,Carry,Cout,Sum); input inp_C,inp_W; output Cout,Sum; assign Sum=inp_C ^ inp_W ^ Carry; assign Cout=inp_C&inp_W|(inp_C^inp_W) & Carry; endmodule
module full(B,F,Carry,Cout,Sum); input B,F; output Cout,Sum; assign Sum=B ^ F ^ Carry; assign Cout=B&F|(B^F) & Carry;
module full(J,P,Carry,Cout,Sum); input J,P; output Cout,Sum; assign Sum=J ^ P ^ Carry; assign Cout=J&P|(J^P) & Carry; endmodule
module full(inp_F,inp_E,Carry,Cout,Sum); input inp_F,inp_E; output Cout,Sum; assign Sum=inp_F ^ inp_E ^ Carry; assign Cout=inp_F&inp_E|(inp_F^inp_E) & Carry;
module full(inp_G,inp_R,Carry,Cout,Sum); input inp_G,inp_R; output Cout,Sum; assign Sum=inp_G ^ inp_R ^ Carry; assign Cout=inp_G&inp_R|(inp_G^inp_R) & Carry; endmodule
module full(inp_O,inp_E,Carry,Cout,Sum); input inp_O,inp_E; output Cout,Sum; assign Sum=inp_O ^ inp_E ^ Carry; assign Cout=inp_O&inp_E|(inp_O^inp_E) & Carry;
module full(G,J,Carry,Cout,Sum); input G,J; output Cout,Sum; assign Sum=G ^ J ^ Carry; assign Cout=G&J|(G^J) & Carry;
module full(inp_S,inp_T,Carry,Cout,Sum); input inp_S,inp_T; output Cout,Sum; assign Sum=inp_S ^ inp_T ^ Carry; assign Cout=inp_S&inp_T|(inp_S^inp_T) & Carry;
module full(Z,F,Carry,Cout,Sum); input Z,F; output Cout,Sum; assign Sum=Z ^ F ^ Carry; assign Cout=Z&F|(Z^F) & Carry;
module full(inp_R,inp_Y,Carry,Cout,Sum); input inp_R,inp_Y; output Cout,Sum; assign Sum=inp_R ^ inp_Y ^ Carry; assign Cout=inp_R&inp_Y|(inp_R^inp_Y) & Carry; endmodule
module full(D,L,Carry,Cout,Sum); input D,L; output Cout,Sum; assign Sum=D ^ L ^ Carry; assign Cout=D&L|(D^L) & Carry;
module full(inp_N,inp_H,Carry,Cout,Sum); input inp_N,inp_H; output Cout,Sum; assign Sum=inp_N ^ inp_H ^ Carry; assign Cout=inp_N&inp_H|(inp_N^inp_H) & Carry;
module full(inp_R,inp_A,Carry,Cout,Sum); input inp_R,inp_A; output Cout,Sum; assign Sum=inp_R ^ inp_A ^ Carry; assign Cout=inp_R&inp_A|(inp_R^inp_A) & Carry;
module full(U,L,Carry,Cout,Sum); input U,L; output Cout,Sum; assign Sum=U ^ L ^ Carry; assign Cout=U&L|(U^L) & Carry;
module full(inp_H,inp_R,Carry,Cout,Sum); input inp_H,inp_R; output Cout,Sum; assign Sum=inp_H ^ inp_R ^ Carry; assign Cout=inp_H&inp_R|(inp_H^inp_R) & Carry; endmodule
module full(inp_T,inp_I,Carry,Cout,Sum); input inp_T,inp_I; output Cout,Sum; assign Sum=inp_T ^ inp_I ^ Carry; assign Cout=inp_T&inp_I|(inp_T^inp_I) & Carry; endmodule
module full(X,W,Carry,Cout,Sum); input X,W; output Cout,Sum; assign Sum=X ^ W ^ Carry; assign Cout=X&W|(X^W) & Carry; endmodule
module full(inp_Z,inp_K,Carry,Cout,Sum); input inp_Z,inp_K; output Cout,Sum; assign Sum=inp_Z ^ inp_K ^ Carry; assign Cout=inp_Z&inp_K|(inp_Z^inp_K) & Carry; endmodule
module full(W,X,Carry,Cout,Sum); input W,X; output Cout,Sum; assign Sum=W ^ X ^ Carry; assign Cout=W&X|(W^X) & Carry; endmodule
module full(inp_X,inp_N,Carry,Cout,Sum); input inp_X,inp_N; output Cout,Sum; assign Sum=inp_X ^ inp_N ^ Carry; assign Cout=inp_X&inp_N|(inp_X^inp_N) & Carry;
module full(F,O,Carry,Cout,Sum); input F,O; output Cout,Sum; assign Sum=F ^ O ^ Carry; assign Cout=F&O|(F^O) & Carry; endmodule
module full(T,P,Carry,Cout,Sum); input T,P; output Cout,Sum; assign Sum=T ^ P ^ Carry; assign Cout=T&P|(T^P) & Carry; endmodule
module full(inp_C,inp_R,Carry,Cout,Sum); input inp_C,inp_R; output Cout,Sum; assign Sum=inp_C ^ inp_R ^ Carry; assign Cout=inp_C&inp_R|(inp_C^inp_R) & Carry; endmodule
module full(I,B,Carry,Cout,Sum); input I,B; output Cout,Sum; assign Sum=I ^ B ^ Carry; assign Cout=I&B|(I^B) & Carry;
module full(inp_M,inp_D,Carry,Cout,Sum); input inp_M,inp_D; output Cout,Sum; assign Sum=inp_M ^ inp_D ^ Carry; assign Cout=inp_M&inp_D|(inp_M^inp_D) & Carry; endmodule
module full(inp_F,inp_K,Carry,Cout,Sum); input inp_F,inp_K; output Cout,Sum; assign Sum=inp_F ^ inp_K ^ Carry; assign Cout=inp_F&inp_K|(inp_F^inp_K) & Carry; endmodule
module full(inp_G,inp_F,Carry,Cout,Sum); input inp_G,inp_F; output Cout,Sum; assign Sum=inp_G ^ inp_F ^ Carry; assign Cout=inp_G&inp_F|(inp_G^inp_F) & Carry; endmodule
module full(A,P,Carry,Cout,Sum); input A,P; output Cout,Sum; assign Sum=A ^ P ^ Carry; assign Cout=A&P|(A^P) & Carry; endmodule
module full(D,E,Carry,Cout,Sum); input D,E; output Cout,Sum; assign Sum=D ^ E ^ Carry; assign Cout=D&E|(D^E) & Carry; endmodule
module full(inp_J,inp_X,Carry,Cout,Sum); input inp_J,inp_X; output Cout,Sum; assign Sum=inp_J ^ inp_X ^ Carry; assign Cout=inp_J&inp_X|(inp_J^inp_X) & Carry; endmodule
module full(Q,J,Carry,Cout,Sum); input Q,J; output Cout,Sum; assign Sum=Q ^ J ^ Carry; assign Cout=Q&J|(Q^J) & Carry;
module full(inp_E,inp_P,Carry,Cout,Sum); input inp_E,inp_P; output Cout,Sum; assign Sum=inp_E ^ inp_P ^ Carry; assign Cout=inp_E&inp_P|(inp_E^inp_P) & Carry;
module full(M,T,Carry,Cout,Sum); input M,T; output Cout,Sum; assign Sum=M ^ T ^ Carry; assign Cout=M&T|(M^T) & Carry; endmodule
module full(inp_V,inp_Q,Carry,Cout,Sum); input inp_V,inp_Q; output Cout,Sum; assign Sum=inp_V ^ inp_Q ^ Carry; assign Cout=inp_V&inp_Q|(inp_V^inp_Q) & Carry;
module full(D,A,Carry,Cout,Sum); input D,A; output Cout,Sum; assign Sum=D ^ A ^ Carry; assign Cout=D&A|(D^A) & Carry; endmodule
module full(inp_V,inp_C,Carry,Cout,Sum); input inp_V,inp_C; output Cout,Sum; assign Sum=inp_V ^ inp_C ^ Carry; assign Cout=inp_V&inp_C|(inp_V^inp_C) & Carry;
module full(inp_C,inp_F,Carry,Cout,Sum); input inp_C,inp_F; output Cout,Sum; assign Sum=inp_C ^ inp_F ^ Carry; assign Cout=inp_C&inp_F|(inp_C^inp_F) & Carry; endmodule
module full(inp_L,inp_A,Carry,Cout,Sum); input inp_L,inp_A; output Cout,Sum; assign Sum=inp_L ^ inp_A ^ Carry; assign Cout=inp_L&inp_A|(inp_L^inp_A) & Carry; endmodule
module full(inp_G,inp_X,Carry,Cout,Sum); input inp_G,inp_X; output Cout,Sum; assign Sum=inp_G ^ inp_X ^ Carry; assign Cout=inp_G&inp_X|(inp_G^inp_X) & Carry;
module full(inp_M,inp_G,Carry,Cout,Sum); input inp_M,inp_G; output Cout,Sum; assign Sum=inp_M ^ inp_G ^ Carry; assign Cout=inp_M&inp_G|(inp_M^inp_G) & Carry; endmodule
module full(B,S,Carry,Cout,Sum); input B,S; output Cout,Sum; assign Sum=B ^ S ^ Carry; assign Cout=B&S|(B^S) & Carry; endmodule
module full(inp_Z,inp_Y,Carry,Cout,Sum); input inp_Z,inp_Y; output Cout,Sum; assign Sum=inp_Z ^ inp_Y ^ Carry; assign Cout=inp_Z&inp_Y|(inp_Z^inp_Y) & Carry;
module full(C,N,Carry,Cout,Sum); input C,N; output Cout,Sum; assign Sum=C ^ N ^ Carry; assign Cout=C&N|(C^N) & Carry;
module full(inp_N,inp_V,Carry,Cout,Sum); input inp_N,inp_V; output Cout,Sum; assign Sum=inp_N ^ inp_V ^ Carry; assign Cout=inp_N&inp_V|(inp_N^inp_V) & Carry;
module full(U,P,Carry,Cout,Sum); input U,P; output Cout,Sum; assign Sum=U ^ P ^ Carry; assign Cout=U&P|(U^P) & Carry; endmodule
module full(inp_S,inp_K,Carry,Cout,Sum); input inp_S,inp_K; output Cout,Sum; assign Sum=inp_S ^ inp_K ^ Carry; assign Cout=inp_S&inp_K|(inp_S^inp_K) & Carry;
module full(inp_F,inp_V,Carry,Cout,Sum); input inp_F,inp_V; output Cout,Sum; assign Sum=inp_F ^ inp_V ^ Carry; assign Cout=inp_F&inp_V|(inp_F^inp_V) & Carry; endmodule
module full(inp_B,inp_C,Carry,Cout,Sum); input inp_B,inp_C; output Cout,Sum; assign Sum=inp_B ^ inp_C ^ Carry; assign Cout=inp_B&inp_C|(inp_B^inp_C) & Carry;
module full(A,H,Carry,Cout,Sum); input A,H; output Cout,Sum; assign Sum=A ^ H ^ Carry; assign Cout=A&H|(A^H) & Carry; endmodule
module full(inp_C,inp_H,Carry,Cout,Sum); input inp_C,inp_H; output Cout,Sum; assign Sum=inp_C ^ inp_H ^ Carry; assign Cout=inp_C&inp_H|(inp_C^inp_H) & Carry; endmodule
module full(inp_Y,inp_C,Carry,Cout,Sum); input inp_Y,inp_C; output Cout,Sum; assign Sum=inp_Y ^ inp_C ^ Carry; assign Cout=inp_Y&inp_C|(inp_Y^inp_C) & Carry; endmodule
module full(inp_D,inp_H,Carry,Cout,Sum); input inp_D,inp_H; output Cout,Sum; assign Sum=inp_D ^ inp_H ^ Carry; assign Cout=inp_D&inp_H|(inp_D^inp_H) & Carry;
module full(P,K,Carry,Cout,Sum); input P,K; output Cout,Sum; assign Sum=P ^ K ^ Carry; assign Cout=P&K|(P^K) & Carry;
module full(inp_Y,inp_C,Carry,Cout,Sum); input inp_Y,inp_C; output Cout,Sum; assign Sum=inp_Y ^ inp_C ^ Carry; assign Cout=inp_Y&inp_C|(inp_Y^inp_C) & Carry; endmodule
module full(inp_S,inp_E,Carry,Cout,Sum); input inp_S,inp_E; output Cout,Sum; assign Sum=inp_S ^ inp_E ^ Carry; assign Cout=inp_S&inp_E|(inp_S^inp_E) & Carry; endmodule
module full(B,X,Carry,Cout,Sum); input B,X; output Cout,Sum; assign Sum=B ^ X ^ Carry; assign Cout=B&X|(B^X) & Carry;
module full(inp_E,inp_X,Carry,Cout,Sum); input inp_E,inp_X; output Cout,Sum; assign Sum=inp_E ^ inp_X ^ Carry; assign Cout=inp_E&inp_X|(inp_E^inp_X) & Carry;
module full(P,W,Carry,Cout,Sum); input P,W; output Cout,Sum; assign Sum=P ^ W ^ Carry; assign Cout=P&W|(P^W) & Carry;
module full(inp_Q,inp_A,Carry,Cout,Sum); input inp_Q,inp_A; output Cout,Sum; assign Sum=inp_Q ^ inp_A ^ Carry; assign Cout=inp_Q&inp_A|(inp_Q^inp_A) & Carry; endmodule
module full(inp_O,inp_U,Carry,Cout,Sum); input inp_O,inp_U; output Cout,Sum; assign Sum=inp_O ^ inp_U ^ Carry; assign Cout=inp_O&inp_U|(inp_O^inp_U) & Carry; endmodule
module full(inp_I,inp_F,Carry,Cout,Sum); input inp_I,inp_F; output Cout,Sum; assign Sum=inp_I ^ inp_F ^ Carry; assign Cout=inp_I&inp_F|(inp_I^inp_F) & Carry; endmodule
module full(C,N,Carry,Cout,Sum); input C,N; output Cout,Sum; assign Sum=C ^ N ^ Carry; assign Cout=C&N|(C^N) & Carry; endmodule
module full(R,L,Carry,Cout,Sum); input R,L; output Cout,Sum; assign Sum=R ^ L ^ Carry; assign Cout=R&L|(R^L) & Carry;
module full(T,D,Carry,Cout,Sum); input T,D; output Cout,Sum; assign Sum=T ^ D ^ Carry; assign Cout=T&D|(T^D) & Carry; endmodule
module full(inp_N,inp_C,Carry,Cout,Sum); input inp_N,inp_C; output Cout,Sum; assign Sum=inp_N ^ inp_C ^ Carry; assign Cout=inp_N&inp_C|(inp_N^inp_C) & Carry; endmodule
module full(inp_G,inp_H,Carry,Cout,Sum); input inp_G,inp_H; output Cout,Sum; assign Sum=inp_G ^ inp_H ^ Carry; assign Cout=inp_G&inp_H|(inp_G^inp_H) & Carry; endmodule
module full(F,D,Carry,Cout,Sum); input F,D; output Cout,Sum; assign Sum=F ^ D ^ Carry; assign Cout=F&D|(F^D) & Carry;
module full(L,O,Carry,Cout,Sum); input L,O; output Cout,Sum; assign Sum=L ^ O ^ Carry; assign Cout=L&O|(L^O) & Carry; endmodule
module full(inp_H,inp_M,Carry,Cout,Sum); input inp_H,inp_M; output Cout,Sum; assign Sum=inp_H ^ inp_M ^ Carry; assign Cout=inp_H&inp_M|(inp_H^inp_M) & Carry; endmodule
module full(X,W,Carry,Cout,Sum); input X,W; output Cout,Sum; assign Sum=X ^ W ^ Carry; assign Cout=X&W|(X^W) & Carry;
module full(W,K,Carry,Cout,Sum); input W,K; output Cout,Sum; assign Sum=W ^ K ^ Carry; assign Cout=W&K|(W^K) & Carry; endmodule
module full(V,Z,Carry,Cout,Sum); input V,Z; output Cout,Sum; assign Sum=V ^ Z ^ Carry; assign Cout=V&Z|(V^Z) & Carry; endmodule
module full(L,N,Carry,Cout,Sum); input L,N; output Cout,Sum; assign Sum=L ^ N ^ Carry; assign Cout=L&N|(L^N) & Carry;
module full(M,A,Carry,Cout,Sum); input M,A; output Cout,Sum; assign Sum=M ^ A ^ Carry; assign Cout=M&A|(M^A) & Carry; endmodule
module full(inp_G,inp_C,Carry,Cout,Sum); input inp_G,inp_C; output Cout,Sum; assign Sum=inp_G ^ inp_C ^ Carry; assign Cout=inp_G&inp_C|(inp_G^inp_C) & Carry;
module full(W,U,Carry,Cout,Sum); input W,U; output Cout,Sum; assign Sum=W ^ U ^ Carry; assign Cout=W&U|(W^U) & Carry; endmodule
module full(inp_F,inp_V,Carry,Cout,Sum); input inp_F,inp_V; output Cout,Sum; assign Sum=inp_F ^ inp_V ^ Carry; assign Cout=inp_F&inp_V|(inp_F^inp_V) & Carry; endmodule
module full(inp_B,inp_U,Carry,Cout,Sum); input inp_B,inp_U; output Cout,Sum; assign Sum=inp_B ^ inp_U ^ Carry; assign Cout=inp_B&inp_U|(inp_B^inp_U) & Carry; endmodule
module full(inp_R,inp_F,Carry,Cout,Sum); input inp_R,inp_F; output Cout,Sum; assign Sum=inp_R ^ inp_F ^ Carry; assign Cout=inp_R&inp_F|(inp_R^inp_F) & Carry;
module full(inp_J,inp_K,Carry,Cout,Sum); input inp_J,inp_K; output Cout,Sum; assign Sum=inp_J ^ inp_K ^ Carry; assign Cout=inp_J&inp_K|(inp_J^inp_K) & Carry; endmodule
module full(K,Y,Carry,Cout,Sum); input K,Y; output Cout,Sum; assign Sum=K ^ Y ^ Carry; assign Cout=K&Y|(K^Y) & Carry;
module full(inp_G,inp_V,Carry,Cout,Sum); input inp_G,inp_V; output Cout,Sum; assign Sum=inp_G ^ inp_V ^ Carry; assign Cout=inp_G&inp_V|(inp_G^inp_V) & Carry; endmodule
module full(inp_N,inp_R,Carry,Cout,Sum); input inp_N,inp_R; output Cout,Sum; assign Sum=inp_N ^ inp_R ^ Carry; assign Cout=inp_N&inp_R|(inp_N^inp_R) & Carry;
module full(D,A,Carry,Cout,Sum); input D,A; output Cout,Sum; assign Sum=D ^ A ^ Carry; assign Cout=D&A|(D^A) & Carry;
module full(P,Q,Carry,Cout,Sum); input P,Q; output Cout,Sum; assign Sum=P ^ Q ^ Carry; assign Cout=P&Q|(P^Q) & Carry;
module full(M,U,Carry,Cout,Sum); input M,U; output Cout,Sum; assign Sum=M ^ U ^ Carry; assign Cout=M&U|(M^U) & Carry;
module full(inp_Q,inp_Z,Carry,Cout,Sum); input inp_Q,inp_Z; output Cout,Sum; assign Sum=inp_Q ^ inp_Z ^ Carry; assign Cout=inp_Q&inp_Z|(inp_Q^inp_Z) & Carry; endmodule
module full(I,O,Carry,Cout,Sum); input I,O; output Cout,Sum; assign Sum=I ^ O ^ Carry; assign Cout=I&O|(I^O) & Carry; endmodule
module full(inp_Y,inp_F,Carry,Cout,Sum); input inp_Y,inp_F; output Cout,Sum; assign Sum=inp_Y ^ inp_F ^ Carry; assign Cout=inp_Y&inp_F|(inp_Y^inp_F) & Carry;
module full(S,P,Carry,Cout,Sum); input S,P; output Cout,Sum; assign Sum=S ^ P ^ Carry; assign Cout=S&P|(S^P) & Carry; endmodule
module full(C,B,Carry,Cout,Sum); input C,B; output Cout,Sum; assign Sum=C ^ B ^ Carry; assign Cout=C&B|(C^B) & Carry;
module full(E,J,Carry,Cout,Sum); input E,J; output Cout,Sum; assign Sum=E ^ J ^ Carry; assign Cout=E&J|(E^J) & Carry;
module full(S,F,Carry,Cout,Sum); input S,F; output Cout,Sum; assign Sum=S ^ F ^ Carry; assign Cout=S&F|(S^F) & Carry; endmodule
module full(inp_K,inp_P,Carry,Cout,Sum); input inp_K,inp_P; output Cout,Sum; assign Sum=inp_K ^ inp_P ^ Carry; assign Cout=inp_K&inp_P|(inp_K^inp_P) & Carry; endmodule
module full(Q,N,Carry,Cout,Sum); input Q,N; output Cout,Sum; assign Sum=Q ^ N ^ Carry; assign Cout=Q&N|(Q^N) & Carry;
module full(N,O,Carry,Cout,Sum); input N,O; output Cout,Sum; assign Sum=N ^ O ^ Carry; assign Cout=N&O|(N^O) & Carry;
module full(inp_C,inp_A,Carry,Cout,Sum); input inp_C,inp_A; output Cout,Sum; assign Sum=inp_C ^ inp_A ^ Carry; assign Cout=inp_C&inp_A|(inp_C^inp_A) & Carry; endmodule
module full(inp_S,inp_L,Carry,Cout,Sum); input inp_S,inp_L; output Cout,Sum; assign Sum=inp_S ^ inp_L ^ Carry; assign Cout=inp_S&inp_L|(inp_S^inp_L) & Carry;
module full(inp_X,inp_P,Carry,Cout,Sum); input inp_X,inp_P; output Cout,Sum; assign Sum=inp_X ^ inp_P ^ Carry; assign Cout=inp_X&inp_P|(inp_X^inp_P) & Carry; endmodule
module full(E,Y,Carry,Cout,Sum); input E,Y; output Cout,Sum; assign Sum=E ^ Y ^ Carry; assign Cout=E&Y|(E^Y) & Carry;
module full(B,G,Carry,Cout,Sum); input B,G; output Cout,Sum; assign Sum=B ^ G ^ Carry; assign Cout=B&G|(B^G) & Carry; endmodule
module full(V,E,Carry,Cout,Sum); input V,E; output Cout,Sum; assign Sum=V ^ E ^ Carry; assign Cout=V&E|(V^E) & Carry;
module full(inp_N,inp_J,Carry,Cout,Sum); input inp_N,inp_J; output Cout,Sum; assign Sum=inp_N ^ inp_J ^ Carry; assign Cout=inp_N&inp_J|(inp_N^inp_J) & Carry; endmodule
module full(inp_Y,inp_P,Carry,Cout,Sum); input inp_Y,inp_P; output Cout,Sum; assign Sum=inp_Y ^ inp_P ^ Carry; assign Cout=inp_Y&inp_P|(inp_Y^inp_P) & Carry;
module full(H,E,Carry,Cout,Sum); input H,E; output Cout,Sum; assign Sum=H ^ E ^ Carry; assign Cout=H&E|(H^E) & Carry; endmodule
module full(S,G,Carry,Cout,Sum); input S,G; output Cout,Sum; assign Sum=S ^ G ^ Carry; assign Cout=S&G|(S^G) & Carry; endmodule
module full(E,Y,Carry,Cout,Sum); input E,Y; output Cout,Sum; assign Sum=E ^ Y ^ Carry; assign Cout=E&Y|(E^Y) & Carry; endmodule
module full(inp_I,inp_P,Carry,Cout,Sum); input inp_I,inp_P; output Cout,Sum; assign Sum=inp_I ^ inp_P ^ Carry; assign Cout=inp_I&inp_P|(inp_I^inp_P) & Carry;
module full(inp_W,inp_I,Carry,Cout,Sum); input inp_W,inp_I; output Cout,Sum; assign Sum=inp_W ^ inp_I ^ Carry; assign Cout=inp_W&inp_I|(inp_W^inp_I) & Carry; endmodule
module full(Y,G,Carry,Cout,Sum); input Y,G; output Cout,Sum; assign Sum=Y ^ G ^ Carry; assign Cout=Y&G|(Y^G) & Carry; endmodule
module full(inp_B,inp_Z,Carry,Cout,Sum); input inp_B,inp_Z; output Cout,Sum; assign Sum=inp_B ^ inp_Z ^ Carry; assign Cout=inp_B&inp_Z|(inp_B^inp_Z) & Carry;
module full(P,B,Carry,Cout,Sum); input P,B; output Cout,Sum; assign Sum=P ^ B ^ Carry; assign Cout=P&B|(P^B) & Carry;
module full(G,E,Carry,Cout,Sum); input G,E; output Cout,Sum; assign Sum=G ^ E ^ Carry; assign Cout=G&E|(G^E) & Carry;
module full(B,W,Carry,Cout,Sum); input B,W; output Cout,Sum; assign Sum=B ^ W ^ Carry; assign Cout=B&W|(B^W) & Carry; endmodule
module full(O,B,Carry,Cout,Sum); input O,B; output Cout,Sum; assign Sum=O ^ B ^ Carry; assign Cout=O&B|(O^B) & Carry;
module full(inp_E,inp_I,Carry,Cout,Sum); input inp_E,inp_I; output Cout,Sum; assign Sum=inp_E ^ inp_I ^ Carry; assign Cout=inp_E&inp_I|(inp_E^inp_I) & Carry;
module full(H,Q,Carry,Cout,Sum); input H,Q; output Cout,Sum; assign Sum=H ^ Q ^ Carry; assign Cout=H&Q|(H^Q) & Carry;
module full(inp_T,inp_L,Carry,Cout,Sum); input inp_T,inp_L; output Cout,Sum; assign Sum=inp_T ^ inp_L ^ Carry; assign Cout=inp_T&inp_L|(inp_T^inp_L) & Carry; endmodule
module full(inp_J,inp_C,Carry,Cout,Sum); input inp_J,inp_C; output Cout,Sum; assign Sum=inp_J ^ inp_C ^ Carry; assign Cout=inp_J&inp_C|(inp_J^inp_C) & Carry;
module full(inp_Y,inp_P,Carry,Cout,Sum); input inp_Y,inp_P; output Cout,Sum; assign Sum=inp_Y ^ inp_P ^ Carry; assign Cout=inp_Y&inp_P|(inp_Y^inp_P) & Carry;
module full(N,Q,Carry,Cout,Sum); input N,Q; output Cout,Sum; assign Sum=N ^ Q ^ Carry; assign Cout=N&Q|(N^Q) & Carry;
module full(inp_M,inp_P,Carry,Cout,Sum); input inp_M,inp_P; output Cout,Sum; assign Sum=inp_M ^ inp_P ^ Carry; assign Cout=inp_M&inp_P|(inp_M^inp_P) & Carry; endmodule
module full(G,I,Carry,Cout,Sum); input G,I; output Cout,Sum; assign Sum=G ^ I ^ Carry; assign Cout=G&I|(G^I) & Carry; endmodule
module full(inp_K,inp_D,Carry,Cout,Sum); input inp_K,inp_D; output Cout,Sum; assign Sum=inp_K ^ inp_D ^ Carry; assign Cout=inp_K&inp_D|(inp_K^inp_D) & Carry;
module full(V,A,Carry,Cout,Sum); input V,A; output Cout,Sum; assign Sum=V ^ A ^ Carry; assign Cout=V&A|(V^A) & Carry; endmodule
module full(inp_P,inp_N,Carry,Cout,Sum); input inp_P,inp_N; output Cout,Sum; assign Sum=inp_P ^ inp_N ^ Carry; assign Cout=inp_P&inp_N|(inp_P^inp_N) & Carry;
module full(N,Z,Carry,Cout,Sum); input N,Z; output Cout,Sum; assign Sum=N ^ Z ^ Carry; assign Cout=N&Z|(N^Z) & Carry;
module full(inp_Y,inp_K,Carry,Cout,Sum); input inp_Y,inp_K; output Cout,Sum; assign Sum=inp_Y ^ inp_K ^ Carry; assign Cout=inp_Y&inp_K|(inp_Y^inp_K) & Carry;
module full(H,M,Carry,Cout,Sum); input H,M; output Cout,Sum; assign Sum=H ^ M ^ Carry; assign Cout=H&M|(H^M) & Carry; endmodule
module full(U,J,Carry,Cout,Sum); input U,J; output Cout,Sum; assign Sum=U ^ J ^ Carry; assign Cout=U&J|(U^J) & Carry;
module full(K,M,Carry,Cout,Sum); input K,M; output Cout,Sum; assign Sum=K ^ M ^ Carry; assign Cout=K&M|(K^M) & Carry;
module full(inp_V,inp_X,Carry,Cout,Sum); input inp_V,inp_X; output Cout,Sum; assign Sum=inp_V ^ inp_X ^ Carry; assign Cout=inp_V&inp_X|(inp_V^inp_X) & Carry; endmodule
module full(inp_B,inp_I,Carry,Cout,Sum); input inp_B,inp_I; output Cout,Sum; assign Sum=inp_B ^ inp_I ^ Carry; assign Cout=inp_B&inp_I|(inp_B^inp_I) & Carry; endmodule
module full(X,L,Carry,Cout,Sum); input X,L; output Cout,Sum; assign Sum=X ^ L ^ Carry; assign Cout=X&L|(X^L) & Carry; endmodule
module full(L,V,Carry,Cout,Sum); input L,V; output Cout,Sum; assign Sum=L ^ V ^ Carry; assign Cout=L&V|(L^V) & Carry;
module full(inp_Q,inp_N,Carry,Cout,Sum); input inp_Q,inp_N; output Cout,Sum; assign Sum=inp_Q ^ inp_N ^ Carry; assign Cout=inp_Q&inp_N|(inp_Q^inp_N) & Carry;
module full(inp_I,inp_D,Carry,Cout,Sum); input inp_I,inp_D; output Cout,Sum; assign Sum=inp_I ^ inp_D ^ Carry; assign Cout=inp_I&inp_D|(inp_I^inp_D) & Carry; endmodule
module full(E,Z,Carry,Cout,Sum); input E,Z; output Cout,Sum; assign Sum=E ^ Z ^ Carry; assign Cout=E&Z|(E^Z) & Carry; endmodule
module full(inp_L,inp_V,Carry,Cout,Sum); input inp_L,inp_V; output Cout,Sum; assign Sum=inp_L ^ inp_V ^ Carry; assign Cout=inp_L&inp_V|(inp_L^inp_V) & Carry; endmodule
module full(inp_E,inp_G,Carry,Cout,Sum); input inp_E,inp_G; output Cout,Sum; assign Sum=inp_E ^ inp_G ^ Carry; assign Cout=inp_E&inp_G|(inp_E^inp_G) & Carry; endmodule
module full(Z,J,Carry,Cout,Sum); input Z,J; output Cout,Sum; assign Sum=Z ^ J ^ Carry; assign Cout=Z&J|(Z^J) & Carry; endmodule
module full(E,U,Carry,Cout,Sum); input E,U; output Cout,Sum; assign Sum=E ^ U ^ Carry; assign Cout=E&U|(E^U) & Carry; endmodule
module full(inp_Y,inp_N,Carry,Cout,Sum); input inp_Y,inp_N; output Cout,Sum; assign Sum=inp_Y ^ inp_N ^ Carry; assign Cout=inp_Y&inp_N|(inp_Y^inp_N) & Carry; endmodule
module full(R,F,Carry,Cout,Sum); input R,F; output Cout,Sum; assign Sum=R ^ F ^ Carry; assign Cout=R&F|(R^F) & Carry; endmodule
module full(L,N,Carry,Cout,Sum); input L,N; output Cout,Sum; assign Sum=L ^ N ^ Carry; assign Cout=L&N|(L^N) & Carry; endmodule
module full(inp_V,inp_H,Carry,Cout,Sum); input inp_V,inp_H; output Cout,Sum; assign Sum=inp_V ^ inp_H ^ Carry; assign Cout=inp_V&inp_H|(inp_V^inp_H) & Carry; endmodule
module full(inp_V,inp_G,Carry,Cout,Sum); input inp_V,inp_G; output Cout,Sum; assign Sum=inp_V ^ inp_G ^ Carry; assign Cout=inp_V&inp_G|(inp_V^inp_G) & Carry;
module full(inp_R,inp_W,Carry,Cout,Sum); input inp_R,inp_W; output Cout,Sum; assign Sum=inp_R ^ inp_W ^ Carry; assign Cout=inp_R&inp_W|(inp_R^inp_W) & Carry;
module full(inp_C,inp_V,Carry,Cout,Sum); input inp_C,inp_V; output Cout,Sum; assign Sum=inp_C ^ inp_V ^ Carry; assign Cout=inp_C&inp_V|(inp_C^inp_V) & Carry; endmodule
module full(A,K,Carry,Cout,Sum); input A,K; output Cout,Sum; assign Sum=A ^ K ^ Carry; assign Cout=A&K|(A^K) & Carry; endmodule
module full(V,Z,Carry,Cout,Sum); input V,Z; output Cout,Sum; assign Sum=V ^ Z ^ Carry; assign Cout=V&Z|(V^Z) & Carry; endmodule
module full(Z,B,Carry,Cout,Sum); input Z,B; output Cout,Sum; assign Sum=Z ^ B ^ Carry; assign Cout=Z&B|(Z^B) & Carry; endmodule
module full(inp_O,inp_Q,Carry,Cout,Sum); input inp_O,inp_Q; output Cout,Sum; assign Sum=inp_O ^ inp_Q ^ Carry; assign Cout=inp_O&inp_Q|(inp_O^inp_Q) & Carry;
module full(inp_Q,inp_Y,Carry,Cout,Sum); input inp_Q,inp_Y; output Cout,Sum; assign Sum=inp_Q ^ inp_Y ^ Carry; assign Cout=inp_Q&inp_Y|(inp_Q^inp_Y) & Carry; endmodule
module full(Q,A,Carry,Cout,Sum); input Q,A; output Cout,Sum; assign Sum=Q ^ A ^ Carry; assign Cout=Q&A|(Q^A) & Carry;
module full(I,G,Carry,Cout,Sum); input I,G; output Cout,Sum; assign Sum=I ^ G ^ Carry; assign Cout=I&G|(I^G) & Carry; endmodule
module full(E,F,Carry,Cout,Sum); input E,F; output Cout,Sum; assign Sum=E ^ F ^ Carry; assign Cout=E&F|(E^F) & Carry;
module full(inp_E,inp_X,Carry,Cout,Sum); input inp_E,inp_X; output Cout,Sum; assign Sum=inp_E ^ inp_X ^ Carry; assign Cout=inp_E&inp_X|(inp_E^inp_X) & Carry;
module full(inp_J,inp_K,Carry,Cout,Sum); input inp_J,inp_K; output Cout,Sum; assign Sum=inp_J ^ inp_K ^ Carry; assign Cout=inp_J&inp_K|(inp_J^inp_K) & Carry;
module full(T,D,Carry,Cout,Sum); input T,D; output Cout,Sum; assign Sum=T ^ D ^ Carry; assign Cout=T&D|(T^D) & Carry;
module full(Q,K,Carry,Cout,Sum); input Q,K; output Cout,Sum; assign Sum=Q ^ K ^ Carry; assign Cout=Q&K|(Q^K) & Carry;
module full(X,C,Carry,Cout,Sum); input X,C; output Cout,Sum; assign Sum=X ^ C ^ Carry; assign Cout=X&C|(X^C) & Carry;
module full(inp_X,inp_A,Carry,Cout,Sum); input inp_X,inp_A; output Cout,Sum; assign Sum=inp_X ^ inp_A ^ Carry; assign Cout=inp_X&inp_A|(inp_X^inp_A) & Carry;
module full(B,Q,Carry,Cout,Sum); input B,Q; output Cout,Sum; assign Sum=B ^ Q ^ Carry; assign Cout=B&Q|(B^Q) & Carry; endmodule
module full(inp_W,inp_C,Carry,Cout,Sum); input inp_W,inp_C; output Cout,Sum; assign Sum=inp_W ^ inp_C ^ Carry; assign Cout=inp_W&inp_C|(inp_W^inp_C) & Carry; endmodule
module full(inp_Y,inp_N,Carry,Cout,Sum); input inp_Y,inp_N; output Cout,Sum; assign Sum=inp_Y ^ inp_N ^ Carry; assign Cout=inp_Y&inp_N|(inp_Y^inp_N) & Carry; endmodule
module full(Y,R,Carry,Cout,Sum); input Y,R; output Cout,Sum; assign Sum=Y ^ R ^ Carry; assign Cout=Y&R|(Y^R) & Carry; endmodule
module full(O,I,Carry,Cout,Sum); input O,I; output Cout,Sum; assign Sum=O ^ I ^ Carry; assign Cout=O&I|(O^I) & Carry; endmodule
module full(V,Y,Carry,Cout,Sum); input V,Y; output Cout,Sum; assign Sum=V ^ Y ^ Carry; assign Cout=V&Y|(V^Y) & Carry;
module full(D,I,Carry,Cout,Sum); input D,I; output Cout,Sum; assign Sum=D ^ I ^ Carry; assign Cout=D&I|(D^I) & Carry; endmodule
module full(inp_M,inp_K,Carry,Cout,Sum); input inp_M,inp_K; output Cout,Sum; assign Sum=inp_M ^ inp_K ^ Carry; assign Cout=inp_M&inp_K|(inp_M^inp_K) & Carry; endmodule
module full(J,K,Carry,Cout,Sum); input J,K; output Cout,Sum; assign Sum=J ^ K ^ Carry; assign Cout=J&K|(J^K) & Carry; endmodule
module full(X,P,Carry,Cout,Sum); input X,P; output Cout,Sum; assign Sum=X ^ P ^ Carry; assign Cout=X&P|(X^P) & Carry;
module full(I,P,Carry,Cout,Sum); input I,P; output Cout,Sum; assign Sum=I ^ P ^ Carry; assign Cout=I&P|(I^P) & Carry;
module full(X,K,Carry,Cout,Sum); input X,K; output Cout,Sum; assign Sum=X ^ K ^ Carry; assign Cout=X&K|(X^K) & Carry; endmodule
module full(inp_Y,inp_B,Carry,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B ^ Carry; assign Cout=inp_Y&inp_B|(inp_Y^inp_B) & Carry;
module full(B,K,Carry,Cout,Sum); input B,K; output Cout,Sum; assign Sum=B ^ K ^ Carry; assign Cout=B&K|(B^K) & Carry; endmodule
module full(K,W,Carry,Cout,Sum); input K,W; output Cout,Sum; assign Sum=K ^ W ^ Carry; assign Cout=K&W|(K^W) & Carry; endmodule
module full(V,T,Carry,Cout,Sum); input V,T; output Cout,Sum; assign Sum=V ^ T ^ Carry; assign Cout=V&T|(V^T) & Carry;
module full(L,H,Carry,Cout,Sum); input L,H; output Cout,Sum; assign Sum=L ^ H ^ Carry; assign Cout=L&H|(L^H) & Carry;
module full(K,E,Carry,Cout,Sum); input K,E; output Cout,Sum; assign Sum=K ^ E ^ Carry; assign Cout=K&E|(K^E) & Carry; endmodule
module full(inp_C,inp_L,Carry,Cout,Sum); input inp_C,inp_L; output Cout,Sum; assign Sum=inp_C ^ inp_L ^ Carry; assign Cout=inp_C&inp_L|(inp_C^inp_L) & Carry;
module full(M,X,Carry,Cout,Sum); input M,X; output Cout,Sum; assign Sum=M ^ X ^ Carry; assign Cout=M&X|(M^X) & Carry;
module full(inp_Z,inp_Q,Carry,Cout,Sum); input inp_Z,inp_Q; output Cout,Sum; assign Sum=inp_Z ^ inp_Q ^ Carry; assign Cout=inp_Z&inp_Q|(inp_Z^inp_Q) & Carry;
module full(X,D,Carry,Cout,Sum); input X,D; output Cout,Sum; assign Sum=X ^ D ^ Carry; assign Cout=X&D|(X^D) & Carry; endmodule
module full(inp_Z,inp_L,Carry,Cout,Sum); input inp_Z,inp_L; output Cout,Sum; assign Sum=inp_Z ^ inp_L ^ Carry; assign Cout=inp_Z&inp_L|(inp_Z^inp_L) & Carry; endmodule
module full(inp_X,inp_U,Carry,Cout,Sum); input inp_X,inp_U; output Cout,Sum; assign Sum=inp_X ^ inp_U ^ Carry; assign Cout=inp_X&inp_U|(inp_X^inp_U) & Carry; endmodule
module full(inp_I,inp_H,Carry,Cout,Sum); input inp_I,inp_H; output Cout,Sum; assign Sum=inp_I ^ inp_H ^ Carry; assign Cout=inp_I&inp_H|(inp_I^inp_H) & Carry;
module full(inp_P,inp_J,Carry,Cout,Sum); input inp_P,inp_J; output Cout,Sum; assign Sum=inp_P ^ inp_J ^ Carry; assign Cout=inp_P&inp_J|(inp_P^inp_J) & Carry;
module full(inp_H,inp_V,Carry,Cout,Sum); input inp_H,inp_V; output Cout,Sum; assign Sum=inp_H ^ inp_V ^ Carry; assign Cout=inp_H&inp_V|(inp_H^inp_V) & Carry;
module full(B,I,Carry,Cout,Sum); input B,I; output Cout,Sum; assign Sum=B ^ I ^ Carry; assign Cout=B&I|(B^I) & Carry;
module full(N,Q,Carry,Cout,Sum); input N,Q; output Cout,Sum; assign Sum=N ^ Q ^ Carry; assign Cout=N&Q|(N^Q) & Carry; endmodule
module full(Z,X,Carry,Cout,Sum); input Z,X; output Cout,Sum; assign Sum=Z ^ X ^ Carry; assign Cout=Z&X|(Z^X) & Carry;
module full(L,O,Carry,Cout,Sum); input L,O; output Cout,Sum; assign Sum=L ^ O ^ Carry; assign Cout=L&O|(L^O) & Carry; endmodule
module full(inp_Q,inp_N,Carry,Cout,Sum); input inp_Q,inp_N; output Cout,Sum; assign Sum=inp_Q ^ inp_N ^ Carry; assign Cout=inp_Q&inp_N|(inp_Q^inp_N) & Carry;
module full(inp_W,inp_I,Carry,Cout,Sum); input inp_W,inp_I; output Cout,Sum; assign Sum=inp_W ^ inp_I ^ Carry; assign Cout=inp_W&inp_I|(inp_W^inp_I) & Carry; endmodule
module full(U,K,Carry,Cout,Sum); input U,K; output Cout,Sum; assign Sum=U ^ K ^ Carry; assign Cout=U&K|(U^K) & Carry; endmodule
module full(C,P,Carry,Cout,Sum); input C,P; output Cout,Sum; assign Sum=C ^ P ^ Carry; assign Cout=C&P|(C^P) & Carry;
module full(inp_K,inp_M,Carry,Cout,Sum); input inp_K,inp_M; output Cout,Sum; assign Sum=inp_K ^ inp_M ^ Carry; assign Cout=inp_K&inp_M|(inp_K^inp_M) & Carry;
module full(inp_Y,inp_O,Carry,Cout,Sum); input inp_Y,inp_O; output Cout,Sum; assign Sum=inp_Y ^ inp_O ^ Carry; assign Cout=inp_Y&inp_O|(inp_Y^inp_O) & Carry;
module full(C,D,Carry,Cout,Sum); input C,D; output Cout,Sum; assign Sum=C ^ D ^ Carry; assign Cout=C&D|(C^D) & Carry;
module full(T,V,Carry,Cout,Sum); input T,V; output Cout,Sum; assign Sum=T ^ V ^ Carry; assign Cout=T&V|(T^V) & Carry;
module full(inp_M,inp_Q,Carry,Cout,Sum); input inp_M,inp_Q; output Cout,Sum; assign Sum=inp_M ^ inp_Q ^ Carry; assign Cout=inp_M&inp_Q|(inp_M^inp_Q) & Carry;
module full(G,V,Carry,Cout,Sum); input G,V; output Cout,Sum; assign Sum=G ^ V ^ Carry; assign Cout=G&V|(G^V) & Carry; endmodule
module full(V,U,Carry,Cout,Sum); input V,U; output Cout,Sum; assign Sum=V ^ U ^ Carry; assign Cout=V&U|(V^U) & Carry; endmodule
module full(inp_Y,inp_C,Carry,Cout,Sum); input inp_Y,inp_C; output Cout,Sum; assign Sum=inp_Y ^ inp_C ^ Carry; assign Cout=inp_Y&inp_C|(inp_Y^inp_C) & Carry;
module full(inp_Z,inp_A,Carry,Cout,Sum); input inp_Z,inp_A; output Cout,Sum; assign Sum=inp_Z ^ inp_A ^ Carry; assign Cout=inp_Z&inp_A|(inp_Z^inp_A) & Carry;
module full(inp_Q,inp_V,Carry,Cout,Sum); input inp_Q,inp_V; output Cout,Sum; assign Sum=inp_Q ^ inp_V ^ Carry; assign Cout=inp_Q&inp_V|(inp_Q^inp_V) & Carry; endmodule
module full(inp_D,inp_M,Carry,Cout,Sum); input inp_D,inp_M; output Cout,Sum; assign Sum=inp_D ^ inp_M ^ Carry; assign Cout=inp_D&inp_M|(inp_D^inp_M) & Carry; endmodule
module full(inp_I,inp_U,Carry,Cout,Sum); input inp_I,inp_U; output Cout,Sum; assign Sum=inp_I ^ inp_U ^ Carry; assign Cout=inp_I&inp_U|(inp_I^inp_U) & Carry; endmodule
module full(inp_O,inp_F,Carry,Cout,Sum); input inp_O,inp_F; output Cout,Sum; assign Sum=inp_O ^ inp_F ^ Carry; assign Cout=inp_O&inp_F|(inp_O^inp_F) & Carry; endmodule
module full(inp_D,inp_T,Carry,Cout,Sum); input inp_D,inp_T; output Cout,Sum; assign Sum=inp_D ^ inp_T ^ Carry; assign Cout=inp_D&inp_T|(inp_D^inp_T) & Carry;
module full(inp_Z,inp_G,Carry,Cout,Sum); input inp_Z,inp_G; output Cout,Sum; assign Sum=inp_Z ^ inp_G ^ Carry; assign Cout=inp_Z&inp_G|(inp_Z^inp_G) & Carry;
module full(X,E,Carry,Cout,Sum); input X,E; output Cout,Sum; assign Sum=X ^ E ^ Carry; assign Cout=X&E|(X^E) & Carry; endmodule
module full(F,U,Carry,Cout,Sum); input F,U; output Cout,Sum; assign Sum=F ^ U ^ Carry; assign Cout=F&U|(F^U) & Carry;
module full(J,G,Carry,Cout,Sum); input J,G; output Cout,Sum; assign Sum=J ^ G ^ Carry; assign Cout=J&G|(J^G) & Carry; endmodule
module full(W,D,Carry,Cout,Sum); input W,D; output Cout,Sum; assign Sum=W ^ D ^ Carry; assign Cout=W&D|(W^D) & Carry; endmodule
module full(X,J,Carry,Cout,Sum); input X,J; output Cout,Sum; assign Sum=X ^ J ^ Carry; assign Cout=X&J|(X^J) & Carry;
module full(G,H,Carry,Cout,Sum); input G,H; output Cout,Sum; assign Sum=G ^ H ^ Carry; assign Cout=G&H|(G^H) & Carry;
module full(inp_M,inp_O,Carry,Cout,Sum); input inp_M,inp_O; output Cout,Sum; assign Sum=inp_M ^ inp_O ^ Carry; assign Cout=inp_M&inp_O|(inp_M^inp_O) & Carry; endmodule
module full(inp_H,inp_M,Carry,Cout,Sum); input inp_H,inp_M; output Cout,Sum; assign Sum=inp_H ^ inp_M ^ Carry; assign Cout=inp_H&inp_M|(inp_H^inp_M) & Carry; endmodule
module full(M,E,Carry,Cout,Sum); input M,E; output Cout,Sum; assign Sum=M ^ E ^ Carry; assign Cout=M&E|(M^E) & Carry; endmodule
module full(inp_X,inp_S,Carry,Cout,Sum); input inp_X,inp_S; output Cout,Sum; assign Sum=inp_X ^ inp_S ^ Carry; assign Cout=inp_X&inp_S|(inp_X^inp_S) & Carry;
module full(M,A,Carry,Cout,Sum); input M,A; output Cout,Sum; assign Sum=M ^ A ^ Carry; assign Cout=M&A|(M^A) & Carry; endmodule
module full(inp_R,inp_P,Carry,Cout,Sum); input inp_R,inp_P; output Cout,Sum; assign Sum=inp_R ^ inp_P ^ Carry; assign Cout=inp_R&inp_P|(inp_R^inp_P) & Carry;
module full(inp_M,inp_F,Carry,Cout,Sum); input inp_M,inp_F; output Cout,Sum; assign Sum=inp_M ^ inp_F ^ Carry; assign Cout=inp_M&inp_F|(inp_M^inp_F) & Carry; endmodule
module full(inp_B,inp_X,Carry,Cout,Sum); input inp_B,inp_X; output Cout,Sum; assign Sum=inp_B ^ inp_X ^ Carry; assign Cout=inp_B&inp_X|(inp_B^inp_X) & Carry; endmodule
module full(inp_P,inp_K,Carry,Cout,Sum); input inp_P,inp_K; output Cout,Sum; assign Sum=inp_P ^ inp_K ^ Carry; assign Cout=inp_P&inp_K|(inp_P^inp_K) & Carry;
module full(inp_T,inp_D,Carry,Cout,Sum); input inp_T,inp_D; output Cout,Sum; assign Sum=inp_T ^ inp_D ^ Carry; assign Cout=inp_T&inp_D|(inp_T^inp_D) & Carry;
module full(W,K,Carry,Cout,Sum); input W,K; output Cout,Sum; assign Sum=W ^ K ^ Carry; assign Cout=W&K|(W^K) & Carry;
module full(inp_O,inp_W,Carry,Cout,Sum); input inp_O,inp_W; output Cout,Sum; assign Sum=inp_O ^ inp_W ^ Carry; assign Cout=inp_O&inp_W|(inp_O^inp_W) & Carry;
module full(inp_T,inp_A,Carry,Cout,Sum); input inp_T,inp_A; output Cout,Sum; assign Sum=inp_T ^ inp_A ^ Carry; assign Cout=inp_T&inp_A|(inp_T^inp_A) & Carry; endmodule
module full(Y,Q,Carry,Cout,Sum); input Y,Q; output Cout,Sum; assign Sum=Y ^ Q ^ Carry; assign Cout=Y&Q|(Y^Q) & Carry;
module full(inp_U,inp_E,Carry,Cout,Sum); input inp_U,inp_E; output Cout,Sum; assign Sum=inp_U ^ inp_E ^ Carry; assign Cout=inp_U&inp_E|(inp_U^inp_E) & Carry;
module full(inp_Q,inp_V,Carry,Cout,Sum); input inp_Q,inp_V; output Cout,Sum; assign Sum=inp_Q ^ inp_V ^ Carry; assign Cout=inp_Q&inp_V|(inp_Q^inp_V) & Carry;
module full(P,L,Carry,Cout,Sum); input P,L; output Cout,Sum; assign Sum=P ^ L ^ Carry; assign Cout=P&L|(P^L) & Carry;
module full(H,B,Carry,Cout,Sum); input H,B; output Cout,Sum; assign Sum=H ^ B ^ Carry; assign Cout=H&B|(H^B) & Carry; endmodule
module full(inp_D,inp_U,Carry,Cout,Sum); input inp_D,inp_U; output Cout,Sum; assign Sum=inp_D ^ inp_U ^ Carry; assign Cout=inp_D&inp_U|(inp_D^inp_U) & Carry; endmodule
module full(X,K,Carry,Cout,Sum); input X,K; output Cout,Sum; assign Sum=X ^ K ^ Carry; assign Cout=X&K|(X^K) & Carry; endmodule
module full(inp_X,inp_S,Carry,Cout,Sum); input inp_X,inp_S; output Cout,Sum; assign Sum=inp_X ^ inp_S ^ Carry; assign Cout=inp_X&inp_S|(inp_X^inp_S) & Carry;
module full(inp_X,inp_I,Carry,Cout,Sum); input inp_X,inp_I; output Cout,Sum; assign Sum=inp_X ^ inp_I ^ Carry; assign Cout=inp_X&inp_I|(inp_X^inp_I) & Carry;
module full(inp_R,inp_S,Carry,Cout,Sum); input inp_R,inp_S; output Cout,Sum; assign Sum=inp_R ^ inp_S ^ Carry; assign Cout=inp_R&inp_S|(inp_R^inp_S) & Carry;
module full(inp_E,inp_F,Carry,Cout,Sum); input inp_E,inp_F; output Cout,Sum; assign Sum=inp_E ^ inp_F ^ Carry; assign Cout=inp_E&inp_F|(inp_E^inp_F) & Carry; endmodule
module full(C,R,Carry,Cout,Sum); input C,R; output Cout,Sum; assign Sum=C ^ R ^ Carry; assign Cout=C&R|(C^R) & Carry; endmodule
module full(inp_B,inp_E,Carry,Cout,Sum); input inp_B,inp_E; output Cout,Sum; assign Sum=inp_B ^ inp_E ^ Carry; assign Cout=inp_B&inp_E|(inp_B^inp_E) & Carry; endmodule
module full(S,P,Carry,Cout,Sum); input S,P; output Cout,Sum; assign Sum=S ^ P ^ Carry; assign Cout=S&P|(S^P) & Carry;
module full(Q,Z,Carry,Cout,Sum); input Q,Z; output Cout,Sum; assign Sum=Q ^ Z ^ Carry; assign Cout=Q&Z|(Q^Z) & Carry; endmodule
module full(inp_H,inp_R,Carry,Cout,Sum); input inp_H,inp_R; output Cout,Sum; assign Sum=inp_H ^ inp_R ^ Carry; assign Cout=inp_H&inp_R|(inp_H^inp_R) & Carry; endmodule
module full(L,Z,Carry,Cout,Sum); input L,Z; output Cout,Sum; assign Sum=L ^ Z ^ Carry; assign Cout=L&Z|(L^Z) & Carry;
module full(inp_L,inp_J,Carry,Cout,Sum); input inp_L,inp_J; output Cout,Sum; assign Sum=inp_L ^ inp_J ^ Carry; assign Cout=inp_L&inp_J|(inp_L^inp_J) & Carry;
module full(O,B,Carry,Cout,Sum); input O,B; output Cout,Sum; assign Sum=O ^ B ^ Carry; assign Cout=O&B|(O^B) & Carry;
module full(inp_O,inp_M,Carry,Cout,Sum); input inp_O,inp_M; output Cout,Sum; assign Sum=inp_O ^ inp_M ^ Carry; assign Cout=inp_O&inp_M|(inp_O^inp_M) & Carry; endmodule
module full(inp_Z,inp_O,Carry,Cout,Sum); input inp_Z,inp_O; output Cout,Sum; assign Sum=inp_Z ^ inp_O ^ Carry; assign Cout=inp_Z&inp_O|(inp_Z^inp_O) & Carry; endmodule
module full(W,B,Carry,Cout,Sum); input W,B; output Cout,Sum; assign Sum=W ^ B ^ Carry; assign Cout=W&B|(W^B) & Carry; endmodule
module full(inp_B,inp_Z,Carry,Cout,Sum); input inp_B,inp_Z; output Cout,Sum; assign Sum=inp_B ^ inp_Z ^ Carry; assign Cout=inp_B&inp_Z|(inp_B^inp_Z) & Carry;
module full(inp_O,inp_N,Carry,Cout,Sum); input inp_O,inp_N; output Cout,Sum; assign Sum=inp_O ^ inp_N ^ Carry; assign Cout=inp_O&inp_N|(inp_O^inp_N) & Carry;
module full(E,B,Carry,Cout,Sum); input E,B; output Cout,Sum; assign Sum=E ^ B ^ Carry; assign Cout=E&B|(E^B) & Carry; endmodule
module full(inp_E,inp_F,Carry,Cout,Sum); input inp_E,inp_F; output Cout,Sum; assign Sum=inp_E ^ inp_F ^ Carry; assign Cout=inp_E&inp_F|(inp_E^inp_F) & Carry; endmodule
module full(inp_Y,inp_T,Carry,Cout,Sum); input inp_Y,inp_T; output Cout,Sum; assign Sum=inp_Y ^ inp_T ^ Carry; assign Cout=inp_Y&inp_T|(inp_Y^inp_T) & Carry;
module full(inp_R,inp_O,Carry,Cout,Sum); input inp_R,inp_O; output Cout,Sum; assign Sum=inp_R ^ inp_O ^ Carry; assign Cout=inp_R&inp_O|(inp_R^inp_O) & Carry; endmodule
module full(inp_C,inp_P,Carry,Cout,Sum); input inp_C,inp_P; output Cout,Sum; assign Sum=inp_C ^ inp_P ^ Carry; assign Cout=inp_C&inp_P|(inp_C^inp_P) & Carry; endmodule
module full(J,U,Carry,Cout,Sum); input J,U; output Cout,Sum; assign Sum=J ^ U ^ Carry; assign Cout=J&U|(J^U) & Carry;
module full(inp_U,inp_H,Carry,Cout,Sum); input inp_U,inp_H; output Cout,Sum; assign Sum=inp_U ^ inp_H ^ Carry; assign Cout=inp_U&inp_H|(inp_U^inp_H) & Carry;
module full(inp_J,inp_D,Carry,Cout,Sum); input inp_J,inp_D; output Cout,Sum; assign Sum=inp_J ^ inp_D ^ Carry; assign Cout=inp_J&inp_D|(inp_J^inp_D) & Carry;
module full(inp_R,inp_L,Carry,Cout,Sum); input inp_R,inp_L; output Cout,Sum; assign Sum=inp_R ^ inp_L ^ Carry; assign Cout=inp_R&inp_L|(inp_R^inp_L) & Carry;
module full(B,T,Carry,Cout,Sum); input B,T; output Cout,Sum; assign Sum=B ^ T ^ Carry; assign Cout=B&T|(B^T) & Carry;
module full(N,J,Carry,Cout,Sum); input N,J; output Cout,Sum; assign Sum=N ^ J ^ Carry; assign Cout=N&J|(N^J) & Carry;
module full(inp_Y,inp_B,Carry,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B ^ Carry; assign Cout=inp_Y&inp_B|(inp_Y^inp_B) & Carry; endmodule
module full(inp_X,inp_E,Carry,Cout,Sum); input inp_X,inp_E; output Cout,Sum; assign Sum=inp_X ^ inp_E ^ Carry; assign Cout=inp_X&inp_E|(inp_X^inp_E) & Carry; endmodule
module full(inp_U,inp_N,Carry,Cout,Sum); input inp_U,inp_N; output Cout,Sum; assign Sum=inp_U ^ inp_N ^ Carry; assign Cout=inp_U&inp_N|(inp_U^inp_N) & Carry; endmodule
module full(inp_Z,inp_A,Carry,Cout,Sum); input inp_Z,inp_A; output Cout,Sum; assign Sum=inp_Z ^ inp_A ^ Carry; assign Cout=inp_Z&inp_A|(inp_Z^inp_A) & Carry; endmodule
module full(inp_L,inp_H,Carry,Cout,Sum); input inp_L,inp_H; output Cout,Sum; assign Sum=inp_L ^ inp_H ^ Carry; assign Cout=inp_L&inp_H|(inp_L^inp_H) & Carry; endmodule
module full(G,X,Carry,Cout,Sum); input G,X; output Cout,Sum; assign Sum=G ^ X ^ Carry; assign Cout=G&X|(G^X) & Carry; endmodule
module full(Q,T,Carry,Cout,Sum); input Q,T; output Cout,Sum; assign Sum=Q ^ T ^ Carry; assign Cout=Q&T|(Q^T) & Carry;
module full(X,Y,Carry,Cout,Sum); input X,Y; output Cout,Sum; assign Sum=X ^ Y ^ Carry; assign Cout=X&Y|(X^Y) & Carry; endmodule
module full(A,Z,Carry,Cout,Sum); input A,Z; output Cout,Sum; assign Sum=A ^ Z ^ Carry; assign Cout=A&Z|(A^Z) & Carry;
module full(inp_I,inp_X,Carry,Cout,Sum); input inp_I,inp_X; output Cout,Sum; assign Sum=inp_I ^ inp_X ^ Carry; assign Cout=inp_I&inp_X|(inp_I^inp_X) & Carry; endmodule
module full(inp_X,inp_T,Carry,Cout,Sum); input inp_X,inp_T; output Cout,Sum; assign Sum=inp_X ^ inp_T ^ Carry; assign Cout=inp_X&inp_T|(inp_X^inp_T) & Carry; endmodule
module full(inp_T,inp_E,Carry,Cout,Sum); input inp_T,inp_E; output Cout,Sum; assign Sum=inp_T ^ inp_E ^ Carry; assign Cout=inp_T&inp_E|(inp_T^inp_E) & Carry; endmodule
module full(inp_T,inp_Q,Carry,Cout,Sum); input inp_T,inp_Q; output Cout,Sum; assign Sum=inp_T ^ inp_Q ^ Carry; assign Cout=inp_T&inp_Q|(inp_T^inp_Q) & Carry;
module full(inp_G,inp_R,Carry,Cout,Sum); input inp_G,inp_R; output Cout,Sum; assign Sum=inp_G ^ inp_R ^ Carry; assign Cout=inp_G&inp_R|(inp_G^inp_R) & Carry;
module full(inp_U,inp_M,Carry,Cout,Sum); input inp_U,inp_M; output Cout,Sum; assign Sum=inp_U ^ inp_M ^ Carry; assign Cout=inp_U&inp_M|(inp_U^inp_M) & Carry; endmodule
module full(L,S,Carry,Cout,Sum); input L,S; output Cout,Sum; assign Sum=L ^ S ^ Carry; assign Cout=L&S|(L^S) & Carry;
module full(Q,C,Carry,Cout,Sum); input Q,C; output Cout,Sum; assign Sum=Q ^ C ^ Carry; assign Cout=Q&C|(Q^C) & Carry;
module full(inp_Y,inp_G,Carry,Cout,Sum); input inp_Y,inp_G; output Cout,Sum; assign Sum=inp_Y ^ inp_G ^ Carry; assign Cout=inp_Y&inp_G|(inp_Y^inp_G) & Carry; endmodule
module full(S,H,Carry,Cout,Sum); input S,H; output Cout,Sum; assign Sum=S ^ H ^ Carry; assign Cout=S&H|(S^H) & Carry; endmodule
module full(inp_K,inp_S,Carry,Cout,Sum); input inp_K,inp_S; output Cout,Sum; assign Sum=inp_K ^ inp_S ^ Carry; assign Cout=inp_K&inp_S|(inp_K^inp_S) & Carry;
module full(N,W,Carry,Cout,Sum); input N,W; output Cout,Sum; assign Sum=N ^ W ^ Carry; assign Cout=N&W|(N^W) & Carry;
module full(D,O,Carry,Cout,Sum); input D,O; output Cout,Sum; assign Sum=D ^ O ^ Carry; assign Cout=D&O|(D^O) & Carry; endmodule
module full(inp_Q,inp_R,Carry,Cout,Sum); input inp_Q,inp_R; output Cout,Sum; assign Sum=inp_Q ^ inp_R ^ Carry; assign Cout=inp_Q&inp_R|(inp_Q^inp_R) & Carry; endmodule
module full(C,R,Carry,Cout,Sum); input C,R; output Cout,Sum; assign Sum=C ^ R ^ Carry; assign Cout=C&R|(C^R) & Carry; endmodule
module full(inp_P,inp_T,Carry,Cout,Sum); input inp_P,inp_T; output Cout,Sum; assign Sum=inp_P ^ inp_T ^ Carry; assign Cout=inp_P&inp_T|(inp_P^inp_T) & Carry;
module full(inp_Z,inp_Y,Carry,Cout,Sum); input inp_Z,inp_Y; output Cout,Sum; assign Sum=inp_Z ^ inp_Y ^ Carry; assign Cout=inp_Z&inp_Y|(inp_Z^inp_Y) & Carry;
module full(inp_X,inp_A,Carry,Cout,Sum); input inp_X,inp_A; output Cout,Sum; assign Sum=inp_X ^ inp_A ^ Carry; assign Cout=inp_X&inp_A|(inp_X^inp_A) & Carry;
module full(E,K,Carry,Cout,Sum); input E,K; output Cout,Sum; assign Sum=E ^ K ^ Carry; assign Cout=E&K|(E^K) & Carry; endmodule
module full(C,R,Carry,Cout,Sum); input C,R; output Cout,Sum; assign Sum=C ^ R ^ Carry; assign Cout=C&R|(C^R) & Carry; endmodule
module full(inp_E,inp_N,Carry,Cout,Sum); input inp_E,inp_N; output Cout,Sum; assign Sum=inp_E ^ inp_N ^ Carry; assign Cout=inp_E&inp_N|(inp_E^inp_N) & Carry; endmodule
module full(inp_V,inp_L,Carry,Cout,Sum); input inp_V,inp_L; output Cout,Sum; assign Sum=inp_V ^ inp_L ^ Carry; assign Cout=inp_V&inp_L|(inp_V^inp_L) & Carry; endmodule
module full(inp_U,inp_T,Carry,Cout,Sum); input inp_U,inp_T; output Cout,Sum; assign Sum=inp_U ^ inp_T ^ Carry; assign Cout=inp_U&inp_T|(inp_U^inp_T) & Carry;
module full(K,F,Carry,Cout,Sum); input K,F; output Cout,Sum; assign Sum=K ^ F ^ Carry; assign Cout=K&F|(K^F) & Carry; endmodule
module full(F,K,Carry,Cout,Sum); input F,K; output Cout,Sum; assign Sum=F ^ K ^ Carry; assign Cout=F&K|(F^K) & Carry;
module full(U,B,Carry,Cout,Sum); input U,B; output Cout,Sum; assign Sum=U ^ B ^ Carry; assign Cout=U&B|(U^B) & Carry;
module full(inp_B,inp_R,Carry,Cout,Sum); input inp_B,inp_R; output Cout,Sum; assign Sum=inp_B ^ inp_R ^ Carry; assign Cout=inp_B&inp_R|(inp_B^inp_R) & Carry; endmodule
module full(inp_F,inp_M,Carry,Cout,Sum); input inp_F,inp_M; output Cout,Sum; assign Sum=inp_F ^ inp_M ^ Carry; assign Cout=inp_F&inp_M|(inp_F^inp_M) & Carry; endmodule
module full(X,U,Carry,Cout,Sum); input X,U; output Cout,Sum; assign Sum=X ^ U ^ Carry; assign Cout=X&U|(X^U) & Carry; endmodule
module full(E,V,Carry,Cout,Sum); input E,V; output Cout,Sum; assign Sum=E ^ V ^ Carry; assign Cout=E&V|(E^V) & Carry;
module full(R,U,Carry,Cout,Sum); input R,U; output Cout,Sum; assign Sum=R ^ U ^ Carry; assign Cout=R&U|(R^U) & Carry; endmodule
module full(inp_R,inp_C,Carry,Cout,Sum); input inp_R,inp_C; output Cout,Sum; assign Sum=inp_R ^ inp_C ^ Carry; assign Cout=inp_R&inp_C|(inp_R^inp_C) & Carry;
module full(inp_O,inp_K,Carry,Cout,Sum); input inp_O,inp_K; output Cout,Sum; assign Sum=inp_O ^ inp_K ^ Carry; assign Cout=inp_O&inp_K|(inp_O^inp_K) & Carry;
module full(V,U,Carry,Cout,Sum); input V,U; output Cout,Sum; assign Sum=V ^ U ^ Carry; assign Cout=V&U|(V^U) & Carry;
module full(inp_Z,inp_S,Carry,Cout,Sum); input inp_Z,inp_S; output Cout,Sum; assign Sum=inp_Z ^ inp_S ^ Carry; assign Cout=inp_Z&inp_S|(inp_Z^inp_S) & Carry;
module full(inp_S,inp_H,Carry,Cout,Sum); input inp_S,inp_H; output Cout,Sum; assign Sum=inp_S ^ inp_H ^ Carry; assign Cout=inp_S&inp_H|(inp_S^inp_H) & Carry;
module full(Z,V,Carry,Cout,Sum); input Z,V; output Cout,Sum; assign Sum=Z ^ V ^ Carry; assign Cout=Z&V|(Z^V) & Carry;
module full(R,Y,Carry,Cout,Sum); input R,Y; output Cout,Sum; assign Sum=R ^ Y ^ Carry; assign Cout=R&Y|(R^Y) & Carry; endmodule
module full(inp_W,inp_L,Carry,Cout,Sum); input inp_W,inp_L; output Cout,Sum; assign Sum=inp_W ^ inp_L ^ Carry; assign Cout=inp_W&inp_L|(inp_W^inp_L) & Carry;
module full(Z,L,Carry,Cout,Sum); input Z,L; output Cout,Sum; assign Sum=Z ^ L ^ Carry; assign Cout=Z&L|(Z^L) & Carry;
module full(L,K,Carry,Cout,Sum); input L,K; output Cout,Sum; assign Sum=L ^ K ^ Carry; assign Cout=L&K|(L^K) & Carry;
module full(B,W,Carry,Cout,Sum); input B,W; output Cout,Sum; assign Sum=B ^ W ^ Carry; assign Cout=B&W|(B^W) & Carry; endmodule
module full(inp_U,inp_W,Carry,Cout,Sum); input inp_U,inp_W; output Cout,Sum; assign Sum=inp_U ^ inp_W ^ Carry; assign Cout=inp_U&inp_W|(inp_U^inp_W) & Carry; endmodule
module full(inp_F,inp_R,Carry,Cout,Sum); input inp_F,inp_R; output Cout,Sum; assign Sum=inp_F ^ inp_R ^ Carry; assign Cout=inp_F&inp_R|(inp_F^inp_R) & Carry; endmodule
module full(C,G,Carry,Cout,Sum); input C,G; output Cout,Sum; assign Sum=C ^ G ^ Carry; assign Cout=C&G|(C^G) & Carry;
module full(inp_X,inp_Y,Carry,Cout,Sum); input inp_X,inp_Y; output Cout,Sum; assign Sum=inp_X ^ inp_Y ^ Carry; assign Cout=inp_X&inp_Y|(inp_X^inp_Y) & Carry;
module full(O,W,Carry,Cout,Sum); input O,W; output Cout,Sum; assign Sum=O ^ W ^ Carry; assign Cout=O&W|(O^W) & Carry;
module full(X,I,Carry,Cout,Sum); input X,I; output Cout,Sum; assign Sum=X ^ I ^ Carry; assign Cout=X&I|(X^I) & Carry; endmodule
module full(I,O,Carry,Cout,Sum); input I,O; output Cout,Sum; assign Sum=I ^ O ^ Carry; assign Cout=I&O|(I^O) & Carry; endmodule
module full(S,Q,Carry,Cout,Sum); input S,Q; output Cout,Sum; assign Sum=S ^ Q ^ Carry; assign Cout=S&Q|(S^Q) & Carry;
module full(inp_F,inp_E,Carry,Cout,Sum); input inp_F,inp_E; output Cout,Sum; assign Sum=inp_F ^ inp_E ^ Carry; assign Cout=inp_F&inp_E|(inp_F^inp_E) & Carry; endmodule
module full(F,M,Carry,Cout,Sum); input F,M; output Cout,Sum; assign Sum=F ^ M ^ Carry; assign Cout=F&M|(F^M) & Carry;
module full(inp_E,inp_O,Carry,Cout,Sum); input inp_E,inp_O; output Cout,Sum; assign Sum=inp_E ^ inp_O ^ Carry; assign Cout=inp_E&inp_O|(inp_E^inp_O) & Carry;
module full(S,F,Carry,Cout,Sum); input S,F; output Cout,Sum; assign Sum=S ^ F ^ Carry; assign Cout=S&F|(S^F) & Carry; endmodule
module full(S,U,Carry,Cout,Sum); input S,U; output Cout,Sum; assign Sum=S ^ U ^ Carry; assign Cout=S&U|(S^U) & Carry; endmodule
module full(inp_G,inp_E,Carry,Cout,Sum); input inp_G,inp_E; output Cout,Sum; assign Sum=inp_G ^ inp_E ^ Carry; assign Cout=inp_G&inp_E|(inp_G^inp_E) & Carry; endmodule
module full(N,P,Carry,Cout,Sum); input N,P; output Cout,Sum; assign Sum=N ^ P ^ Carry; assign Cout=N&P|(N^P) & Carry; endmodule
module full(R,K,Carry,Cout,Sum); input R,K; output Cout,Sum; assign Sum=R ^ K ^ Carry; assign Cout=R&K|(R^K) & Carry; endmodule
module full(P,Q,Carry,Cout,Sum); input P,Q; output Cout,Sum; assign Sum=P ^ Q ^ Carry; assign Cout=P&Q|(P^Q) & Carry; endmodule
module full(inp_S,inp_U,Carry,Cout,Sum); input inp_S,inp_U; output Cout,Sum; assign Sum=inp_S ^ inp_U ^ Carry; assign Cout=inp_S&inp_U|(inp_S^inp_U) & Carry; endmodule
module full(inp_Q,inp_M,Carry,Cout,Sum); input inp_Q,inp_M; output Cout,Sum; assign Sum=inp_Q ^ inp_M ^ Carry; assign Cout=inp_Q&inp_M|(inp_Q^inp_M) & Carry; endmodule
module full(inp_D,inp_E,Carry,Cout,Sum); input inp_D,inp_E; output Cout,Sum; assign Sum=inp_D ^ inp_E ^ Carry; assign Cout=inp_D&inp_E|(inp_D^inp_E) & Carry;
module full(M,P,Carry,Cout,Sum); input M,P; output Cout,Sum; assign Sum=M ^ P ^ Carry; assign Cout=M&P|(M^P) & Carry;
module full(inp_I,inp_Q,Carry,Cout,Sum); input inp_I,inp_Q; output Cout,Sum; assign Sum=inp_I ^ inp_Q ^ Carry; assign Cout=inp_I&inp_Q|(inp_I^inp_Q) & Carry;
module full(A,T,Carry,Cout,Sum); input A,T; output Cout,Sum; assign Sum=A ^ T ^ Carry; assign Cout=A&T|(A^T) & Carry;
module full(inp_M,inp_Q,Carry,Cout,Sum); input inp_M,inp_Q; output Cout,Sum; assign Sum=inp_M ^ inp_Q ^ Carry; assign Cout=inp_M&inp_Q|(inp_M^inp_Q) & Carry;
module full(inp_K,inp_R,Carry,Cout,Sum); input inp_K,inp_R; output Cout,Sum; assign Sum=inp_K ^ inp_R ^ Carry; assign Cout=inp_K&inp_R|(inp_K^inp_R) & Carry;
module full(J,L,Carry,Cout,Sum); input J,L; output Cout,Sum; assign Sum=J ^ L ^ Carry; assign Cout=J&L|(J^L) & Carry;
module full(R,L,Carry,Cout,Sum); input R,L; output Cout,Sum; assign Sum=R ^ L ^ Carry; assign Cout=R&L|(R^L) & Carry; endmodule
module full(inp_O,inp_B,Carry,Cout,Sum); input inp_O,inp_B; output Cout,Sum; assign Sum=inp_O ^ inp_B ^ Carry; assign Cout=inp_O&inp_B|(inp_O^inp_B) & Carry;
module full(inp_J,inp_U,Carry,Cout,Sum); input inp_J,inp_U; output Cout,Sum; assign Sum=inp_J ^ inp_U ^ Carry; assign Cout=inp_J&inp_U|(inp_J^inp_U) & Carry;
module full(E,T,Carry,Cout,Sum); input E,T; output Cout,Sum; assign Sum=E ^ T ^ Carry; assign Cout=E&T|(E^T) & Carry;
module full(inp_E,inp_J,Carry,Cout,Sum); input inp_E,inp_J; output Cout,Sum; assign Sum=inp_E ^ inp_J ^ Carry; assign Cout=inp_E&inp_J|(inp_E^inp_J) & Carry;
module full(P,I,Carry,Cout,Sum); input P,I; output Cout,Sum; assign Sum=P ^ I ^ Carry; assign Cout=P&I|(P^I) & Carry;
module full(R,C,Carry,Cout,Sum); input R,C; output Cout,Sum; assign Sum=R ^ C ^ Carry; assign Cout=R&C|(R^C) & Carry; endmodule
module full(inp_K,inp_P,Carry,Cout,Sum); input inp_K,inp_P; output Cout,Sum; assign Sum=inp_K ^ inp_P ^ Carry; assign Cout=inp_K&inp_P|(inp_K^inp_P) & Carry; endmodule
module full(inp_K,inp_N,Carry,Cout,Sum); input inp_K,inp_N; output Cout,Sum; assign Sum=inp_K ^ inp_N ^ Carry; assign Cout=inp_K&inp_N|(inp_K^inp_N) & Carry; endmodule
module full(inp_W,inp_N,Carry,Cout,Sum); input inp_W,inp_N; output Cout,Sum; assign Sum=inp_W ^ inp_N ^ Carry; assign Cout=inp_W&inp_N|(inp_W^inp_N) & Carry;
module full(inp_U,inp_Q,Carry,Cout,Sum); input inp_U,inp_Q; output Cout,Sum; assign Sum=inp_U ^ inp_Q ^ Carry; assign Cout=inp_U&inp_Q|(inp_U^inp_Q) & Carry; endmodule
module full(S,L,Carry,Cout,Sum); input S,L; output Cout,Sum; assign Sum=S ^ L ^ Carry; assign Cout=S&L|(S^L) & Carry; endmodule
module full(inp_C,inp_O,Carry,Cout,Sum); input inp_C,inp_O; output Cout,Sum; assign Sum=inp_C ^ inp_O ^ Carry; assign Cout=inp_C&inp_O|(inp_C^inp_O) & Carry; endmodule
module full(W,P,Carry,Cout,Sum); input W,P; output Cout,Sum; assign Sum=W ^ P ^ Carry; assign Cout=W&P|(W^P) & Carry;
module full(B,X,Carry,Cout,Sum); input B,X; output Cout,Sum; assign Sum=B ^ X ^ Carry; assign Cout=B&X|(B^X) & Carry; endmodule
module full(inp_P,inp_D,Carry,Cout,Sum); input inp_P,inp_D; output Cout,Sum; assign Sum=inp_P ^ inp_D ^ Carry; assign Cout=inp_P&inp_D|(inp_P^inp_D) & Carry;
module full(M,U,Carry,Cout,Sum); input M,U; output Cout,Sum; assign Sum=M ^ U ^ Carry; assign Cout=M&U|(M^U) & Carry;
module full(inp_J,inp_H,Carry,Cout,Sum); input inp_J,inp_H; output Cout,Sum; assign Sum=inp_J ^ inp_H ^ Carry; assign Cout=inp_J&inp_H|(inp_J^inp_H) & Carry; endmodule
module full(inp_D,inp_E,Carry,Cout,Sum); input inp_D,inp_E; output Cout,Sum; assign Sum=inp_D ^ inp_E ^ Carry; assign Cout=inp_D&inp_E|(inp_D^inp_E) & Carry;
module full(inp_U,inp_W,Carry,Cout,Sum); input inp_U,inp_W; output Cout,Sum; assign Sum=inp_U ^ inp_W ^ Carry; assign Cout=inp_U&inp_W|(inp_U^inp_W) & Carry;
module full(Y,M,Carry,Cout,Sum); input Y,M; output Cout,Sum; assign Sum=Y ^ M ^ Carry; assign Cout=Y&M|(Y^M) & Carry;
module full(inp_E,inp_Y,Carry,Cout,Sum); input inp_E,inp_Y; output Cout,Sum; assign Sum=inp_E ^ inp_Y ^ Carry; assign Cout=inp_E&inp_Y|(inp_E^inp_Y) & Carry;
module full(W,Q,Carry,Cout,Sum); input W,Q; output Cout,Sum; assign Sum=W ^ Q ^ Carry; assign Cout=W&Q|(W^Q) & Carry;
module full(E,A,Carry,Cout,Sum); input E,A; output Cout,Sum; assign Sum=E ^ A ^ Carry; assign Cout=E&A|(E^A) & Carry;
module full(inp_Q,inp_E,Carry,Cout,Sum); input inp_Q,inp_E; output Cout,Sum; assign Sum=inp_Q ^ inp_E ^ Carry; assign Cout=inp_Q&inp_E|(inp_Q^inp_E) & Carry;
module full(inp_C,inp_N,Carry,Cout,Sum); input inp_C,inp_N; output Cout,Sum; assign Sum=inp_C ^ inp_N ^ Carry; assign Cout=inp_C&inp_N|(inp_C^inp_N) & Carry; endmodule
module full(inp_G,inp_T,Carry,Cout,Sum); input inp_G,inp_T; output Cout,Sum; assign Sum=inp_G ^ inp_T ^ Carry; assign Cout=inp_G&inp_T|(inp_G^inp_T) & Carry;
module full(B,P,Carry,Cout,Sum); input B,P; output Cout,Sum; assign Sum=B ^ P ^ Carry; assign Cout=B&P|(B^P) & Carry;
module full(inp_K,inp_W,Carry,Cout,Sum); input inp_K,inp_W; output Cout,Sum; assign Sum=inp_K ^ inp_W ^ Carry; assign Cout=inp_K&inp_W|(inp_K^inp_W) & Carry;
module full(G,Z,Carry,Cout,Sum); input G,Z; output Cout,Sum; assign Sum=G ^ Z ^ Carry; assign Cout=G&Z|(G^Z) & Carry; endmodule
module full(F,E,Carry,Cout,Sum); input F,E; output Cout,Sum; assign Sum=F ^ E ^ Carry; assign Cout=F&E|(F^E) & Carry; endmodule
module full(inp_M,inp_G,Carry,Cout,Sum); input inp_M,inp_G; output Cout,Sum; assign Sum=inp_M ^ inp_G ^ Carry; assign Cout=inp_M&inp_G|(inp_M^inp_G) & Carry;
module full(S,N,Carry,Cout,Sum); input S,N; output Cout,Sum; assign Sum=S ^ N ^ Carry; assign Cout=S&N|(S^N) & Carry; endmodule
module full(T,J,Carry,Cout,Sum); input T,J; output Cout,Sum; assign Sum=T ^ J ^ Carry; assign Cout=T&J|(T^J) & Carry;
module full(inp_W,inp_L,Carry,Cout,Sum); input inp_W,inp_L; output Cout,Sum; assign Sum=inp_W ^ inp_L ^ Carry; assign Cout=inp_W&inp_L|(inp_W^inp_L) & Carry; endmodule
module full(inp_S,inp_M,Carry,Cout,Sum); input inp_S,inp_M; output Cout,Sum; assign Sum=inp_S ^ inp_M ^ Carry; assign Cout=inp_S&inp_M|(inp_S^inp_M) & Carry; endmodule
module full(inp_D,inp_L,Carry,Cout,Sum); input inp_D,inp_L; output Cout,Sum; assign Sum=inp_D ^ inp_L ^ Carry; assign Cout=inp_D&inp_L|(inp_D^inp_L) & Carry;
module full(inp_P,inp_A,Carry,Cout,Sum); input inp_P,inp_A; output Cout,Sum; assign Sum=inp_P ^ inp_A ^ Carry; assign Cout=inp_P&inp_A|(inp_P^inp_A) & Carry;
module full(inp_Z,inp_C,Carry,Cout,Sum); input inp_Z,inp_C; output Cout,Sum; assign Sum=inp_Z ^ inp_C ^ Carry; assign Cout=inp_Z&inp_C|(inp_Z^inp_C) & Carry; endmodule
module full(L,A,Carry,Cout,Sum); input L,A; output Cout,Sum; assign Sum=L ^ A ^ Carry; assign Cout=L&A|(L^A) & Carry;
module full(C,E,Carry,Cout,Sum); input C,E; output Cout,Sum; assign Sum=C ^ E ^ Carry; assign Cout=C&E|(C^E) & Carry; endmodule
module full(inp_E,inp_A,Carry,Cout,Sum); input inp_E,inp_A; output Cout,Sum; assign Sum=inp_E ^ inp_A ^ Carry; assign Cout=inp_E&inp_A|(inp_E^inp_A) & Carry; endmodule
module full(inp_E,inp_Z,Carry,Cout,Sum); input inp_E,inp_Z; output Cout,Sum; assign Sum=inp_E ^ inp_Z ^ Carry; assign Cout=inp_E&inp_Z|(inp_E^inp_Z) & Carry; endmodule
module full(S,C,Carry,Cout,Sum); input S,C; output Cout,Sum; assign Sum=S ^ C ^ Carry; assign Cout=S&C|(S^C) & Carry; endmodule
module full(T,N,Carry,Cout,Sum); input T,N; output Cout,Sum; assign Sum=T ^ N ^ Carry; assign Cout=T&N|(T^N) & Carry; endmodule
module full(M,J,Carry,Cout,Sum); input M,J; output Cout,Sum; assign Sum=M ^ J ^ Carry; assign Cout=M&J|(M^J) & Carry; endmodule
module full(inp_E,inp_T,Carry,Cout,Sum); input inp_E,inp_T; output Cout,Sum; assign Sum=inp_E ^ inp_T ^ Carry; assign Cout=inp_E&inp_T|(inp_E^inp_T) & Carry; endmodule
module full(P,I,Carry,Cout,Sum); input P,I; output Cout,Sum; assign Sum=P ^ I ^ Carry; assign Cout=P&I|(P^I) & Carry; endmodule
module full(P,D,Carry,Cout,Sum); input P,D; output Cout,Sum; assign Sum=P ^ D ^ Carry; assign Cout=P&D|(P^D) & Carry;
module full(F,Z,Carry,Cout,Sum); input F,Z; output Cout,Sum; assign Sum=F ^ Z ^ Carry; assign Cout=F&Z|(F^Z) & Carry; endmodule
module full(inp_H,inp_U,Carry,Cout,Sum); input inp_H,inp_U; output Cout,Sum; assign Sum=inp_H ^ inp_U ^ Carry; assign Cout=inp_H&inp_U|(inp_H^inp_U) & Carry;
module full(N,W,Carry,Cout,Sum); input N,W; output Cout,Sum; assign Sum=N ^ W ^ Carry; assign Cout=N&W|(N^W) & Carry; endmodule
module full(S,M,Carry,Cout,Sum); input S,M; output Cout,Sum; assign Sum=S ^ M ^ Carry; assign Cout=S&M|(S^M) & Carry; endmodule
module full(inp_E,inp_S,Carry,Cout,Sum); input inp_E,inp_S; output Cout,Sum; assign Sum=inp_E ^ inp_S ^ Carry; assign Cout=inp_E&inp_S|(inp_E^inp_S) & Carry;
module full(S,M,Carry,Cout,Sum); input S,M; output Cout,Sum; assign Sum=S ^ M ^ Carry; assign Cout=S&M|(S^M) & Carry;
module full(L,X,Carry,Cout,Sum); input L,X; output Cout,Sum; assign Sum=L ^ X ^ Carry; assign Cout=L&X|(L^X) & Carry;
module full(inp_E,inp_Q,Carry,Cout,Sum); input inp_E,inp_Q; output Cout,Sum; assign Sum=inp_E ^ inp_Q ^ Carry; assign Cout=inp_E&inp_Q|(inp_E^inp_Q) & Carry;
module full(M,N,Carry,Cout,Sum); input M,N; output Cout,Sum; assign Sum=M ^ N ^ Carry; assign Cout=M&N|(M^N) & Carry;
module full(B,C,Carry,Cout,Sum); input B,C; output Cout,Sum; assign Sum=B ^ C ^ Carry; assign Cout=B&C|(B^C) & Carry;
module full(inp_Y,inp_J,Carry,Cout,Sum); input inp_Y,inp_J; output Cout,Sum; assign Sum=inp_Y ^ inp_J ^ Carry; assign Cout=inp_Y&inp_J|(inp_Y^inp_J) & Carry;
module full(W,E,Carry,Cout,Sum); input W,E; output Cout,Sum; assign Sum=W ^ E ^ Carry; assign Cout=W&E|(W^E) & Carry;
module full(inp_I,inp_E,Carry,Cout,Sum); input inp_I,inp_E; output Cout,Sum; assign Sum=inp_I ^ inp_E ^ Carry; assign Cout=inp_I&inp_E|(inp_I^inp_E) & Carry;
module full(inp_W,inp_K,Carry,Cout,Sum); input inp_W,inp_K; output Cout,Sum; assign Sum=inp_W ^ inp_K ^ Carry; assign Cout=inp_W&inp_K|(inp_W^inp_K) & Carry; endmodule
module full(K,S,Carry,Cout,Sum); input K,S; output Cout,Sum; assign Sum=K ^ S ^ Carry; assign Cout=K&S|(K^S) & Carry; endmodule
module full(inp_X,inp_C,Carry,Cout,Sum); input inp_X,inp_C; output Cout,Sum; assign Sum=inp_X ^ inp_C ^ Carry; assign Cout=inp_X&inp_C|(inp_X^inp_C) & Carry; endmodule
module full(H,M,Carry,Cout,Sum); input H,M; output Cout,Sum; assign Sum=H ^ M ^ Carry; assign Cout=H&M|(H^M) & Carry; endmodule
module full(X,P,Carry,Cout,Sum); input X,P; output Cout,Sum; assign Sum=X ^ P ^ Carry; assign Cout=X&P|(X^P) & Carry; endmodule
module full(inp_I,inp_P,Carry,Cout,Sum); input inp_I,inp_P; output Cout,Sum; assign Sum=inp_I ^ inp_P ^ Carry; assign Cout=inp_I&inp_P|(inp_I^inp_P) & Carry;
module full(inp_W,inp_K,Carry,Cout,Sum); input inp_W,inp_K; output Cout,Sum; assign Sum=inp_W ^ inp_K ^ Carry; assign Cout=inp_W&inp_K|(inp_W^inp_K) & Carry;
module full(C,I,Carry,Cout,Sum); input C,I; output Cout,Sum; assign Sum=C ^ I ^ Carry; assign Cout=C&I|(C^I) & Carry; endmodule
module full(inp_P,inp_I,Carry,Cout,Sum); input inp_P,inp_I; output Cout,Sum; assign Sum=inp_P ^ inp_I ^ Carry; assign Cout=inp_P&inp_I|(inp_P^inp_I) & Carry; endmodule
module full(A,W,Carry,Cout,Sum); input A,W; output Cout,Sum; assign Sum=A ^ W ^ Carry; assign Cout=A&W|(A^W) & Carry;
module full(K,A,Carry,Cout,Sum); input K,A; output Cout,Sum; assign Sum=K ^ A ^ Carry; assign Cout=K&A|(K^A) & Carry;
module full(inp_K,inp_M,Carry,Cout,Sum); input inp_K,inp_M; output Cout,Sum; assign Sum=inp_K ^ inp_M ^ Carry; assign Cout=inp_K&inp_M|(inp_K^inp_M) & Carry;
module full(H,J,Carry,Cout,Sum); input H,J; output Cout,Sum; assign Sum=H ^ J ^ Carry; assign Cout=H&J|(H^J) & Carry;
module full(inp_K,inp_S,Carry,Cout,Sum); input inp_K,inp_S; output Cout,Sum; assign Sum=inp_K ^ inp_S ^ Carry; assign Cout=inp_K&inp_S|(inp_K^inp_S) & Carry;
module full(H,E,Carry,Cout,Sum); input H,E; output Cout,Sum; assign Sum=H ^ E ^ Carry; assign Cout=H&E|(H^E) & Carry;
module full(inp_T,inp_Z,Carry,Cout,Sum); input inp_T,inp_Z; output Cout,Sum; assign Sum=inp_T ^ inp_Z ^ Carry; assign Cout=inp_T&inp_Z|(inp_T^inp_Z) & Carry;
module full(D,O,Carry,Cout,Sum); input D,O; output Cout,Sum; assign Sum=D ^ O ^ Carry; assign Cout=D&O|(D^O) & Carry; endmodule
module full(inp_N,inp_S,Carry,Cout,Sum); input inp_N,inp_S; output Cout,Sum; assign Sum=inp_N ^ inp_S ^ Carry; assign Cout=inp_N&inp_S|(inp_N^inp_S) & Carry; endmodule
module full(V,U,Carry,Cout,Sum); input V,U; output Cout,Sum; assign Sum=V ^ U ^ Carry; assign Cout=V&U|(V^U) & Carry;
module full(K,D,Carry,Cout,Sum); input K,D; output Cout,Sum; assign Sum=K ^ D ^ Carry; assign Cout=K&D|(K^D) & Carry;
module full(inp_K,inp_P,Carry,Cout,Sum); input inp_K,inp_P; output Cout,Sum; assign Sum=inp_K ^ inp_P ^ Carry; assign Cout=inp_K&inp_P|(inp_K^inp_P) & Carry;
module full(B,W,Carry,Cout,Sum); input B,W; output Cout,Sum; assign Sum=B ^ W ^ Carry; assign Cout=B&W|(B^W) & Carry; endmodule
module full(I,N,Carry,Cout,Sum); input I,N; output Cout,Sum; assign Sum=I ^ N ^ Carry; assign Cout=I&N|(I^N) & Carry; endmodule
module full(inp_E,inp_E,Carry,Cout,Sum); input inp_E,inp_E; output Cout,Sum; assign Sum=inp_E ^ inp_E ^ Carry; assign Cout=inp_E&inp_E|(inp_E^inp_E) & Carry; endmodule
module full(S,K,Carry,Cout,Sum); input S,K; output Cout,Sum; assign Sum=S ^ K ^ Carry; assign Cout=S&K|(S^K) & Carry; endmodule
module full(V,X,Carry,Cout,Sum); input V,X; output Cout,Sum; assign Sum=V ^ X ^ Carry; assign Cout=V&X|(V^X) & Carry; endmodule
module full(inp_Q,inp_S,Carry,Cout,Sum); input inp_Q,inp_S; output Cout,Sum; assign Sum=inp_Q ^ inp_S ^ Carry; assign Cout=inp_Q&inp_S|(inp_Q^inp_S) & Carry;
module full(U,S,Carry,Cout,Sum); input U,S; output Cout,Sum; assign Sum=U ^ S ^ Carry; assign Cout=U&S|(U^S) & Carry; endmodule
module full(B,Q,Carry,Cout,Sum); input B,Q; output Cout,Sum; assign Sum=B ^ Q ^ Carry; assign Cout=B&Q|(B^Q) & Carry;
module full(D,G,Carry,Cout,Sum); input D,G; output Cout,Sum; assign Sum=D ^ G ^ Carry; assign Cout=D&G|(D^G) & Carry; endmodule
module full(inp_K,inp_B,Carry,Cout,Sum); input inp_K,inp_B; output Cout,Sum; assign Sum=inp_K ^ inp_B ^ Carry; assign Cout=inp_K&inp_B|(inp_K^inp_B) & Carry; endmodule
module full(inp_S,inp_U,Carry,Cout,Sum); input inp_S,inp_U; output Cout,Sum; assign Sum=inp_S ^ inp_U ^ Carry; assign Cout=inp_S&inp_U|(inp_S^inp_U) & Carry; endmodule
module full(inp_H,inp_X,Carry,Cout,Sum); input inp_H,inp_X; output Cout,Sum; assign Sum=inp_H ^ inp_X ^ Carry; assign Cout=inp_H&inp_X|(inp_H^inp_X) & Carry;
module full(N,J,Carry,Cout,Sum); input N,J; output Cout,Sum; assign Sum=N ^ J ^ Carry; assign Cout=N&J|(N^J) & Carry;
module full(R,U,Carry,Cout,Sum); input R,U; output Cout,Sum; assign Sum=R ^ U ^ Carry; assign Cout=R&U|(R^U) & Carry;
module full(C,L,Carry,Cout,Sum); input C,L; output Cout,Sum; assign Sum=C ^ L ^ Carry; assign Cout=C&L|(C^L) & Carry;
module full(inp_H,inp_N,Carry,Cout,Sum); input inp_H,inp_N; output Cout,Sum; assign Sum=inp_H ^ inp_N ^ Carry; assign Cout=inp_H&inp_N|(inp_H^inp_N) & Carry;
module full(D,P,Carry,Cout,Sum); input D,P; output Cout,Sum; assign Sum=D ^ P ^ Carry; assign Cout=D&P|(D^P) & Carry; endmodule
module full(E,P,Carry,Cout,Sum); input E,P; output Cout,Sum; assign Sum=E ^ P ^ Carry; assign Cout=E&P|(E^P) & Carry; endmodule
module full(inp_U,inp_P,Carry,Cout,Sum); input inp_U,inp_P; output Cout,Sum; assign Sum=inp_U ^ inp_P ^ Carry; assign Cout=inp_U&inp_P|(inp_U^inp_P) & Carry;
module full(inp_Z,inp_P,Carry,Cout,Sum); input inp_Z,inp_P; output Cout,Sum; assign Sum=inp_Z ^ inp_P ^ Carry; assign Cout=inp_Z&inp_P|(inp_Z^inp_P) & Carry;
module full(inp_N,inp_U,Carry,Cout,Sum); input inp_N,inp_U; output Cout,Sum; assign Sum=inp_N ^ inp_U ^ Carry; assign Cout=inp_N&inp_U|(inp_N^inp_U) & Carry;
module full(H,O,Carry,Cout,Sum); input H,O; output Cout,Sum; assign Sum=H ^ O ^ Carry; assign Cout=H&O|(H^O) & Carry; endmodule
module full(P,M,Carry,Cout,Sum); input P,M; output Cout,Sum; assign Sum=P ^ M ^ Carry; assign Cout=P&M|(P^M) & Carry;
module full(inp_J,inp_O,Carry,Cout,Sum); input inp_J,inp_O; output Cout,Sum; assign Sum=inp_J ^ inp_O ^ Carry; assign Cout=inp_J&inp_O|(inp_J^inp_O) & Carry; endmodule
module full(inp_W,inp_M,Carry,Cout,Sum); input inp_W,inp_M; output Cout,Sum; assign Sum=inp_W ^ inp_M ^ Carry; assign Cout=inp_W&inp_M|(inp_W^inp_M) & Carry; endmodule
module full(inp_S,inp_Q,Carry,Cout,Sum); input inp_S,inp_Q; output Cout,Sum; assign Sum=inp_S ^ inp_Q ^ Carry; assign Cout=inp_S&inp_Q|(inp_S^inp_Q) & Carry;
module full(Y,O,Carry,Cout,Sum); input Y,O; output Cout,Sum; assign Sum=Y ^ O ^ Carry; assign Cout=Y&O|(Y^O) & Carry; endmodule
module full(inp_U,inp_R,Carry,Cout,Sum); input inp_U,inp_R; output Cout,Sum; assign Sum=inp_U ^ inp_R ^ Carry; assign Cout=inp_U&inp_R|(inp_U^inp_R) & Carry;
module full(Z,K,Carry,Cout,Sum); input Z,K; output Cout,Sum; assign Sum=Z ^ K ^ Carry; assign Cout=Z&K|(Z^K) & Carry;
module full(inp_A,inp_M,Carry,Cout,Sum); input inp_A,inp_M; output Cout,Sum; assign Sum=inp_A ^ inp_M ^ Carry; assign Cout=inp_A&inp_M|(inp_A^inp_M) & Carry;
module full(B,K,Carry,Cout,Sum); input B,K; output Cout,Sum; assign Sum=B ^ K ^ Carry; assign Cout=B&K|(B^K) & Carry; endmodule
module full(C,N,Carry,Cout,Sum); input C,N; output Cout,Sum; assign Sum=C ^ N ^ Carry; assign Cout=C&N|(C^N) & Carry; endmodule
module full(O,C,Carry,Cout,Sum); input O,C; output Cout,Sum; assign Sum=O ^ C ^ Carry; assign Cout=O&C|(O^C) & Carry; endmodule
module full(L,O,Carry,Cout,Sum); input L,O; output Cout,Sum; assign Sum=L ^ O ^ Carry; assign Cout=L&O|(L^O) & Carry;
module full(F,M,Carry,Cout,Sum); input F,M; output Cout,Sum; assign Sum=F ^ M ^ Carry; assign Cout=F&M|(F^M) & Carry; endmodule
module full(G,M,Carry,Cout,Sum); input G,M; output Cout,Sum; assign Sum=G ^ M ^ Carry; assign Cout=G&M|(G^M) & Carry; endmodule
module full(inp_H,inp_R,Carry,Cout,Sum); input inp_H,inp_R; output Cout,Sum; assign Sum=inp_H ^ inp_R ^ Carry; assign Cout=inp_H&inp_R|(inp_H^inp_R) & Carry; endmodule
module full(inp_S,inp_B,Carry,Cout,Sum); input inp_S,inp_B; output Cout,Sum; assign Sum=inp_S ^ inp_B ^ Carry; assign Cout=inp_S&inp_B|(inp_S^inp_B) & Carry; endmodule
module full(inp_V,inp_B,Carry,Cout,Sum); input inp_V,inp_B; output Cout,Sum; assign Sum=inp_V ^ inp_B ^ Carry; assign Cout=inp_V&inp_B|(inp_V^inp_B) & Carry; endmodule
module full(inp_S,inp_M,Carry,Cout,Sum); input inp_S,inp_M; output Cout,Sum; assign Sum=inp_S ^ inp_M ^ Carry; assign Cout=inp_S&inp_M|(inp_S^inp_M) & Carry; endmodule
module full(inp_N,inp_Z,Carry,Cout,Sum); input inp_N,inp_Z; output Cout,Sum; assign Sum=inp_N ^ inp_Z ^ Carry; assign Cout=inp_N&inp_Z|(inp_N^inp_Z) & Carry;
module full(G,W,Carry,Cout,Sum); input G,W; output Cout,Sum; assign Sum=G ^ W ^ Carry; assign Cout=G&W|(G^W) & Carry; endmodule
module full(P,R,Carry,Cout,Sum); input P,R; output Cout,Sum; assign Sum=P ^ R ^ Carry; assign Cout=P&R|(P^R) & Carry;
module full(K,E,Carry,Cout,Sum); input K,E; output Cout,Sum; assign Sum=K ^ E ^ Carry; assign Cout=K&E|(K^E) & Carry; endmodule
module full(W,V,Carry,Cout,Sum); input W,V; output Cout,Sum; assign Sum=W ^ V ^ Carry; assign Cout=W&V|(W^V) & Carry;
module full(I,M,Carry,Cout,Sum); input I,M; output Cout,Sum; assign Sum=I ^ M ^ Carry; assign Cout=I&M|(I^M) & Carry;
module full(inp_V,inp_G,Carry,Cout,Sum); input inp_V,inp_G; output Cout,Sum; assign Sum=inp_V ^ inp_G ^ Carry; assign Cout=inp_V&inp_G|(inp_V^inp_G) & Carry; endmodule
module full(inp_M,inp_A,Carry,Cout,Sum); input inp_M,inp_A; output Cout,Sum; assign Sum=inp_M ^ inp_A ^ Carry; assign Cout=inp_M&inp_A|(inp_M^inp_A) & Carry;
module full(inp_W,inp_L,Carry,Cout,Sum); input inp_W,inp_L; output Cout,Sum; assign Sum=inp_W ^ inp_L ^ Carry; assign Cout=inp_W&inp_L|(inp_W^inp_L) & Carry;
module full(N,O,Carry,Cout,Sum); input N,O; output Cout,Sum; assign Sum=N ^ O ^ Carry; assign Cout=N&O|(N^O) & Carry; endmodule
module full(I,L,Carry,Cout,Sum); input I,L; output Cout,Sum; assign Sum=I ^ L ^ Carry; assign Cout=I&L|(I^L) & Carry;
module full(T,O,Carry,Cout,Sum); input T,O; output Cout,Sum; assign Sum=T ^ O ^ Carry; assign Cout=T&O|(T^O) & Carry;
module full(Q,S,Carry,Cout,Sum); input Q,S; output Cout,Sum; assign Sum=Q ^ S ^ Carry; assign Cout=Q&S|(Q^S) & Carry;
module full(J,M,Carry,Cout,Sum); input J,M; output Cout,Sum; assign Sum=J ^ M ^ Carry; assign Cout=J&M|(J^M) & Carry; endmodule
module full(inp_B,inp_L,Carry,Cout,Sum); input inp_B,inp_L; output Cout,Sum; assign Sum=inp_B ^ inp_L ^ Carry; assign Cout=inp_B&inp_L|(inp_B^inp_L) & Carry;
module full(I,M,Carry,Cout,Sum); input I,M; output Cout,Sum; assign Sum=I ^ M ^ Carry; assign Cout=I&M|(I^M) & Carry; endmodule
module full(inp_Q,inp_O,Carry,Cout,Sum); input inp_Q,inp_O; output Cout,Sum; assign Sum=inp_Q ^ inp_O ^ Carry; assign Cout=inp_Q&inp_O|(inp_Q^inp_O) & Carry; endmodule
module full(inp_Y,inp_O,Carry,Cout,Sum); input inp_Y,inp_O; output Cout,Sum; assign Sum=inp_Y ^ inp_O ^ Carry; assign Cout=inp_Y&inp_O|(inp_Y^inp_O) & Carry;
module full(inp_E,inp_H,Carry,Cout,Sum); input inp_E,inp_H; output Cout,Sum; assign Sum=inp_E ^ inp_H ^ Carry; assign Cout=inp_E&inp_H|(inp_E^inp_H) & Carry;
module full(inp_E,inp_N,Carry,Cout,Sum); input inp_E,inp_N; output Cout,Sum; assign Sum=inp_E ^ inp_N ^ Carry; assign Cout=inp_E&inp_N|(inp_E^inp_N) & Carry; endmodule
module full(L,P,Carry,Cout,Sum); input L,P; output Cout,Sum; assign Sum=L ^ P ^ Carry; assign Cout=L&P|(L^P) & Carry; endmodule
module full(C,X,Carry,Cout,Sum); input C,X; output Cout,Sum; assign Sum=C ^ X ^ Carry; assign Cout=C&X|(C^X) & Carry; endmodule
module full(inp_L,inp_I,Carry,Cout,Sum); input inp_L,inp_I; output Cout,Sum; assign Sum=inp_L ^ inp_I ^ Carry; assign Cout=inp_L&inp_I|(inp_L^inp_I) & Carry;
module full(U,T,Carry,Cout,Sum); input U,T; output Cout,Sum; assign Sum=U ^ T ^ Carry; assign Cout=U&T|(U^T) & Carry; endmodule
module full(Y,G,Carry,Cout,Sum); input Y,G; output Cout,Sum; assign Sum=Y ^ G ^ Carry; assign Cout=Y&G|(Y^G) & Carry;
module full(C,Y,Carry,Cout,Sum); input C,Y; output Cout,Sum; assign Sum=C ^ Y ^ Carry; assign Cout=C&Y|(C^Y) & Carry;
module full(inp_Y,inp_H,Carry,Cout,Sum); input inp_Y,inp_H; output Cout,Sum; assign Sum=inp_Y ^ inp_H ^ Carry; assign Cout=inp_Y&inp_H|(inp_Y^inp_H) & Carry; endmodule
module full(inp_A,inp_C,Carry,Cout,Sum); input inp_A,inp_C; output Cout,Sum; assign Sum=inp_A ^ inp_C ^ Carry; assign Cout=inp_A&inp_C|(inp_A^inp_C) & Carry; endmodule
module full(H,L,Carry,Cout,Sum); input H,L; output Cout,Sum; assign Sum=H ^ L ^ Carry; assign Cout=H&L|(H^L) & Carry;
module full(D,L,Carry,Cout,Sum); input D,L; output Cout,Sum; assign Sum=D ^ L ^ Carry; assign Cout=D&L|(D^L) & Carry;
module full(N,R,Carry,Cout,Sum); input N,R; output Cout,Sum; assign Sum=N ^ R ^ Carry; assign Cout=N&R|(N^R) & Carry;
module full(inp_I,inp_U,Carry,Cout,Sum); input inp_I,inp_U; output Cout,Sum; assign Sum=inp_I ^ inp_U ^ Carry; assign Cout=inp_I&inp_U|(inp_I^inp_U) & Carry; endmodule
module full(inp_D,inp_K,Carry,Cout,Sum); input inp_D,inp_K; output Cout,Sum; assign Sum=inp_D ^ inp_K ^ Carry; assign Cout=inp_D&inp_K|(inp_D^inp_K) & Carry;
module full(inp_O,inp_U,Carry,Cout,Sum); input inp_O,inp_U; output Cout,Sum; assign Sum=inp_O ^ inp_U ^ Carry; assign Cout=inp_O&inp_U|(inp_O^inp_U) & Carry;
module half(H,J,Cout,Sum); input H,J; output Cout,Sum; assign Sum=H ^ J; assign Cout=H&J; endmodule
module half(L,A,Cout,Sum); input L,A; output Cout,Sum; assign Sum=L ^ A; assign Cout=L&A;
module half(B,Z,Cout,Sum); input B,Z; output Cout,Sum; assign Sum=B ^ Z; assign Cout=B&Z;
module half(Y,Q,Cout,Sum); input Y,Q; output Cout,Sum; assign Sum=Y ^ Q; assign Cout=Y&Q;
module half(N,H,Cout,Sum); input N,H; output Cout,Sum; assign Sum=N ^ H; assign Cout=N&H;
module half(B,U,Cout,Sum); input B,U; output Cout,Sum; assign Sum=B ^ U; assign Cout=B&U; endmodule
module half(Z,O,Cout,Sum); input Z,O; output Cout,Sum; assign Sum=Z ^ O; assign Cout=Z&O; endmodule
module half(inp_Q,inp_P,Cout,Sum); input inp_Q,inp_P; output Cout,Sum; assign Sum=inp_Q ^ inp_P; assign Cout=inp_Q&inp_P;
module half(inp_D,inp_Q,Cout,Sum); input inp_D,inp_Q; output Cout,Sum; assign Sum=inp_D ^ inp_Q; assign Cout=inp_D&inp_Q; endmodule
module half(Y,B,Cout,Sum); input Y,B; output Cout,Sum; assign Sum=Y ^ B; assign Cout=Y&B; endmodule
module half(B,Y,Cout,Sum); input B,Y; output Cout,Sum; assign Sum=B ^ Y; assign Cout=B&Y;
module half(G,V,Cout,Sum); input G,V; output Cout,Sum; assign Sum=G ^ V; assign Cout=G&V;
module half(V,J,Cout,Sum); input V,J; output Cout,Sum; assign Sum=V ^ J; assign Cout=V&J; endmodule
module half(Z,F,Cout,Sum); input Z,F; output Cout,Sum; assign Sum=Z ^ F; assign Cout=Z&F; endmodule
module half(inp_V,inp_F,Cout,Sum); input inp_V,inp_F; output Cout,Sum; assign Sum=inp_V ^ inp_F; assign Cout=inp_V&inp_F;
module half(inp_C,inp_Y,Cout,Sum); input inp_C,inp_Y; output Cout,Sum; assign Sum=inp_C ^ inp_Y; assign Cout=inp_C&inp_Y;
module half(J,F,Cout,Sum); input J,F; output Cout,Sum; assign Sum=J ^ F; assign Cout=J&F; endmodule
module half(Z,B,Cout,Sum); input Z,B; output Cout,Sum; assign Sum=Z ^ B; assign Cout=Z&B; endmodule
module half(N,A,Cout,Sum); input N,A; output Cout,Sum; assign Sum=N ^ A; assign Cout=N&A; endmodule
module half(inp_Z,inp_W,Cout,Sum); input inp_Z,inp_W; output Cout,Sum; assign Sum=inp_Z ^ inp_W; assign Cout=inp_Z&inp_W;
module half(R,W,Cout,Sum); input R,W; output Cout,Sum; assign Sum=R ^ W; assign Cout=R&W; endmodule
module half(N,B,Cout,Sum); input N,B; output Cout,Sum; assign Sum=N ^ B; assign Cout=N&B;
module half(B,X,Cout,Sum); input B,X; output Cout,Sum; assign Sum=B ^ X; assign Cout=B&X;
module half(inp_J,inp_W,Cout,Sum); input inp_J,inp_W; output Cout,Sum; assign Sum=inp_J ^ inp_W; assign Cout=inp_J&inp_W; endmodule
module half(inp_F,inp_O,Cout,Sum); input inp_F,inp_O; output Cout,Sum; assign Sum=inp_F ^ inp_O; assign Cout=inp_F&inp_O;
module half(inp_R,inp_Z,Cout,Sum); input inp_R,inp_Z; output Cout,Sum; assign Sum=inp_R ^ inp_Z; assign Cout=inp_R&inp_Z;
module half(P,K,Cout,Sum); input P,K; output Cout,Sum; assign Sum=P ^ K; assign Cout=P&K; endmodule
module half(O,H,Cout,Sum); input O,H; output Cout,Sum; assign Sum=O ^ H; assign Cout=O&H; endmodule
module half(U,C,Cout,Sum); input U,C; output Cout,Sum; assign Sum=U ^ C; assign Cout=U&C;
module half(inp_H,inp_X,Cout,Sum); input inp_H,inp_X; output Cout,Sum; assign Sum=inp_H ^ inp_X; assign Cout=inp_H&inp_X;
module half(B,T,Cout,Sum); input B,T; output Cout,Sum; assign Sum=B ^ T; assign Cout=B&T;
module half(U,C,Cout,Sum); input U,C; output Cout,Sum; assign Sum=U ^ C; assign Cout=U&C; endmodule
module half(B,F,Cout,Sum); input B,F; output Cout,Sum; assign Sum=B ^ F; assign Cout=B&F;
module half(A,B,Cout,Sum); input A,B; output Cout,Sum; assign Sum=A ^ B; assign Cout=A&B; endmodule
module half(inp_V,inp_U,Cout,Sum); input inp_V,inp_U; output Cout,Sum; assign Sum=inp_V ^ inp_U; assign Cout=inp_V&inp_U;
module half(C,F,Cout,Sum); input C,F; output Cout,Sum; assign Sum=C ^ F; assign Cout=C&F;
module half(I,A,Cout,Sum); input I,A; output Cout,Sum; assign Sum=I ^ A; assign Cout=I&A; endmodule
module half(R,J,Cout,Sum); input R,J; output Cout,Sum; assign Sum=R ^ J; assign Cout=R&J;
module half(inp_B,inp_Y,Cout,Sum); input inp_B,inp_Y; output Cout,Sum; assign Sum=inp_B ^ inp_Y; assign Cout=inp_B&inp_Y; endmodule
module half(inp_J,inp_B,Cout,Sum); input inp_J,inp_B; output Cout,Sum; assign Sum=inp_J ^ inp_B; assign Cout=inp_J&inp_B;
module half(W,P,Cout,Sum); input W,P; output Cout,Sum; assign Sum=W ^ P; assign Cout=W&P;
module half(inp_I,inp_G,Cout,Sum); input inp_I,inp_G; output Cout,Sum; assign Sum=inp_I ^ inp_G; assign Cout=inp_I&inp_G; endmodule
module half(E,C,Cout,Sum); input E,C; output Cout,Sum; assign Sum=E ^ C; assign Cout=E&C; endmodule
module half(inp_P,inp_H,Cout,Sum); input inp_P,inp_H; output Cout,Sum; assign Sum=inp_P ^ inp_H; assign Cout=inp_P&inp_H; endmodule
module half(inp_N,inp_H,Cout,Sum); input inp_N,inp_H; output Cout,Sum; assign Sum=inp_N ^ inp_H; assign Cout=inp_N&inp_H;
module half(X,I,Cout,Sum); input X,I; output Cout,Sum; assign Sum=X ^ I; assign Cout=X&I;
module half(E,S,Cout,Sum); input E,S; output Cout,Sum; assign Sum=E ^ S; assign Cout=E&S; endmodule
module half(X,J,Cout,Sum); input X,J; output Cout,Sum; assign Sum=X ^ J; assign Cout=X&J; endmodule
module half(Z,U,Cout,Sum); input Z,U; output Cout,Sum; assign Sum=Z ^ U; assign Cout=Z&U;
module half(H,M,Cout,Sum); input H,M; output Cout,Sum; assign Sum=H ^ M; assign Cout=H&M; endmodule
module half(inp_A,inp_O,Cout,Sum); input inp_A,inp_O; output Cout,Sum; assign Sum=inp_A ^ inp_O; assign Cout=inp_A&inp_O; endmodule
module half(K,H,Cout,Sum); input K,H; output Cout,Sum; assign Sum=K ^ H; assign Cout=K&H;
module half(inp_X,inp_J,Cout,Sum); input inp_X,inp_J; output Cout,Sum; assign Sum=inp_X ^ inp_J; assign Cout=inp_X&inp_J; endmodule
module half(inp_F,inp_Q,Cout,Sum); input inp_F,inp_Q; output Cout,Sum; assign Sum=inp_F ^ inp_Q; assign Cout=inp_F&inp_Q; endmodule
module half(K,S,Cout,Sum); input K,S; output Cout,Sum; assign Sum=K ^ S; assign Cout=K&S;
module half(Z,S,Cout,Sum); input Z,S; output Cout,Sum; assign Sum=Z ^ S; assign Cout=Z&S;
module half(inp_P,inp_K,Cout,Sum); input inp_P,inp_K; output Cout,Sum; assign Sum=inp_P ^ inp_K; assign Cout=inp_P&inp_K; endmodule
module half(inp_G,inp_Y,Cout,Sum); input inp_G,inp_Y; output Cout,Sum; assign Sum=inp_G ^ inp_Y; assign Cout=inp_G&inp_Y;
module half(S,I,Cout,Sum); input S,I; output Cout,Sum; assign Sum=S ^ I; assign Cout=S&I; endmodule
module half(inp_E,inp_Z,Cout,Sum); input inp_E,inp_Z; output Cout,Sum; assign Sum=inp_E ^ inp_Z; assign Cout=inp_E&inp_Z; endmodule
module half(inp_I,inp_S,Cout,Sum); input inp_I,inp_S; output Cout,Sum; assign Sum=inp_I ^ inp_S; assign Cout=inp_I&inp_S;
module half(inp_E,inp_Z,Cout,Sum); input inp_E,inp_Z; output Cout,Sum; assign Sum=inp_E ^ inp_Z; assign Cout=inp_E&inp_Z;
module half(X,C,Cout,Sum); input X,C; output Cout,Sum; assign Sum=X ^ C; assign Cout=X&C; endmodule
module half(P,I,Cout,Sum); input P,I; output Cout,Sum; assign Sum=P ^ I; assign Cout=P&I; endmodule
module half(U,S,Cout,Sum); input U,S; output Cout,Sum; assign Sum=U ^ S; assign Cout=U&S;
module half(inp_Y,inp_B,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B; assign Cout=inp_Y&inp_B; endmodule
module half(inp_M,inp_P,Cout,Sum); input inp_M,inp_P; output Cout,Sum; assign Sum=inp_M ^ inp_P; assign Cout=inp_M&inp_P; endmodule
module half(inp_C,inp_L,Cout,Sum); input inp_C,inp_L; output Cout,Sum; assign Sum=inp_C ^ inp_L; assign Cout=inp_C&inp_L; endmodule
module half(Q,G,Cout,Sum); input Q,G; output Cout,Sum; assign Sum=Q ^ G; assign Cout=Q&G; endmodule
module half(inp_Z,inp_G,Cout,Sum); input inp_Z,inp_G; output Cout,Sum; assign Sum=inp_Z ^ inp_G; assign Cout=inp_Z&inp_G;
module half(Y,I,Cout,Sum); input Y,I; output Cout,Sum; assign Sum=Y ^ I; assign Cout=Y&I;
module half(H,T,Cout,Sum); input H,T; output Cout,Sum; assign Sum=H ^ T; assign Cout=H&T; endmodule
module half(U,N,Cout,Sum); input U,N; output Cout,Sum; assign Sum=U ^ N; assign Cout=U&N;
module half(inp_K,inp_S,Cout,Sum); input inp_K,inp_S; output Cout,Sum; assign Sum=inp_K ^ inp_S; assign Cout=inp_K&inp_S;
module half(inp_I,inp_M,Cout,Sum); input inp_I,inp_M; output Cout,Sum; assign Sum=inp_I ^ inp_M; assign Cout=inp_I&inp_M; endmodule
module half(K,S,Cout,Sum); input K,S; output Cout,Sum; assign Sum=K ^ S; assign Cout=K&S; endmodule
module half(P,C,Cout,Sum); input P,C; output Cout,Sum; assign Sum=P ^ C; assign Cout=P&C;
module half(V,S,Cout,Sum); input V,S; output Cout,Sum; assign Sum=V ^ S; assign Cout=V&S; endmodule
module half(inp_O,inp_A,Cout,Sum); input inp_O,inp_A; output Cout,Sum; assign Sum=inp_O ^ inp_A; assign Cout=inp_O&inp_A;
module half(inp_G,inp_F,Cout,Sum); input inp_G,inp_F; output Cout,Sum; assign Sum=inp_G ^ inp_F; assign Cout=inp_G&inp_F;
module half(inp_S,inp_T,Cout,Sum); input inp_S,inp_T; output Cout,Sum; assign Sum=inp_S ^ inp_T; assign Cout=inp_S&inp_T;
module half(inp_F,inp_T,Cout,Sum); input inp_F,inp_T; output Cout,Sum; assign Sum=inp_F ^ inp_T; assign Cout=inp_F&inp_T; endmodule
module half(C,N,Cout,Sum); input C,N; output Cout,Sum; assign Sum=C ^ N; assign Cout=C&N;
module half(F,I,Cout,Sum); input F,I; output Cout,Sum; assign Sum=F ^ I; assign Cout=F&I; endmodule
module half(inp_Q,inp_G,Cout,Sum); input inp_Q,inp_G; output Cout,Sum; assign Sum=inp_Q ^ inp_G; assign Cout=inp_Q&inp_G; endmodule
module half(inp_Z,inp_H,Cout,Sum); input inp_Z,inp_H; output Cout,Sum; assign Sum=inp_Z ^ inp_H; assign Cout=inp_Z&inp_H;
module half(inp_Y,inp_J,Cout,Sum); input inp_Y,inp_J; output Cout,Sum; assign Sum=inp_Y ^ inp_J; assign Cout=inp_Y&inp_J; endmodule
module half(inp_D,inp_N,Cout,Sum); input inp_D,inp_N; output Cout,Sum; assign Sum=inp_D ^ inp_N; assign Cout=inp_D&inp_N; endmodule
module half(inp_X,inp_Z,Cout,Sum); input inp_X,inp_Z; output Cout,Sum; assign Sum=inp_X ^ inp_Z; assign Cout=inp_X&inp_Z; endmodule
module half(H,O,Cout,Sum); input H,O; output Cout,Sum; assign Sum=H ^ O; assign Cout=H&O;
module half(P,T,Cout,Sum); input P,T; output Cout,Sum; assign Sum=P ^ T; assign Cout=P&T; endmodule
module half(inp_Q,inp_T,Cout,Sum); input inp_Q,inp_T; output Cout,Sum; assign Sum=inp_Q ^ inp_T; assign Cout=inp_Q&inp_T; endmodule
module half(inp_H,inp_T,Cout,Sum); input inp_H,inp_T; output Cout,Sum; assign Sum=inp_H ^ inp_T; assign Cout=inp_H&inp_T;
module half(inp_C,inp_G,Cout,Sum); input inp_C,inp_G; output Cout,Sum; assign Sum=inp_C ^ inp_G; assign Cout=inp_C&inp_G; endmodule
module half(O,K,Cout,Sum); input O,K; output Cout,Sum; assign Sum=O ^ K; assign Cout=O&K;
module half(inp_Y,inp_B,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B; assign Cout=inp_Y&inp_B; endmodule
module half(inp_J,inp_P,Cout,Sum); input inp_J,inp_P; output Cout,Sum; assign Sum=inp_J ^ inp_P; assign Cout=inp_J&inp_P;
module half(R,N,Cout,Sum); input R,N; output Cout,Sum; assign Sum=R ^ N; assign Cout=R&N; endmodule
module half(inp_S,inp_C,Cout,Sum); input inp_S,inp_C; output Cout,Sum; assign Sum=inp_S ^ inp_C; assign Cout=inp_S&inp_C; endmodule
module half(inp_B,inp_W,Cout,Sum); input inp_B,inp_W; output Cout,Sum; assign Sum=inp_B ^ inp_W; assign Cout=inp_B&inp_W;
module half(X,S,Cout,Sum); input X,S; output Cout,Sum; assign Sum=X ^ S; assign Cout=X&S;
module half(L,Z,Cout,Sum); input L,Z; output Cout,Sum; assign Sum=L ^ Z; assign Cout=L&Z; endmodule
module half(inp_U,inp_Z,Cout,Sum); input inp_U,inp_Z; output Cout,Sum; assign Sum=inp_U ^ inp_Z; assign Cout=inp_U&inp_Z; endmodule
module half(F,T,Cout,Sum); input F,T; output Cout,Sum; assign Sum=F ^ T; assign Cout=F&T; endmodule
module half(S,M,Cout,Sum); input S,M; output Cout,Sum; assign Sum=S ^ M; assign Cout=S&M; endmodule
module half(inp_B,inp_I,Cout,Sum); input inp_B,inp_I; output Cout,Sum; assign Sum=inp_B ^ inp_I; assign Cout=inp_B&inp_I;
module half(inp_Z,inp_D,Cout,Sum); input inp_Z,inp_D; output Cout,Sum; assign Sum=inp_Z ^ inp_D; assign Cout=inp_Z&inp_D;
module half(inp_Q,inp_P,Cout,Sum); input inp_Q,inp_P; output Cout,Sum; assign Sum=inp_Q ^ inp_P; assign Cout=inp_Q&inp_P; endmodule
module half(inp_N,inp_M,Cout,Sum); input inp_N,inp_M; output Cout,Sum; assign Sum=inp_N ^ inp_M; assign Cout=inp_N&inp_M;
module half(D,R,Cout,Sum); input D,R; output Cout,Sum; assign Sum=D ^ R; assign Cout=D&R; endmodule
module half(inp_F,inp_Q,Cout,Sum); input inp_F,inp_Q; output Cout,Sum; assign Sum=inp_F ^ inp_Q; assign Cout=inp_F&inp_Q;
module half(inp_Y,inp_N,Cout,Sum); input inp_Y,inp_N; output Cout,Sum; assign Sum=inp_Y ^ inp_N; assign Cout=inp_Y&inp_N; endmodule
module half(inp_K,inp_I,Cout,Sum); input inp_K,inp_I; output Cout,Sum; assign Sum=inp_K ^ inp_I; assign Cout=inp_K&inp_I; endmodule
module half(inp_I,inp_T,Cout,Sum); input inp_I,inp_T; output Cout,Sum; assign Sum=inp_I ^ inp_T; assign Cout=inp_I&inp_T; endmodule
module half(M,X,Cout,Sum); input M,X; output Cout,Sum; assign Sum=M ^ X; assign Cout=M&X;
module half(H,V,Cout,Sum); input H,V; output Cout,Sum; assign Sum=H ^ V; assign Cout=H&V;
module half(inp_V,inp_H,Cout,Sum); input inp_V,inp_H; output Cout,Sum; assign Sum=inp_V ^ inp_H; assign Cout=inp_V&inp_H; endmodule
module half(inp_X,inp_L,Cout,Sum); input inp_X,inp_L; output Cout,Sum; assign Sum=inp_X ^ inp_L; assign Cout=inp_X&inp_L;
module half(inp_T,inp_A,Cout,Sum); input inp_T,inp_A; output Cout,Sum; assign Sum=inp_T ^ inp_A; assign Cout=inp_T&inp_A;
module half(N,F,Cout,Sum); input N,F; output Cout,Sum; assign Sum=N ^ F; assign Cout=N&F;
module half(E,H,Cout,Sum); input E,H; output Cout,Sum; assign Sum=E ^ H; assign Cout=E&H;
module half(A,M,Cout,Sum); input A,M; output Cout,Sum; assign Sum=A ^ M; assign Cout=A&M; endmodule
module half(B,D,Cout,Sum); input B,D; output Cout,Sum; assign Sum=B ^ D; assign Cout=B&D; endmodule
module half(inp_C,inp_X,Cout,Sum); input inp_C,inp_X; output Cout,Sum; assign Sum=inp_C ^ inp_X; assign Cout=inp_C&inp_X;
module half(Z,D,Cout,Sum); input Z,D; output Cout,Sum; assign Sum=Z ^ D; assign Cout=Z&D;
module half(inp_K,inp_O,Cout,Sum); input inp_K,inp_O; output Cout,Sum; assign Sum=inp_K ^ inp_O; assign Cout=inp_K&inp_O; endmodule
module half(Q,X,Cout,Sum); input Q,X; output Cout,Sum; assign Sum=Q ^ X; assign Cout=Q&X;
module half(V,U,Cout,Sum); input V,U; output Cout,Sum; assign Sum=V ^ U; assign Cout=V&U; endmodule
module half(R,Y,Cout,Sum); input R,Y; output Cout,Sum; assign Sum=R ^ Y; assign Cout=R&Y;
module half(inp_T,inp_C,Cout,Sum); input inp_T,inp_C; output Cout,Sum; assign Sum=inp_T ^ inp_C; assign Cout=inp_T&inp_C;
module half(O,M,Cout,Sum); input O,M; output Cout,Sum; assign Sum=O ^ M; assign Cout=O&M; endmodule
module half(B,J,Cout,Sum); input B,J; output Cout,Sum; assign Sum=B ^ J; assign Cout=B&J; endmodule
module half(V,B,Cout,Sum); input V,B; output Cout,Sum; assign Sum=V ^ B; assign Cout=V&B; endmodule
module half(J,O,Cout,Sum); input J,O; output Cout,Sum; assign Sum=J ^ O; assign Cout=J&O;
module half(inp_A,inp_X,Cout,Sum); input inp_A,inp_X; output Cout,Sum; assign Sum=inp_A ^ inp_X; assign Cout=inp_A&inp_X;
module half(D,L,Cout,Sum); input D,L; output Cout,Sum; assign Sum=D ^ L; assign Cout=D&L; endmodule
module half(inp_C,inp_X,Cout,Sum); input inp_C,inp_X; output Cout,Sum; assign Sum=inp_C ^ inp_X; assign Cout=inp_C&inp_X; endmodule
module half(inp_D,inp_S,Cout,Sum); input inp_D,inp_S; output Cout,Sum; assign Sum=inp_D ^ inp_S; assign Cout=inp_D&inp_S;
module half(inp_K,inp_A,Cout,Sum); input inp_K,inp_A; output Cout,Sum; assign Sum=inp_K ^ inp_A; assign Cout=inp_K&inp_A; endmodule
module half(inp_B,inp_N,Cout,Sum); input inp_B,inp_N; output Cout,Sum; assign Sum=inp_B ^ inp_N; assign Cout=inp_B&inp_N; endmodule
module half(N,Z,Cout,Sum); input N,Z; output Cout,Sum; assign Sum=N ^ Z; assign Cout=N&Z;
module half(inp_A,inp_Z,Cout,Sum); input inp_A,inp_Z; output Cout,Sum; assign Sum=inp_A ^ inp_Z; assign Cout=inp_A&inp_Z; endmodule
module half(inp_W,inp_Z,Cout,Sum); input inp_W,inp_Z; output Cout,Sum; assign Sum=inp_W ^ inp_Z; assign Cout=inp_W&inp_Z; endmodule
module half(C,S,Cout,Sum); input C,S; output Cout,Sum; assign Sum=C ^ S; assign Cout=C&S;
module half(U,Z,Cout,Sum); input U,Z; output Cout,Sum; assign Sum=U ^ Z; assign Cout=U&Z;
module half(W,Z,Cout,Sum); input W,Z; output Cout,Sum; assign Sum=W ^ Z; assign Cout=W&Z; endmodule
module half(P,S,Cout,Sum); input P,S; output Cout,Sum; assign Sum=P ^ S; assign Cout=P&S;
module half(inp_D,inp_R,Cout,Sum); input inp_D,inp_R; output Cout,Sum; assign Sum=inp_D ^ inp_R; assign Cout=inp_D&inp_R; endmodule
module half(inp_B,inp_X,Cout,Sum); input inp_B,inp_X; output Cout,Sum; assign Sum=inp_B ^ inp_X; assign Cout=inp_B&inp_X;
module half(G,C,Cout,Sum); input G,C; output Cout,Sum; assign Sum=G ^ C; assign Cout=G&C;
module half(inp_X,inp_V,Cout,Sum); input inp_X,inp_V; output Cout,Sum; assign Sum=inp_X ^ inp_V; assign Cout=inp_X&inp_V;
module half(inp_B,inp_D,Cout,Sum); input inp_B,inp_D; output Cout,Sum; assign Sum=inp_B ^ inp_D; assign Cout=inp_B&inp_D; endmodule
module half(inp_K,inp_B,Cout,Sum); input inp_K,inp_B; output Cout,Sum; assign Sum=inp_K ^ inp_B; assign Cout=inp_K&inp_B; endmodule
module half(inp_U,inp_Y,Cout,Sum); input inp_U,inp_Y; output Cout,Sum; assign Sum=inp_U ^ inp_Y; assign Cout=inp_U&inp_Y;
module half(Q,F,Cout,Sum); input Q,F; output Cout,Sum; assign Sum=Q ^ F; assign Cout=Q&F;
module half(H,D,Cout,Sum); input H,D; output Cout,Sum; assign Sum=H ^ D; assign Cout=H&D;
module half(inp_N,inp_K,Cout,Sum); input inp_N,inp_K; output Cout,Sum; assign Sum=inp_N ^ inp_K; assign Cout=inp_N&inp_K;
module half(inp_X,inp_V,Cout,Sum); input inp_X,inp_V; output Cout,Sum; assign Sum=inp_X ^ inp_V; assign Cout=inp_X&inp_V;
module half(inp_P,inp_D,Cout,Sum); input inp_P,inp_D; output Cout,Sum; assign Sum=inp_P ^ inp_D; assign Cout=inp_P&inp_D; endmodule
module half(inp_B,inp_U,Cout,Sum); input inp_B,inp_U; output Cout,Sum; assign Sum=inp_B ^ inp_U; assign Cout=inp_B&inp_U;
module half(A,N,Cout,Sum); input A,N; output Cout,Sum; assign Sum=A ^ N; assign Cout=A&N; endmodule
module half(inp_O,inp_C,Cout,Sum); input inp_O,inp_C; output Cout,Sum; assign Sum=inp_O ^ inp_C; assign Cout=inp_O&inp_C;
module half(R,B,Cout,Sum); input R,B; output Cout,Sum; assign Sum=R ^ B; assign Cout=R&B; endmodule
module half(inp_B,inp_P,Cout,Sum); input inp_B,inp_P; output Cout,Sum; assign Sum=inp_B ^ inp_P; assign Cout=inp_B&inp_P; endmodule
module half(Q,O,Cout,Sum); input Q,O; output Cout,Sum; assign Sum=Q ^ O; assign Cout=Q&O;
module half(A,M,Cout,Sum); input A,M; output Cout,Sum; assign Sum=A ^ M; assign Cout=A&M; endmodule
module half(Y,G,Cout,Sum); input Y,G; output Cout,Sum; assign Sum=Y ^ G; assign Cout=Y&G; endmodule
module half(inp_M,inp_J,Cout,Sum); input inp_M,inp_J; output Cout,Sum; assign Sum=inp_M ^ inp_J; assign Cout=inp_M&inp_J; endmodule
module half(O,Z,Cout,Sum); input O,Z; output Cout,Sum; assign Sum=O ^ Z; assign Cout=O&Z;
module half(V,C,Cout,Sum); input V,C; output Cout,Sum; assign Sum=V ^ C; assign Cout=V&C;
module half(inp_H,inp_Z,Cout,Sum); input inp_H,inp_Z; output Cout,Sum; assign Sum=inp_H ^ inp_Z; assign Cout=inp_H&inp_Z; endmodule
module half(M,A,Cout,Sum); input M,A; output Cout,Sum; assign Sum=M ^ A; assign Cout=M&A; endmodule
module half(inp_O,inp_Q,Cout,Sum); input inp_O,inp_Q; output Cout,Sum; assign Sum=inp_O ^ inp_Q; assign Cout=inp_O&inp_Q;
module half(inp_A,inp_B,Cout,Sum); input inp_A,inp_B; output Cout,Sum; assign Sum=inp_A ^ inp_B; assign Cout=inp_A&inp_B; endmodule
module half(inp_S,inp_K,Cout,Sum); input inp_S,inp_K; output Cout,Sum; assign Sum=inp_S ^ inp_K; assign Cout=inp_S&inp_K; endmodule
module half(inp_A,inp_S,Cout,Sum); input inp_A,inp_S; output Cout,Sum; assign Sum=inp_A ^ inp_S; assign Cout=inp_A&inp_S; endmodule
module half(inp_P,inp_D,Cout,Sum); input inp_P,inp_D; output Cout,Sum; assign Sum=inp_P ^ inp_D; assign Cout=inp_P&inp_D;
module half(B,C,Cout,Sum); input B,C; output Cout,Sum; assign Sum=B ^ C; assign Cout=B&C; endmodule
module half(H,P,Cout,Sum); input H,P; output Cout,Sum; assign Sum=H ^ P; assign Cout=H&P;
module half(F,J,Cout,Sum); input F,J; output Cout,Sum; assign Sum=F ^ J; assign Cout=F&J; endmodule
module half(M,I,Cout,Sum); input M,I; output Cout,Sum; assign Sum=M ^ I; assign Cout=M&I;
module half(inp_V,inp_M,Cout,Sum); input inp_V,inp_M; output Cout,Sum; assign Sum=inp_V ^ inp_M; assign Cout=inp_V&inp_M; endmodule
module half(F,M,Cout,Sum); input F,M; output Cout,Sum; assign Sum=F ^ M; assign Cout=F&M; endmodule
module half(inp_A,inp_T,Cout,Sum); input inp_A,inp_T; output Cout,Sum; assign Sum=inp_A ^ inp_T; assign Cout=inp_A&inp_T;
module half(X,P,Cout,Sum); input X,P; output Cout,Sum; assign Sum=X ^ P; assign Cout=X&P;
module half(W,L,Cout,Sum); input W,L; output Cout,Sum; assign Sum=W ^ L; assign Cout=W&L; endmodule
module half(I,W,Cout,Sum); input I,W; output Cout,Sum; assign Sum=I ^ W; assign Cout=I&W;
module half(inp_S,inp_D,Cout,Sum); input inp_S,inp_D; output Cout,Sum; assign Sum=inp_S ^ inp_D; assign Cout=inp_S&inp_D;
module half(O,N,Cout,Sum); input O,N; output Cout,Sum; assign Sum=O ^ N; assign Cout=O&N; endmodule
module half(inp_Y,inp_P,Cout,Sum); input inp_Y,inp_P; output Cout,Sum; assign Sum=inp_Y ^ inp_P; assign Cout=inp_Y&inp_P; endmodule
module half(J,Q,Cout,Sum); input J,Q; output Cout,Sum; assign Sum=J ^ Q; assign Cout=J&Q; endmodule
module half(inp_J,inp_V,Cout,Sum); input inp_J,inp_V; output Cout,Sum; assign Sum=inp_J ^ inp_V; assign Cout=inp_J&inp_V; endmodule
module half(O,M,Cout,Sum); input O,M; output Cout,Sum; assign Sum=O ^ M; assign Cout=O&M;
module half(T,P,Cout,Sum); input T,P; output Cout,Sum; assign Sum=T ^ P; assign Cout=T&P;
module half(inp_R,inp_P,Cout,Sum); input inp_R,inp_P; output Cout,Sum; assign Sum=inp_R ^ inp_P; assign Cout=inp_R&inp_P; endmodule
module half(inp_D,inp_Y,Cout,Sum); input inp_D,inp_Y; output Cout,Sum; assign Sum=inp_D ^ inp_Y; assign Cout=inp_D&inp_Y;
module half(inp_X,inp_L,Cout,Sum); input inp_X,inp_L; output Cout,Sum; assign Sum=inp_X ^ inp_L; assign Cout=inp_X&inp_L;
module half(P,B,Cout,Sum); input P,B; output Cout,Sum; assign Sum=P ^ B; assign Cout=P&B; endmodule
module half(J,W,Cout,Sum); input J,W; output Cout,Sum; assign Sum=J ^ W; assign Cout=J&W;
module half(Q,L,Cout,Sum); input Q,L; output Cout,Sum; assign Sum=Q ^ L; assign Cout=Q&L;
module half(inp_Y,inp_Q,Cout,Sum); input inp_Y,inp_Q; output Cout,Sum; assign Sum=inp_Y ^ inp_Q; assign Cout=inp_Y&inp_Q;
module half(inp_P,inp_O,Cout,Sum); input inp_P,inp_O; output Cout,Sum; assign Sum=inp_P ^ inp_O; assign Cout=inp_P&inp_O; endmodule
module half(D,P,Cout,Sum); input D,P; output Cout,Sum; assign Sum=D ^ P; assign Cout=D&P;
module half(inp_T,inp_A,Cout,Sum); input inp_T,inp_A; output Cout,Sum; assign Sum=inp_T ^ inp_A; assign Cout=inp_T&inp_A; endmodule
module half(inp_K,inp_J,Cout,Sum); input inp_K,inp_J; output Cout,Sum; assign Sum=inp_K ^ inp_J; assign Cout=inp_K&inp_J; endmodule
module half(inp_N,inp_A,Cout,Sum); input inp_N,inp_A; output Cout,Sum; assign Sum=inp_N ^ inp_A; assign Cout=inp_N&inp_A; endmodule
module half(inp_G,inp_P,Cout,Sum); input inp_G,inp_P; output Cout,Sum; assign Sum=inp_G ^ inp_P; assign Cout=inp_G&inp_P; endmodule
module half(inp_E,inp_P,Cout,Sum); input inp_E,inp_P; output Cout,Sum; assign Sum=inp_E ^ inp_P; assign Cout=inp_E&inp_P; endmodule
module half(inp_P,inp_K,Cout,Sum); input inp_P,inp_K; output Cout,Sum; assign Sum=inp_P ^ inp_K; assign Cout=inp_P&inp_K; endmodule
module half(inp_K,inp_B,Cout,Sum); input inp_K,inp_B; output Cout,Sum; assign Sum=inp_K ^ inp_B; assign Cout=inp_K&inp_B; endmodule
module half(inp_K,inp_J,Cout,Sum); input inp_K,inp_J; output Cout,Sum; assign Sum=inp_K ^ inp_J; assign Cout=inp_K&inp_J; endmodule
module half(inp_D,inp_N,Cout,Sum); input inp_D,inp_N; output Cout,Sum; assign Sum=inp_D ^ inp_N; assign Cout=inp_D&inp_N; endmodule
module half(inp_V,inp_T,Cout,Sum); input inp_V,inp_T; output Cout,Sum; assign Sum=inp_V ^ inp_T; assign Cout=inp_V&inp_T; endmodule
module half(inp_G,inp_K,Cout,Sum); input inp_G,inp_K; output Cout,Sum; assign Sum=inp_G ^ inp_K; assign Cout=inp_G&inp_K; endmodule
module half(C,U,Cout,Sum); input C,U; output Cout,Sum; assign Sum=C ^ U; assign Cout=C&U; endmodule
module half(O,E,Cout,Sum); input O,E; output Cout,Sum; assign Sum=O ^ E; assign Cout=O&E;
module half(inp_T,inp_A,Cout,Sum); input inp_T,inp_A; output Cout,Sum; assign Sum=inp_T ^ inp_A; assign Cout=inp_T&inp_A; endmodule
module half(W,Q,Cout,Sum); input W,Q; output Cout,Sum; assign Sum=W ^ Q; assign Cout=W&Q; endmodule
module half(Q,B,Cout,Sum); input Q,B; output Cout,Sum; assign Sum=Q ^ B; assign Cout=Q&B;
module half(inp_V,inp_E,Cout,Sum); input inp_V,inp_E; output Cout,Sum; assign Sum=inp_V ^ inp_E; assign Cout=inp_V&inp_E;
module half(J,O,Cout,Sum); input J,O; output Cout,Sum; assign Sum=J ^ O; assign Cout=J&O;
module half(B,D,Cout,Sum); input B,D; output Cout,Sum; assign Sum=B ^ D; assign Cout=B&D; endmodule
module half(C,N,Cout,Sum); input C,N; output Cout,Sum; assign Sum=C ^ N; assign Cout=C&N;
module half(C,H,Cout,Sum); input C,H; output Cout,Sum; assign Sum=C ^ H; assign Cout=C&H;
module half(K,C,Cout,Sum); input K,C; output Cout,Sum; assign Sum=K ^ C; assign Cout=K&C; endmodule
module half(inp_V,inp_T,Cout,Sum); input inp_V,inp_T; output Cout,Sum; assign Sum=inp_V ^ inp_T; assign Cout=inp_V&inp_T;
module half(inp_H,inp_W,Cout,Sum); input inp_H,inp_W; output Cout,Sum; assign Sum=inp_H ^ inp_W; assign Cout=inp_H&inp_W; endmodule
module half(inp_N,inp_Z,Cout,Sum); input inp_N,inp_Z; output Cout,Sum; assign Sum=inp_N ^ inp_Z; assign Cout=inp_N&inp_Z; endmodule
module half(inp_O,inp_F,Cout,Sum); input inp_O,inp_F; output Cout,Sum; assign Sum=inp_O ^ inp_F; assign Cout=inp_O&inp_F; endmodule
module half(H,T,Cout,Sum); input H,T; output Cout,Sum; assign Sum=H ^ T; assign Cout=H&T; endmodule
module half(inp_M,inp_T,Cout,Sum); input inp_M,inp_T; output Cout,Sum; assign Sum=inp_M ^ inp_T; assign Cout=inp_M&inp_T; endmodule
module half(E,C,Cout,Sum); input E,C; output Cout,Sum; assign Sum=E ^ C; assign Cout=E&C; endmodule
module half(inp_P,inp_G,Cout,Sum); input inp_P,inp_G; output Cout,Sum; assign Sum=inp_P ^ inp_G; assign Cout=inp_P&inp_G;
module half(inp_W,inp_B,Cout,Sum); input inp_W,inp_B; output Cout,Sum; assign Sum=inp_W ^ inp_B; assign Cout=inp_W&inp_B; endmodule
module half(V,K,Cout,Sum); input V,K; output Cout,Sum; assign Sum=V ^ K; assign Cout=V&K;
module half(inp_U,inp_I,Cout,Sum); input inp_U,inp_I; output Cout,Sum; assign Sum=inp_U ^ inp_I; assign Cout=inp_U&inp_I;
module half(inp_F,inp_B,Cout,Sum); input inp_F,inp_B; output Cout,Sum; assign Sum=inp_F ^ inp_B; assign Cout=inp_F&inp_B;
module half(W,H,Cout,Sum); input W,H; output Cout,Sum; assign Sum=W ^ H; assign Cout=W&H; endmodule
module half(inp_N,inp_Z,Cout,Sum); input inp_N,inp_Z; output Cout,Sum; assign Sum=inp_N ^ inp_Z; assign Cout=inp_N&inp_Z;
module half(inp_S,inp_N,Cout,Sum); input inp_S,inp_N; output Cout,Sum; assign Sum=inp_S ^ inp_N; assign Cout=inp_S&inp_N; endmodule
module half(P,M,Cout,Sum); input P,M; output Cout,Sum; assign Sum=P ^ M; assign Cout=P&M;
module half(inp_Q,inp_K,Cout,Sum); input inp_Q,inp_K; output Cout,Sum; assign Sum=inp_Q ^ inp_K; assign Cout=inp_Q&inp_K; endmodule
module half(G,B,Cout,Sum); input G,B; output Cout,Sum; assign Sum=G ^ B; assign Cout=G&B;
module half(A,T,Cout,Sum); input A,T; output Cout,Sum; assign Sum=A ^ T; assign Cout=A&T; endmodule
module half(inp_S,inp_M,Cout,Sum); input inp_S,inp_M; output Cout,Sum; assign Sum=inp_S ^ inp_M; assign Cout=inp_S&inp_M; endmodule
module half(Y,Q,Cout,Sum); input Y,Q; output Cout,Sum; assign Sum=Y ^ Q; assign Cout=Y&Q; endmodule
module half(U,H,Cout,Sum); input U,H; output Cout,Sum; assign Sum=U ^ H; assign Cout=U&H; endmodule
module half(inp_K,inp_D,Cout,Sum); input inp_K,inp_D; output Cout,Sum; assign Sum=inp_K ^ inp_D; assign Cout=inp_K&inp_D;
module half(N,P,Cout,Sum); input N,P; output Cout,Sum; assign Sum=N ^ P; assign Cout=N&P;
module half(R,W,Cout,Sum); input R,W; output Cout,Sum; assign Sum=R ^ W; assign Cout=R&W;
module half(J,W,Cout,Sum); input J,W; output Cout,Sum; assign Sum=J ^ W; assign Cout=J&W; endmodule
module half(inp_M,inp_E,Cout,Sum); input inp_M,inp_E; output Cout,Sum; assign Sum=inp_M ^ inp_E; assign Cout=inp_M&inp_E; endmodule
module half(inp_I,inp_N,Cout,Sum); input inp_I,inp_N; output Cout,Sum; assign Sum=inp_I ^ inp_N; assign Cout=inp_I&inp_N; endmodule
module half(inp_I,inp_B,Cout,Sum); input inp_I,inp_B; output Cout,Sum; assign Sum=inp_I ^ inp_B; assign Cout=inp_I&inp_B; endmodule
module half(inp_F,inp_X,Cout,Sum); input inp_F,inp_X; output Cout,Sum; assign Sum=inp_F ^ inp_X; assign Cout=inp_F&inp_X;
module half(inp_V,inp_U,Cout,Sum); input inp_V,inp_U; output Cout,Sum; assign Sum=inp_V ^ inp_U; assign Cout=inp_V&inp_U; endmodule
module half(S,C,Cout,Sum); input S,C; output Cout,Sum; assign Sum=S ^ C; assign Cout=S&C;
module half(inp_F,inp_Z,Cout,Sum); input inp_F,inp_Z; output Cout,Sum; assign Sum=inp_F ^ inp_Z; assign Cout=inp_F&inp_Z; endmodule
module half(inp_F,inp_R,Cout,Sum); input inp_F,inp_R; output Cout,Sum; assign Sum=inp_F ^ inp_R; assign Cout=inp_F&inp_R; endmodule
module half(C,G,Cout,Sum); input C,G; output Cout,Sum; assign Sum=C ^ G; assign Cout=C&G;
module half(inp_K,inp_Q,Cout,Sum); input inp_K,inp_Q; output Cout,Sum; assign Sum=inp_K ^ inp_Q; assign Cout=inp_K&inp_Q;
module half(L,H,Cout,Sum); input L,H; output Cout,Sum; assign Sum=L ^ H; assign Cout=L&H;
module half(F,R,Cout,Sum); input F,R; output Cout,Sum; assign Sum=F ^ R; assign Cout=F&R; endmodule
module half(inp_R,inp_T,Cout,Sum); input inp_R,inp_T; output Cout,Sum; assign Sum=inp_R ^ inp_T; assign Cout=inp_R&inp_T; endmodule
module half(inp_U,inp_D,Cout,Sum); input inp_U,inp_D; output Cout,Sum; assign Sum=inp_U ^ inp_D; assign Cout=inp_U&inp_D; endmodule
module half(B,A,Cout,Sum); input B,A; output Cout,Sum; assign Sum=B ^ A; assign Cout=B&A;
module half(K,B,Cout,Sum); input K,B; output Cout,Sum; assign Sum=K ^ B; assign Cout=K&B;
module half(J,G,Cout,Sum); input J,G; output Cout,Sum; assign Sum=J ^ G; assign Cout=J&G; endmodule
module half(M,N,Cout,Sum); input M,N; output Cout,Sum; assign Sum=M ^ N; assign Cout=M&N;
module half(inp_Y,inp_Q,Cout,Sum); input inp_Y,inp_Q; output Cout,Sum; assign Sum=inp_Y ^ inp_Q; assign Cout=inp_Y&inp_Q; endmodule
module half(inp_V,inp_L,Cout,Sum); input inp_V,inp_L; output Cout,Sum; assign Sum=inp_V ^ inp_L; assign Cout=inp_V&inp_L; endmodule
module half(inp_S,inp_H,Cout,Sum); input inp_S,inp_H; output Cout,Sum; assign Sum=inp_S ^ inp_H; assign Cout=inp_S&inp_H; endmodule
module half(inp_T,inp_W,Cout,Sum); input inp_T,inp_W; output Cout,Sum; assign Sum=inp_T ^ inp_W; assign Cout=inp_T&inp_W;
module half(inp_E,inp_C,Cout,Sum); input inp_E,inp_C; output Cout,Sum; assign Sum=inp_E ^ inp_C; assign Cout=inp_E&inp_C;
module half(inp_L,inp_G,Cout,Sum); input inp_L,inp_G; output Cout,Sum; assign Sum=inp_L ^ inp_G; assign Cout=inp_L&inp_G;
module half(inp_R,inp_C,Cout,Sum); input inp_R,inp_C; output Cout,Sum; assign Sum=inp_R ^ inp_C; assign Cout=inp_R&inp_C; endmodule
module half(P,W,Cout,Sum); input P,W; output Cout,Sum; assign Sum=P ^ W; assign Cout=P&W;
module half(inp_O,inp_M,Cout,Sum); input inp_O,inp_M; output Cout,Sum; assign Sum=inp_O ^ inp_M; assign Cout=inp_O&inp_M;
module half(inp_M,inp_E,Cout,Sum); input inp_M,inp_E; output Cout,Sum; assign Sum=inp_M ^ inp_E; assign Cout=inp_M&inp_E; endmodule
module half(N,Q,Cout,Sum); input N,Q; output Cout,Sum; assign Sum=N ^ Q; assign Cout=N&Q;
module half(E,J,Cout,Sum); input E,J; output Cout,Sum; assign Sum=E ^ J; assign Cout=E&J;
module half(N,H,Cout,Sum); input N,H; output Cout,Sum; assign Sum=N ^ H; assign Cout=N&H; endmodule
module half(inp_W,inp_P,Cout,Sum); input inp_W,inp_P; output Cout,Sum; assign Sum=inp_W ^ inp_P; assign Cout=inp_W&inp_P;
module half(A,U,Cout,Sum); input A,U; output Cout,Sum; assign Sum=A ^ U; assign Cout=A&U;
module half(inp_C,inp_O,Cout,Sum); input inp_C,inp_O; output Cout,Sum; assign Sum=inp_C ^ inp_O; assign Cout=inp_C&inp_O;
module half(Y,N,Cout,Sum); input Y,N; output Cout,Sum; assign Sum=Y ^ N; assign Cout=Y&N; endmodule
module half(inp_C,inp_E,Cout,Sum); input inp_C,inp_E; output Cout,Sum; assign Sum=inp_C ^ inp_E; assign Cout=inp_C&inp_E; endmodule
module half(M,V,Cout,Sum); input M,V; output Cout,Sum; assign Sum=M ^ V; assign Cout=M&V; endmodule
module half(P,G,Cout,Sum); input P,G; output Cout,Sum; assign Sum=P ^ G; assign Cout=P&G;
module half(X,M,Cout,Sum); input X,M; output Cout,Sum; assign Sum=X ^ M; assign Cout=X&M;
module half(inp_U,inp_Q,Cout,Sum); input inp_U,inp_Q; output Cout,Sum; assign Sum=inp_U ^ inp_Q; assign Cout=inp_U&inp_Q;
module half(inp_V,inp_J,Cout,Sum); input inp_V,inp_J; output Cout,Sum; assign Sum=inp_V ^ inp_J; assign Cout=inp_V&inp_J;
module half(F,V,Cout,Sum); input F,V; output Cout,Sum; assign Sum=F ^ V; assign Cout=F&V;
module half(V,U,Cout,Sum); input V,U; output Cout,Sum; assign Sum=V ^ U; assign Cout=V&U; endmodule
module half(V,B,Cout,Sum); input V,B; output Cout,Sum; assign Sum=V ^ B; assign Cout=V&B; endmodule
module half(inp_S,inp_V,Cout,Sum); input inp_S,inp_V; output Cout,Sum; assign Sum=inp_S ^ inp_V; assign Cout=inp_S&inp_V;
module half(V,T,Cout,Sum); input V,T; output Cout,Sum; assign Sum=V ^ T; assign Cout=V&T;
module half(V,O,Cout,Sum); input V,O; output Cout,Sum; assign Sum=V ^ O; assign Cout=V&O;
module half(N,S,Cout,Sum); input N,S; output Cout,Sum; assign Sum=N ^ S; assign Cout=N&S;
module half(inp_R,inp_F,Cout,Sum); input inp_R,inp_F; output Cout,Sum; assign Sum=inp_R ^ inp_F; assign Cout=inp_R&inp_F; endmodule
module half(inp_B,inp_D,Cout,Sum); input inp_B,inp_D; output Cout,Sum; assign Sum=inp_B ^ inp_D; assign Cout=inp_B&inp_D; endmodule
module half(R,P,Cout,Sum); input R,P; output Cout,Sum; assign Sum=R ^ P; assign Cout=R&P; endmodule
module half(inp_K,inp_O,Cout,Sum); input inp_K,inp_O; output Cout,Sum; assign Sum=inp_K ^ inp_O; assign Cout=inp_K&inp_O; endmodule
module half(B,X,Cout,Sum); input B,X; output Cout,Sum; assign Sum=B ^ X; assign Cout=B&X;
module half(inp_O,inp_K,Cout,Sum); input inp_O,inp_K; output Cout,Sum; assign Sum=inp_O ^ inp_K; assign Cout=inp_O&inp_K;
module half(W,V,Cout,Sum); input W,V; output Cout,Sum; assign Sum=W ^ V; assign Cout=W&V;
module half(inp_R,inp_L,Cout,Sum); input inp_R,inp_L; output Cout,Sum; assign Sum=inp_R ^ inp_L; assign Cout=inp_R&inp_L; endmodule
module half(W,G,Cout,Sum); input W,G; output Cout,Sum; assign Sum=W ^ G; assign Cout=W&G; endmodule
module half(R,X,Cout,Sum); input R,X; output Cout,Sum; assign Sum=R ^ X; assign Cout=R&X; endmodule
module half(G,Z,Cout,Sum); input G,Z; output Cout,Sum; assign Sum=G ^ Z; assign Cout=G&Z;
module half(A,V,Cout,Sum); input A,V; output Cout,Sum; assign Sum=A ^ V; assign Cout=A&V; endmodule
module half(inp_L,inp_W,Cout,Sum); input inp_L,inp_W; output Cout,Sum; assign Sum=inp_L ^ inp_W; assign Cout=inp_L&inp_W; endmodule
module half(P,H,Cout,Sum); input P,H; output Cout,Sum; assign Sum=P ^ H; assign Cout=P&H;
module half(C,M,Cout,Sum); input C,M; output Cout,Sum; assign Sum=C ^ M; assign Cout=C&M;
module half(F,A,Cout,Sum); input F,A; output Cout,Sum; assign Sum=F ^ A; assign Cout=F&A;
module half(E,N,Cout,Sum); input E,N; output Cout,Sum; assign Sum=E ^ N; assign Cout=E&N; endmodule
module half(Z,C,Cout,Sum); input Z,C; output Cout,Sum; assign Sum=Z ^ C; assign Cout=Z&C;
module half(T,P,Cout,Sum); input T,P; output Cout,Sum; assign Sum=T ^ P; assign Cout=T&P;
module half(inp_R,inp_C,Cout,Sum); input inp_R,inp_C; output Cout,Sum; assign Sum=inp_R ^ inp_C; assign Cout=inp_R&inp_C; endmodule
module half(R,T,Cout,Sum); input R,T; output Cout,Sum; assign Sum=R ^ T; assign Cout=R&T;
module half(inp_I,inp_Q,Cout,Sum); input inp_I,inp_Q; output Cout,Sum; assign Sum=inp_I ^ inp_Q; assign Cout=inp_I&inp_Q; endmodule
module half(inp_O,inp_K,Cout,Sum); input inp_O,inp_K; output Cout,Sum; assign Sum=inp_O ^ inp_K; assign Cout=inp_O&inp_K; endmodule
module half(R,N,Cout,Sum); input R,N; output Cout,Sum; assign Sum=R ^ N; assign Cout=R&N; endmodule
module half(inp_D,inp_S,Cout,Sum); input inp_D,inp_S; output Cout,Sum; assign Sum=inp_D ^ inp_S; assign Cout=inp_D&inp_S;
module half(U,A,Cout,Sum); input U,A; output Cout,Sum; assign Sum=U ^ A; assign Cout=U&A;
module half(inp_M,inp_F,Cout,Sum); input inp_M,inp_F; output Cout,Sum; assign Sum=inp_M ^ inp_F; assign Cout=inp_M&inp_F; endmodule
module half(inp_K,inp_N,Cout,Sum); input inp_K,inp_N; output Cout,Sum; assign Sum=inp_K ^ inp_N; assign Cout=inp_K&inp_N; endmodule
module half(B,O,Cout,Sum); input B,O; output Cout,Sum; assign Sum=B ^ O; assign Cout=B&O; endmodule
module half(inp_Q,inp_M,Cout,Sum); input inp_Q,inp_M; output Cout,Sum; assign Sum=inp_Q ^ inp_M; assign Cout=inp_Q&inp_M;
module half(D,F,Cout,Sum); input D,F; output Cout,Sum; assign Sum=D ^ F; assign Cout=D&F;
module half(inp_M,inp_O,Cout,Sum); input inp_M,inp_O; output Cout,Sum; assign Sum=inp_M ^ inp_O; assign Cout=inp_M&inp_O;
module half(R,Z,Cout,Sum); input R,Z; output Cout,Sum; assign Sum=R ^ Z; assign Cout=R&Z;
module half(V,X,Cout,Sum); input V,X; output Cout,Sum; assign Sum=V ^ X; assign Cout=V&X;
module half(inp_L,inp_G,Cout,Sum); input inp_L,inp_G; output Cout,Sum; assign Sum=inp_L ^ inp_G; assign Cout=inp_L&inp_G;
module half(inp_A,inp_O,Cout,Sum); input inp_A,inp_O; output Cout,Sum; assign Sum=inp_A ^ inp_O; assign Cout=inp_A&inp_O; endmodule
module half(inp_C,inp_Z,Cout,Sum); input inp_C,inp_Z; output Cout,Sum; assign Sum=inp_C ^ inp_Z; assign Cout=inp_C&inp_Z; endmodule
module half(H,Q,Cout,Sum); input H,Q; output Cout,Sum; assign Sum=H ^ Q; assign Cout=H&Q; endmodule
module half(inp_U,inp_G,Cout,Sum); input inp_U,inp_G; output Cout,Sum; assign Sum=inp_U ^ inp_G; assign Cout=inp_U&inp_G; endmodule
module half(inp_Q,inp_V,Cout,Sum); input inp_Q,inp_V; output Cout,Sum; assign Sum=inp_Q ^ inp_V; assign Cout=inp_Q&inp_V; endmodule
module half(F,D,Cout,Sum); input F,D; output Cout,Sum; assign Sum=F ^ D; assign Cout=F&D; endmodule
module half(H,N,Cout,Sum); input H,N; output Cout,Sum; assign Sum=H ^ N; assign Cout=H&N; endmodule
module half(X,C,Cout,Sum); input X,C; output Cout,Sum; assign Sum=X ^ C; assign Cout=X&C; endmodule
module half(inp_N,inp_A,Cout,Sum); input inp_N,inp_A; output Cout,Sum; assign Sum=inp_N ^ inp_A; assign Cout=inp_N&inp_A; endmodule
module half(inp_W,inp_R,Cout,Sum); input inp_W,inp_R; output Cout,Sum; assign Sum=inp_W ^ inp_R; assign Cout=inp_W&inp_R; endmodule
module half(inp_T,inp_H,Cout,Sum); input inp_T,inp_H; output Cout,Sum; assign Sum=inp_T ^ inp_H; assign Cout=inp_T&inp_H;
module half(J,X,Cout,Sum); input J,X; output Cout,Sum; assign Sum=J ^ X; assign Cout=J&X; endmodule
module half(inp_B,inp_O,Cout,Sum); input inp_B,inp_O; output Cout,Sum; assign Sum=inp_B ^ inp_O; assign Cout=inp_B&inp_O;
module half(K,E,Cout,Sum); input K,E; output Cout,Sum; assign Sum=K ^ E; assign Cout=K&E;
module half(Y,M,Cout,Sum); input Y,M; output Cout,Sum; assign Sum=Y ^ M; assign Cout=Y&M; endmodule
module half(D,P,Cout,Sum); input D,P; output Cout,Sum; assign Sum=D ^ P; assign Cout=D&P;
module half(Q,O,Cout,Sum); input Q,O; output Cout,Sum; assign Sum=Q ^ O; assign Cout=Q&O;
module half(N,L,Cout,Sum); input N,L; output Cout,Sum; assign Sum=N ^ L; assign Cout=N&L; endmodule
module half(Q,L,Cout,Sum); input Q,L; output Cout,Sum; assign Sum=Q ^ L; assign Cout=Q&L;
module half(inp_A,inp_Y,Cout,Sum); input inp_A,inp_Y; output Cout,Sum; assign Sum=inp_A ^ inp_Y; assign Cout=inp_A&inp_Y; endmodule
module half(V,O,Cout,Sum); input V,O; output Cout,Sum; assign Sum=V ^ O; assign Cout=V&O; endmodule
module half(inp_G,inp_H,Cout,Sum); input inp_G,inp_H; output Cout,Sum; assign Sum=inp_G ^ inp_H; assign Cout=inp_G&inp_H;
module half(K,H,Cout,Sum); input K,H; output Cout,Sum; assign Sum=K ^ H; assign Cout=K&H; endmodule
module half(inp_Z,inp_J,Cout,Sum); input inp_Z,inp_J; output Cout,Sum; assign Sum=inp_Z ^ inp_J; assign Cout=inp_Z&inp_J; endmodule
module half(X,M,Cout,Sum); input X,M; output Cout,Sum; assign Sum=X ^ M; assign Cout=X&M; endmodule
module half(Y,Z,Cout,Sum); input Y,Z; output Cout,Sum; assign Sum=Y ^ Z; assign Cout=Y&Z;
module half(F,C,Cout,Sum); input F,C; output Cout,Sum; assign Sum=F ^ C; assign Cout=F&C;
module half(inp_Q,inp_L,Cout,Sum); input inp_Q,inp_L; output Cout,Sum; assign Sum=inp_Q ^ inp_L; assign Cout=inp_Q&inp_L;
module half(F,W,Cout,Sum); input F,W; output Cout,Sum; assign Sum=F ^ W; assign Cout=F&W; endmodule
module half(O,S,Cout,Sum); input O,S; output Cout,Sum; assign Sum=O ^ S; assign Cout=O&S;
module half(C,R,Cout,Sum); input C,R; output Cout,Sum; assign Sum=C ^ R; assign Cout=C&R; endmodule
module half(Z,B,Cout,Sum); input Z,B; output Cout,Sum; assign Sum=Z ^ B; assign Cout=Z&B; endmodule
module half(inp_H,inp_C,Cout,Sum); input inp_H,inp_C; output Cout,Sum; assign Sum=inp_H ^ inp_C; assign Cout=inp_H&inp_C; endmodule
module half(inp_H,inp_Q,Cout,Sum); input inp_H,inp_Q; output Cout,Sum; assign Sum=inp_H ^ inp_Q; assign Cout=inp_H&inp_Q;
module half(X,U,Cout,Sum); input X,U; output Cout,Sum; assign Sum=X ^ U; assign Cout=X&U; endmodule
module half(inp_B,inp_E,Cout,Sum); input inp_B,inp_E; output Cout,Sum; assign Sum=inp_B ^ inp_E; assign Cout=inp_B&inp_E;
module half(inp_L,inp_U,Cout,Sum); input inp_L,inp_U; output Cout,Sum; assign Sum=inp_L ^ inp_U; assign Cout=inp_L&inp_U;
module half(inp_H,inp_Y,Cout,Sum); input inp_H,inp_Y; output Cout,Sum; assign Sum=inp_H ^ inp_Y; assign Cout=inp_H&inp_Y; endmodule
module half(inp_M,inp_Z,Cout,Sum); input inp_M,inp_Z; output Cout,Sum; assign Sum=inp_M ^ inp_Z; assign Cout=inp_M&inp_Z; endmodule
module half(G,Q,Cout,Sum); input G,Q; output Cout,Sum; assign Sum=G ^ Q; assign Cout=G&Q;
module half(L,C,Cout,Sum); input L,C; output Cout,Sum; assign Sum=L ^ C; assign Cout=L&C;
module half(inp_T,inp_C,Cout,Sum); input inp_T,inp_C; output Cout,Sum; assign Sum=inp_T ^ inp_C; assign Cout=inp_T&inp_C; endmodule
module half(S,E,Cout,Sum); input S,E; output Cout,Sum; assign Sum=S ^ E; assign Cout=S&E; endmodule
module half(N,G,Cout,Sum); input N,G; output Cout,Sum; assign Sum=N ^ G; assign Cout=N&G; endmodule
module half(inp_E,inp_P,Cout,Sum); input inp_E,inp_P; output Cout,Sum; assign Sum=inp_E ^ inp_P; assign Cout=inp_E&inp_P;
module half(inp_E,inp_N,Cout,Sum); input inp_E,inp_N; output Cout,Sum; assign Sum=inp_E ^ inp_N; assign Cout=inp_E&inp_N;
module half(inp_E,inp_R,Cout,Sum); input inp_E,inp_R; output Cout,Sum; assign Sum=inp_E ^ inp_R; assign Cout=inp_E&inp_R; endmodule
module half(inp_G,inp_X,Cout,Sum); input inp_G,inp_X; output Cout,Sum; assign Sum=inp_G ^ inp_X; assign Cout=inp_G&inp_X;
module half(inp_A,inp_J,Cout,Sum); input inp_A,inp_J; output Cout,Sum; assign Sum=inp_A ^ inp_J; assign Cout=inp_A&inp_J;
module half(N,D,Cout,Sum); input N,D; output Cout,Sum; assign Sum=N ^ D; assign Cout=N&D;
module half(S,F,Cout,Sum); input S,F; output Cout,Sum; assign Sum=S ^ F; assign Cout=S&F;
module half(D,B,Cout,Sum); input D,B; output Cout,Sum; assign Sum=D ^ B; assign Cout=D&B;
module half(H,V,Cout,Sum); input H,V; output Cout,Sum; assign Sum=H ^ V; assign Cout=H&V; endmodule
module half(R,J,Cout,Sum); input R,J; output Cout,Sum; assign Sum=R ^ J; assign Cout=R&J;
module half(A,U,Cout,Sum); input A,U; output Cout,Sum; assign Sum=A ^ U; assign Cout=A&U;
module half(Z,G,Cout,Sum); input Z,G; output Cout,Sum; assign Sum=Z ^ G; assign Cout=Z&G; endmodule
module half(inp_S,inp_U,Cout,Sum); input inp_S,inp_U; output Cout,Sum; assign Sum=inp_S ^ inp_U; assign Cout=inp_S&inp_U; endmodule
module half(inp_O,inp_V,Cout,Sum); input inp_O,inp_V; output Cout,Sum; assign Sum=inp_O ^ inp_V; assign Cout=inp_O&inp_V; endmodule
module half(inp_C,inp_I,Cout,Sum); input inp_C,inp_I; output Cout,Sum; assign Sum=inp_C ^ inp_I; assign Cout=inp_C&inp_I;
module half(inp_Z,inp_M,Cout,Sum); input inp_Z,inp_M; output Cout,Sum; assign Sum=inp_Z ^ inp_M; assign Cout=inp_Z&inp_M; endmodule
module half(C,F,Cout,Sum); input C,F; output Cout,Sum; assign Sum=C ^ F; assign Cout=C&F; endmodule
module half(inp_Q,inp_K,Cout,Sum); input inp_Q,inp_K; output Cout,Sum; assign Sum=inp_Q ^ inp_K; assign Cout=inp_Q&inp_K;
module half(X,G,Cout,Sum); input X,G; output Cout,Sum; assign Sum=X ^ G; assign Cout=X&G; endmodule
module half(J,M,Cout,Sum); input J,M; output Cout,Sum; assign Sum=J ^ M; assign Cout=J&M;
module half(E,O,Cout,Sum); input E,O; output Cout,Sum; assign Sum=E ^ O; assign Cout=E&O;
module half(inp_W,inp_Y,Cout,Sum); input inp_W,inp_Y; output Cout,Sum; assign Sum=inp_W ^ inp_Y; assign Cout=inp_W&inp_Y; endmodule
module half(D,E,Cout,Sum); input D,E; output Cout,Sum; assign Sum=D ^ E; assign Cout=D&E; endmodule
module half(M,B,Cout,Sum); input M,B; output Cout,Sum; assign Sum=M ^ B; assign Cout=M&B;
module half(O,C,Cout,Sum); input O,C; output Cout,Sum; assign Sum=O ^ C; assign Cout=O&C;
module half(H,V,Cout,Sum); input H,V; output Cout,Sum; assign Sum=H ^ V; assign Cout=H&V;
module half(inp_W,inp_B,Cout,Sum); input inp_W,inp_B; output Cout,Sum; assign Sum=inp_W ^ inp_B; assign Cout=inp_W&inp_B;
module half(K,X,Cout,Sum); input K,X; output Cout,Sum; assign Sum=K ^ X; assign Cout=K&X; endmodule
module half(X,M,Cout,Sum); input X,M; output Cout,Sum; assign Sum=X ^ M; assign Cout=X&M; endmodule
module half(inp_Y,inp_M,Cout,Sum); input inp_Y,inp_M; output Cout,Sum; assign Sum=inp_Y ^ inp_M; assign Cout=inp_Y&inp_M; endmodule
module half(inp_J,inp_X,Cout,Sum); input inp_J,inp_X; output Cout,Sum; assign Sum=inp_J ^ inp_X; assign Cout=inp_J&inp_X; endmodule
module half(inp_R,inp_M,Cout,Sum); input inp_R,inp_M; output Cout,Sum; assign Sum=inp_R ^ inp_M; assign Cout=inp_R&inp_M; endmodule
module half(inp_F,inp_E,Cout,Sum); input inp_F,inp_E; output Cout,Sum; assign Sum=inp_F ^ inp_E; assign Cout=inp_F&inp_E;
module half(P,E,Cout,Sum); input P,E; output Cout,Sum; assign Sum=P ^ E; assign Cout=P&E;
module half(W,Y,Cout,Sum); input W,Y; output Cout,Sum; assign Sum=W ^ Y; assign Cout=W&Y;
module half(B,M,Cout,Sum); input B,M; output Cout,Sum; assign Sum=B ^ M; assign Cout=B&M; endmodule
module half(N,J,Cout,Sum); input N,J; output Cout,Sum; assign Sum=N ^ J; assign Cout=N&J; endmodule
module half(inp_O,inp_A,Cout,Sum); input inp_O,inp_A; output Cout,Sum; assign Sum=inp_O ^ inp_A; assign Cout=inp_O&inp_A; endmodule
module half(inp_L,inp_X,Cout,Sum); input inp_L,inp_X; output Cout,Sum; assign Sum=inp_L ^ inp_X; assign Cout=inp_L&inp_X;
module half(inp_O,inp_L,Cout,Sum); input inp_O,inp_L; output Cout,Sum; assign Sum=inp_O ^ inp_L; assign Cout=inp_O&inp_L;
module half(E,O,Cout,Sum); input E,O; output Cout,Sum; assign Sum=E ^ O; assign Cout=E&O; endmodule
module half(V,Y,Cout,Sum); input V,Y; output Cout,Sum; assign Sum=V ^ Y; assign Cout=V&Y;
module half(P,C,Cout,Sum); input P,C; output Cout,Sum; assign Sum=P ^ C; assign Cout=P&C; endmodule
module half(I,O,Cout,Sum); input I,O; output Cout,Sum; assign Sum=I ^ O; assign Cout=I&O; endmodule
module half(U,O,Cout,Sum); input U,O; output Cout,Sum; assign Sum=U ^ O; assign Cout=U&O; endmodule
module half(Y,D,Cout,Sum); input Y,D; output Cout,Sum; assign Sum=Y ^ D; assign Cout=Y&D;
module half(X,V,Cout,Sum); input X,V; output Cout,Sum; assign Sum=X ^ V; assign Cout=X&V;
module half(inp_L,inp_Y,Cout,Sum); input inp_L,inp_Y; output Cout,Sum; assign Sum=inp_L ^ inp_Y; assign Cout=inp_L&inp_Y;
module half(inp_U,inp_K,Cout,Sum); input inp_U,inp_K; output Cout,Sum; assign Sum=inp_U ^ inp_K; assign Cout=inp_U&inp_K;
module half(inp_G,inp_Q,Cout,Sum); input inp_G,inp_Q; output Cout,Sum; assign Sum=inp_G ^ inp_Q; assign Cout=inp_G&inp_Q;
module half(inp_W,inp_T,Cout,Sum); input inp_W,inp_T; output Cout,Sum; assign Sum=inp_W ^ inp_T; assign Cout=inp_W&inp_T; endmodule
module half(A,H,Cout,Sum); input A,H; output Cout,Sum; assign Sum=A ^ H; assign Cout=A&H; endmodule
module half(inp_V,inp_E,Cout,Sum); input inp_V,inp_E; output Cout,Sum; assign Sum=inp_V ^ inp_E; assign Cout=inp_V&inp_E;
module half(inp_A,inp_Z,Cout,Sum); input inp_A,inp_Z; output Cout,Sum; assign Sum=inp_A ^ inp_Z; assign Cout=inp_A&inp_Z;
module half(inp_V,inp_H,Cout,Sum); input inp_V,inp_H; output Cout,Sum; assign Sum=inp_V ^ inp_H; assign Cout=inp_V&inp_H; endmodule
module half(inp_M,inp_T,Cout,Sum); input inp_M,inp_T; output Cout,Sum; assign Sum=inp_M ^ inp_T; assign Cout=inp_M&inp_T;
module half(inp_H,inp_V,Cout,Sum); input inp_H,inp_V; output Cout,Sum; assign Sum=inp_H ^ inp_V; assign Cout=inp_H&inp_V;
module half(U,I,Cout,Sum); input U,I; output Cout,Sum; assign Sum=U ^ I; assign Cout=U&I; endmodule
module half(L,N,Cout,Sum); input L,N; output Cout,Sum; assign Sum=L ^ N; assign Cout=L&N;
module half(A,M,Cout,Sum); input A,M; output Cout,Sum; assign Sum=A ^ M; assign Cout=A&M;
module half(inp_T,inp_M,Cout,Sum); input inp_T,inp_M; output Cout,Sum; assign Sum=inp_T ^ inp_M; assign Cout=inp_T&inp_M; endmodule
module half(inp_Z,inp_N,Cout,Sum); input inp_Z,inp_N; output Cout,Sum; assign Sum=inp_Z ^ inp_N; assign Cout=inp_Z&inp_N; endmodule
module half(inp_H,inp_V,Cout,Sum); input inp_H,inp_V; output Cout,Sum; assign Sum=inp_H ^ inp_V; assign Cout=inp_H&inp_V; endmodule
module half(inp_C,inp_Q,Cout,Sum); input inp_C,inp_Q; output Cout,Sum; assign Sum=inp_C ^ inp_Q; assign Cout=inp_C&inp_Q; endmodule
module half(T,H,Cout,Sum); input T,H; output Cout,Sum; assign Sum=T ^ H; assign Cout=T&H;
module half(inp_T,inp_O,Cout,Sum); input inp_T,inp_O; output Cout,Sum; assign Sum=inp_T ^ inp_O; assign Cout=inp_T&inp_O;
module half(N,R,Cout,Sum); input N,R; output Cout,Sum; assign Sum=N ^ R; assign Cout=N&R;
module half(W,G,Cout,Sum); input W,G; output Cout,Sum; assign Sum=W ^ G; assign Cout=W&G; endmodule
module half(L,D,Cout,Sum); input L,D; output Cout,Sum; assign Sum=L ^ D; assign Cout=L&D;
module half(inp_R,inp_T,Cout,Sum); input inp_R,inp_T; output Cout,Sum; assign Sum=inp_R ^ inp_T; assign Cout=inp_R&inp_T; endmodule
module half(inp_Y,inp_L,Cout,Sum); input inp_Y,inp_L; output Cout,Sum; assign Sum=inp_Y ^ inp_L; assign Cout=inp_Y&inp_L; endmodule
module half(inp_X,inp_T,Cout,Sum); input inp_X,inp_T; output Cout,Sum; assign Sum=inp_X ^ inp_T; assign Cout=inp_X&inp_T; endmodule
module half(C,K,Cout,Sum); input C,K; output Cout,Sum; assign Sum=C ^ K; assign Cout=C&K; endmodule
module half(inp_G,inp_M,Cout,Sum); input inp_G,inp_M; output Cout,Sum; assign Sum=inp_G ^ inp_M; assign Cout=inp_G&inp_M; endmodule
module half(G,I,Cout,Sum); input G,I; output Cout,Sum; assign Sum=G ^ I; assign Cout=G&I;
module half(inp_C,inp_N,Cout,Sum); input inp_C,inp_N; output Cout,Sum; assign Sum=inp_C ^ inp_N; assign Cout=inp_C&inp_N; endmodule
module half(inp_O,inp_M,Cout,Sum); input inp_O,inp_M; output Cout,Sum; assign Sum=inp_O ^ inp_M; assign Cout=inp_O&inp_M; endmodule
module half(N,Y,Cout,Sum); input N,Y; output Cout,Sum; assign Sum=N ^ Y; assign Cout=N&Y; endmodule
module half(inp_R,inp_F,Cout,Sum); input inp_R,inp_F; output Cout,Sum; assign Sum=inp_R ^ inp_F; assign Cout=inp_R&inp_F; endmodule
module half(R,A,Cout,Sum); input R,A; output Cout,Sum; assign Sum=R ^ A; assign Cout=R&A;
module half(L,K,Cout,Sum); input L,K; output Cout,Sum; assign Sum=L ^ K; assign Cout=L&K;
module half(O,F,Cout,Sum); input O,F; output Cout,Sum; assign Sum=O ^ F; assign Cout=O&F;
module half(I,D,Cout,Sum); input I,D; output Cout,Sum; assign Sum=I ^ D; assign Cout=I&D; endmodule
module half(X,K,Cout,Sum); input X,K; output Cout,Sum; assign Sum=X ^ K; assign Cout=X&K;
module half(inp_R,inp_K,Cout,Sum); input inp_R,inp_K; output Cout,Sum; assign Sum=inp_R ^ inp_K; assign Cout=inp_R&inp_K;
module half(X,N,Cout,Sum); input X,N; output Cout,Sum; assign Sum=X ^ N; assign Cout=X&N; endmodule
module half(V,Z,Cout,Sum); input V,Z; output Cout,Sum; assign Sum=V ^ Z; assign Cout=V&Z; endmodule
module half(T,H,Cout,Sum); input T,H; output Cout,Sum; assign Sum=T ^ H; assign Cout=T&H;
module half(Z,C,Cout,Sum); input Z,C; output Cout,Sum; assign Sum=Z ^ C; assign Cout=Z&C;
module half(K,I,Cout,Sum); input K,I; output Cout,Sum; assign Sum=K ^ I; assign Cout=K&I; endmodule
module half(inp_D,inp_R,Cout,Sum); input inp_D,inp_R; output Cout,Sum; assign Sum=inp_D ^ inp_R; assign Cout=inp_D&inp_R; endmodule
module half(G,I,Cout,Sum); input G,I; output Cout,Sum; assign Sum=G ^ I; assign Cout=G&I; endmodule
module half(E,R,Cout,Sum); input E,R; output Cout,Sum; assign Sum=E ^ R; assign Cout=E&R; endmodule
module half(J,Z,Cout,Sum); input J,Z; output Cout,Sum; assign Sum=J ^ Z; assign Cout=J&Z; endmodule
module half(S,Y,Cout,Sum); input S,Y; output Cout,Sum; assign Sum=S ^ Y; assign Cout=S&Y;
module half(Q,O,Cout,Sum); input Q,O; output Cout,Sum; assign Sum=Q ^ O; assign Cout=Q&O; endmodule
module half(inp_J,inp_Z,Cout,Sum); input inp_J,inp_Z; output Cout,Sum; assign Sum=inp_J ^ inp_Z; assign Cout=inp_J&inp_Z; endmodule
module half(inp_E,inp_T,Cout,Sum); input inp_E,inp_T; output Cout,Sum; assign Sum=inp_E ^ inp_T; assign Cout=inp_E&inp_T; endmodule
module half(inp_L,inp_I,Cout,Sum); input inp_L,inp_I; output Cout,Sum; assign Sum=inp_L ^ inp_I; assign Cout=inp_L&inp_I; endmodule
module half(V,K,Cout,Sum); input V,K; output Cout,Sum; assign Sum=V ^ K; assign Cout=V&K; endmodule
module half(E,D,Cout,Sum); input E,D; output Cout,Sum; assign Sum=E ^ D; assign Cout=E&D; endmodule
module half(inp_A,inp_C,Cout,Sum); input inp_A,inp_C; output Cout,Sum; assign Sum=inp_A ^ inp_C; assign Cout=inp_A&inp_C;
module half(A,W,Cout,Sum); input A,W; output Cout,Sum; assign Sum=A ^ W; assign Cout=A&W;
module half(U,D,Cout,Sum); input U,D; output Cout,Sum; assign Sum=U ^ D; assign Cout=U&D; endmodule
module half(inp_O,inp_R,Cout,Sum); input inp_O,inp_R; output Cout,Sum; assign Sum=inp_O ^ inp_R; assign Cout=inp_O&inp_R; endmodule
module half(T,C,Cout,Sum); input T,C; output Cout,Sum; assign Sum=T ^ C; assign Cout=T&C; endmodule
module half(T,L,Cout,Sum); input T,L; output Cout,Sum; assign Sum=T ^ L; assign Cout=T&L;
module half(Q,M,Cout,Sum); input Q,M; output Cout,Sum; assign Sum=Q ^ M; assign Cout=Q&M; endmodule
module half(inp_M,inp_K,Cout,Sum); input inp_M,inp_K; output Cout,Sum; assign Sum=inp_M ^ inp_K; assign Cout=inp_M&inp_K;
module half(inp_W,inp_Q,Cout,Sum); input inp_W,inp_Q; output Cout,Sum; assign Sum=inp_W ^ inp_Q; assign Cout=inp_W&inp_Q;
module half(L,U,Cout,Sum); input L,U; output Cout,Sum; assign Sum=L ^ U; assign Cout=L&U; endmodule
module half(L,Q,Cout,Sum); input L,Q; output Cout,Sum; assign Sum=L ^ Q; assign Cout=L&Q; endmodule
module half(P,Y,Cout,Sum); input P,Y; output Cout,Sum; assign Sum=P ^ Y; assign Cout=P&Y;
module half(G,M,Cout,Sum); input G,M; output Cout,Sum; assign Sum=G ^ M; assign Cout=G&M; endmodule
module half(U,I,Cout,Sum); input U,I; output Cout,Sum; assign Sum=U ^ I; assign Cout=U&I;
module half(T,M,Cout,Sum); input T,M; output Cout,Sum; assign Sum=T ^ M; assign Cout=T&M;
module half(F,Y,Cout,Sum); input F,Y; output Cout,Sum; assign Sum=F ^ Y; assign Cout=F&Y;
module half(inp_I,inp_A,Cout,Sum); input inp_I,inp_A; output Cout,Sum; assign Sum=inp_I ^ inp_A; assign Cout=inp_I&inp_A; endmodule
module half(I,A,Cout,Sum); input I,A; output Cout,Sum; assign Sum=I ^ A; assign Cout=I&A; endmodule
module half(inp_Q,inp_E,Cout,Sum); input inp_Q,inp_E; output Cout,Sum; assign Sum=inp_Q ^ inp_E; assign Cout=inp_Q&inp_E; endmodule
module half(J,N,Cout,Sum); input J,N; output Cout,Sum; assign Sum=J ^ N; assign Cout=J&N; endmodule
module half(P,M,Cout,Sum); input P,M; output Cout,Sum; assign Sum=P ^ M; assign Cout=P&M;
module half(inp_J,inp_V,Cout,Sum); input inp_J,inp_V; output Cout,Sum; assign Sum=inp_J ^ inp_V; assign Cout=inp_J&inp_V; endmodule
module half(Z,U,Cout,Sum); input Z,U; output Cout,Sum; assign Sum=Z ^ U; assign Cout=Z&U; endmodule
module half(Q,X,Cout,Sum); input Q,X; output Cout,Sum; assign Sum=Q ^ X; assign Cout=Q&X;
module half(inp_I,inp_W,Cout,Sum); input inp_I,inp_W; output Cout,Sum; assign Sum=inp_I ^ inp_W; assign Cout=inp_I&inp_W; endmodule
module half(inp_H,inp_N,Cout,Sum); input inp_H,inp_N; output Cout,Sum; assign Sum=inp_H ^ inp_N; assign Cout=inp_H&inp_N; endmodule
module half(inp_L,inp_Q,Cout,Sum); input inp_L,inp_Q; output Cout,Sum; assign Sum=inp_L ^ inp_Q; assign Cout=inp_L&inp_Q; endmodule
module half(Y,A,Cout,Sum); input Y,A; output Cout,Sum; assign Sum=Y ^ A; assign Cout=Y&A;
module half(E,M,Cout,Sum); input E,M; output Cout,Sum; assign Sum=E ^ M; assign Cout=E&M; endmodule
module half(inp_G,inp_D,Cout,Sum); input inp_G,inp_D; output Cout,Sum; assign Sum=inp_G ^ inp_D; assign Cout=inp_G&inp_D; endmodule
module half(B,R,Cout,Sum); input B,R; output Cout,Sum; assign Sum=B ^ R; assign Cout=B&R; endmodule
module half(U,K,Cout,Sum); input U,K; output Cout,Sum; assign Sum=U ^ K; assign Cout=U&K;
module half(O,J,Cout,Sum); input O,J; output Cout,Sum; assign Sum=O ^ J; assign Cout=O&J;
module half(inp_E,inp_U,Cout,Sum); input inp_E,inp_U; output Cout,Sum; assign Sum=inp_E ^ inp_U; assign Cout=inp_E&inp_U; endmodule
module half(inp_W,inp_U,Cout,Sum); input inp_W,inp_U; output Cout,Sum; assign Sum=inp_W ^ inp_U; assign Cout=inp_W&inp_U;
module half(inp_I,inp_N,Cout,Sum); input inp_I,inp_N; output Cout,Sum; assign Sum=inp_I ^ inp_N; assign Cout=inp_I&inp_N;
module half(inp_B,inp_Q,Cout,Sum); input inp_B,inp_Q; output Cout,Sum; assign Sum=inp_B ^ inp_Q; assign Cout=inp_B&inp_Q; endmodule
module half(inp_C,inp_O,Cout,Sum); input inp_C,inp_O; output Cout,Sum; assign Sum=inp_C ^ inp_O; assign Cout=inp_C&inp_O; endmodule
module half(inp_E,inp_Z,Cout,Sum); input inp_E,inp_Z; output Cout,Sum; assign Sum=inp_E ^ inp_Z; assign Cout=inp_E&inp_Z; endmodule
module half(inp_V,inp_Z,Cout,Sum); input inp_V,inp_Z; output Cout,Sum; assign Sum=inp_V ^ inp_Z; assign Cout=inp_V&inp_Z; endmodule
module half(V,D,Cout,Sum); input V,D; output Cout,Sum; assign Sum=V ^ D; assign Cout=V&D;
module half(Z,K,Cout,Sum); input Z,K; output Cout,Sum; assign Sum=Z ^ K; assign Cout=Z&K;
module half(inp_S,inp_I,Cout,Sum); input inp_S,inp_I; output Cout,Sum; assign Sum=inp_S ^ inp_I; assign Cout=inp_S&inp_I; endmodule
module half(M,L,Cout,Sum); input M,L; output Cout,Sum; assign Sum=M ^ L; assign Cout=M&L;
module half(inp_Z,inp_L,Cout,Sum); input inp_Z,inp_L; output Cout,Sum; assign Sum=inp_Z ^ inp_L; assign Cout=inp_Z&inp_L;
module half(inp_F,inp_R,Cout,Sum); input inp_F,inp_R; output Cout,Sum; assign Sum=inp_F ^ inp_R; assign Cout=inp_F&inp_R; endmodule
module half(F,Q,Cout,Sum); input F,Q; output Cout,Sum; assign Sum=F ^ Q; assign Cout=F&Q;
module half(inp_I,inp_W,Cout,Sum); input inp_I,inp_W; output Cout,Sum; assign Sum=inp_I ^ inp_W; assign Cout=inp_I&inp_W;
module half(inp_I,inp_G,Cout,Sum); input inp_I,inp_G; output Cout,Sum; assign Sum=inp_I ^ inp_G; assign Cout=inp_I&inp_G; endmodule
module half(inp_K,inp_U,Cout,Sum); input inp_K,inp_U; output Cout,Sum; assign Sum=inp_K ^ inp_U; assign Cout=inp_K&inp_U;
module half(Y,J,Cout,Sum); input Y,J; output Cout,Sum; assign Sum=Y ^ J; assign Cout=Y&J;
module half(inp_R,inp_M,Cout,Sum); input inp_R,inp_M; output Cout,Sum; assign Sum=inp_R ^ inp_M; assign Cout=inp_R&inp_M;
module half(L,W,Cout,Sum); input L,W; output Cout,Sum; assign Sum=L ^ W; assign Cout=L&W;
module half(S,H,Cout,Sum); input S,H; output Cout,Sum; assign Sum=S ^ H; assign Cout=S&H;
module half(inp_P,inp_M,Cout,Sum); input inp_P,inp_M; output Cout,Sum; assign Sum=inp_P ^ inp_M; assign Cout=inp_P&inp_M; endmodule
module half(inp_G,inp_M,Cout,Sum); input inp_G,inp_M; output Cout,Sum; assign Sum=inp_G ^ inp_M; assign Cout=inp_G&inp_M;
module half(inp_W,inp_G,Cout,Sum); input inp_W,inp_G; output Cout,Sum; assign Sum=inp_W ^ inp_G; assign Cout=inp_W&inp_G;
module half(U,O,Cout,Sum); input U,O; output Cout,Sum; assign Sum=U ^ O; assign Cout=U&O; endmodule
module half(inp_H,inp_Z,Cout,Sum); input inp_H,inp_Z; output Cout,Sum; assign Sum=inp_H ^ inp_Z; assign Cout=inp_H&inp_Z; endmodule
module half(inp_U,inp_L,Cout,Sum); input inp_U,inp_L; output Cout,Sum; assign Sum=inp_U ^ inp_L; assign Cout=inp_U&inp_L; endmodule
module half(O,V,Cout,Sum); input O,V; output Cout,Sum; assign Sum=O ^ V; assign Cout=O&V;
module half(inp_W,inp_D,Cout,Sum); input inp_W,inp_D; output Cout,Sum; assign Sum=inp_W ^ inp_D; assign Cout=inp_W&inp_D;
module half(inp_H,inp_C,Cout,Sum); input inp_H,inp_C; output Cout,Sum; assign Sum=inp_H ^ inp_C; assign Cout=inp_H&inp_C;
module half(U,Z,Cout,Sum); input U,Z; output Cout,Sum; assign Sum=U ^ Z; assign Cout=U&Z;
module half(K,W,Cout,Sum); input K,W; output Cout,Sum; assign Sum=K ^ W; assign Cout=K&W; endmodule
module half(G,N,Cout,Sum); input G,N; output Cout,Sum; assign Sum=G ^ N; assign Cout=G&N;
module half(inp_F,inp_G,Cout,Sum); input inp_F,inp_G; output Cout,Sum; assign Sum=inp_F ^ inp_G; assign Cout=inp_F&inp_G; endmodule
module half(inp_M,inp_Z,Cout,Sum); input inp_M,inp_Z; output Cout,Sum; assign Sum=inp_M ^ inp_Z; assign Cout=inp_M&inp_Z;
module half(O,G,Cout,Sum); input O,G; output Cout,Sum; assign Sum=O ^ G; assign Cout=O&G;
module half(I,Q,Cout,Sum); input I,Q; output Cout,Sum; assign Sum=I ^ Q; assign Cout=I&Q; endmodule
module half(Y,C,Cout,Sum); input Y,C; output Cout,Sum; assign Sum=Y ^ C; assign Cout=Y&C;
module half(S,L,Cout,Sum); input S,L; output Cout,Sum; assign Sum=S ^ L; assign Cout=S&L; endmodule
module half(Z,X,Cout,Sum); input Z,X; output Cout,Sum; assign Sum=Z ^ X; assign Cout=Z&X;
module half(inp_M,inp_R,Cout,Sum); input inp_M,inp_R; output Cout,Sum; assign Sum=inp_M ^ inp_R; assign Cout=inp_M&inp_R;
module half(R,Q,Cout,Sum); input R,Q; output Cout,Sum; assign Sum=R ^ Q; assign Cout=R&Q;
module half(S,T,Cout,Sum); input S,T; output Cout,Sum; assign Sum=S ^ T; assign Cout=S&T;
module half(inp_V,inp_E,Cout,Sum); input inp_V,inp_E; output Cout,Sum; assign Sum=inp_V ^ inp_E; assign Cout=inp_V&inp_E;
module half(inp_D,inp_R,Cout,Sum); input inp_D,inp_R; output Cout,Sum; assign Sum=inp_D ^ inp_R; assign Cout=inp_D&inp_R; endmodule
module half(K,S,Cout,Sum); input K,S; output Cout,Sum; assign Sum=K ^ S; assign Cout=K&S; endmodule
module half(inp_G,inp_L,Cout,Sum); input inp_G,inp_L; output Cout,Sum; assign Sum=inp_G ^ inp_L; assign Cout=inp_G&inp_L; endmodule
module half(inp_X,inp_J,Cout,Sum); input inp_X,inp_J; output Cout,Sum; assign Sum=inp_X ^ inp_J; assign Cout=inp_X&inp_J;
module half(inp_Y,inp_Z,Cout,Sum); input inp_Y,inp_Z; output Cout,Sum; assign Sum=inp_Y ^ inp_Z; assign Cout=inp_Y&inp_Z;
module half(Y,Z,Cout,Sum); input Y,Z; output Cout,Sum; assign Sum=Y ^ Z; assign Cout=Y&Z;
module half(inp_F,inp_G,Cout,Sum); input inp_F,inp_G; output Cout,Sum; assign Sum=inp_F ^ inp_G; assign Cout=inp_F&inp_G; endmodule
module half(inp_Y,inp_B,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B; assign Cout=inp_Y&inp_B; endmodule
module half(inp_K,inp_V,Cout,Sum); input inp_K,inp_V; output Cout,Sum; assign Sum=inp_K ^ inp_V; assign Cout=inp_K&inp_V;
module half(F,B,Cout,Sum); input F,B; output Cout,Sum; assign Sum=F ^ B; assign Cout=F&B; endmodule
module half(inp_R,inp_Z,Cout,Sum); input inp_R,inp_Z; output Cout,Sum; assign Sum=inp_R ^ inp_Z; assign Cout=inp_R&inp_Z;
module half(R,J,Cout,Sum); input R,J; output Cout,Sum; assign Sum=R ^ J; assign Cout=R&J;
module half(inp_I,inp_J,Cout,Sum); input inp_I,inp_J; output Cout,Sum; assign Sum=inp_I ^ inp_J; assign Cout=inp_I&inp_J; endmodule
module half(inp_X,inp_F,Cout,Sum); input inp_X,inp_F; output Cout,Sum; assign Sum=inp_X ^ inp_F; assign Cout=inp_X&inp_F;
module half(X,W,Cout,Sum); input X,W; output Cout,Sum; assign Sum=X ^ W; assign Cout=X&W; endmodule
module half(inp_C,inp_P,Cout,Sum); input inp_C,inp_P; output Cout,Sum; assign Sum=inp_C ^ inp_P; assign Cout=inp_C&inp_P;
module half(Z,R,Cout,Sum); input Z,R; output Cout,Sum; assign Sum=Z ^ R; assign Cout=Z&R;
module half(inp_O,inp_F,Cout,Sum); input inp_O,inp_F; output Cout,Sum; assign Sum=inp_O ^ inp_F; assign Cout=inp_O&inp_F; endmodule
module half(inp_M,inp_K,Cout,Sum); input inp_M,inp_K; output Cout,Sum; assign Sum=inp_M ^ inp_K; assign Cout=inp_M&inp_K; endmodule
module half(inp_T,inp_D,Cout,Sum); input inp_T,inp_D; output Cout,Sum; assign Sum=inp_T ^ inp_D; assign Cout=inp_T&inp_D; endmodule
module half(inp_N,inp_K,Cout,Sum); input inp_N,inp_K; output Cout,Sum; assign Sum=inp_N ^ inp_K; assign Cout=inp_N&inp_K;
module half(O,E,Cout,Sum); input O,E; output Cout,Sum; assign Sum=O ^ E; assign Cout=O&E;
module half(Q,H,Cout,Sum); input Q,H; output Cout,Sum; assign Sum=Q ^ H; assign Cout=Q&H;
module half(D,J,Cout,Sum); input D,J; output Cout,Sum; assign Sum=D ^ J; assign Cout=D&J; endmodule
module half(inp_X,inp_O,Cout,Sum); input inp_X,inp_O; output Cout,Sum; assign Sum=inp_X ^ inp_O; assign Cout=inp_X&inp_O; endmodule
module half(inp_S,inp_W,Cout,Sum); input inp_S,inp_W; output Cout,Sum; assign Sum=inp_S ^ inp_W; assign Cout=inp_S&inp_W;
module half(inp_C,inp_J,Cout,Sum); input inp_C,inp_J; output Cout,Sum; assign Sum=inp_C ^ inp_J; assign Cout=inp_C&inp_J; endmodule
module half(T,X,Cout,Sum); input T,X; output Cout,Sum; assign Sum=T ^ X; assign Cout=T&X; endmodule
module half(E,V,Cout,Sum); input E,V; output Cout,Sum; assign Sum=E ^ V; assign Cout=E&V; endmodule
module half(L,Z,Cout,Sum); input L,Z; output Cout,Sum; assign Sum=L ^ Z; assign Cout=L&Z;
module half(R,J,Cout,Sum); input R,J; output Cout,Sum; assign Sum=R ^ J; assign Cout=R&J;
module half(inp_A,inp_M,Cout,Sum); input inp_A,inp_M; output Cout,Sum; assign Sum=inp_A ^ inp_M; assign Cout=inp_A&inp_M; endmodule
module half(inp_T,inp_Z,Cout,Sum); input inp_T,inp_Z; output Cout,Sum; assign Sum=inp_T ^ inp_Z; assign Cout=inp_T&inp_Z;
module half(L,W,Cout,Sum); input L,W; output Cout,Sum; assign Sum=L ^ W; assign Cout=L&W; endmodule
module half(W,M,Cout,Sum); input W,M; output Cout,Sum; assign Sum=W ^ M; assign Cout=W&M;
module half(Q,A,Cout,Sum); input Q,A; output Cout,Sum; assign Sum=Q ^ A; assign Cout=Q&A; endmodule
module half(F,D,Cout,Sum); input F,D; output Cout,Sum; assign Sum=F ^ D; assign Cout=F&D; endmodule
module half(inp_O,inp_L,Cout,Sum); input inp_O,inp_L; output Cout,Sum; assign Sum=inp_O ^ inp_L; assign Cout=inp_O&inp_L;
module half(inp_O,inp_L,Cout,Sum); input inp_O,inp_L; output Cout,Sum; assign Sum=inp_O ^ inp_L; assign Cout=inp_O&inp_L; endmodule
module half(C,V,Cout,Sum); input C,V; output Cout,Sum; assign Sum=C ^ V; assign Cout=C&V;
module half(R,Y,Cout,Sum); input R,Y; output Cout,Sum; assign Sum=R ^ Y; assign Cout=R&Y; endmodule
module half(C,M,Cout,Sum); input C,M; output Cout,Sum; assign Sum=C ^ M; assign Cout=C&M;
module half(inp_Y,inp_E,Cout,Sum); input inp_Y,inp_E; output Cout,Sum; assign Sum=inp_Y ^ inp_E; assign Cout=inp_Y&inp_E; endmodule
module half(inp_E,inp_F,Cout,Sum); input inp_E,inp_F; output Cout,Sum; assign Sum=inp_E ^ inp_F; assign Cout=inp_E&inp_F; endmodule
module half(inp_G,inp_S,Cout,Sum); input inp_G,inp_S; output Cout,Sum; assign Sum=inp_G ^ inp_S; assign Cout=inp_G&inp_S;
module half(E,C,Cout,Sum); input E,C; output Cout,Sum; assign Sum=E ^ C; assign Cout=E&C;
module half(inp_F,inp_H,Cout,Sum); input inp_F,inp_H; output Cout,Sum; assign Sum=inp_F ^ inp_H; assign Cout=inp_F&inp_H; endmodule
module half(inp_I,inp_E,Cout,Sum); input inp_I,inp_E; output Cout,Sum; assign Sum=inp_I ^ inp_E; assign Cout=inp_I&inp_E; endmodule
module half(L,M,Cout,Sum); input L,M; output Cout,Sum; assign Sum=L ^ M; assign Cout=L&M; endmodule
module half(J,Q,Cout,Sum); input J,Q; output Cout,Sum; assign Sum=J ^ Q; assign Cout=J&Q; endmodule
module half(P,X,Cout,Sum); input P,X; output Cout,Sum; assign Sum=P ^ X; assign Cout=P&X;
module half(X,A,Cout,Sum); input X,A; output Cout,Sum; assign Sum=X ^ A; assign Cout=X&A;
module half(J,P,Cout,Sum); input J,P; output Cout,Sum; assign Sum=J ^ P; assign Cout=J&P; endmodule
module half(L,R,Cout,Sum); input L,R; output Cout,Sum; assign Sum=L ^ R; assign Cout=L&R; endmodule
module half(inp_Y,inp_G,Cout,Sum); input inp_Y,inp_G; output Cout,Sum; assign Sum=inp_Y ^ inp_G; assign Cout=inp_Y&inp_G;
module half(inp_L,inp_H,Cout,Sum); input inp_L,inp_H; output Cout,Sum; assign Sum=inp_L ^ inp_H; assign Cout=inp_L&inp_H;
module half(L,U,Cout,Sum); input L,U; output Cout,Sum; assign Sum=L ^ U; assign Cout=L&U; endmodule
module half(P,X,Cout,Sum); input P,X; output Cout,Sum; assign Sum=P ^ X; assign Cout=P&X; endmodule
module half(P,O,Cout,Sum); input P,O; output Cout,Sum; assign Sum=P ^ O; assign Cout=P&O; endmodule
module half(G,V,Cout,Sum); input G,V; output Cout,Sum; assign Sum=G ^ V; assign Cout=G&V; endmodule
module half(inp_K,inp_V,Cout,Sum); input inp_K,inp_V; output Cout,Sum; assign Sum=inp_K ^ inp_V; assign Cout=inp_K&inp_V; endmodule
module half(Z,D,Cout,Sum); input Z,D; output Cout,Sum; assign Sum=Z ^ D; assign Cout=Z&D;
module half(C,O,Cout,Sum); input C,O; output Cout,Sum; assign Sum=C ^ O; assign Cout=C&O;
module half(B,K,Cout,Sum); input B,K; output Cout,Sum; assign Sum=B ^ K; assign Cout=B&K;
module half(W,D,Cout,Sum); input W,D; output Cout,Sum; assign Sum=W ^ D; assign Cout=W&D; endmodule
module half(W,T,Cout,Sum); input W,T; output Cout,Sum; assign Sum=W ^ T; assign Cout=W&T;
module half(inp_R,inp_E,Cout,Sum); input inp_R,inp_E; output Cout,Sum; assign Sum=inp_R ^ inp_E; assign Cout=inp_R&inp_E; endmodule
module half(C,Q,Cout,Sum); input C,Q; output Cout,Sum; assign Sum=C ^ Q; assign Cout=C&Q;
module half(inp_I,inp_T,Cout,Sum); input inp_I,inp_T; output Cout,Sum; assign Sum=inp_I ^ inp_T; assign Cout=inp_I&inp_T;
module half(inp_V,inp_L,Cout,Sum); input inp_V,inp_L; output Cout,Sum; assign Sum=inp_V ^ inp_L; assign Cout=inp_V&inp_L;
module half(inp_S,inp_M,Cout,Sum); input inp_S,inp_M; output Cout,Sum; assign Sum=inp_S ^ inp_M; assign Cout=inp_S&inp_M;
module half(P,U,Cout,Sum); input P,U; output Cout,Sum; assign Sum=P ^ U; assign Cout=P&U; endmodule
module half(T,X,Cout,Sum); input T,X; output Cout,Sum; assign Sum=T ^ X; assign Cout=T&X; endmodule
module half(inp_K,inp_D,Cout,Sum); input inp_K,inp_D; output Cout,Sum; assign Sum=inp_K ^ inp_D; assign Cout=inp_K&inp_D;
module half(J,F,Cout,Sum); input J,F; output Cout,Sum; assign Sum=J ^ F; assign Cout=J&F;
module half(J,A,Cout,Sum); input J,A; output Cout,Sum; assign Sum=J ^ A; assign Cout=J&A; endmodule
module half(E,O,Cout,Sum); input E,O; output Cout,Sum; assign Sum=E ^ O; assign Cout=E&O; endmodule
module half(S,X,Cout,Sum); input S,X; output Cout,Sum; assign Sum=S ^ X; assign Cout=S&X; endmodule
module half(inp_Y,inp_D,Cout,Sum); input inp_Y,inp_D; output Cout,Sum; assign Sum=inp_Y ^ inp_D; assign Cout=inp_Y&inp_D;
module half(inp_J,inp_F,Cout,Sum); input inp_J,inp_F; output Cout,Sum; assign Sum=inp_J ^ inp_F; assign Cout=inp_J&inp_F; endmodule
module half(O,N,Cout,Sum); input O,N; output Cout,Sum; assign Sum=O ^ N; assign Cout=O&N; endmodule
module half(R,W,Cout,Sum); input R,W; output Cout,Sum; assign Sum=R ^ W; assign Cout=R&W;
module half(O,E,Cout,Sum); input O,E; output Cout,Sum; assign Sum=O ^ E; assign Cout=O&E;
module half(inp_X,inp_R,Cout,Sum); input inp_X,inp_R; output Cout,Sum; assign Sum=inp_X ^ inp_R; assign Cout=inp_X&inp_R;
module half(S,Q,Cout,Sum); input S,Q; output Cout,Sum; assign Sum=S ^ Q; assign Cout=S&Q; endmodule
module half(inp_R,inp_T,Cout,Sum); input inp_R,inp_T; output Cout,Sum; assign Sum=inp_R ^ inp_T; assign Cout=inp_R&inp_T;
module half(K,Z,Cout,Sum); input K,Z; output Cout,Sum; assign Sum=K ^ Z; assign Cout=K&Z; endmodule
module half(W,K,Cout,Sum); input W,K; output Cout,Sum; assign Sum=W ^ K; assign Cout=W&K; endmodule
module half(inp_I,inp_S,Cout,Sum); input inp_I,inp_S; output Cout,Sum; assign Sum=inp_I ^ inp_S; assign Cout=inp_I&inp_S;
module half(inp_A,inp_G,Cout,Sum); input inp_A,inp_G; output Cout,Sum; assign Sum=inp_A ^ inp_G; assign Cout=inp_A&inp_G;
module half(T,A,Cout,Sum); input T,A; output Cout,Sum; assign Sum=T ^ A; assign Cout=T&A; endmodule
module half(inp_L,inp_R,Cout,Sum); input inp_L,inp_R; output Cout,Sum; assign Sum=inp_L ^ inp_R; assign Cout=inp_L&inp_R;
module half(inp_X,inp_C,Cout,Sum); input inp_X,inp_C; output Cout,Sum; assign Sum=inp_X ^ inp_C; assign Cout=inp_X&inp_C; endmodule
module half(U,F,Cout,Sum); input U,F; output Cout,Sum; assign Sum=U ^ F; assign Cout=U&F;
module half(inp_J,inp_T,Cout,Sum); input inp_J,inp_T; output Cout,Sum; assign Sum=inp_J ^ inp_T; assign Cout=inp_J&inp_T;
module half(inp_B,inp_E,Cout,Sum); input inp_B,inp_E; output Cout,Sum; assign Sum=inp_B ^ inp_E; assign Cout=inp_B&inp_E;
module half(inp_D,inp_Y,Cout,Sum); input inp_D,inp_Y; output Cout,Sum; assign Sum=inp_D ^ inp_Y; assign Cout=inp_D&inp_Y; endmodule
module half(L,U,Cout,Sum); input L,U; output Cout,Sum; assign Sum=L ^ U; assign Cout=L&U;
module half(U,L,Cout,Sum); input U,L; output Cout,Sum; assign Sum=U ^ L; assign Cout=U&L; endmodule
module half(inp_H,inp_C,Cout,Sum); input inp_H,inp_C; output Cout,Sum; assign Sum=inp_H ^ inp_C; assign Cout=inp_H&inp_C;
module half(inp_A,inp_P,Cout,Sum); input inp_A,inp_P; output Cout,Sum; assign Sum=inp_A ^ inp_P; assign Cout=inp_A&inp_P; endmodule
module half(V,J,Cout,Sum); input V,J; output Cout,Sum; assign Sum=V ^ J; assign Cout=V&J;
module half(D,W,Cout,Sum); input D,W; output Cout,Sum; assign Sum=D ^ W; assign Cout=D&W; endmodule
module half(inp_I,inp_V,Cout,Sum); input inp_I,inp_V; output Cout,Sum; assign Sum=inp_I ^ inp_V; assign Cout=inp_I&inp_V;
module half(inp_J,inp_T,Cout,Sum); input inp_J,inp_T; output Cout,Sum; assign Sum=inp_J ^ inp_T; assign Cout=inp_J&inp_T;
module half(inp_W,inp_U,Cout,Sum); input inp_W,inp_U; output Cout,Sum; assign Sum=inp_W ^ inp_U; assign Cout=inp_W&inp_U; endmodule
module half(J,Y,Cout,Sum); input J,Y; output Cout,Sum; assign Sum=J ^ Y; assign Cout=J&Y;
module half(inp_O,inp_A,Cout,Sum); input inp_O,inp_A; output Cout,Sum; assign Sum=inp_O ^ inp_A; assign Cout=inp_O&inp_A; endmodule
module half(inp_Q,inp_J,Cout,Sum); input inp_Q,inp_J; output Cout,Sum; assign Sum=inp_Q ^ inp_J; assign Cout=inp_Q&inp_J;
module half(inp_L,inp_B,Cout,Sum); input inp_L,inp_B; output Cout,Sum; assign Sum=inp_L ^ inp_B; assign Cout=inp_L&inp_B;
module half(inp_C,inp_G,Cout,Sum); input inp_C,inp_G; output Cout,Sum; assign Sum=inp_C ^ inp_G; assign Cout=inp_C&inp_G; endmodule
module half(inp_L,inp_G,Cout,Sum); input inp_L,inp_G; output Cout,Sum; assign Sum=inp_L ^ inp_G; assign Cout=inp_L&inp_G; endmodule
module half(inp_F,inp_R,Cout,Sum); input inp_F,inp_R; output Cout,Sum; assign Sum=inp_F ^ inp_R; assign Cout=inp_F&inp_R;
module half(inp_C,inp_U,Cout,Sum); input inp_C,inp_U; output Cout,Sum; assign Sum=inp_C ^ inp_U; assign Cout=inp_C&inp_U;
module half(D,F,Cout,Sum); input D,F; output Cout,Sum; assign Sum=D ^ F; assign Cout=D&F; endmodule
module half(inp_U,inp_A,Cout,Sum); input inp_U,inp_A; output Cout,Sum; assign Sum=inp_U ^ inp_A; assign Cout=inp_U&inp_A; endmodule
module half(inp_M,inp_C,Cout,Sum); input inp_M,inp_C; output Cout,Sum; assign Sum=inp_M ^ inp_C; assign Cout=inp_M&inp_C; endmodule
module half(D,M,Cout,Sum); input D,M; output Cout,Sum; assign Sum=D ^ M; assign Cout=D&M; endmodule
module half(M,H,Cout,Sum); input M,H; output Cout,Sum; assign Sum=M ^ H; assign Cout=M&H;
module half(inp_I,inp_V,Cout,Sum); input inp_I,inp_V; output Cout,Sum; assign Sum=inp_I ^ inp_V; assign Cout=inp_I&inp_V;
module half(K,E,Cout,Sum); input K,E; output Cout,Sum; assign Sum=K ^ E; assign Cout=K&E; endmodule
module half(inp_A,inp_N,Cout,Sum); input inp_A,inp_N; output Cout,Sum; assign Sum=inp_A ^ inp_N; assign Cout=inp_A&inp_N; endmodule
module half(inp_X,inp_P,Cout,Sum); input inp_X,inp_P; output Cout,Sum; assign Sum=inp_X ^ inp_P; assign Cout=inp_X&inp_P; endmodule
module half(K,M,Cout,Sum); input K,M; output Cout,Sum; assign Sum=K ^ M; assign Cout=K&M;
module half(M,Z,Cout,Sum); input M,Z; output Cout,Sum; assign Sum=M ^ Z; assign Cout=M&Z;
module half(C,H,Cout,Sum); input C,H; output Cout,Sum; assign Sum=C ^ H; assign Cout=C&H; endmodule
module half(Y,G,Cout,Sum); input Y,G; output Cout,Sum; assign Sum=Y ^ G; assign Cout=Y&G;
module half(F,W,Cout,Sum); input F,W; output Cout,Sum; assign Sum=F ^ W; assign Cout=F&W; endmodule
module half(W,U,Cout,Sum); input W,U; output Cout,Sum; assign Sum=W ^ U; assign Cout=W&U;
module half(M,K,Cout,Sum); input M,K; output Cout,Sum; assign Sum=M ^ K; assign Cout=M&K;
module half(A,L,Cout,Sum); input A,L; output Cout,Sum; assign Sum=A ^ L; assign Cout=A&L;
module half(Y,R,Cout,Sum); input Y,R; output Cout,Sum; assign Sum=Y ^ R; assign Cout=Y&R; endmodule
module half(inp_R,inp_K,Cout,Sum); input inp_R,inp_K; output Cout,Sum; assign Sum=inp_R ^ inp_K; assign Cout=inp_R&inp_K; endmodule
module half(inp_B,inp_C,Cout,Sum); input inp_B,inp_C; output Cout,Sum; assign Sum=inp_B ^ inp_C; assign Cout=inp_B&inp_C; endmodule
module half(G,Y,Cout,Sum); input G,Y; output Cout,Sum; assign Sum=G ^ Y; assign Cout=G&Y; endmodule
module half(B,W,Cout,Sum); input B,W; output Cout,Sum; assign Sum=B ^ W; assign Cout=B&W;
module half(V,I,Cout,Sum); input V,I; output Cout,Sum; assign Sum=V ^ I; assign Cout=V&I; endmodule
module half(M,U,Cout,Sum); input M,U; output Cout,Sum; assign Sum=M ^ U; assign Cout=M&U; endmodule
module half(G,B,Cout,Sum); input G,B; output Cout,Sum; assign Sum=G ^ B; assign Cout=G&B;
module half(X,E,Cout,Sum); input X,E; output Cout,Sum; assign Sum=X ^ E; assign Cout=X&E; endmodule
module half(inp_R,inp_N,Cout,Sum); input inp_R,inp_N; output Cout,Sum; assign Sum=inp_R ^ inp_N; assign Cout=inp_R&inp_N; endmodule
module half(U,K,Cout,Sum); input U,K; output Cout,Sum; assign Sum=U ^ K; assign Cout=U&K; endmodule
module half(inp_Z,inp_E,Cout,Sum); input inp_Z,inp_E; output Cout,Sum; assign Sum=inp_Z ^ inp_E; assign Cout=inp_Z&inp_E; endmodule
module half(T,I,Cout,Sum); input T,I; output Cout,Sum; assign Sum=T ^ I; assign Cout=T&I;
module half(inp_J,inp_D,Cout,Sum); input inp_J,inp_D; output Cout,Sum; assign Sum=inp_J ^ inp_D; assign Cout=inp_J&inp_D; endmodule
module half(inp_F,inp_C,Cout,Sum); input inp_F,inp_C; output Cout,Sum; assign Sum=inp_F ^ inp_C; assign Cout=inp_F&inp_C;
module half(D,H,Cout,Sum); input D,H; output Cout,Sum; assign Sum=D ^ H; assign Cout=D&H;
module half(L,E,Cout,Sum); input L,E; output Cout,Sum; assign Sum=L ^ E; assign Cout=L&E;
module half(Q,M,Cout,Sum); input Q,M; output Cout,Sum; assign Sum=Q ^ M; assign Cout=Q&M;
module half(B,H,Cout,Sum); input B,H; output Cout,Sum; assign Sum=B ^ H; assign Cout=B&H;
module half(inp_H,inp_E,Cout,Sum); input inp_H,inp_E; output Cout,Sum; assign Sum=inp_H ^ inp_E; assign Cout=inp_H&inp_E; endmodule
module half(inp_K,inp_M,Cout,Sum); input inp_K,inp_M; output Cout,Sum; assign Sum=inp_K ^ inp_M; assign Cout=inp_K&inp_M;
module half(inp_Z,inp_F,Cout,Sum); input inp_Z,inp_F; output Cout,Sum; assign Sum=inp_Z ^ inp_F; assign Cout=inp_Z&inp_F; endmodule
module half(inp_A,inp_Q,Cout,Sum); input inp_A,inp_Q; output Cout,Sum; assign Sum=inp_A ^ inp_Q; assign Cout=inp_A&inp_Q;
module half(inp_E,inp_M,Cout,Sum); input inp_E,inp_M; output Cout,Sum; assign Sum=inp_E ^ inp_M; assign Cout=inp_E&inp_M; endmodule
module half(inp_E,inp_K,Cout,Sum); input inp_E,inp_K; output Cout,Sum; assign Sum=inp_E ^ inp_K; assign Cout=inp_E&inp_K; endmodule
module half(W,N,Cout,Sum); input W,N; output Cout,Sum; assign Sum=W ^ N; assign Cout=W&N;
module half(inp_L,inp_W,Cout,Sum); input inp_L,inp_W; output Cout,Sum; assign Sum=inp_L ^ inp_W; assign Cout=inp_L&inp_W; endmodule
module half(B,Q,Cout,Sum); input B,Q; output Cout,Sum; assign Sum=B ^ Q; assign Cout=B&Q; endmodule
module half(inp_M,inp_L,Cout,Sum); input inp_M,inp_L; output Cout,Sum; assign Sum=inp_M ^ inp_L; assign Cout=inp_M&inp_L; endmodule
module half(inp_E,inp_X,Cout,Sum); input inp_E,inp_X; output Cout,Sum; assign Sum=inp_E ^ inp_X; assign Cout=inp_E&inp_X; endmodule
module half(inp_D,inp_R,Cout,Sum); input inp_D,inp_R; output Cout,Sum; assign Sum=inp_D ^ inp_R; assign Cout=inp_D&inp_R; endmodule
module half(inp_C,inp_H,Cout,Sum); input inp_C,inp_H; output Cout,Sum; assign Sum=inp_C ^ inp_H; assign Cout=inp_C&inp_H; endmodule
module half(inp_Y,inp_B,Cout,Sum); input inp_Y,inp_B; output Cout,Sum; assign Sum=inp_Y ^ inp_B; assign Cout=inp_Y&inp_B; endmodule
module half(P,G,Cout,Sum); input P,G; output Cout,Sum; assign Sum=P ^ G; assign Cout=P&G;
module half(Q,P,Cout,Sum); input Q,P; output Cout,Sum; assign Sum=Q ^ P; assign Cout=Q&P;
module half(A,N,Cout,Sum); input A,N; output Cout,Sum; assign Sum=A ^ N; assign Cout=A&N; endmodule
module half(inp_P,inp_Z,Cout,Sum); input inp_P,inp_Z; output Cout,Sum; assign Sum=inp_P ^ inp_Z; assign Cout=inp_P&inp_Z;
module half(inp_I,inp_S,Cout,Sum); input inp_I,inp_S; output Cout,Sum; assign Sum=inp_I ^ inp_S; assign Cout=inp_I&inp_S; endmodule
module half(N,Q,Cout,Sum); input N,Q; output Cout,Sum; assign Sum=N ^ Q; assign Cout=N&Q; endmodule
module half(O,V,Cout,Sum); input O,V; output Cout,Sum; assign Sum=O ^ V; assign Cout=O&V;
module half(inp_Y,inp_X,Cout,Sum); input inp_Y,inp_X; output Cout,Sum; assign Sum=inp_Y ^ inp_X; assign Cout=inp_Y&inp_X;
module half(Z,C,Cout,Sum); input Z,C; output Cout,Sum; assign Sum=Z ^ C; assign Cout=Z&C;
module half(inp_V,inp_R,Cout,Sum); input inp_V,inp_R; output Cout,Sum; assign Sum=inp_V ^ inp_R; assign Cout=inp_V&inp_R; endmodule
module half(K,A,Cout,Sum); input K,A; output Cout,Sum; assign Sum=K ^ A; assign Cout=K&A;
module half(inp_S,inp_R,Cout,Sum); input inp_S,inp_R; output Cout,Sum; assign Sum=inp_S ^ inp_R; assign Cout=inp_S&inp_R;
module half(J,K,Cout,Sum); input J,K; output Cout,Sum; assign Sum=J ^ K; assign Cout=J&K;
module half(X,B,Cout,Sum); input X,B; output Cout,Sum; assign Sum=X ^ B; assign Cout=X&B; endmodule
module half(G,E,Cout,Sum); input G,E; output Cout,Sum; assign Sum=G ^ E; assign Cout=G&E;
module half(W,N,Cout,Sum); input W,N; output Cout,Sum; assign Sum=W ^ N; assign Cout=W&N; endmodule
module half(W,J,Cout,Sum); input W,J; output Cout,Sum; assign Sum=W ^ J; assign Cout=W&J; endmodule
module half(inp_T,inp_A,Cout,Sum); input inp_T,inp_A; output Cout,Sum; assign Sum=inp_T ^ inp_A; assign Cout=inp_T&inp_A;
module half(inp_K,inp_C,Cout,Sum); input inp_K,inp_C; output Cout,Sum; assign Sum=inp_K ^ inp_C; assign Cout=inp_K&inp_C;
module half(J,E,Cout,Sum); input J,E; output Cout,Sum; assign Sum=J ^ E; assign Cout=J&E;
module half(inp_V,inp_M,Cout,Sum); input inp_V,inp_M; output Cout,Sum; assign Sum=inp_V ^ inp_M; assign Cout=inp_V&inp_M;
module half(L,B,Cout,Sum); input L,B; output Cout,Sum; assign Sum=L ^ B; assign Cout=L&B; endmodule
module half(inp_J,inp_A,Cout,Sum); input inp_J,inp_A; output Cout,Sum; assign Sum=inp_J ^ inp_A; assign Cout=inp_J&inp_A;
module half(inp_C,inp_U,Cout,Sum); input inp_C,inp_U; output Cout,Sum; assign Sum=inp_C ^ inp_U; assign Cout=inp_C&inp_U;
module half(W,H,Cout,Sum); input W,H; output Cout,Sum; assign Sum=W ^ H; assign Cout=W&H;
module half(W,Y,Cout,Sum); input W,Y; output Cout,Sum; assign Sum=W ^ Y; assign Cout=W&Y;
module half(D,N,Cout,Sum); input D,N; output Cout,Sum; assign Sum=D ^ N; assign Cout=D&N;
module half(B,V,Cout,Sum); input B,V; output Cout,Sum; assign Sum=B ^ V; assign Cout=B&V; endmodule
module half(inp_W,inp_J,Cout,Sum); input inp_W,inp_J; output Cout,Sum; assign Sum=inp_W ^ inp_J; assign Cout=inp_W&inp_J; endmodule
module half(X,J,Cout,Sum); input X,J; output Cout,Sum; assign Sum=X ^ J; assign Cout=X&J;
module half(E,D,Cout,Sum); input E,D; output Cout,Sum; assign Sum=E ^ D; assign Cout=E&D; endmodule
module half(inp_S,inp_A,Cout,Sum); input inp_S,inp_A; output Cout,Sum; assign Sum=inp_S ^ inp_A; assign Cout=inp_S&inp_A;
module half(R,N,Cout,Sum); input R,N; output Cout,Sum; assign Sum=R ^ N; assign Cout=R&N;
module half(inp_R,inp_U,Cout,Sum); input inp_R,inp_U; output Cout,Sum; assign Sum=inp_R ^ inp_U; assign Cout=inp_R&inp_U;
module half(inp_X,inp_G,Cout,Sum); input inp_X,inp_G; output Cout,Sum; assign Sum=inp_X ^ inp_G; assign Cout=inp_X&inp_G; endmodule
module half(V,J,Cout,Sum); input V,J; output Cout,Sum; assign Sum=V ^ J; assign Cout=V&J; endmodule
module half(inp_T,inp_R,Cout,Sum); input inp_T,inp_R; output Cout,Sum; assign Sum=inp_T ^ inp_R; assign Cout=inp_T&inp_R;
module half(E,S,Cout,Sum); input E,S; output Cout,Sum; assign Sum=E ^ S; assign Cout=E&S;
module half(G,C,Cout,Sum); input G,C; output Cout,Sum; assign Sum=G ^ C; assign Cout=G&C;
module half(F,O,Cout,Sum); input F,O; output Cout,Sum; assign Sum=F ^ O; assign Cout=F&O; endmodule
module half(H,N,Cout,Sum); input H,N; output Cout,Sum; assign Sum=H ^ N; assign Cout=H&N;
module half(inp_P,inp_R,Cout,Sum); input inp_P,inp_R; output Cout,Sum; assign Sum=inp_P ^ inp_R; assign Cout=inp_P&inp_R;
module half(inp_H,inp_X,Cout,Sum); input inp_H,inp_X; output Cout,Sum; assign Sum=inp_H ^ inp_X; assign Cout=inp_H&inp_X; endmodule
module half(Z,H,Cout,Sum); input Z,H; output Cout,Sum; assign Sum=Z ^ H; assign Cout=Z&H; endmodule
module half(inp_C,inp_P,Cout,Sum); input inp_C,inp_P; output Cout,Sum; assign Sum=inp_C ^ inp_P; assign Cout=inp_C&inp_P; endmodule
module half(inp_H,inp_D,Cout,Sum); input inp_H,inp_D; output Cout,Sum; assign Sum=inp_H ^ inp_D; assign Cout=inp_H&inp_D;
module half(X,Z,Cout,Sum); input X,Z; output Cout,Sum; assign Sum=X ^ Z; assign Cout=X&Z;
module half(inp_U,inp_Z,Cout,Sum); input inp_U,inp_Z; output Cout,Sum; assign Sum=inp_U ^ inp_Z; assign Cout=inp_U&inp_Z; endmodule
module half(J,U,Cout,Sum); input J,U; output Cout,Sum; assign Sum=J ^ U; assign Cout=J&U;
module half(E,F,Cout,Sum); input E,F; output Cout,Sum; assign Sum=E ^ F; assign Cout=E&F; endmodule
module half(X,T,Cout,Sum); input X,T; output Cout,Sum; assign Sum=X ^ T; assign Cout=X&T;
module half(inp_X,inp_F,Cout,Sum); input inp_X,inp_F; output Cout,Sum; assign Sum=inp_X ^ inp_F; assign Cout=inp_X&inp_F; endmodule
module half(inp_W,inp_M,Cout,Sum); input inp_W,inp_M; output Cout,Sum; assign Sum=inp_W ^ inp_M; assign Cout=inp_W&inp_M; endmodule
module half(inp_D,inp_M,Cout,Sum); input inp_D,inp_M; output Cout,Sum; assign Sum=inp_D ^ inp_M; assign Cout=inp_D&inp_M; endmodule
module half(U,J,Cout,Sum); input U,J; output Cout,Sum; assign Sum=U ^ J; assign Cout=U&J;
module half(K,J,Cout,Sum); input K,J; output Cout,Sum; assign Sum=K ^ J; assign Cout=K&J;
module half(F,K,Cout,Sum); input F,K; output Cout,Sum; assign Sum=F ^ K; assign Cout=F&K;
module half(inp_L,inp_O,Cout,Sum); input inp_L,inp_O; output Cout,Sum; assign Sum=inp_L ^ inp_O; assign Cout=inp_L&inp_O;
module half(inp_Y,inp_M,Cout,Sum); input inp_Y,inp_M; output Cout,Sum; assign Sum=inp_Y ^ inp_M; assign Cout=inp_Y&inp_M;
module half(Y,J,Cout,Sum); input Y,J; output Cout,Sum; assign Sum=Y ^ J; assign Cout=Y&J;
module half(P,O,Cout,Sum); input P,O; output Cout,Sum; assign Sum=P ^ O; assign Cout=P&O; endmodule
module half(inp_D,inp_G,Cout,Sum); input inp_D,inp_G; output Cout,Sum; assign Sum=inp_D ^ inp_G; assign Cout=inp_D&inp_G;
module half(inp_H,inp_C,Cout,Sum); input inp_H,inp_C; output Cout,Sum; assign Sum=inp_H ^ inp_C; assign Cout=inp_H&inp_C;
module half(inp_I,inp_W,Cout,Sum); input inp_I,inp_W; output Cout,Sum; assign Sum=inp_I ^ inp_W; assign Cout=inp_I&inp_W; endmodule
module half(T,I,Cout,Sum); input T,I; output Cout,Sum; assign Sum=T ^ I; assign Cout=T&I; endmodule
module half(K,F,Cout,Sum); input K,F; output Cout,Sum; assign Sum=K ^ F; assign Cout=K&F;
module half(inp_O,inp_U,Cout,Sum); input inp_O,inp_U; output Cout,Sum; assign Sum=inp_O ^ inp_U; assign Cout=inp_O&inp_U; endmodule
module half(inp_B,inp_H,Cout,Sum); input inp_B,inp_H; output Cout,Sum; assign Sum=inp_B ^ inp_H; assign Cout=inp_B&inp_H; endmodule
module half(inp_G,inp_F,Cout,Sum); input inp_G,inp_F; output Cout,Sum; assign Sum=inp_G ^ inp_F; assign Cout=inp_G&inp_F;
module half(inp_K,inp_F,Cout,Sum); input inp_K,inp_F; output Cout,Sum; assign Sum=inp_K ^ inp_F; assign Cout=inp_K&inp_F; endmodule
module half(inp_P,inp_X,Cout,Sum); input inp_P,inp_X; output Cout,Sum; assign Sum=inp_P ^ inp_X; assign Cout=inp_P&inp_X;
module half(inp_Y,inp_U,Cout,Sum); input inp_Y,inp_U; output Cout,Sum; assign Sum=inp_Y ^ inp_U; assign Cout=inp_Y&inp_U;
module half(O,Y,Cout,Sum); input O,Y; output Cout,Sum; assign Sum=O ^ Y; assign Cout=O&Y;
module half(inp_U,inp_Q,Cout,Sum); input inp_U,inp_Q; output Cout,Sum; assign Sum=inp_U ^ inp_Q; assign Cout=inp_U&inp_Q; endmodule
module half(inp_B,inp_G,Cout,Sum); input inp_B,inp_G; output Cout,Sum; assign Sum=inp_B ^ inp_G; assign Cout=inp_B&inp_G;
module half(D,K,Cout,Sum); input D,K; output Cout,Sum; assign Sum=D ^ K; assign Cout=D&K;
module half(inp_A,inp_H,Cout,Sum); input inp_A,inp_H; output Cout,Sum; assign Sum=inp_A ^ inp_H; assign Cout=inp_A&inp_H;
module half(inp_E,inp_K,Cout,Sum); input inp_E,inp_K; output Cout,Sum; assign Sum=inp_E ^ inp_K; assign Cout=inp_E&inp_K; endmodule
module half(inp_E,inp_K,Cout,Sum); input inp_E,inp_K; output Cout,Sum; assign Sum=inp_E ^ inp_K; assign Cout=inp_E&inp_K;
module half(H,V,Cout,Sum); input H,V; output Cout,Sum; assign Sum=H ^ V; assign Cout=H&V;
module half(Z,Q,Cout,Sum); input Z,Q; output Cout,Sum; assign Sum=Z ^ Q; assign Cout=Z&Q; endmodule
module half(D,E,Cout,Sum); input D,E; output Cout,Sum; assign Sum=D ^ E; assign Cout=D&E;
module half(inp_Y,inp_P,Cout,Sum); input inp_Y,inp_P; output Cout,Sum; assign Sum=inp_Y ^ inp_P; assign Cout=inp_Y&inp_P; endmodule
module half(inp_A,inp_R,Cout,Sum); input inp_A,inp_R; output Cout,Sum; assign Sum=inp_A ^ inp_R; assign Cout=inp_A&inp_R; endmodule
module half(inp_T,inp_V,Cout,Sum); input inp_T,inp_V; output Cout,Sum; assign Sum=inp_T ^ inp_V; assign Cout=inp_T&inp_V; endmodule
module half(I,W,Cout,Sum); input I,W; output Cout,Sum; assign Sum=I ^ W; assign Cout=I&W; endmodule
module half(B,C,Cout,Sum); input B,C; output Cout,Sum; assign Sum=B ^ C; assign Cout=B&C;
module half(inp_R,inp_C,Cout,Sum); input inp_R,inp_C; output Cout,Sum; assign Sum=inp_R ^ inp_C; assign Cout=inp_R&inp_C;
module half(inp_W,inp_E,Cout,Sum); input inp_W,inp_E; output Cout,Sum; assign Sum=inp_W ^ inp_E; assign Cout=inp_W&inp_E; endmodule
module half(inp_A,inp_P,Cout,Sum); input inp_A,inp_P; output Cout,Sum; assign Sum=inp_A ^ inp_P; assign Cout=inp_A&inp_P; endmodule
module half(inp_Z,inp_J,Cout,Sum); input inp_Z,inp_J; output Cout,Sum; assign Sum=inp_Z ^ inp_J; assign Cout=inp_Z&inp_J; endmodule
module half(Y,G,Cout,Sum); input Y,G; output Cout,Sum; assign Sum=Y ^ G; assign Cout=Y&G;
module half(N,B,Cout,Sum); input N,B; output Cout,Sum; assign Sum=N ^ B; assign Cout=N&B; endmodule
module half(inp_O,inp_Y,Cout,Sum); input inp_O,inp_Y; output Cout,Sum; assign Sum=inp_O ^ inp_Y; assign Cout=inp_O&inp_Y; endmodule
module half(E,X,Cout,Sum); input E,X; output Cout,Sum; assign Sum=E ^ X; assign Cout=E&X;
module half(inp_S,inp_O,Cout,Sum); input inp_S,inp_O; output Cout,Sum; assign Sum=inp_S ^ inp_O; assign Cout=inp_S&inp_O;
module half(inp_U,inp_Y,Cout,Sum); input inp_U,inp_Y; output Cout,Sum; assign Sum=inp_U ^ inp_Y; assign Cout=inp_U&inp_Y;
module half(P,G,Cout,Sum); input P,G; output Cout,Sum; assign Sum=P ^ G; assign Cout=P&G; endmodule
module half(inp_W,inp_F,Cout,Sum); input inp_W,inp_F; output Cout,Sum; assign Sum=inp_W ^ inp_F; assign Cout=inp_W&inp_F; endmodule
module half(inp_P,inp_B,Cout,Sum); input inp_P,inp_B; output Cout,Sum; assign Sum=inp_P ^ inp_B; assign Cout=inp_P&inp_B; endmodule
module half(U,E,Cout,Sum); input U,E; output Cout,Sum; assign Sum=U ^ E; assign Cout=U&E; endmodule
module half(T,K,Cout,Sum); input T,K; output Cout,Sum; assign Sum=T ^ K; assign Cout=T&K;
module half(inp_V,inp_G,Cout,Sum); input inp_V,inp_G; output Cout,Sum; assign Sum=inp_V ^ inp_G; assign Cout=inp_V&inp_G; endmodule
module half(inp_X,inp_Z,Cout,Sum); input inp_X,inp_Z; output Cout,Sum; assign Sum=inp_X ^ inp_Z; assign Cout=inp_X&inp_Z;
module half(inp_D,inp_Z,Cout,Sum); input inp_D,inp_Z; output Cout,Sum; assign Sum=inp_D ^ inp_Z; assign Cout=inp_D&inp_Z; endmodule
module half(inp_Y,inp_V,Cout,Sum); input inp_Y,inp_V; output Cout,Sum; assign Sum=inp_Y ^ inp_V; assign Cout=inp_Y&inp_V; endmodule
module half(L,D,Cout,Sum); input L,D; output Cout,Sum; assign Sum=L ^ D; assign Cout=L&D; endmodule
module half(M,E,Cout,Sum); input M,E; output Cout,Sum; assign Sum=M ^ E; assign Cout=M&E; endmodule
module half(X,J,Cout,Sum); input X,J; output Cout,Sum; assign Sum=X ^ J; assign Cout=X&J; endmodule
module half(B,E,Cout,Sum); input B,E; output Cout,Sum; assign Sum=B ^ E; assign Cout=B&E;
module half(inp_F,inp_A,Cout,Sum); input inp_F,inp_A; output Cout,Sum; assign Sum=inp_F ^ inp_A; assign Cout=inp_F&inp_A;
module half(D,V,Cout,Sum); input D,V; output Cout,Sum; assign Sum=D ^ V; assign Cout=D&V;
module half(inp_S,inp_B,Cout,Sum); input inp_S,inp_B; output Cout,Sum; assign Sum=inp_S ^ inp_B; assign Cout=inp_S&inp_B;
module half(inp_G,inp_O,Cout,Sum); input inp_G,inp_O; output Cout,Sum; assign Sum=inp_G ^ inp_O; assign Cout=inp_G&inp_O;
module half(inp_N,inp_R,Cout,Sum); input inp_N,inp_R; output Cout,Sum; assign Sum=inp_N ^ inp_R; assign Cout=inp_N&inp_R; endmodule
module half(R,G,Cout,Sum); input R,G; output Cout,Sum; assign Sum=R ^ G; assign Cout=R&G; endmodule
module half(inp_S,inp_L,Cout,Sum); input inp_S,inp_L; output Cout,Sum; assign Sum=inp_S ^ inp_L; assign Cout=inp_S&inp_L; endmodule
module half(J,U,Cout,Sum); input J,U; output Cout,Sum; assign Sum=J ^ U; assign Cout=J&U; endmodule
module half(J,B,Cout,Sum); input J,B; output Cout,Sum; assign Sum=J ^ B; assign Cout=J&B; endmodule
module half(inp_Q,inp_U,Cout,Sum); input inp_Q,inp_U; output Cout,Sum; assign Sum=inp_Q ^ inp_U; assign Cout=inp_Q&inp_U;
module half(L,B,Cout,Sum); input L,B; output Cout,Sum; assign Sum=L ^ B; assign Cout=L&B;
module half(inp_K,inp_I,Cout,Sum); input inp_K,inp_I; output Cout,Sum; assign Sum=inp_K ^ inp_I; assign Cout=inp_K&inp_I; endmodule
module half(J,Y,Cout,Sum); input J,Y; output Cout,Sum; assign Sum=J ^ Y; assign Cout=J&Y; endmodule
module half(L,X,Cout,Sum); input L,X; output Cout,Sum; assign Sum=L ^ X; assign Cout=L&X;
module half(S,W,Cout,Sum); input S,W; output Cout,Sum; assign Sum=S ^ W; assign Cout=S&W; endmodule
module half(Q,G,Cout,Sum); input Q,G; output Cout,Sum; assign Sum=Q ^ G; assign Cout=Q&G; endmodule
module half(P,T,Cout,Sum); input P,T; output Cout,Sum; assign Sum=P ^ T; assign Cout=P&T; endmodule
module half(inp_A,inp_D,Cout,Sum); input inp_A,inp_D; output Cout,Sum; assign Sum=inp_A ^ inp_D; assign Cout=inp_A&inp_D;
module half(inp_D,inp_Z,Cout,Sum); input inp_D,inp_Z; output Cout,Sum; assign Sum=inp_D ^ inp_Z; assign Cout=inp_D&inp_Z; endmodule
module half(A,C,Cout,Sum); input A,C; output Cout,Sum; assign Sum=A ^ C; assign Cout=A&C;
module half(F,J,Cout,Sum); input F,J; output Cout,Sum; assign Sum=F ^ J; assign Cout=F&J; endmodule
module half(inp_O,inp_U,Cout,Sum); input inp_O,inp_U; output Cout,Sum; assign Sum=inp_O ^ inp_U; assign Cout=inp_O&inp_U; endmodule
module half(inp_O,inp_Q,Cout,Sum); input inp_O,inp_Q; output Cout,Sum; assign Sum=inp_O ^ inp_Q; assign Cout=inp_O&inp_Q;
module half(X,I,Cout,Sum); input X,I; output Cout,Sum; assign Sum=X ^ I; assign Cout=X&I; endmodule
module half(inp_N,inp_T,Cout,Sum); input inp_N,inp_T; output Cout,Sum; assign Sum=inp_N ^ inp_T; assign Cout=inp_N&inp_T;
module half(Y,H,Cout,Sum); input Y,H; output Cout,Sum; assign Sum=Y ^ H; assign Cout=Y&H;
module half(inp_A,inp_Y,Cout,Sum); input inp_A,inp_Y; output Cout,Sum; assign Sum=inp_A ^ inp_Y; assign Cout=inp_A&inp_Y;
module half(inp_G,inp_O,Cout,Sum); input inp_G,inp_O; output Cout,Sum; assign Sum=inp_G ^ inp_O; assign Cout=inp_G&inp_O; endmodule
module half(L,R,Cout,Sum); input L,R; output Cout,Sum; assign Sum=L ^ R; assign Cout=L&R; endmodule
module half(inp_O,inp_I,Cout,Sum); input inp_O,inp_I; output Cout,Sum; assign Sum=inp_O ^ inp_I; assign Cout=inp_O&inp_I; endmodule
module half(inp_I,inp_D,Cout,Sum); input inp_I,inp_D; output Cout,Sum; assign Sum=inp_I ^ inp_D; assign Cout=inp_I&inp_D;
module half(inp_M,inp_N,Cout,Sum); input inp_M,inp_N; output Cout,Sum; assign Sum=inp_M ^ inp_N; assign Cout=inp_M&inp_N; endmodule
module half(R,G,Cout,Sum); input R,G; output Cout,Sum; assign Sum=R ^ G; assign Cout=R&G;
module half(inp_H,inp_D,Cout,Sum); input inp_H,inp_D; output Cout,Sum; assign Sum=inp_H ^ inp_D; assign Cout=inp_H&inp_D; endmodule
module half(inp_F,inp_Q,Cout,Sum); input inp_F,inp_Q; output Cout,Sum; assign Sum=inp_F ^ inp_Q; assign Cout=inp_F&inp_Q;
module half(inp_E,inp_J,Cout,Sum); input inp_E,inp_J; output Cout,Sum; assign Sum=inp_E ^ inp_J; assign Cout=inp_E&inp_J; endmodule
module half(X,P,Cout,Sum); input X,P; output Cout,Sum; assign Sum=X ^ P; assign Cout=X&P;
module half(inp_X,inp_E,Cout,Sum); input inp_X,inp_E; output Cout,Sum; assign Sum=inp_X ^ inp_E; assign Cout=inp_X&inp_E;
module half(W,G,Cout,Sum); input W,G; output Cout,Sum; assign Sum=W ^ G; assign Cout=W&G; endmodule
module half(Y,K,Cout,Sum); input Y,K; output Cout,Sum; assign Sum=Y ^ K; assign Cout=Y&K;
module half(inp_E,inp_C,Cout,Sum); input inp_E,inp_C; output Cout,Sum; assign Sum=inp_E ^ inp_C; assign Cout=inp_E&inp_C; endmodule
module half(inp_W,inp_H,Cout,Sum); input inp_W,inp_H; output Cout,Sum; assign Sum=inp_W ^ inp_H; assign Cout=inp_W&inp_H;
module half(inp_W,inp_C,Cout,Sum); input inp_W,inp_C; output Cout,Sum; assign Sum=inp_W ^ inp_C; assign Cout=inp_W&inp_C; endmodule
module half(M,Z,Cout,Sum); input M,Z; output Cout,Sum; assign Sum=M ^ Z; assign Cout=M&Z; endmodule
module half(inp_J,inp_N,Cout,Sum); input inp_J,inp_N; output Cout,Sum; assign Sum=inp_J ^ inp_N; assign Cout=inp_J&inp_N;
module half(O,Y,Cout,Sum); input O,Y; output Cout,Sum; assign Sum=O ^ Y; assign Cout=O&Y; endmodule
module half(P,V,Cout,Sum); input P,V; output Cout,Sum; assign Sum=P ^ V; assign Cout=P&V; endmodule
module half(Z,O,Cout,Sum); input Z,O; output Cout,Sum; assign Sum=Z ^ O; assign Cout=Z&O; endmodule
module half(Y,S,Cout,Sum); input Y,S; output Cout,Sum; assign Sum=Y ^ S; assign Cout=Y&S;
module half(O,J,Cout,Sum); input O,J; output Cout,Sum; assign Sum=O ^ J; assign Cout=O&J; endmodule
module half(inp_W,inp_D,Cout,Sum); input inp_W,inp_D; output Cout,Sum; assign Sum=inp_W ^ inp_D; assign Cout=inp_W&inp_D;
module half(P,Z,Cout,Sum); input P,Z; output Cout,Sum; assign Sum=P ^ Z; assign Cout=P&Z; endmodule
module half(C,F,Cout,Sum); input C,F; output Cout,Sum; assign Sum=C ^ F; assign Cout=C&F;
module half(inp_N,inp_U,Cout,Sum); input inp_N,inp_U; output Cout,Sum; assign Sum=inp_N ^ inp_U; assign Cout=inp_N&inp_U; endmodule
module half(J,O,Cout,Sum); input J,O; output Cout,Sum; assign Sum=J ^ O; assign Cout=J&O;
module half(inp_G,inp_M,Cout,Sum); input inp_G,inp_M; output Cout,Sum; assign Sum=inp_G ^ inp_M; assign Cout=inp_G&inp_M; endmodule
module half(inp_H,inp_V,Cout,Sum); input inp_H,inp_V; output Cout,Sum; assign Sum=inp_H ^ inp_V; assign Cout=inp_H&inp_V;
module half(inp_B,inp_G,Cout,Sum); input inp_B,inp_G; output Cout,Sum; assign Sum=inp_B ^ inp_G; assign Cout=inp_B&inp_G; endmodule
module half(inp_V,inp_A,Cout,Sum); input inp_V,inp_A; output Cout,Sum; assign Sum=inp_V ^ inp_A; assign Cout=inp_V&inp_A; endmodule
module half(G,V,Cout,Sum); input G,V; output Cout,Sum; assign Sum=G ^ V; assign Cout=G&V; endmodule
module half(inp_Q,inp_D,Cout,Sum); input inp_Q,inp_D; output Cout,Sum; assign Sum=inp_Q ^ inp_D; assign Cout=inp_Q&inp_D;
module half(inp_G,inp_Q,Cout,Sum); input inp_G,inp_Q; output Cout,Sum; assign Sum=inp_G ^ inp_Q; assign Cout=inp_G&inp_Q; endmodule
module half(inp_M,inp_K,Cout,Sum); input inp_M,inp_K; output Cout,Sum; assign Sum=inp_M ^ inp_K; assign Cout=inp_M&inp_K;
module half(K,Z,Cout,Sum); input K,Z; output Cout,Sum; assign Sum=K ^ Z; assign Cout=K&Z; endmodule
module half(inp_D,inp_I,Cout,Sum); input inp_D,inp_I; output Cout,Sum; assign Sum=inp_D ^ inp_I; assign Cout=inp_D&inp_I; endmodule
module half(J,W,Cout,Sum); input J,W; output Cout,Sum; assign Sum=J ^ W; assign Cout=J&W;
module half(V,B,Cout,Sum); input V,B; output Cout,Sum; assign Sum=V ^ B; assign Cout=V&B;
module half(inp_B,inp_D,Cout,Sum); input inp_B,inp_D; output Cout,Sum; assign Sum=inp_B ^ inp_D; assign Cout=inp_B&inp_D; endmodule
module half(M,H,Cout,Sum); input M,H; output Cout,Sum; assign Sum=M ^ H; assign Cout=M&H; endmodule
module half(inp_O,inp_V,Cout,Sum); input inp_O,inp_V; output Cout,Sum; assign Sum=inp_O ^ inp_V; assign Cout=inp_O&inp_V;
module half(inp_I,inp_F,Cout,Sum); input inp_I,inp_F; output Cout,Sum; assign Sum=inp_I ^ inp_F; assign Cout=inp_I&inp_F; endmodule
module half(J,T,Cout,Sum); input J,T; output Cout,Sum; assign Sum=J ^ T; assign Cout=J&T;
module half(inp_N,inp_Z,Cout,Sum); input inp_N,inp_Z; output Cout,Sum; assign Sum=inp_N ^ inp_Z; assign Cout=inp_N&inp_Z; endmodule
module half(K,D,Cout,Sum); input K,D; output Cout,Sum; assign Sum=K ^ D; assign Cout=K&D; endmodule
module half(B,D,Cout,Sum); input B,D; output Cout,Sum; assign Sum=B ^ D; assign Cout=B&D;
module half(H,J,Cout,Sum); input H,J; output Cout,Sum; assign Sum=H ^ J; assign Cout=H&J; endmodule
module half(R,Z,Cout,Sum); input R,Z; output Cout,Sum; assign Sum=R ^ Z; assign Cout=R&Z;
module half(inp_O,inp_K,Cout,Sum); input inp_O,inp_K; output Cout,Sum; assign Sum=inp_O ^ inp_K; assign Cout=inp_O&inp_K; endmodule
module half(inp_H,inp_F,Cout,Sum); input inp_H,inp_F; output Cout,Sum; assign Sum=inp_H ^ inp_F; assign Cout=inp_H&inp_F;
module half(inp_Z,inp_F,Cout,Sum); input inp_Z,inp_F; output Cout,Sum; assign Sum=inp_Z ^ inp_F; assign Cout=inp_Z&inp_F; endmodule
module half(inp_I,inp_M,Cout,Sum); input inp_I,inp_M; output Cout,Sum; assign Sum=inp_I ^ inp_M; assign Cout=inp_I&inp_M;
module half(inp_S,inp_Z,Cout,Sum); input inp_S,inp_Z; output Cout,Sum; assign Sum=inp_S ^ inp_Z; assign Cout=inp_S&inp_Z;
module half(inp_G,inp_A,Cout,Sum); input inp_G,inp_A; output Cout,Sum; assign Sum=inp_G ^ inp_A; assign Cout=inp_G&inp_A; endmodule
module half(inp_T,inp_F,Cout,Sum); input inp_T,inp_F; output Cout,Sum; assign Sum=inp_T ^ inp_F; assign Cout=inp_T&inp_F; endmodule
module half(A,I,Cout,Sum); input A,I; output Cout,Sum; assign Sum=A ^ I; assign Cout=A&I; endmodule
module half(A,K,Cout,Sum); input A,K; output Cout,Sum; assign Sum=A ^ K; assign Cout=A&K; endmodule
module half(inp_O,inp_A,Cout,Sum); input inp_O,inp_A; output Cout,Sum; assign Sum=inp_O ^ inp_A; assign Cout=inp_O&inp_A;
module half(P,T,Cout,Sum); input P,T; output Cout,Sum; assign Sum=P ^ T; assign Cout=P&T;
module half(inp_T,inp_I,Cout,Sum); input inp_T,inp_I; output Cout,Sum; assign Sum=inp_T ^ inp_I; assign Cout=inp_T&inp_I;
module half(inp_J,inp_O,Cout,Sum); input inp_J,inp_O; output Cout,Sum; assign Sum=inp_J ^ inp_O; assign Cout=inp_J&inp_O;
module half(S,O,Cout,Sum); input S,O; output Cout,Sum; assign Sum=S ^ O; assign Cout=S&O;
module half(inp_J,inp_B,Cout,Sum); input inp_J,inp_B; output Cout,Sum; assign Sum=inp_J ^ inp_B; assign Cout=inp_J&inp_B; endmodule
module half(inp_A,inp_V,Cout,Sum); input inp_A,inp_V; output Cout,Sum; assign Sum=inp_A ^ inp_V; assign Cout=inp_A&inp_V; endmodule
module half(inp_J,inp_I,Cout,Sum); input inp_J,inp_I; output Cout,Sum; assign Sum=inp_J ^ inp_I; assign Cout=inp_J&inp_I; endmodule
module half(inp_I,inp_J,Cout,Sum); input inp_I,inp_J; output Cout,Sum; assign Sum=inp_I ^ inp_J; assign Cout=inp_I&inp_J; endmodule
module half(Y,B,Cout,Sum); input Y,B; output Cout,Sum; assign Sum=Y ^ B; assign Cout=Y&B;
module half(inp_P,inp_Y,Cout,Sum); input inp_P,inp_Y; output Cout,Sum; assign Sum=inp_P ^ inp_Y; assign Cout=inp_P&inp_Y;
module half(O,N,Cout,Sum); input O,N; output Cout,Sum; assign Sum=O ^ N; assign Cout=O&N;
module half(B,X,Cout,Sum); input B,X; output Cout,Sum; assign Sum=B ^ X; assign Cout=B&X;
module half(C,B,Cout,Sum); input C,B; output Cout,Sum; assign Sum=C ^ B; assign Cout=C&B; endmodule
module half(inp_Q,inp_D,Cout,Sum); input inp_Q,inp_D; output Cout,Sum; assign Sum=inp_Q ^ inp_D; assign Cout=inp_Q&inp_D; endmodule
module half(D,P,Cout,Sum); input D,P; output Cout,Sum; assign Sum=D ^ P; assign Cout=D&P;
module half(V,S,Cout,Sum); input V,S; output Cout,Sum; assign Sum=V ^ S; assign Cout=V&S; endmodule
module half(inp_M,inp_M,Cout,Sum); input inp_M,inp_M; output Cout,Sum; assign Sum=inp_M ^ inp_M; assign Cout=inp_M&inp_M; endmodule
module half(E,X,Cout,Sum); input E,X; output Cout,Sum; assign Sum=E ^ X; assign Cout=E&X; endmodule
module half(H,F,Cout,Sum); input H,F; output Cout,Sum; assign Sum=H ^ F; assign Cout=H&F;
module half(inp_W,inp_N,Cout,Sum); input inp_W,inp_N; output Cout,Sum; assign Sum=inp_W ^ inp_N; assign Cout=inp_W&inp_N; endmodule
module half(inp_J,inp_C,Cout,Sum); input inp_J,inp_C; output Cout,Sum; assign Sum=inp_J ^ inp_C; assign Cout=inp_J&inp_C; endmodule
module half(inp_K,inp_G,Cout,Sum); input inp_K,inp_G; output Cout,Sum; assign Sum=inp_K ^ inp_G; assign Cout=inp_K&inp_G; endmodule
module half(inp_X,inp_C,Cout,Sum); input inp_X,inp_C; output Cout,Sum; assign Sum=inp_X ^ inp_C; assign Cout=inp_X&inp_C;
module half(U,E,Cout,Sum); input U,E; output Cout,Sum; assign Sum=U ^ E; assign Cout=U&E;
module half(T,I,Cout,Sum); input T,I; output Cout,Sum; assign Sum=T ^ I; assign Cout=T&I;
module half(inp_Q,inp_A,Cout,Sum); input inp_Q,inp_A; output Cout,Sum; assign Sum=inp_Q ^ inp_A; assign Cout=inp_Q&inp_A;
module half(inp_Y,inp_W,Cout,Sum); input inp_Y,inp_W; output Cout,Sum; assign Sum=inp_Y ^ inp_W; assign Cout=inp_Y&inp_W; endmodule
module half(R,G,Cout,Sum); input R,G; output Cout,Sum; assign Sum=R ^ G; assign Cout=R&G; endmodule
module half(U,Q,Cout,Sum); input U,Q; output Cout,Sum; assign Sum=U ^ Q; assign Cout=U&Q; endmodule
module half(inp_X,inp_H,Cout,Sum); input inp_X,inp_H; output Cout,Sum; assign Sum=inp_X ^ inp_H; assign Cout=inp_X&inp_H;
module half(I,Q,Cout,Sum); input I,Q; output Cout,Sum; assign Sum=I ^ Q; assign Cout=I&Q;
module half(J,G,Cout,Sum); input J,G; output Cout,Sum; assign Sum=J ^ G; assign Cout=J&G;
module half(inp_K,inp_C,Cout,Sum); input inp_K,inp_C; output Cout,Sum; assign Sum=inp_K ^ inp_C; assign Cout=inp_K&inp_C; endmodule
module half(P,F,Cout,Sum); input P,F; output Cout,Sum; assign Sum=P ^ F; assign Cout=P&F; endmodule
module half(inp_K,inp_F,Cout,Sum); input inp_K,inp_F; output Cout,Sum; assign Sum=inp_K ^ inp_F; assign Cout=inp_K&inp_F; endmodule
module half(U,V,Cout,Sum); input U,V; output Cout,Sum; assign Sum=U ^ V; assign Cout=U&V;
module half(inp_O,inp_Z,Cout,Sum); input inp_O,inp_Z; output Cout,Sum; assign Sum=inp_O ^ inp_Z; assign Cout=inp_O&inp_Z;
module half(inp_B,inp_W,Cout,Sum); input inp_B,inp_W; output Cout,Sum; assign Sum=inp_B ^ inp_W; assign Cout=inp_B&inp_W;
module half(R,A,Cout,Sum); input R,A; output Cout,Sum; assign Sum=R ^ A; assign Cout=R&A;
module half(inp_Z,inp_J,Cout,Sum); input inp_Z,inp_J; output Cout,Sum; assign Sum=inp_Z ^ inp_J; assign Cout=inp_Z&inp_J;
module half(Y,Q,Cout,Sum); input Y,Q; output Cout,Sum; assign Sum=Y ^ Q; assign Cout=Y&Q; endmodule
module half(inp_I,inp_U,Cout,Sum); input inp_I,inp_U; output Cout,Sum; assign Sum=inp_I ^ inp_U; assign Cout=inp_I&inp_U; endmodule
module half(inp_S,inp_R,Cout,Sum); input inp_S,inp_R; output Cout,Sum; assign Sum=inp_S ^ inp_R; assign Cout=inp_S&inp_R;
module half(S,Z,Cout,Sum); input S,Z; output Cout,Sum; assign Sum=S ^ Z; assign Cout=S&Z; endmodule
module half(R,P,Cout,Sum); input R,P; output Cout,Sum; assign Sum=R ^ P; assign Cout=R&P; endmodule
module half(inp_L,inp_A,Cout,Sum); input inp_L,inp_A; output Cout,Sum; assign Sum=inp_L ^ inp_A; assign Cout=inp_L&inp_A;
module half(inp_U,inp_B,Cout,Sum); input inp_U,inp_B; output Cout,Sum; assign Sum=inp_U ^ inp_B; assign Cout=inp_U&inp_B;
module half(inp_P,inp_V,Cout,Sum); input inp_P,inp_V; output Cout,Sum; assign Sum=inp_P ^ inp_V; assign Cout=inp_P&inp_V;
module half(inp_Y,inp_X,Cout,Sum); input inp_Y,inp_X; output Cout,Sum; assign Sum=inp_Y ^ inp_X; assign Cout=inp_Y&inp_X; endmodule
module half(inp_T,inp_L,Cout,Sum); input inp_T,inp_L; output Cout,Sum; assign Sum=inp_T ^ inp_L; assign Cout=inp_T&inp_L; endmodule
module half(Y,A,Cout,Sum); input Y,A; output Cout,Sum; assign Sum=Y ^ A; assign Cout=Y&A; endmodule
module half(inp_B,inp_L,Cout,Sum); input inp_B,inp_L; output Cout,Sum; assign Sum=inp_B ^ inp_L; assign Cout=inp_B&inp_L; endmodule
module half(inp_Q,inp_W,Cout,Sum); input inp_Q,inp_W; output Cout,Sum; assign Sum=inp_Q ^ inp_W; assign Cout=inp_Q&inp_W;
module half(inp_H,inp_E,Cout,Sum); input inp_H,inp_E; output Cout,Sum; assign Sum=inp_H ^ inp_E; assign Cout=inp_H&inp_E;
module half(V,T,Cout,Sum); input V,T; output Cout,Sum; assign Sum=V ^ T; assign Cout=V&T;
module half(E,M,Cout,Sum); input E,M; output Cout,Sum; assign Sum=E ^ M; assign Cout=E&M;
module half(Q,F,Cout,Sum); input Q,F; output Cout,Sum; assign Sum=Q ^ F; assign Cout=Q&F; endmodule
module half(O,R,Cout,Sum); input O,R; output Cout,Sum; assign Sum=O ^ R; assign Cout=O&R; endmodule
module half(inp_V,inp_A,Cout,Sum); input inp_V,inp_A; output Cout,Sum; assign Sum=inp_V ^ inp_A; assign Cout=inp_V&inp_A;
module half(inp_X,inp_N,Cout,Sum); input inp_X,inp_N; output Cout,Sum; assign Sum=inp_X ^ inp_N; assign Cout=inp_X&inp_N;
module half(inp_L,inp_A,Cout,Sum); input inp_L,inp_A; output Cout,Sum; assign Sum=inp_L ^ inp_A; assign Cout=inp_L&inp_A; endmodule
module half(A,K,Cout,Sum); input A,K; output Cout,Sum; assign Sum=A ^ K; assign Cout=A&K;
module half(O,K,Cout,Sum); input O,K; output Cout,Sum; assign Sum=O ^ K; assign Cout=O&K;
module half(inp_W,inp_I,Cout,Sum); input inp_W,inp_I; output Cout,Sum; assign Sum=inp_W ^ inp_I; assign Cout=inp_W&inp_I; endmodule
module half(inp_M,inp_H,Cout,Sum); input inp_M,inp_H; output Cout,Sum; assign Sum=inp_M ^ inp_H; assign Cout=inp_M&inp_H; endmodule
module half(S,W,Cout,Sum); input S,W; output Cout,Sum; assign Sum=S ^ W; assign Cout=S&W;
module half(inp_M,inp_P,Cout,Sum); input inp_M,inp_P; output Cout,Sum; assign Sum=inp_M ^ inp_P; assign Cout=inp_M&inp_P; endmodule
module half(inp_D,inp_Q,Cout,Sum); input inp_D,inp_Q; output Cout,Sum; assign Sum=inp_D ^ inp_Q; assign Cout=inp_D&inp_Q; endmodule
module half(inp_G,inp_R,Cout,Sum); input inp_G,inp_R; output Cout,Sum; assign Sum=inp_G ^ inp_R; assign Cout=inp_G&inp_R;
module half(R,Q,Cout,Sum); input R,Q; output Cout,Sum; assign Sum=R ^ Q; assign Cout=R&Q;
module half(inp_K,inp_U,Cout,Sum); input inp_K,inp_U; output Cout,Sum; assign Sum=inp_K ^ inp_U; assign Cout=inp_K&inp_U; endmodule
module half(I,J,Cout,Sum); input I,J; output Cout,Sum; assign Sum=I ^ J; assign Cout=I&J;
module half(R,X,Cout,Sum); input R,X; output Cout,Sum; assign Sum=R ^ X; assign Cout=R&X; endmodule
module half(F,E,Cout,Sum); input F,E; output Cout,Sum; assign Sum=F ^ E; assign Cout=F&E;
module half(N,E,Cout,Sum); input N,E; output Cout,Sum; assign Sum=N ^ E; assign Cout=N&E;
module half(inp_L,inp_Z,Cout,Sum); input inp_L,inp_Z; output Cout,Sum; assign Sum=inp_L ^ inp_Z; assign Cout=inp_L&inp_Z;
module half(A,M,Cout,Sum); input A,M; output Cout,Sum; assign Sum=A ^ M; assign Cout=A&M;
module half(inp_O,inp_Y,Cout,Sum); input inp_O,inp_Y; output Cout,Sum; assign Sum=inp_O ^ inp_Y; assign Cout=inp_O&inp_Y; endmodule
module half(inp_C,inp_G,Cout,Sum); input inp_C,inp_G; output Cout,Sum; assign Sum=inp_C ^ inp_G; assign Cout=inp_C&inp_G; endmodule
module half(K,M,Cout,Sum); input K,M; output Cout,Sum; assign Sum=K ^ M; assign Cout=K&M; endmodule
module half(S,W,Cout,Sum); input S,W; output Cout,Sum; assign Sum=S ^ W; assign Cout=S&W;
module half(inp_B,inp_N,Cout,Sum); input inp_B,inp_N; output Cout,Sum; assign Sum=inp_B ^ inp_N; assign Cout=inp_B&inp_N; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module half(inp_J,inp_S,Cout,Sum); input inp_J,inp_S; output Cout,Sum; assign Sum=inp_J ^ inp_S; assign Cout=inp_J&inp_S; endmodule
module DFF(S,S,clk,rst,P);output reg S;output S;input clk, rst;input P;assign S = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= P;end endmodule
module DFF(B,B,clk,rst,Y);output reg B;output B;input clk, rst;input Y;assign B = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= Y;end endmodule
module DFF(C,W,clk,rst,S);output reg C;output W;input clk, rst;input S;assign W = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= S;end endmodule
module DFF(E,W,clk,rst,N);output reg E;output W;input clk, rst;input N;assign W = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= N;end endmodule
module DFF(G,B,clk,rst,Q);output reg G;output B;input clk, rst;input Q;assign B = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= Q;end endmodule
module DFF(V,Q,clk,rst,L);output reg V;output Q;input clk, rst;input L;assign Q = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= L;end endmodule
module DFF(H,P,clk,rst,V);output reg H;output P;input clk, rst;input V;assign P = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= V;end endmodule
module DFF(O,Z,clk,rst,J);output reg O;output Z;input clk, rst;input J;assign Z = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= J;end endmodule
module DFF(Q,R,clk,rst,C);output reg Q;output R;input clk, rst;input C;assign R = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= C;end endmodule
module DFF(I,P,clk,rst,C);output reg I;output P;input clk, rst;input C;assign P = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= C;end endmodule
module DFF(R,C,clk,rst,N);output reg R;output C;input clk, rst;input N;assign C = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= N;end endmodule
module DFF(U,F,clk,rst,S);output reg U;output F;input clk, rst;input S;assign F = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= S;end endmodule
module DFF(R,X,clk,rst,L);output reg R;output X;input clk, rst;input L;assign X = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= L;end endmodule
module DFF(Y,F,clk,rst,C);output reg Y;output F;input clk, rst;input C;assign F = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= C;end endmodule
module DFF(M,E,clk,rst,O);output reg M;output E;input clk, rst;input O;assign E = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= O;end endmodule
module DFF(A,S,clk,rst,L);output reg A;output S;input clk, rst;input L;assign S = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= L;end endmodule
module DFF(D,M,clk,rst,N);output reg D;output M;input clk, rst;input N;assign M = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= N;end endmodule
module DFF(S,D,clk,rst,G);output reg S;output D;input clk, rst;input G;assign D = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= G;end endmodule
module DFF(O,H,clk,rst,D);output reg O;output H;input clk, rst;input D;assign H = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= D;end endmodule
module DFF(I,F,clk,rst,R);output reg I;output F;input clk, rst;input R;assign F = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= R;end endmodule
module DFF(J,L,clk,rst,P);output reg J;output L;input clk, rst;input P;assign L = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= P;end endmodule
module DFF(Z,Q,clk,rst,A);output reg Z;output Q;input clk, rst;input A;assign Q = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= A;end endmodule
module DFF(R,V,clk,rst,N);output reg R;output V;input clk, rst;input N;assign V = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= N;end endmodule
module DFF(O,J,clk,rst,Z);output reg O;output J;input clk, rst;input Z;assign J = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= Z;end endmodule
module DFF(A,L,clk,rst,Z);output reg A;output L;input clk, rst;input Z;assign L = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= Z;end endmodule
module DFF(W,A,clk,rst,Q);output reg W;output A;input clk, rst;input Q;assign A = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Q;end endmodule
module DFF(L,B,clk,rst,T);output reg L;output B;input clk, rst;input T;assign B = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= T;end endmodule
module DFF(A,X,clk,rst,T);output reg A;output X;input clk, rst;input T;assign X = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= T;end endmodule
module DFF(F,N,clk,rst,V);output reg F;output N;input clk, rst;input V;assign N = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= V;end endmodule
module DFF(A,E,clk,rst,M);output reg A;output E;input clk, rst;input M;assign E = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= M;end endmodule
module DFF(U,D,clk,rst,S);output reg U;output D;input clk, rst;input S;assign D = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= S;end endmodule
module DFF(O,L,clk,rst,A);output reg O;output L;input clk, rst;input A;assign L = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= A;end endmodule
module DFF(Q,Z,clk,rst,O);output reg Q;output Z;input clk, rst;input O;assign Z = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= O;end endmodule
module DFF(T,Q,clk,rst,A);output reg T;output Q;input clk, rst;input A;assign Q = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= A;end endmodule
module DFF(V,I,clk,rst,S);output reg V;output I;input clk, rst;input S;assign I = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= S;end endmodule
module DFF(Z,H,clk,rst,Y);output reg Z;output H;input clk, rst;input Y;assign H = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= Y;end endmodule
module DFF(P,Q,clk,rst,K);output reg P;output Q;input clk, rst;input K;assign Q = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= K;end endmodule
module DFF(S,W,clk,rst,D);output reg S;output W;input clk, rst;input D;assign W = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= D;end endmodule
module DFF(L,U,clk,rst,C);output reg L;output U;input clk, rst;input C;assign U = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= C;end endmodule
module DFF(J,U,clk,rst,E);output reg J;output U;input clk, rst;input E;assign U = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= E;end endmodule
module DFF(P,R,clk,rst,X);output reg P;output R;input clk, rst;input X;assign R = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= X;end endmodule
module DFF(R,V,clk,rst,Z);output reg R;output V;input clk, rst;input Z;assign V = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= Z;end endmodule
module DFF(Z,N,clk,rst,G);output reg Z;output N;input clk, rst;input G;assign N = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= G;end endmodule
module DFF(W,I,clk,rst,Q);output reg W;output I;input clk, rst;input Q;assign I = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Q;end endmodule
module DFF(F,O,clk,rst,D);output reg F;output O;input clk, rst;input D;assign O = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= D;end endmodule
module DFF(K,U,clk,rst,R);output reg K;output U;input clk, rst;input R;assign U = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= R;end endmodule
module DFF(U,I,clk,rst,T);output reg U;output I;input clk, rst;input T;assign I = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= T;end endmodule
module DFF(P,T,clk,rst,M);output reg P;output T;input clk, rst;input M;assign T = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= M;end endmodule
module DFF(E,B,clk,rst,L);output reg E;output B;input clk, rst;input L;assign B = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= L;end endmodule
module DFF(N,O,clk,rst,J);output reg N;output O;input clk, rst;input J;assign O = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= J;end endmodule
module DFF(X,J,clk,rst,C);output reg X;output J;input clk, rst;input C;assign J = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= C;end endmodule
module DFF(A,O,clk,rst,T);output reg A;output O;input clk, rst;input T;assign O = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= T;end endmodule
module DFF(X,C,clk,rst,N);output reg X;output C;input clk, rst;input N;assign C = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= N;end endmodule
module DFF(V,Q,clk,rst,X);output reg V;output Q;input clk, rst;input X;assign Q = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= X;end endmodule
module DFF(E,V,clk,rst,B);output reg E;output V;input clk, rst;input B;assign V = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= B;end endmodule
module DFF(X,O,clk,rst,E);output reg X;output O;input clk, rst;input E;assign O = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= E;end endmodule
module DFF(W,A,clk,rst,G);output reg W;output A;input clk, rst;input G;assign A = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= G;end endmodule
module DFF(D,S,clk,rst,W);output reg D;output S;input clk, rst;input W;assign S = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= W;end endmodule
module DFF(H,L,clk,rst,Z);output reg H;output L;input clk, rst;input Z;assign L = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= Z;end endmodule
module DFF(V,B,clk,rst,X);output reg V;output B;input clk, rst;input X;assign B = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= X;end endmodule
module DFF(K,F,clk,rst,E);output reg K;output F;input clk, rst;input E;assign F = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= E;end endmodule
module DFF(X,Q,clk,rst,E);output reg X;output Q;input clk, rst;input E;assign Q = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= E;end endmodule
module DFF(M,I,clk,rst,L);output reg M;output I;input clk, rst;input L;assign I = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= L;end endmodule
module DFF(P,V,clk,rst,M);output reg P;output V;input clk, rst;input M;assign V = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= M;end endmodule
module DFF(Q,R,clk,rst,D);output reg Q;output R;input clk, rst;input D;assign R = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= D;end endmodule
module DFF(H,U,clk,rst,P);output reg H;output U;input clk, rst;input P;assign U = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= P;end endmodule
module DFF(H,X,clk,rst,L);output reg H;output X;input clk, rst;input L;assign X = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= L;end endmodule
module DFF(U,K,clk,rst,Y);output reg U;output K;input clk, rst;input Y;assign K = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= Y;end endmodule
module DFF(M,G,clk,rst,O);output reg M;output G;input clk, rst;input O;assign G = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= O;end endmodule
module DFF(U,E,clk,rst,L);output reg U;output E;input clk, rst;input L;assign E = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= L;end endmodule
module DFF(N,C,clk,rst,D);output reg N;output C;input clk, rst;input D;assign C = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= D;end endmodule
module DFF(Z,S,clk,rst,N);output reg Z;output S;input clk, rst;input N;assign S = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= N;end endmodule
module DFF(A,S,clk,rst,L);output reg A;output S;input clk, rst;input L;assign S = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= L;end endmodule
module DFF(I,B,clk,rst,F);output reg I;output B;input clk, rst;input F;assign B = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= F;end endmodule
module DFF(A,G,clk,rst,C);output reg A;output G;input clk, rst;input C;assign G = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= C;end endmodule
module DFF(Q,I,clk,rst,H);output reg Q;output I;input clk, rst;input H;assign I = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= H;end endmodule
module DFF(P,G,clk,rst,F);output reg P;output G;input clk, rst;input F;assign G = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= F;end endmodule
module DFF(D,U,clk,rst,V);output reg D;output U;input clk, rst;input V;assign U = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= V;end endmodule
module DFF(D,Z,clk,rst,I);output reg D;output Z;input clk, rst;input I;assign Z = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= I;end endmodule
module DFF(Z,L,clk,rst,B);output reg Z;output L;input clk, rst;input B;assign L = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= B;end endmodule
module DFF(P,W,clk,rst,C);output reg P;output W;input clk, rst;input C;assign W = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= C;end endmodule
module DFF(T,C,clk,rst,V);output reg T;output C;input clk, rst;input V;assign C = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= V;end endmodule
module DFF(A,T,clk,rst,E);output reg A;output T;input clk, rst;input E;assign T = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= E;end endmodule
module DFF(Q,R,clk,rst,N);output reg Q;output R;input clk, rst;input N;assign R = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= N;end endmodule
module DFF(D,F,clk,rst,G);output reg D;output F;input clk, rst;input G;assign F = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= G;end endmodule
module DFF(F,P,clk,rst,I);output reg F;output P;input clk, rst;input I;assign P = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= I;end endmodule
module DFF(G,E,clk,rst,O);output reg G;output E;input clk, rst;input O;assign E = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= O;end endmodule
module DFF(B,C,clk,rst,Z);output reg B;output C;input clk, rst;input Z;assign C = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= Z;end endmodule
module DFF(P,R,clk,rst,K);output reg P;output R;input clk, rst;input K;assign R = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= K;end endmodule
module DFF(W,D,clk,rst,G);output reg W;output D;input clk, rst;input G;assign D = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= G;end endmodule
module DFF(Q,D,clk,rst,X);output reg Q;output D;input clk, rst;input X;assign D = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= X;end endmodule
module DFF(R,O,clk,rst,I);output reg R;output O;input clk, rst;input I;assign O = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= I;end endmodule
module DFF(I,W,clk,rst,N);output reg I;output W;input clk, rst;input N;assign W = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= N;end endmodule
module DFF(R,I,clk,rst,L);output reg R;output I;input clk, rst;input L;assign I = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= L;end endmodule
module DFF(G,D,clk,rst,R);output reg G;output D;input clk, rst;input R;assign D = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= R;end endmodule
module DFF(V,L,clk,rst,W);output reg V;output L;input clk, rst;input W;assign L = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= W;end endmodule
module DFF(U,C,clk,rst,O);output reg U;output C;input clk, rst;input O;assign C = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= O;end endmodule
module DFF(P,J,clk,rst,T);output reg P;output J;input clk, rst;input T;assign J = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= T;end endmodule
module DFF(Y,M,clk,rst,B);output reg Y;output M;input clk, rst;input B;assign M = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= B;end endmodule
module DFF(G,V,clk,rst,A);output reg G;output V;input clk, rst;input A;assign V = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= A;end endmodule
module DFF(M,X,clk,rst,V);output reg M;output X;input clk, rst;input V;assign X = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= V;end endmodule
module DFF(F,D,clk,rst,J);output reg F;output D;input clk, rst;input J;assign D = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= J;end endmodule
module DFF(Z,Y,clk,rst,D);output reg Z;output Y;input clk, rst;input D;assign Y = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= D;end endmodule
module DFF(F,N,clk,rst,Q);output reg F;output N;input clk, rst;input Q;assign N = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= Q;end endmodule
module DFF(Y,S,clk,rst,Y);output reg Y;output S;input clk, rst;input Y;assign S = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= Y;end endmodule
module DFF(D,O,clk,rst,P);output reg D;output O;input clk, rst;input P;assign O = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= P;end endmodule
module DFF(R,X,clk,rst,A);output reg R;output X;input clk, rst;input A;assign X = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= A;end endmodule
module DFF(S,A,clk,rst,J);output reg S;output A;input clk, rst;input J;assign A = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= J;end endmodule
module DFF(E,A,clk,rst,M);output reg E;output A;input clk, rst;input M;assign A = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= M;end endmodule
module DFF(U,G,clk,rst,L);output reg U;output G;input clk, rst;input L;assign G = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= L;end endmodule
module DFF(Y,O,clk,rst,Z);output reg Y;output O;input clk, rst;input Z;assign O = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= Z;end endmodule
module DFF(S,N,clk,rst,J);output reg S;output N;input clk, rst;input J;assign N = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= J;end endmodule
module DFF(S,M,clk,rst,J);output reg S;output M;input clk, rst;input J;assign M = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= J;end endmodule
module DFF(H,M,clk,rst,L);output reg H;output M;input clk, rst;input L;assign M = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= L;end endmodule
module DFF(R,K,clk,rst,D);output reg R;output K;input clk, rst;input D;assign K = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= D;end endmodule
module DFF(V,C,clk,rst,J);output reg V;output C;input clk, rst;input J;assign C = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= J;end endmodule
module DFF(E,L,clk,rst,K);output reg E;output L;input clk, rst;input K;assign L = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= K;end endmodule
module DFF(K,E,clk,rst,V);output reg K;output E;input clk, rst;input V;assign E = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= V;end endmodule
module DFF(R,O,clk,rst,J);output reg R;output O;input clk, rst;input J;assign O = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= J;end endmodule
module DFF(C,Y,clk,rst,I);output reg C;output Y;input clk, rst;input I;assign Y = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= I;end endmodule
module DFF(V,J,clk,rst,T);output reg V;output J;input clk, rst;input T;assign J = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= T;end endmodule
module DFF(E,A,clk,rst,S);output reg E;output A;input clk, rst;input S;assign A = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= S;end endmodule
module DFF(U,J,clk,rst,D);output reg U;output J;input clk, rst;input D;assign J = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(W,C,clk,rst,L);output reg W;output C;input clk, rst;input L;assign C = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= L;end endmodule
module DFF(H,V,clk,rst,U);output reg H;output V;input clk, rst;input U;assign V = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= U;end endmodule
module DFF(C,N,clk,rst,H);output reg C;output N;input clk, rst;input H;assign N = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= H;end endmodule
module DFF(F,E,clk,rst,U);output reg F;output E;input clk, rst;input U;assign E = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= U;end endmodule
module DFF(A,K,clk,rst,D);output reg A;output K;input clk, rst;input D;assign K = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= D;end endmodule
module DFF(M,B,clk,rst,K);output reg M;output B;input clk, rst;input K;assign B = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= K;end endmodule
module DFF(L,F,clk,rst,X);output reg L;output F;input clk, rst;input X;assign F = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= X;end endmodule
module DFF(S,U,clk,rst,E);output reg S;output U;input clk, rst;input E;assign U = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= E;end endmodule
module DFF(F,V,clk,rst,Z);output reg F;output V;input clk, rst;input Z;assign V = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= Z;end endmodule
module DFF(Y,O,clk,rst,X);output reg Y;output O;input clk, rst;input X;assign O = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= X;end endmodule
module DFF(G,D,clk,rst,R);output reg G;output D;input clk, rst;input R;assign D = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= R;end endmodule
module DFF(Q,H,clk,rst,V);output reg Q;output H;input clk, rst;input V;assign H = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= V;end endmodule
module DFF(A,M,clk,rst,X);output reg A;output M;input clk, rst;input X;assign M = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= X;end endmodule
module DFF(T,J,clk,rst,W);output reg T;output J;input clk, rst;input W;assign J = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= W;end endmodule
module DFF(S,C,clk,rst,Y);output reg S;output C;input clk, rst;input Y;assign C = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= Y;end endmodule
module DFF(K,A,clk,rst,O);output reg K;output A;input clk, rst;input O;assign A = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= O;end endmodule
module DFF(U,X,clk,rst,T);output reg U;output X;input clk, rst;input T;assign X = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= T;end endmodule
module DFF(Y,T,clk,rst,T);output reg Y;output T;input clk, rst;input T;assign T = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= T;end endmodule
module DFF(G,L,clk,rst,I);output reg G;output L;input clk, rst;input I;assign L = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= I;end endmodule
module DFF(B,Q,clk,rst,W);output reg B;output Q;input clk, rst;input W;assign Q = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= W;end endmodule
module DFF(R,F,clk,rst,O);output reg R;output F;input clk, rst;input O;assign F = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= O;end endmodule
module DFF(Z,J,clk,rst,P);output reg Z;output J;input clk, rst;input P;assign J = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= P;end endmodule
module DFF(H,C,clk,rst,V);output reg H;output C;input clk, rst;input V;assign C = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= V;end endmodule
module DFF(A,I,clk,rst,B);output reg A;output I;input clk, rst;input B;assign I = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= B;end endmodule
module DFF(O,M,clk,rst,J);output reg O;output M;input clk, rst;input J;assign M = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= J;end endmodule
module DFF(L,T,clk,rst,A);output reg L;output T;input clk, rst;input A;assign T = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= A;end endmodule
module DFF(G,W,clk,rst,N);output reg G;output W;input clk, rst;input N;assign W = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= N;end endmodule
module DFF(K,J,clk,rst,E);output reg K;output J;input clk, rst;input E;assign J = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= E;end endmodule
module DFF(P,S,clk,rst,N);output reg P;output S;input clk, rst;input N;assign S = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= N;end endmodule
module DFF(A,E,clk,rst,U);output reg A;output E;input clk, rst;input U;assign E = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= U;end endmodule
module DFF(I,F,clk,rst,Y);output reg I;output F;input clk, rst;input Y;assign F = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= Y;end endmodule
module DFF(O,Q,clk,rst,T);output reg O;output Q;input clk, rst;input T;assign Q = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= T;end endmodule
module DFF(T,C,clk,rst,Q);output reg T;output C;input clk, rst;input Q;assign C = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Q;end endmodule
module DFF(V,Z,clk,rst,D);output reg V;output Z;input clk, rst;input D;assign Z = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= D;end endmodule
module DFF(Q,L,clk,rst,K);output reg Q;output L;input clk, rst;input K;assign L = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= K;end endmodule
module DFF(K,L,clk,rst,R);output reg K;output L;input clk, rst;input R;assign L = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= R;end endmodule
module DFF(U,I,clk,rst,P);output reg U;output I;input clk, rst;input P;assign I = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= P;end endmodule
module DFF(R,Q,clk,rst,F);output reg R;output Q;input clk, rst;input F;assign Q = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= F;end endmodule
module DFF(L,V,clk,rst,D);output reg L;output V;input clk, rst;input D;assign V = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= D;end endmodule
module DFF(S,B,clk,rst,F);output reg S;output B;input clk, rst;input F;assign B = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= F;end endmodule
module DFF(Q,R,clk,rst,L);output reg Q;output R;input clk, rst;input L;assign R = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= L;end endmodule
module DFF(W,I,clk,rst,R);output reg W;output I;input clk, rst;input R;assign I = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= R;end endmodule
module DFF(K,T,clk,rst,P);output reg K;output T;input clk, rst;input P;assign T = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= P;end endmodule
module DFF(T,Y,clk,rst,M);output reg T;output Y;input clk, rst;input M;assign Y = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= M;end endmodule
module DFF(L,N,clk,rst,A);output reg L;output N;input clk, rst;input A;assign N = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= A;end endmodule
module DFF(B,W,clk,rst,H);output reg B;output W;input clk, rst;input H;assign W = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= H;end endmodule
module DFF(A,F,clk,rst,U);output reg A;output F;input clk, rst;input U;assign F = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= U;end endmodule
module DFF(N,F,clk,rst,U);output reg N;output F;input clk, rst;input U;assign F = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= U;end endmodule
module DFF(V,A,clk,rst,U);output reg V;output A;input clk, rst;input U;assign A = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= U;end endmodule
module DFF(M,V,clk,rst,I);output reg M;output V;input clk, rst;input I;assign V = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= I;end endmodule
module DFF(Q,A,clk,rst,L);output reg Q;output A;input clk, rst;input L;assign A = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= L;end endmodule
module DFF(C,R,clk,rst,X);output reg C;output R;input clk, rst;input X;assign R = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= X;end endmodule
module DFF(Y,J,clk,rst,A);output reg Y;output J;input clk, rst;input A;assign J = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= A;end endmodule
module DFF(D,S,clk,rst,I);output reg D;output S;input clk, rst;input I;assign S = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= I;end endmodule
module DFF(K,U,clk,rst,R);output reg K;output U;input clk, rst;input R;assign U = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= R;end endmodule
module DFF(U,J,clk,rst,C);output reg U;output J;input clk, rst;input C;assign J = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= C;end endmodule
module DFF(G,A,clk,rst,C);output reg G;output A;input clk, rst;input C;assign A = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= C;end endmodule
module DFF(J,O,clk,rst,H);output reg J;output O;input clk, rst;input H;assign O = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= H;end endmodule
module DFF(H,L,clk,rst,F);output reg H;output L;input clk, rst;input F;assign L = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= F;end endmodule
module DFF(S,U,clk,rst,Y);output reg S;output U;input clk, rst;input Y;assign U = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= Y;end endmodule
module DFF(H,K,clk,rst,E);output reg H;output K;input clk, rst;input E;assign K = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= E;end endmodule
module DFF(L,T,clk,rst,N);output reg L;output T;input clk, rst;input N;assign T = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= N;end endmodule
module DFF(M,X,clk,rst,P);output reg M;output X;input clk, rst;input P;assign X = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= P;end endmodule
module DFF(X,N,clk,rst,U);output reg X;output N;input clk, rst;input U;assign N = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= U;end endmodule
module DFF(B,U,clk,rst,E);output reg B;output U;input clk, rst;input E;assign U = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= E;end endmodule
module DFF(Y,R,clk,rst,J);output reg Y;output R;input clk, rst;input J;assign R = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= J;end endmodule
module DFF(J,I,clk,rst,K);output reg J;output I;input clk, rst;input K;assign I = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= K;end endmodule
module DFF(N,K,clk,rst,H);output reg N;output K;input clk, rst;input H;assign K = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= H;end endmodule
module DFF(P,E,clk,rst,Q);output reg P;output E;input clk, rst;input Q;assign E = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= Q;end endmodule
module DFF(I,R,clk,rst,M);output reg I;output R;input clk, rst;input M;assign R = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= M;end endmodule
module DFF(W,L,clk,rst,S);output reg W;output L;input clk, rst;input S;assign L = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= S;end endmodule
module DFF(E,K,clk,rst,C);output reg E;output K;input clk, rst;input C;assign K = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= C;end endmodule
module DFF(B,K,clk,rst,W);output reg B;output K;input clk, rst;input W;assign K = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= W;end endmodule
module DFF(K,U,clk,rst,N);output reg K;output U;input clk, rst;input N;assign U = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= N;end endmodule
module DFF(T,F,clk,rst,Z);output reg T;output F;input clk, rst;input Z;assign F = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Z;end endmodule
module DFF(P,O,clk,rst,V);output reg P;output O;input clk, rst;input V;assign O = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= V;end endmodule
module DFF(W,P,clk,rst,P);output reg W;output P;input clk, rst;input P;assign P = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= P;end endmodule
module DFF(W,I,clk,rst,E);output reg W;output I;input clk, rst;input E;assign I = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= E;end endmodule
module DFF(F,P,clk,rst,Z);output reg F;output P;input clk, rst;input Z;assign P = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= Z;end endmodule
module DFF(A,M,clk,rst,K);output reg A;output M;input clk, rst;input K;assign M = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= K;end endmodule
module DFF(N,A,clk,rst,R);output reg N;output A;input clk, rst;input R;assign A = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= R;end endmodule
module DFF(X,C,clk,rst,D);output reg X;output C;input clk, rst;input D;assign C = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= D;end endmodule
module DFF(F,S,clk,rst,W);output reg F;output S;input clk, rst;input W;assign S = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= W;end endmodule
module DFF(W,X,clk,rst,U);output reg W;output X;input clk, rst;input U;assign X = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= U;end endmodule
module DFF(X,C,clk,rst,H);output reg X;output C;input clk, rst;input H;assign C = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= H;end endmodule
module DFF(Z,I,clk,rst,U);output reg Z;output I;input clk, rst;input U;assign I = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= U;end endmodule
module DFF(C,J,clk,rst,X);output reg C;output J;input clk, rst;input X;assign J = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= X;end endmodule
module DFF(Q,J,clk,rst,P);output reg Q;output J;input clk, rst;input P;assign J = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= P;end endmodule
module DFF(M,B,clk,rst,J);output reg M;output B;input clk, rst;input J;assign B = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= J;end endmodule
module DFF(H,U,clk,rst,L);output reg H;output U;input clk, rst;input L;assign U = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= L;end endmodule
module DFF(R,M,clk,rst,O);output reg R;output M;input clk, rst;input O;assign M = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= O;end endmodule
module DFF(A,J,clk,rst,F);output reg A;output J;input clk, rst;input F;assign J = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= F;end endmodule
module DFF(G,O,clk,rst,T);output reg G;output O;input clk, rst;input T;assign O = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= T;end endmodule
module DFF(D,S,clk,rst,U);output reg D;output S;input clk, rst;input U;assign S = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= U;end endmodule
module DFF(S,E,clk,rst,V);output reg S;output E;input clk, rst;input V;assign E = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= V;end endmodule
module DFF(H,T,clk,rst,B);output reg H;output T;input clk, rst;input B;assign T = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= B;end endmodule
module DFF(D,C,clk,rst,Y);output reg D;output C;input clk, rst;input Y;assign C = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Y;end endmodule
module DFF(E,D,clk,rst,M);output reg E;output D;input clk, rst;input M;assign D = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= M;end endmodule
module DFF(O,P,clk,rst,N);output reg O;output P;input clk, rst;input N;assign P = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= N;end endmodule
module DFF(I,E,clk,rst,Y);output reg I;output E;input clk, rst;input Y;assign E = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= Y;end endmodule
module DFF(O,Z,clk,rst,F);output reg O;output Z;input clk, rst;input F;assign Z = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= F;end endmodule
module DFF(B,I,clk,rst,X);output reg B;output I;input clk, rst;input X;assign I = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= X;end endmodule
module DFF(M,J,clk,rst,Z);output reg M;output J;input clk, rst;input Z;assign J = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= Z;end endmodule
module DFF(M,Z,clk,rst,H);output reg M;output Z;input clk, rst;input H;assign Z = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= H;end endmodule
module DFF(B,I,clk,rst,S);output reg B;output I;input clk, rst;input S;assign I = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= S;end endmodule
module DFF(R,M,clk,rst,V);output reg R;output M;input clk, rst;input V;assign M = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= V;end endmodule
module DFF(U,M,clk,rst,G);output reg U;output M;input clk, rst;input G;assign M = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= G;end endmodule
module DFF(D,E,clk,rst,Y);output reg D;output E;input clk, rst;input Y;assign E = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Y;end endmodule
module DFF(U,R,clk,rst,D);output reg U;output R;input clk, rst;input D;assign R = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(E,R,clk,rst,P);output reg E;output R;input clk, rst;input P;assign R = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= P;end endmodule
module DFF(X,K,clk,rst,B);output reg X;output K;input clk, rst;input B;assign K = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= B;end endmodule
module DFF(G,L,clk,rst,Y);output reg G;output L;input clk, rst;input Y;assign L = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= Y;end endmodule
module DFF(Q,U,clk,rst,J);output reg Q;output U;input clk, rst;input J;assign U = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= J;end endmodule
module DFF(W,I,clk,rst,K);output reg W;output I;input clk, rst;input K;assign I = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= K;end endmodule
module DFF(P,F,clk,rst,L);output reg P;output F;input clk, rst;input L;assign F = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= L;end endmodule
module DFF(D,J,clk,rst,W);output reg D;output J;input clk, rst;input W;assign J = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= W;end endmodule
module DFF(W,F,clk,rst,O);output reg W;output F;input clk, rst;input O;assign F = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= O;end endmodule
module DFF(K,V,clk,rst,H);output reg K;output V;input clk, rst;input H;assign V = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= H;end endmodule
module DFF(U,T,clk,rst,I);output reg U;output T;input clk, rst;input I;assign T = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= I;end endmodule
module DFF(J,A,clk,rst,L);output reg J;output A;input clk, rst;input L;assign A = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= L;end endmodule
module DFF(K,J,clk,rst,N);output reg K;output J;input clk, rst;input N;assign J = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= N;end endmodule
module DFF(I,S,clk,rst,J);output reg I;output S;input clk, rst;input J;assign S = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= J;end endmodule
module DFF(J,U,clk,rst,E);output reg J;output U;input clk, rst;input E;assign U = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= E;end endmodule
module DFF(P,H,clk,rst,C);output reg P;output H;input clk, rst;input C;assign H = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= C;end endmodule
module DFF(T,G,clk,rst,N);output reg T;output G;input clk, rst;input N;assign G = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= N;end endmodule
module DFF(F,J,clk,rst,P);output reg F;output J;input clk, rst;input P;assign J = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= P;end endmodule
module DFF(M,L,clk,rst,T);output reg M;output L;input clk, rst;input T;assign L = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= T;end endmodule
module DFF(H,Y,clk,rst,M);output reg H;output Y;input clk, rst;input M;assign Y = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= M;end endmodule
module DFF(J,A,clk,rst,P);output reg J;output A;input clk, rst;input P;assign A = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= P;end endmodule
module DFF(S,E,clk,rst,Z);output reg S;output E;input clk, rst;input Z;assign E = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= Z;end endmodule
module DFF(F,U,clk,rst,S);output reg F;output U;input clk, rst;input S;assign U = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= S;end endmodule
module DFF(E,P,clk,rst,G);output reg E;output P;input clk, rst;input G;assign P = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= G;end endmodule
module DFF(X,N,clk,rst,P);output reg X;output N;input clk, rst;input P;assign N = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= P;end endmodule
module DFF(E,X,clk,rst,C);output reg E;output X;input clk, rst;input C;assign X = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= C;end endmodule
module DFF(C,R,clk,rst,P);output reg C;output R;input clk, rst;input P;assign R = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= P;end endmodule
module DFF(N,I,clk,rst,U);output reg N;output I;input clk, rst;input U;assign I = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= U;end endmodule
module DFF(Z,J,clk,rst,K);output reg Z;output J;input clk, rst;input K;assign J = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= K;end endmodule
module DFF(M,O,clk,rst,Q);output reg M;output O;input clk, rst;input Q;assign O = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= Q;end endmodule
module DFF(D,P,clk,rst,Z);output reg D;output P;input clk, rst;input Z;assign P = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Z;end endmodule
module DFF(I,Y,clk,rst,O);output reg I;output Y;input clk, rst;input O;assign Y = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= O;end endmodule
module DFF(O,L,clk,rst,I);output reg O;output L;input clk, rst;input I;assign L = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= I;end endmodule
module DFF(F,J,clk,rst,C);output reg F;output J;input clk, rst;input C;assign J = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= C;end endmodule
module DFF(S,B,clk,rst,X);output reg S;output B;input clk, rst;input X;assign B = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= X;end endmodule
module DFF(N,Z,clk,rst,P);output reg N;output Z;input clk, rst;input P;assign Z = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= P;end endmodule
module DFF(C,O,clk,rst,W);output reg C;output O;input clk, rst;input W;assign O = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= W;end endmodule
module DFF(L,N,clk,rst,P);output reg L;output N;input clk, rst;input P;assign N = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= P;end endmodule
module DFF(E,K,clk,rst,N);output reg E;output K;input clk, rst;input N;assign K = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= N;end endmodule
module DFF(E,S,clk,rst,C);output reg E;output S;input clk, rst;input C;assign S = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= C;end endmodule
module DFF(P,V,clk,rst,E);output reg P;output V;input clk, rst;input E;assign V = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= E;end endmodule
module DFF(S,Z,clk,rst,O);output reg S;output Z;input clk, rst;input O;assign Z = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= O;end endmodule
module DFF(R,Q,clk,rst,U);output reg R;output Q;input clk, rst;input U;assign Q = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= U;end endmodule
module DFF(W,Y,clk,rst,Q);output reg W;output Y;input clk, rst;input Q;assign Y = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Q;end endmodule
module DFF(O,K,clk,rst,Y);output reg O;output K;input clk, rst;input Y;assign K = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= Y;end endmodule
module DFF(C,P,clk,rst,A);output reg C;output P;input clk, rst;input A;assign P = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= A;end endmodule
module DFF(J,L,clk,rst,M);output reg J;output L;input clk, rst;input M;assign L = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= M;end endmodule
module DFF(Y,Q,clk,rst,L);output reg Y;output Q;input clk, rst;input L;assign Q = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= L;end endmodule
module DFF(B,N,clk,rst,J);output reg B;output N;input clk, rst;input J;assign N = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= J;end endmodule
module DFF(A,F,clk,rst,S);output reg A;output F;input clk, rst;input S;assign F = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= S;end endmodule
module DFF(C,I,clk,rst,B);output reg C;output I;input clk, rst;input B;assign I = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= B;end endmodule
module DFF(E,W,clk,rst,P);output reg E;output W;input clk, rst;input P;assign W = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= P;end endmodule
module DFF(W,M,clk,rst,N);output reg W;output M;input clk, rst;input N;assign M = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= N;end endmodule
module DFF(M,J,clk,rst,D);output reg M;output J;input clk, rst;input D;assign J = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= D;end endmodule
module DFF(X,R,clk,rst,P);output reg X;output R;input clk, rst;input P;assign R = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= P;end endmodule
module DFF(A,Z,clk,rst,J);output reg A;output Z;input clk, rst;input J;assign Z = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= J;end endmodule
module DFF(X,P,clk,rst,N);output reg X;output P;input clk, rst;input N;assign P = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= N;end endmodule
module DFF(J,E,clk,rst,X);output reg J;output E;input clk, rst;input X;assign E = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= X;end endmodule
module DFF(V,T,clk,rst,A);output reg V;output T;input clk, rst;input A;assign T = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= A;end endmodule
module DFF(J,I,clk,rst,Q);output reg J;output I;input clk, rst;input Q;assign I = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= Q;end endmodule
module DFF(M,K,clk,rst,H);output reg M;output K;input clk, rst;input H;assign K = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= H;end endmodule
module DFF(T,V,clk,rst,I);output reg T;output V;input clk, rst;input I;assign V = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= I;end endmodule
module DFF(E,Z,clk,rst,T);output reg E;output Z;input clk, rst;input T;assign Z = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= T;end endmodule
module DFF(E,W,clk,rst,T);output reg E;output W;input clk, rst;input T;assign W = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= T;end endmodule
module DFF(W,F,clk,rst,Z);output reg W;output F;input clk, rst;input Z;assign F = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Z;end endmodule
module DFF(Z,I,clk,rst,A);output reg Z;output I;input clk, rst;input A;assign I = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= A;end endmodule
module DFF(W,B,clk,rst,Y);output reg W;output B;input clk, rst;input Y;assign B = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Y;end endmodule
module DFF(O,M,clk,rst,I);output reg O;output M;input clk, rst;input I;assign M = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= I;end endmodule
module DFF(N,T,clk,rst,H);output reg N;output T;input clk, rst;input H;assign T = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= H;end endmodule
module DFF(C,K,clk,rst,S);output reg C;output K;input clk, rst;input S;assign K = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= S;end endmodule
module DFF(Q,B,clk,rst,R);output reg Q;output B;input clk, rst;input R;assign B = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= R;end endmodule
module DFF(O,A,clk,rst,H);output reg O;output A;input clk, rst;input H;assign A = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= H;end endmodule
module DFF(B,G,clk,rst,I);output reg B;output G;input clk, rst;input I;assign G = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= I;end endmodule
module DFF(W,M,clk,rst,L);output reg W;output M;input clk, rst;input L;assign M = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= L;end endmodule
module DFF(F,O,clk,rst,I);output reg F;output O;input clk, rst;input I;assign O = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= I;end endmodule
module DFF(I,P,clk,rst,X);output reg I;output P;input clk, rst;input X;assign P = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= X;end endmodule
module DFF(K,Y,clk,rst,B);output reg K;output Y;input clk, rst;input B;assign Y = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= B;end endmodule
module DFF(Y,N,clk,rst,D);output reg Y;output N;input clk, rst;input D;assign N = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= D;end endmodule
module DFF(N,R,clk,rst,U);output reg N;output R;input clk, rst;input U;assign R = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= U;end endmodule
module DFF(N,Y,clk,rst,B);output reg N;output Y;input clk, rst;input B;assign Y = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= B;end endmodule
module DFF(I,R,clk,rst,Y);output reg I;output R;input clk, rst;input Y;assign R = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= Y;end endmodule
module DFF(C,L,clk,rst,N);output reg C;output L;input clk, rst;input N;assign L = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= N;end endmodule
module DFF(B,T,clk,rst,O);output reg B;output T;input clk, rst;input O;assign T = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= O;end endmodule
module DFF(M,R,clk,rst,V);output reg M;output R;input clk, rst;input V;assign R = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= V;end endmodule
module DFF(B,L,clk,rst,K);output reg B;output L;input clk, rst;input K;assign L = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= K;end endmodule
module DFF(H,O,clk,rst,Z);output reg H;output O;input clk, rst;input Z;assign O = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= Z;end endmodule
module DFF(T,V,clk,rst,K);output reg T;output V;input clk, rst;input K;assign V = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= K;end endmodule
module DFF(N,R,clk,rst,B);output reg N;output R;input clk, rst;input B;assign R = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= B;end endmodule
module DFF(J,A,clk,rst,T);output reg J;output A;input clk, rst;input T;assign A = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= T;end endmodule
module DFF(N,L,clk,rst,W);output reg N;output L;input clk, rst;input W;assign L = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= W;end endmodule
module DFF(X,O,clk,rst,T);output reg X;output O;input clk, rst;input T;assign O = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= T;end endmodule
module DFF(Y,D,clk,rst,K);output reg Y;output D;input clk, rst;input K;assign D = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= K;end endmodule
module DFF(B,E,clk,rst,S);output reg B;output E;input clk, rst;input S;assign E = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= S;end endmodule
module DFF(L,I,clk,rst,H);output reg L;output I;input clk, rst;input H;assign I = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= H;end endmodule
module DFF(A,N,clk,rst,X);output reg A;output N;input clk, rst;input X;assign N = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= X;end endmodule
module DFF(U,O,clk,rst,A);output reg U;output O;input clk, rst;input A;assign O = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= A;end endmodule
module DFF(E,Q,clk,rst,B);output reg E;output Q;input clk, rst;input B;assign Q = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= B;end endmodule
module DFF(M,O,clk,rst,W);output reg M;output O;input clk, rst;input W;assign O = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= W;end endmodule
module DFF(G,Z,clk,rst,C);output reg G;output Z;input clk, rst;input C;assign Z = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= C;end endmodule
module DFF(B,V,clk,rst,Q);output reg B;output V;input clk, rst;input Q;assign V = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= Q;end endmodule
module DFF(X,D,clk,rst,K);output reg X;output D;input clk, rst;input K;assign D = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= K;end endmodule
module DFF(U,G,clk,rst,W);output reg U;output G;input clk, rst;input W;assign G = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= W;end endmodule
module DFF(E,T,clk,rst,K);output reg E;output T;input clk, rst;input K;assign T = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= K;end endmodule
module DFF(G,M,clk,rst,B);output reg G;output M;input clk, rst;input B;assign M = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= B;end endmodule
module DFF(U,D,clk,rst,A);output reg U;output D;input clk, rst;input A;assign D = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= A;end endmodule
module DFF(M,B,clk,rst,C);output reg M;output B;input clk, rst;input C;assign B = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= C;end endmodule
module DFF(K,A,clk,rst,X);output reg K;output A;input clk, rst;input X;assign A = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= X;end endmodule
module DFF(D,J,clk,rst,N);output reg D;output J;input clk, rst;input N;assign J = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= N;end endmodule
module DFF(A,P,clk,rst,U);output reg A;output P;input clk, rst;input U;assign P = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= U;end endmodule
module DFF(D,K,clk,rst,N);output reg D;output K;input clk, rst;input N;assign K = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= N;end endmodule
module DFF(Q,V,clk,rst,C);output reg Q;output V;input clk, rst;input C;assign V = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= C;end endmodule
module DFF(Z,Q,clk,rst,K);output reg Z;output Q;input clk, rst;input K;assign Q = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= K;end endmodule
module DFF(X,K,clk,rst,A);output reg X;output K;input clk, rst;input A;assign K = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= A;end endmodule
module DFF(W,M,clk,rst,B);output reg W;output M;input clk, rst;input B;assign M = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= B;end endmodule
module DFF(I,Y,clk,rst,E);output reg I;output Y;input clk, rst;input E;assign Y = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= E;end endmodule
module DFF(N,P,clk,rst,R);output reg N;output P;input clk, rst;input R;assign P = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= R;end endmodule
module DFF(L,F,clk,rst,D);output reg L;output F;input clk, rst;input D;assign F = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= D;end endmodule
module DFF(M,J,clk,rst,N);output reg M;output J;input clk, rst;input N;assign J = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= N;end endmodule
module DFF(P,Y,clk,rst,S);output reg P;output Y;input clk, rst;input S;assign Y = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= S;end endmodule
module DFF(C,P,clk,rst,S);output reg C;output P;input clk, rst;input S;assign P = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= S;end endmodule
module DFF(N,A,clk,rst,E);output reg N;output A;input clk, rst;input E;assign A = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= E;end endmodule
module DFF(D,J,clk,rst,H);output reg D;output J;input clk, rst;input H;assign J = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= H;end endmodule
module DFF(O,G,clk,rst,A);output reg O;output G;input clk, rst;input A;assign G = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= A;end endmodule
module DFF(L,V,clk,rst,Q);output reg L;output V;input clk, rst;input Q;assign V = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= Q;end endmodule
module DFF(S,L,clk,rst,H);output reg S;output L;input clk, rst;input H;assign L = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= H;end endmodule
module DFF(J,N,clk,rst,S);output reg J;output N;input clk, rst;input S;assign N = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= S;end endmodule
module DFF(Q,X,clk,rst,R);output reg Q;output X;input clk, rst;input R;assign X = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= R;end endmodule
module DFF(V,W,clk,rst,G);output reg V;output W;input clk, rst;input G;assign W = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= G;end endmodule
module DFF(Z,N,clk,rst,P);output reg Z;output N;input clk, rst;input P;assign N = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= P;end endmodule
module DFF(S,O,clk,rst,Z);output reg S;output O;input clk, rst;input Z;assign O = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= Z;end endmodule
module DFF(T,Q,clk,rst,Y);output reg T;output Q;input clk, rst;input Y;assign Q = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Y;end endmodule
module DFF(G,F,clk,rst,T);output reg G;output F;input clk, rst;input T;assign F = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= T;end endmodule
module DFF(K,T,clk,rst,F);output reg K;output T;input clk, rst;input F;assign T = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= F;end endmodule
module DFF(E,W,clk,rst,A);output reg E;output W;input clk, rst;input A;assign W = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= A;end endmodule
module DFF(J,M,clk,rst,K);output reg J;output M;input clk, rst;input K;assign M = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= K;end endmodule
module DFF(A,B,clk,rst,R);output reg A;output B;input clk, rst;input R;assign B = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= R;end endmodule
module DFF(L,O,clk,rst,B);output reg L;output O;input clk, rst;input B;assign O = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= B;end endmodule
module DFF(C,G,clk,rst,E);output reg C;output G;input clk, rst;input E;assign G = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= E;end endmodule
module DFF(T,A,clk,rst,U);output reg T;output A;input clk, rst;input U;assign A = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= U;end endmodule
module DFF(G,W,clk,rst,T);output reg G;output W;input clk, rst;input T;assign W = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= T;end endmodule
module DFF(L,M,clk,rst,G);output reg L;output M;input clk, rst;input G;assign M = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= G;end endmodule
module DFF(N,Y,clk,rst,E);output reg N;output Y;input clk, rst;input E;assign Y = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= E;end endmodule
module DFF(Q,H,clk,rst,E);output reg Q;output H;input clk, rst;input E;assign H = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= E;end endmodule
module DFF(S,V,clk,rst,R);output reg S;output V;input clk, rst;input R;assign V = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= R;end endmodule
module DFF(M,N,clk,rst,S);output reg M;output N;input clk, rst;input S;assign N = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= S;end endmodule
module DFF(L,W,clk,rst,K);output reg L;output W;input clk, rst;input K;assign W = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= K;end endmodule
module DFF(Z,P,clk,rst,N);output reg Z;output P;input clk, rst;input N;assign P = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= N;end endmodule
module DFF(A,L,clk,rst,X);output reg A;output L;input clk, rst;input X;assign L = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= X;end endmodule
module DFF(D,P,clk,rst,H);output reg D;output P;input clk, rst;input H;assign P = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= H;end endmodule
module DFF(W,X,clk,rst,Q);output reg W;output X;input clk, rst;input Q;assign X = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Q;end endmodule
module DFF(Z,K,clk,rst,O);output reg Z;output K;input clk, rst;input O;assign K = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= O;end endmodule
module DFF(P,N,clk,rst,W);output reg P;output N;input clk, rst;input W;assign N = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= W;end endmodule
module DFF(T,G,clk,rst,B);output reg T;output G;input clk, rst;input B;assign G = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= B;end endmodule
module DFF(V,G,clk,rst,F);output reg V;output G;input clk, rst;input F;assign G = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= F;end endmodule
module DFF(Z,A,clk,rst,E);output reg Z;output A;input clk, rst;input E;assign A = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= E;end endmodule
module DFF(C,F,clk,rst,R);output reg C;output F;input clk, rst;input R;assign F = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= R;end endmodule
module DFF(W,K,clk,rst,R);output reg W;output K;input clk, rst;input R;assign K = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= R;end endmodule
module DFF(S,E,clk,rst,V);output reg S;output E;input clk, rst;input V;assign E = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= V;end endmodule
module DFF(C,H,clk,rst,X);output reg C;output H;input clk, rst;input X;assign H = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= X;end endmodule
module DFF(Q,K,clk,rst,Z);output reg Q;output K;input clk, rst;input Z;assign K = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= Z;end endmodule
module DFF(J,O,clk,rst,I);output reg J;output O;input clk, rst;input I;assign O = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= I;end endmodule
module DFF(E,N,clk,rst,P);output reg E;output N;input clk, rst;input P;assign N = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= P;end endmodule
module DFF(F,I,clk,rst,U);output reg F;output I;input clk, rst;input U;assign I = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= U;end endmodule
module DFF(A,J,clk,rst,S);output reg A;output J;input clk, rst;input S;assign J = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= S;end endmodule
module DFF(L,J,clk,rst,S);output reg L;output J;input clk, rst;input S;assign J = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= S;end endmodule
module DFF(Q,D,clk,rst,P);output reg Q;output D;input clk, rst;input P;assign D = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= P;end endmodule
module DFF(Y,L,clk,rst,M);output reg Y;output L;input clk, rst;input M;assign L = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= M;end endmodule
module DFF(C,M,clk,rst,S);output reg C;output M;input clk, rst;input S;assign M = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= S;end endmodule
module DFF(J,W,clk,rst,A);output reg J;output W;input clk, rst;input A;assign W = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= A;end endmodule
module DFF(D,S,clk,rst,E);output reg D;output S;input clk, rst;input E;assign S = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= E;end endmodule
module DFF(A,Q,clk,rst,X);output reg A;output Q;input clk, rst;input X;assign Q = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= X;end endmodule
module DFF(S,H,clk,rst,L);output reg S;output H;input clk, rst;input L;assign H = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= L;end endmodule
module DFF(A,O,clk,rst,C);output reg A;output O;input clk, rst;input C;assign O = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= C;end endmodule
module DFF(Z,G,clk,rst,K);output reg Z;output G;input clk, rst;input K;assign G = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= K;end endmodule
module DFF(L,X,clk,rst,I);output reg L;output X;input clk, rst;input I;assign X = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= I;end endmodule
module DFF(V,J,clk,rst,G);output reg V;output J;input clk, rst;input G;assign J = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= G;end endmodule
module DFF(C,E,clk,rst,M);output reg C;output E;input clk, rst;input M;assign E = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= M;end endmodule
module DFF(U,A,clk,rst,O);output reg U;output A;input clk, rst;input O;assign A = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= O;end endmodule
module DFF(Z,I,clk,rst,J);output reg Z;output I;input clk, rst;input J;assign I = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= J;end endmodule
module DFF(Z,N,clk,rst,J);output reg Z;output N;input clk, rst;input J;assign N = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= J;end endmodule
module DFF(G,U,clk,rst,C);output reg G;output U;input clk, rst;input C;assign U = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= C;end endmodule
module DFF(P,R,clk,rst,M);output reg P;output R;input clk, rst;input M;assign R = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= M;end endmodule
module DFF(N,I,clk,rst,L);output reg N;output I;input clk, rst;input L;assign I = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= L;end endmodule
module DFF(N,V,clk,rst,J);output reg N;output V;input clk, rst;input J;assign V = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= J;end endmodule
module DFF(D,X,clk,rst,Q);output reg D;output X;input clk, rst;input Q;assign X = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Q;end endmodule
module DFF(K,G,clk,rst,D);output reg K;output G;input clk, rst;input D;assign G = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= D;end endmodule
module DFF(B,F,clk,rst,U);output reg B;output F;input clk, rst;input U;assign F = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= U;end endmodule
module DFF(T,C,clk,rst,Y);output reg T;output C;input clk, rst;input Y;assign C = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Y;end endmodule
module DFF(U,R,clk,rst,V);output reg U;output R;input clk, rst;input V;assign R = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= V;end endmodule
module DFF(T,R,clk,rst,V);output reg T;output R;input clk, rst;input V;assign R = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= V;end endmodule
module DFF(A,B,clk,rst,D);output reg A;output B;input clk, rst;input D;assign B = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= D;end endmodule
module DFF(Q,N,clk,rst,L);output reg Q;output N;input clk, rst;input L;assign N = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= L;end endmodule
module DFF(N,Y,clk,rst,E);output reg N;output Y;input clk, rst;input E;assign Y = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= E;end endmodule
module DFF(L,P,clk,rst,K);output reg L;output P;input clk, rst;input K;assign P = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= K;end endmodule
module DFF(Q,J,clk,rst,W);output reg Q;output J;input clk, rst;input W;assign J = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= W;end endmodule
module DFF(Q,A,clk,rst,H);output reg Q;output A;input clk, rst;input H;assign A = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= H;end endmodule
module DFF(L,K,clk,rst,N);output reg L;output K;input clk, rst;input N;assign K = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= N;end endmodule
module DFF(K,H,clk,rst,D);output reg K;output H;input clk, rst;input D;assign H = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= D;end endmodule
module DFF(E,O,clk,rst,L);output reg E;output O;input clk, rst;input L;assign O = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= L;end endmodule
module DFF(H,L,clk,rst,G);output reg H;output L;input clk, rst;input G;assign L = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= G;end endmodule
module DFF(M,R,clk,rst,A);output reg M;output R;input clk, rst;input A;assign R = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= A;end endmodule
module DFF(O,Q,clk,rst,X);output reg O;output Q;input clk, rst;input X;assign Q = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= X;end endmodule
module DFF(Y,E,clk,rst,B);output reg Y;output E;input clk, rst;input B;assign E = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= B;end endmodule
module DFF(J,Y,clk,rst,I);output reg J;output Y;input clk, rst;input I;assign Y = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= I;end endmodule
module DFF(T,G,clk,rst,M);output reg T;output G;input clk, rst;input M;assign G = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= M;end endmodule
module DFF(U,A,clk,rst,Q);output reg U;output A;input clk, rst;input Q;assign A = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= Q;end endmodule
module DFF(T,E,clk,rst,F);output reg T;output E;input clk, rst;input F;assign E = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= F;end endmodule
module DFF(U,K,clk,rst,V);output reg U;output K;input clk, rst;input V;assign K = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= V;end endmodule
module DFF(T,P,clk,rst,K);output reg T;output P;input clk, rst;input K;assign P = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= K;end endmodule
module DFF(N,V,clk,rst,M);output reg N;output V;input clk, rst;input M;assign V = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= M;end endmodule
module DFF(Q,O,clk,rst,C);output reg Q;output O;input clk, rst;input C;assign O = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= C;end endmodule
module DFF(U,G,clk,rst,B);output reg U;output G;input clk, rst;input B;assign G = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= B;end endmodule
module DFF(P,M,clk,rst,B);output reg P;output M;input clk, rst;input B;assign M = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= B;end endmodule
module DFF(G,R,clk,rst,I);output reg G;output R;input clk, rst;input I;assign R = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= I;end endmodule
module DFF(W,P,clk,rst,Y);output reg W;output P;input clk, rst;input Y;assign P = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Y;end endmodule
module DFF(Y,U,clk,rst,T);output reg Y;output U;input clk, rst;input T;assign U = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= T;end endmodule
module DFF(C,W,clk,rst,E);output reg C;output W;input clk, rst;input E;assign W = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= E;end endmodule
module DFF(E,Y,clk,rst,C);output reg E;output Y;input clk, rst;input C;assign Y = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= C;end endmodule
module DFF(S,N,clk,rst,M);output reg S;output N;input clk, rst;input M;assign N = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= M;end endmodule
module DFF(D,I,clk,rst,L);output reg D;output I;input clk, rst;input L;assign I = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= L;end endmodule
module DFF(M,U,clk,rst,V);output reg M;output U;input clk, rst;input V;assign U = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= V;end endmodule
module DFF(S,X,clk,rst,A);output reg S;output X;input clk, rst;input A;assign X = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= A;end endmodule
module DFF(M,Y,clk,rst,C);output reg M;output Y;input clk, rst;input C;assign Y = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= C;end endmodule
module DFF(H,J,clk,rst,M);output reg H;output J;input clk, rst;input M;assign J = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= M;end endmodule
module DFF(D,A,clk,rst,H);output reg D;output A;input clk, rst;input H;assign A = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= H;end endmodule
module DFF(P,B,clk,rst,I);output reg P;output B;input clk, rst;input I;assign B = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= I;end endmodule
module DFF(Y,B,clk,rst,Q);output reg Y;output B;input clk, rst;input Q;assign B = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= Q;end endmodule
module DFF(S,W,clk,rst,G);output reg S;output W;input clk, rst;input G;assign W = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= G;end endmodule
module DFF(G,B,clk,rst,U);output reg G;output B;input clk, rst;input U;assign B = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= U;end endmodule
module DFF(G,K,clk,rst,D);output reg G;output K;input clk, rst;input D;assign K = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= D;end endmodule
module DFF(G,M,clk,rst,S);output reg G;output M;input clk, rst;input S;assign M = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= S;end endmodule
module DFF(C,D,clk,rst,F);output reg C;output D;input clk, rst;input F;assign D = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= F;end endmodule
module DFF(M,Y,clk,rst,X);output reg M;output Y;input clk, rst;input X;assign Y = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= X;end endmodule
module DFF(F,N,clk,rst,O);output reg F;output N;input clk, rst;input O;assign N = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= O;end endmodule
module DFF(N,Q,clk,rst,L);output reg N;output Q;input clk, rst;input L;assign Q = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= L;end endmodule
module DFF(Y,S,clk,rst,V);output reg Y;output S;input clk, rst;input V;assign S = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= V;end endmodule
module DFF(Z,C,clk,rst,S);output reg Z;output C;input clk, rst;input S;assign C = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= S;end endmodule
module DFF(K,D,clk,rst,B);output reg K;output D;input clk, rst;input B;assign D = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= B;end endmodule
module DFF(Z,F,clk,rst,O);output reg Z;output F;input clk, rst;input O;assign F = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= O;end endmodule
module DFF(D,T,clk,rst,W);output reg D;output T;input clk, rst;input W;assign T = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= W;end endmodule
module DFF(R,X,clk,rst,K);output reg R;output X;input clk, rst;input K;assign X = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= K;end endmodule
module DFF(O,G,clk,rst,V);output reg O;output G;input clk, rst;input V;assign G = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= V;end endmodule
module DFF(P,G,clk,rst,X);output reg P;output G;input clk, rst;input X;assign G = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= X;end endmodule
module DFF(I,L,clk,rst,Y);output reg I;output L;input clk, rst;input Y;assign L = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= Y;end endmodule
module DFF(Z,S,clk,rst,Y);output reg Z;output S;input clk, rst;input Y;assign S = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= Y;end endmodule
module DFF(C,H,clk,rst,N);output reg C;output H;input clk, rst;input N;assign H = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= N;end endmodule
module DFF(O,A,clk,rst,Z);output reg O;output A;input clk, rst;input Z;assign A = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= Z;end endmodule
module DFF(V,Y,clk,rst,T);output reg V;output Y;input clk, rst;input T;assign Y = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= T;end endmodule
module DFF(J,K,clk,rst,G);output reg J;output K;input clk, rst;input G;assign K = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= G;end endmodule
module DFF(Y,R,clk,rst,E);output reg Y;output R;input clk, rst;input E;assign R = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= E;end endmodule
module DFF(Y,G,clk,rst,R);output reg Y;output G;input clk, rst;input R;assign G = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= R;end endmodule
module DFF(Z,E,clk,rst,R);output reg Z;output E;input clk, rst;input R;assign E = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= R;end endmodule
module DFF(Y,V,clk,rst,U);output reg Y;output V;input clk, rst;input U;assign V = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= U;end endmodule
module DFF(B,H,clk,rst,S);output reg B;output H;input clk, rst;input S;assign H = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= S;end endmodule
module DFF(S,L,clk,rst,M);output reg S;output L;input clk, rst;input M;assign L = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= M;end endmodule
module DFF(S,C,clk,rst,Z);output reg S;output C;input clk, rst;input Z;assign C = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= Z;end endmodule
module DFF(Q,R,clk,rst,I);output reg Q;output R;input clk, rst;input I;assign R = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= I;end endmodule
module DFF(E,T,clk,rst,X);output reg E;output T;input clk, rst;input X;assign T = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= X;end endmodule
module DFF(J,Y,clk,rst,K);output reg J;output Y;input clk, rst;input K;assign Y = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= K;end endmodule
module DFF(B,E,clk,rst,A);output reg B;output E;input clk, rst;input A;assign E = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= A;end endmodule
module DFF(A,Q,clk,rst,E);output reg A;output Q;input clk, rst;input E;assign Q = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= E;end endmodule
module DFF(S,G,clk,rst,H);output reg S;output G;input clk, rst;input H;assign G = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= H;end endmodule
module DFF(A,W,clk,rst,V);output reg A;output W;input clk, rst;input V;assign W = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= V;end endmodule
module DFF(N,Z,clk,rst,E);output reg N;output Z;input clk, rst;input E;assign Z = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= E;end endmodule
module DFF(R,O,clk,rst,V);output reg R;output O;input clk, rst;input V;assign O = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= V;end endmodule
module DFF(H,W,clk,rst,B);output reg H;output W;input clk, rst;input B;assign W = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= B;end endmodule
module DFF(O,R,clk,rst,U);output reg O;output R;input clk, rst;input U;assign R = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= U;end endmodule
module DFF(I,T,clk,rst,S);output reg I;output T;input clk, rst;input S;assign T = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= S;end endmodule
module DFF(C,G,clk,rst,W);output reg C;output G;input clk, rst;input W;assign G = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= W;end endmodule
module DFF(C,I,clk,rst,Q);output reg C;output I;input clk, rst;input Q;assign I = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= Q;end endmodule
module DFF(I,W,clk,rst,K);output reg I;output W;input clk, rst;input K;assign W = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= K;end endmodule
module DFF(X,F,clk,rst,I);output reg X;output F;input clk, rst;input I;assign F = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= I;end endmodule
module DFF(R,L,clk,rst,V);output reg R;output L;input clk, rst;input V;assign L = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= V;end endmodule
module DFF(C,K,clk,rst,U);output reg C;output K;input clk, rst;input U;assign K = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= U;end endmodule
module DFF(Y,L,clk,rst,U);output reg Y;output L;input clk, rst;input U;assign L = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= U;end endmodule
module DFF(O,P,clk,rst,U);output reg O;output P;input clk, rst;input U;assign P = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= U;end endmodule
module DFF(P,G,clk,rst,D);output reg P;output G;input clk, rst;input D;assign G = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= D;end endmodule
module DFF(A,I,clk,rst,V);output reg A;output I;input clk, rst;input V;assign I = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= V;end endmodule
module DFF(R,Z,clk,rst,B);output reg R;output Z;input clk, rst;input B;assign Z = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= B;end endmodule
module DFF(J,O,clk,rst,M);output reg J;output O;input clk, rst;input M;assign O = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= M;end endmodule
module DFF(F,B,clk,rst,I);output reg F;output B;input clk, rst;input I;assign B = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= I;end endmodule
module DFF(G,E,clk,rst,V);output reg G;output E;input clk, rst;input V;assign E = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= V;end endmodule
module DFF(L,A,clk,rst,E);output reg L;output A;input clk, rst;input E;assign A = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= E;end endmodule
module DFF(P,A,clk,rst,D);output reg P;output A;input clk, rst;input D;assign A = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= D;end endmodule
module DFF(H,D,clk,rst,L);output reg H;output D;input clk, rst;input L;assign D = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= L;end endmodule
module DFF(N,H,clk,rst,K);output reg N;output H;input clk, rst;input K;assign H = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= K;end endmodule
module DFF(V,J,clk,rst,F);output reg V;output J;input clk, rst;input F;assign J = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= F;end endmodule
module DFF(T,F,clk,rst,C);output reg T;output F;input clk, rst;input C;assign F = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= C;end endmodule
module DFF(U,M,clk,rst,R);output reg U;output M;input clk, rst;input R;assign M = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= R;end endmodule
module DFF(G,R,clk,rst,V);output reg G;output R;input clk, rst;input V;assign R = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= V;end endmodule
module DFF(H,J,clk,rst,K);output reg H;output J;input clk, rst;input K;assign J = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= K;end endmodule
module DFF(J,F,clk,rst,K);output reg J;output F;input clk, rst;input K;assign F = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= K;end endmodule
module DFF(O,N,clk,rst,S);output reg O;output N;input clk, rst;input S;assign N = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= S;end endmodule
module DFF(S,A,clk,rst,X);output reg S;output A;input clk, rst;input X;assign A = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= X;end endmodule
module DFF(J,U,clk,rst,A);output reg J;output U;input clk, rst;input A;assign U = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= A;end endmodule
module DFF(V,F,clk,rst,R);output reg V;output F;input clk, rst;input R;assign F = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= R;end endmodule
module DFF(J,Y,clk,rst,P);output reg J;output Y;input clk, rst;input P;assign Y = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= P;end endmodule
module DFF(Y,B,clk,rst,E);output reg Y;output B;input clk, rst;input E;assign B = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= E;end endmodule
module DFF(Z,M,clk,rst,E);output reg Z;output M;input clk, rst;input E;assign M = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= E;end endmodule
module DFF(Z,I,clk,rst,X);output reg Z;output I;input clk, rst;input X;assign I = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= X;end endmodule
module DFF(H,V,clk,rst,O);output reg H;output V;input clk, rst;input O;assign V = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= O;end endmodule
module DFF(X,J,clk,rst,V);output reg X;output J;input clk, rst;input V;assign J = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= V;end endmodule
module DFF(P,I,clk,rst,C);output reg P;output I;input clk, rst;input C;assign I = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= C;end endmodule
module DFF(E,Z,clk,rst,W);output reg E;output Z;input clk, rst;input W;assign Z = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= W;end endmodule
module DFF(J,E,clk,rst,K);output reg J;output E;input clk, rst;input K;assign E = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= K;end endmodule
module DFF(Q,D,clk,rst,H);output reg Q;output D;input clk, rst;input H;assign D = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= H;end endmodule
module DFF(J,Q,clk,rst,M);output reg J;output Q;input clk, rst;input M;assign Q = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= M;end endmodule
module DFF(W,A,clk,rst,L);output reg W;output A;input clk, rst;input L;assign A = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= L;end endmodule
module DFF(J,O,clk,rst,V);output reg J;output O;input clk, rst;input V;assign O = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= V;end endmodule
module DFF(I,N,clk,rst,F);output reg I;output N;input clk, rst;input F;assign N = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= F;end endmodule
module DFF(P,M,clk,rst,E);output reg P;output M;input clk, rst;input E;assign M = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= E;end endmodule
module DFF(G,H,clk,rst,T);output reg G;output H;input clk, rst;input T;assign H = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= T;end endmodule
module DFF(U,Z,clk,rst,J);output reg U;output Z;input clk, rst;input J;assign Z = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= J;end endmodule
module DFF(U,V,clk,rst,D);output reg U;output V;input clk, rst;input D;assign V = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(Q,K,clk,rst,O);output reg Q;output K;input clk, rst;input O;assign K = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= O;end endmodule
module DFF(A,J,clk,rst,M);output reg A;output J;input clk, rst;input M;assign J = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= M;end endmodule
module DFF(Q,V,clk,rst,Y);output reg Q;output V;input clk, rst;input Y;assign V = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= Y;end endmodule
module DFF(V,N,clk,rst,G);output reg V;output N;input clk, rst;input G;assign N = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= G;end endmodule
module DFF(U,P,clk,rst,B);output reg U;output P;input clk, rst;input B;assign P = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= B;end endmodule
module DFF(X,K,clk,rst,J);output reg X;output K;input clk, rst;input J;assign K = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= J;end endmodule
module DFF(I,H,clk,rst,K);output reg I;output H;input clk, rst;input K;assign H = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= K;end endmodule
module DFF(G,M,clk,rst,R);output reg G;output M;input clk, rst;input R;assign M = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= R;end endmodule
module DFF(R,F,clk,rst,W);output reg R;output F;input clk, rst;input W;assign F = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= W;end endmodule
module DFF(W,V,clk,rst,C);output reg W;output V;input clk, rst;input C;assign V = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= C;end endmodule
module DFF(J,N,clk,rst,A);output reg J;output N;input clk, rst;input A;assign N = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= A;end endmodule
module DFF(M,A,clk,rst,B);output reg M;output A;input clk, rst;input B;assign A = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= B;end endmodule
module DFF(B,K,clk,rst,G);output reg B;output K;input clk, rst;input G;assign K = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= G;end endmodule
module DFF(W,M,clk,rst,O);output reg W;output M;input clk, rst;input O;assign M = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= O;end endmodule
module DFF(I,Z,clk,rst,Y);output reg I;output Z;input clk, rst;input Y;assign Z = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= Y;end endmodule
module DFF(I,F,clk,rst,G);output reg I;output F;input clk, rst;input G;assign F = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= G;end endmodule
module DFF(J,K,clk,rst,H);output reg J;output K;input clk, rst;input H;assign K = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= H;end endmodule
module DFF(T,S,clk,rst,K);output reg T;output S;input clk, rst;input K;assign S = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= K;end endmodule
module DFF(H,I,clk,rst,F);output reg H;output I;input clk, rst;input F;assign I = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= F;end endmodule
module DFF(R,G,clk,rst,F);output reg R;output G;input clk, rst;input F;assign G = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= F;end endmodule
module DFF(U,N,clk,rst,D);output reg U;output N;input clk, rst;input D;assign N = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(E,A,clk,rst,H);output reg E;output A;input clk, rst;input H;assign A = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= H;end endmodule
module DFF(W,Q,clk,rst,O);output reg W;output Q;input clk, rst;input O;assign Q = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= O;end endmodule
module DFF(P,X,clk,rst,V);output reg P;output X;input clk, rst;input V;assign X = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= V;end endmodule
module DFF(I,W,clk,rst,K);output reg I;output W;input clk, rst;input K;assign W = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= K;end endmodule
module DFF(K,L,clk,rst,C);output reg K;output L;input clk, rst;input C;assign L = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= C;end endmodule
module DFF(N,U,clk,rst,S);output reg N;output U;input clk, rst;input S;assign U = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= S;end endmodule
module DFF(C,W,clk,rst,U);output reg C;output W;input clk, rst;input U;assign W = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= U;end endmodule
module DFF(N,Q,clk,rst,F);output reg N;output Q;input clk, rst;input F;assign Q = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= F;end endmodule
module DFF(P,V,clk,rst,D);output reg P;output V;input clk, rst;input D;assign V = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= D;end endmodule
module DFF(L,H,clk,rst,S);output reg L;output H;input clk, rst;input S;assign H = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= S;end endmodule
module DFF(G,K,clk,rst,D);output reg G;output K;input clk, rst;input D;assign K = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= D;end endmodule
module DFF(S,F,clk,rst,W);output reg S;output F;input clk, rst;input W;assign F = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= W;end endmodule
module DFF(A,G,clk,rst,X);output reg A;output G;input clk, rst;input X;assign G = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= X;end endmodule
module DFF(F,C,clk,rst,M);output reg F;output C;input clk, rst;input M;assign C = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= M;end endmodule
module DFF(N,W,clk,rst,I);output reg N;output W;input clk, rst;input I;assign W = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= I;end endmodule
module DFF(T,W,clk,rst,O);output reg T;output W;input clk, rst;input O;assign W = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= O;end endmodule
module DFF(A,F,clk,rst,M);output reg A;output F;input clk, rst;input M;assign F = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= M;end endmodule
module DFF(J,L,clk,rst,B);output reg J;output L;input clk, rst;input B;assign L = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= B;end endmodule
module DFF(V,I,clk,rst,S);output reg V;output I;input clk, rst;input S;assign I = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= S;end endmodule
module DFF(P,C,clk,rst,M);output reg P;output C;input clk, rst;input M;assign C = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= M;end endmodule
module DFF(G,N,clk,rst,A);output reg G;output N;input clk, rst;input A;assign N = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= A;end endmodule
module DFF(S,R,clk,rst,Q);output reg S;output R;input clk, rst;input Q;assign R = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= Q;end endmodule
module DFF(A,X,clk,rst,Q);output reg A;output X;input clk, rst;input Q;assign X = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= Q;end endmodule
module DFF(O,G,clk,rst,K);output reg O;output G;input clk, rst;input K;assign G = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= K;end endmodule
module DFF(G,J,clk,rst,S);output reg G;output J;input clk, rst;input S;assign J = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= S;end endmodule
module DFF(R,A,clk,rst,B);output reg R;output A;input clk, rst;input B;assign A = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= B;end endmodule
module DFF(C,P,clk,rst,Y);output reg C;output P;input clk, rst;input Y;assign P = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= Y;end endmodule
module DFF(U,J,clk,rst,C);output reg U;output J;input clk, rst;input C;assign J = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= C;end endmodule
module DFF(H,T,clk,rst,R);output reg H;output T;input clk, rst;input R;assign T = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= R;end endmodule
module DFF(D,V,clk,rst,X);output reg D;output V;input clk, rst;input X;assign V = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= X;end endmodule
module DFF(E,I,clk,rst,Q);output reg E;output I;input clk, rst;input Q;assign I = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= Q;end endmodule
module DFF(L,B,clk,rst,P);output reg L;output B;input clk, rst;input P;assign B = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= P;end endmodule
module DFF(J,Y,clk,rst,D);output reg J;output Y;input clk, rst;input D;assign Y = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= D;end endmodule
module DFF(W,R,clk,rst,C);output reg W;output R;input clk, rst;input C;assign R = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= C;end endmodule
module DFF(Q,P,clk,rst,V);output reg Q;output P;input clk, rst;input V;assign P = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= V;end endmodule
module DFF(Q,W,clk,rst,G);output reg Q;output W;input clk, rst;input G;assign W = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= G;end endmodule
module DFF(K,B,clk,rst,C);output reg K;output B;input clk, rst;input C;assign B = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= C;end endmodule
module DFF(H,T,clk,rst,Z);output reg H;output T;input clk, rst;input Z;assign T = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= Z;end endmodule
module DFF(U,N,clk,rst,V);output reg U;output N;input clk, rst;input V;assign N = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= V;end endmodule
module DFF(L,R,clk,rst,U);output reg L;output R;input clk, rst;input U;assign R = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= U;end endmodule
module DFF(P,B,clk,rst,A);output reg P;output B;input clk, rst;input A;assign B = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= A;end endmodule
module DFF(S,Y,clk,rst,L);output reg S;output Y;input clk, rst;input L;assign Y = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= L;end endmodule
module DFF(I,Q,clk,rst,F);output reg I;output Q;input clk, rst;input F;assign Q = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= F;end endmodule
module DFF(N,K,clk,rst,R);output reg N;output K;input clk, rst;input R;assign K = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= R;end endmodule
module DFF(A,Z,clk,rst,O);output reg A;output Z;input clk, rst;input O;assign Z = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= O;end endmodule
module DFF(W,I,clk,rst,J);output reg W;output I;input clk, rst;input J;assign I = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= J;end endmodule
module DFF(R,X,clk,rst,D);output reg R;output X;input clk, rst;input D;assign X = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= D;end endmodule
module DFF(A,Y,clk,rst,U);output reg A;output Y;input clk, rst;input U;assign Y = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= U;end endmodule
module DFF(A,J,clk,rst,Q);output reg A;output J;input clk, rst;input Q;assign J = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= Q;end endmodule
module DFF(H,C,clk,rst,E);output reg H;output C;input clk, rst;input E;assign C = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= E;end endmodule
module DFF(V,P,clk,rst,T);output reg V;output P;input clk, rst;input T;assign P = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= T;end endmodule
module DFF(S,L,clk,rst,I);output reg S;output L;input clk, rst;input I;assign L = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= I;end endmodule
module DFF(M,E,clk,rst,R);output reg M;output E;input clk, rst;input R;assign E = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= R;end endmodule
module DFF(Y,I,clk,rst,S);output reg Y;output I;input clk, rst;input S;assign I = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= S;end endmodule
module DFF(G,Q,clk,rst,R);output reg G;output Q;input clk, rst;input R;assign Q = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= R;end endmodule
module DFF(P,O,clk,rst,M);output reg P;output O;input clk, rst;input M;assign O = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= M;end endmodule
module DFF(Y,G,clk,rst,H);output reg Y;output G;input clk, rst;input H;assign G = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= H;end endmodule
module DFF(U,X,clk,rst,R);output reg U;output X;input clk, rst;input R;assign X = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= R;end endmodule
module DFF(P,I,clk,rst,T);output reg P;output I;input clk, rst;input T;assign I = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= T;end endmodule
module DFF(J,B,clk,rst,C);output reg J;output B;input clk, rst;input C;assign B = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= C;end endmodule
module DFF(Z,B,clk,rst,U);output reg Z;output B;input clk, rst;input U;assign B = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= U;end endmodule
module DFF(K,E,clk,rst,Y);output reg K;output E;input clk, rst;input Y;assign E = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= Y;end endmodule
module DFF(S,N,clk,rst,F);output reg S;output N;input clk, rst;input F;assign N = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= F;end endmodule
module DFF(Z,A,clk,rst,D);output reg Z;output A;input clk, rst;input D;assign A = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= D;end endmodule
module DFF(V,G,clk,rst,F);output reg V;output G;input clk, rst;input F;assign G = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= F;end endmodule
module DFF(Q,M,clk,rst,G);output reg Q;output M;input clk, rst;input G;assign M = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= G;end endmodule
module DFF(S,Y,clk,rst,F);output reg S;output Y;input clk, rst;input F;assign Y = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= F;end endmodule
module DFF(J,W,clk,rst,X);output reg J;output W;input clk, rst;input X;assign W = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= X;end endmodule
module DFF(I,R,clk,rst,E);output reg I;output R;input clk, rst;input E;assign R = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= E;end endmodule
module DFF(R,O,clk,rst,X);output reg R;output O;input clk, rst;input X;assign O = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= X;end endmodule
module DFF(Y,Q,clk,rst,D);output reg Y;output Q;input clk, rst;input D;assign Q = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= D;end endmodule
module DFF(I,F,clk,rst,G);output reg I;output F;input clk, rst;input G;assign F = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= G;end endmodule
module DFF(O,V,clk,rst,D);output reg O;output V;input clk, rst;input D;assign V = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= D;end endmodule
module DFF(L,A,clk,rst,T);output reg L;output A;input clk, rst;input T;assign A = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= T;end endmodule
module DFF(K,N,clk,rst,Z);output reg K;output N;input clk, rst;input Z;assign N = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= Z;end endmodule
module DFF(I,G,clk,rst,L);output reg I;output G;input clk, rst;input L;assign G = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= L;end endmodule
module DFF(R,V,clk,rst,A);output reg R;output V;input clk, rst;input A;assign V = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= A;end endmodule
module DFF(T,H,clk,rst,K);output reg T;output H;input clk, rst;input K;assign H = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= K;end endmodule
module DFF(X,A,clk,rst,U);output reg X;output A;input clk, rst;input U;assign A = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= U;end endmodule
module DFF(U,Y,clk,rst,C);output reg U;output Y;input clk, rst;input C;assign Y = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= C;end endmodule
module DFF(A,B,clk,rst,J);output reg A;output B;input clk, rst;input J;assign B = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= J;end endmodule
module DFF(I,K,clk,rst,U);output reg I;output K;input clk, rst;input U;assign K = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= U;end endmodule
module DFF(K,D,clk,rst,N);output reg K;output D;input clk, rst;input N;assign D = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= N;end endmodule
module DFF(K,P,clk,rst,B);output reg K;output P;input clk, rst;input B;assign P = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= B;end endmodule
module DFF(F,K,clk,rst,D);output reg F;output K;input clk, rst;input D;assign K = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= D;end endmodule
module DFF(U,X,clk,rst,O);output reg U;output X;input clk, rst;input O;assign X = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= O;end endmodule
module DFF(W,A,clk,rst,B);output reg W;output A;input clk, rst;input B;assign A = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= B;end endmodule
module DFF(Y,X,clk,rst,R);output reg Y;output X;input clk, rst;input R;assign X = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= R;end endmodule
module DFF(S,J,clk,rst,I);output reg S;output J;input clk, rst;input I;assign J = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= I;end endmodule
module DFF(O,H,clk,rst,F);output reg O;output H;input clk, rst;input F;assign H = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= F;end endmodule
module DFF(E,L,clk,rst,T);output reg E;output L;input clk, rst;input T;assign L = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= T;end endmodule
module DFF(R,S,clk,rst,Q);output reg R;output S;input clk, rst;input Q;assign S = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= Q;end endmodule
module DFF(W,B,clk,rst,F);output reg W;output B;input clk, rst;input F;assign B = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= F;end endmodule
module DFF(K,X,clk,rst,Q);output reg K;output X;input clk, rst;input Q;assign X = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= Q;end endmodule
module DFF(S,W,clk,rst,L);output reg S;output W;input clk, rst;input L;assign W = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= L;end endmodule
module DFF(O,X,clk,rst,S);output reg O;output X;input clk, rst;input S;assign X = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= S;end endmodule
module DFF(E,D,clk,rst,O);output reg E;output D;input clk, rst;input O;assign D = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= O;end endmodule
module DFF(B,L,clk,rst,M);output reg B;output L;input clk, rst;input M;assign L = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= M;end endmodule
module DFF(T,I,clk,rst,K);output reg T;output I;input clk, rst;input K;assign I = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= K;end endmodule
module DFF(H,M,clk,rst,X);output reg H;output M;input clk, rst;input X;assign M = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= X;end endmodule
module DFF(M,A,clk,rst,Z);output reg M;output A;input clk, rst;input Z;assign A = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= Z;end endmodule
module DFF(Y,Q,clk,rst,R);output reg Y;output Q;input clk, rst;input R;assign Q = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= R;end endmodule
module DFF(Y,C,clk,rst,O);output reg Y;output C;input clk, rst;input O;assign C = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= O;end endmodule
module DFF(K,B,clk,rst,I);output reg K;output B;input clk, rst;input I;assign B = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= I;end endmodule
module DFF(D,I,clk,rst,X);output reg D;output I;input clk, rst;input X;assign I = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= X;end endmodule
module DFF(F,O,clk,rst,W);output reg F;output O;input clk, rst;input W;assign O = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= W;end endmodule
module DFF(T,X,clk,rst,Z);output reg T;output X;input clk, rst;input Z;assign X = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Z;end endmodule
module DFF(M,R,clk,rst,V);output reg M;output R;input clk, rst;input V;assign R = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= V;end endmodule
module DFF(C,Z,clk,rst,J);output reg C;output Z;input clk, rst;input J;assign Z = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= J;end endmodule
module DFF(M,Q,clk,rst,L);output reg M;output Q;input clk, rst;input L;assign Q = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= L;end endmodule
module DFF(D,Z,clk,rst,V);output reg D;output Z;input clk, rst;input V;assign Z = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= V;end endmodule
module DFF(M,X,clk,rst,S);output reg M;output X;input clk, rst;input S;assign X = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= S;end endmodule
module DFF(S,D,clk,rst,W);output reg S;output D;input clk, rst;input W;assign D = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= W;end endmodule
module DFF(D,E,clk,rst,I);output reg D;output E;input clk, rst;input I;assign E = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= I;end endmodule
module DFF(E,P,clk,rst,I);output reg E;output P;input clk, rst;input I;assign P = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= I;end endmodule
module DFF(B,C,clk,rst,K);output reg B;output C;input clk, rst;input K;assign C = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= K;end endmodule
module DFF(L,M,clk,rst,Z);output reg L;output M;input clk, rst;input Z;assign M = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= Z;end endmodule
module DFF(J,L,clk,rst,C);output reg J;output L;input clk, rst;input C;assign L = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= C;end endmodule
module DFF(U,L,clk,rst,Q);output reg U;output L;input clk, rst;input Q;assign L = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= Q;end endmodule
module DFF(Y,X,clk,rst,M);output reg Y;output X;input clk, rst;input M;assign X = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= M;end endmodule
module DFF(S,Z,clk,rst,A);output reg S;output Z;input clk, rst;input A;assign Z = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= A;end endmodule
module DFF(T,P,clk,rst,W);output reg T;output P;input clk, rst;input W;assign P = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= W;end endmodule
module DFF(J,L,clk,rst,W);output reg J;output L;input clk, rst;input W;assign L = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= W;end endmodule
module DFF(O,V,clk,rst,Q);output reg O;output V;input clk, rst;input Q;assign V = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= Q;end endmodule
module DFF(H,V,clk,rst,U);output reg H;output V;input clk, rst;input U;assign V = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= U;end endmodule
module DFF(B,H,clk,rst,D);output reg B;output H;input clk, rst;input D;assign H = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= D;end endmodule
module DFF(L,T,clk,rst,P);output reg L;output T;input clk, rst;input P;assign T = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= P;end endmodule
module DFF(G,C,clk,rst,S);output reg G;output C;input clk, rst;input S;assign C = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= S;end endmodule
module DFF(H,K,clk,rst,C);output reg H;output K;input clk, rst;input C;assign K = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= C;end endmodule
module DFF(I,M,clk,rst,C);output reg I;output M;input clk, rst;input C;assign M = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= C;end endmodule
module DFF(R,W,clk,rst,H);output reg R;output W;input clk, rst;input H;assign W = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= H;end endmodule
module DFF(O,D,clk,rst,Z);output reg O;output D;input clk, rst;input Z;assign D = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= Z;end endmodule
module DFF(Q,Y,clk,rst,D);output reg Q;output Y;input clk, rst;input D;assign Y = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= D;end endmodule
module DFF(L,N,clk,rst,H);output reg L;output N;input clk, rst;input H;assign N = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= H;end endmodule
module DFF(F,A,clk,rst,E);output reg F;output A;input clk, rst;input E;assign A = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= E;end endmodule
module DFF(D,O,clk,rst,V);output reg D;output O;input clk, rst;input V;assign O = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= V;end endmodule
module DFF(K,R,clk,rst,W);output reg K;output R;input clk, rst;input W;assign R = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= W;end endmodule
module DFF(H,K,clk,rst,B);output reg H;output K;input clk, rst;input B;assign K = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= B;end endmodule
module DFF(E,N,clk,rst,U);output reg E;output N;input clk, rst;input U;assign N = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= U;end endmodule
module DFF(B,W,clk,rst,G);output reg B;output W;input clk, rst;input G;assign W = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= G;end endmodule
module DFF(M,K,clk,rst,D);output reg M;output K;input clk, rst;input D;assign K = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= D;end endmodule
module DFF(Z,N,clk,rst,H);output reg Z;output N;input clk, rst;input H;assign N = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= H;end endmodule
module DFF(Y,O,clk,rst,T);output reg Y;output O;input clk, rst;input T;assign O = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= T;end endmodule
module DFF(I,U,clk,rst,D);output reg I;output U;input clk, rst;input D;assign U = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= D;end endmodule
module DFF(D,R,clk,rst,F);output reg D;output R;input clk, rst;input F;assign R = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= F;end endmodule
module DFF(U,K,clk,rst,R);output reg U;output K;input clk, rst;input R;assign K = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= R;end endmodule
module DFF(X,M,clk,rst,A);output reg X;output M;input clk, rst;input A;assign M = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= A;end endmodule
module DFF(W,H,clk,rst,A);output reg W;output H;input clk, rst;input A;assign H = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= A;end endmodule
module DFF(V,G,clk,rst,S);output reg V;output G;input clk, rst;input S;assign G = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= S;end endmodule
module DFF(A,R,clk,rst,L);output reg A;output R;input clk, rst;input L;assign R = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= L;end endmodule
module DFF(D,U,clk,rst,V);output reg D;output U;input clk, rst;input V;assign U = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= V;end endmodule
module DFF(D,Y,clk,rst,R);output reg D;output Y;input clk, rst;input R;assign Y = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= R;end endmodule
module DFF(S,R,clk,rst,A);output reg S;output R;input clk, rst;input A;assign R = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= A;end endmodule
module DFF(K,X,clk,rst,C);output reg K;output X;input clk, rst;input C;assign X = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= C;end endmodule
module DFF(T,K,clk,rst,A);output reg T;output K;input clk, rst;input A;assign K = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= A;end endmodule
module DFF(E,Y,clk,rst,K);output reg E;output Y;input clk, rst;input K;assign Y = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= K;end endmodule
module DFF(D,T,clk,rst,G);output reg D;output T;input clk, rst;input G;assign T = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= G;end endmodule
module DFF(I,D,clk,rst,M);output reg I;output D;input clk, rst;input M;assign D = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= M;end endmodule
module DFF(Q,U,clk,rst,V);output reg Q;output U;input clk, rst;input V;assign U = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= V;end endmodule
module DFF(T,Q,clk,rst,A);output reg T;output Q;input clk, rst;input A;assign Q = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= A;end endmodule
module DFF(X,Y,clk,rst,O);output reg X;output Y;input clk, rst;input O;assign Y = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= O;end endmodule
module DFF(R,M,clk,rst,H);output reg R;output M;input clk, rst;input H;assign M = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= H;end endmodule
module DFF(D,Q,clk,rst,L);output reg D;output Q;input clk, rst;input L;assign Q = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= L;end endmodule
module DFF(J,F,clk,rst,W);output reg J;output F;input clk, rst;input W;assign F = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= W;end endmodule
module DFF(Q,P,clk,rst,D);output reg Q;output P;input clk, rst;input D;assign P = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= D;end endmodule
module DFF(T,D,clk,rst,E);output reg T;output D;input clk, rst;input E;assign D = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= E;end endmodule
module DFF(A,N,clk,rst,I);output reg A;output N;input clk, rst;input I;assign N = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= I;end endmodule
module DFF(U,C,clk,rst,D);output reg U;output C;input clk, rst;input D;assign C = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(F,P,clk,rst,G);output reg F;output P;input clk, rst;input G;assign P = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= G;end endmodule
module DFF(L,D,clk,rst,F);output reg L;output D;input clk, rst;input F;assign D = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= F;end endmodule
module DFF(B,W,clk,rst,E);output reg B;output W;input clk, rst;input E;assign W = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= E;end endmodule
module DFF(T,V,clk,rst,G);output reg T;output V;input clk, rst;input G;assign V = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= G;end endmodule
module DFF(A,J,clk,rst,W);output reg A;output J;input clk, rst;input W;assign J = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= W;end endmodule
module DFF(T,L,clk,rst,P);output reg T;output L;input clk, rst;input P;assign L = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= P;end endmodule
module DFF(G,J,clk,rst,L);output reg G;output J;input clk, rst;input L;assign J = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= L;end endmodule
module DFF(K,G,clk,rst,D);output reg K;output G;input clk, rst;input D;assign G = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= D;end endmodule
module DFF(F,E,clk,rst,U);output reg F;output E;input clk, rst;input U;assign E = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= U;end endmodule
module DFF(J,P,clk,rst,X);output reg J;output P;input clk, rst;input X;assign P = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= X;end endmodule
module DFF(F,P,clk,rst,A);output reg F;output P;input clk, rst;input A;assign P = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= A;end endmodule
module DFF(I,Z,clk,rst,B);output reg I;output Z;input clk, rst;input B;assign Z = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= B;end endmodule
module DFF(T,R,clk,rst,O);output reg T;output R;input clk, rst;input O;assign R = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= O;end endmodule
module DFF(B,G,clk,rst,L);output reg B;output G;input clk, rst;input L;assign G = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= L;end endmodule
module DFF(V,G,clk,rst,T);output reg V;output G;input clk, rst;input T;assign G = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= T;end endmodule
module DFF(M,U,clk,rst,W);output reg M;output U;input clk, rst;input W;assign U = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= W;end endmodule
module DFF(T,X,clk,rst,H);output reg T;output X;input clk, rst;input H;assign X = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= H;end endmodule
module DFF(W,G,clk,rst,S);output reg W;output G;input clk, rst;input S;assign G = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= S;end endmodule
module DFF(O,V,clk,rst,S);output reg O;output V;input clk, rst;input S;assign V = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= S;end endmodule
module DFF(Q,P,clk,rst,L);output reg Q;output P;input clk, rst;input L;assign P = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= L;end endmodule
module DFF(D,Q,clk,rst,X);output reg D;output Q;input clk, rst;input X;assign Q = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= X;end endmodule
module DFF(Z,X,clk,rst,S);output reg Z;output X;input clk, rst;input S;assign X = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= S;end endmodule
module DFF(L,F,clk,rst,X);output reg L;output F;input clk, rst;input X;assign F = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= X;end endmodule
module DFF(I,U,clk,rst,X);output reg I;output U;input clk, rst;input X;assign U = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= X;end endmodule
module DFF(Y,G,clk,rst,O);output reg Y;output G;input clk, rst;input O;assign G = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= O;end endmodule
module DFF(Q,B,clk,rst,W);output reg Q;output B;input clk, rst;input W;assign B = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= W;end endmodule
module DFF(S,Q,clk,rst,U);output reg S;output Q;input clk, rst;input U;assign Q = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= U;end endmodule
module DFF(I,F,clk,rst,M);output reg I;output F;input clk, rst;input M;assign F = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= M;end endmodule
module DFF(X,W,clk,rst,S);output reg X;output W;input clk, rst;input S;assign W = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= S;end endmodule
module DFF(C,J,clk,rst,H);output reg C;output J;input clk, rst;input H;assign J = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= H;end endmodule
module DFF(Z,B,clk,rst,D);output reg Z;output B;input clk, rst;input D;assign B = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= D;end endmodule
module DFF(T,Q,clk,rst,E);output reg T;output Q;input clk, rst;input E;assign Q = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= E;end endmodule
module DFF(C,Z,clk,rst,F);output reg C;output Z;input clk, rst;input F;assign Z = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= F;end endmodule
module DFF(T,B,clk,rst,E);output reg T;output B;input clk, rst;input E;assign B = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= E;end endmodule
module DFF(V,L,clk,rst,I);output reg V;output L;input clk, rst;input I;assign L = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= I;end endmodule
module DFF(A,G,clk,rst,Q);output reg A;output G;input clk, rst;input Q;assign G = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= Q;end endmodule
module DFF(V,F,clk,rst,W);output reg V;output F;input clk, rst;input W;assign F = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= W;end endmodule
module DFF(U,R,clk,rst,C);output reg U;output R;input clk, rst;input C;assign R = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= C;end endmodule
module DFF(I,S,clk,rst,V);output reg I;output S;input clk, rst;input V;assign S = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= V;end endmodule
module DFF(E,O,clk,rst,X);output reg E;output O;input clk, rst;input X;assign O = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= X;end endmodule
module DFF(D,Y,clk,rst,G);output reg D;output Y;input clk, rst;input G;assign Y = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= G;end endmodule
module DFF(H,Z,clk,rst,Y);output reg H;output Z;input clk, rst;input Y;assign Z = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= Y;end endmodule
module DFF(S,O,clk,rst,R);output reg S;output O;input clk, rst;input R;assign O = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= R;end endmodule
module DFF(C,A,clk,rst,H);output reg C;output A;input clk, rst;input H;assign A = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= H;end endmodule
module DFF(E,F,clk,rst,P);output reg E;output F;input clk, rst;input P;assign F = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= P;end endmodule
module DFF(H,Q,clk,rst,D);output reg H;output Q;input clk, rst;input D;assign Q = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= D;end endmodule
module DFF(C,B,clk,rst,X);output reg C;output B;input clk, rst;input X;assign B = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= X;end endmodule
module DFF(N,T,clk,rst,Q);output reg N;output T;input clk, rst;input Q;assign T = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= Q;end endmodule
module DFF(J,G,clk,rst,Z);output reg J;output G;input clk, rst;input Z;assign G = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= Z;end endmodule
module DFF(W,P,clk,rst,G);output reg W;output P;input clk, rst;input G;assign P = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= G;end endmodule
module DFF(D,C,clk,rst,Q);output reg D;output C;input clk, rst;input Q;assign C = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Q;end endmodule
module DFF(L,J,clk,rst,R);output reg L;output J;input clk, rst;input R;assign J = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= R;end endmodule
module DFF(Q,V,clk,rst,W);output reg Q;output V;input clk, rst;input W;assign V = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= W;end endmodule
module DFF(W,Q,clk,rst,P);output reg W;output Q;input clk, rst;input P;assign Q = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= P;end endmodule
module DFF(X,A,clk,rst,B);output reg X;output A;input clk, rst;input B;assign A = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= B;end endmodule
module DFF(L,J,clk,rst,P);output reg L;output J;input clk, rst;input P;assign J = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= P;end endmodule
module DFF(K,H,clk,rst,U);output reg K;output H;input clk, rst;input U;assign H = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= U;end endmodule
module DFF(D,D,clk,rst,G);output reg D;output D;input clk, rst;input G;assign D = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= G;end endmodule
module DFF(O,W,clk,rst,D);output reg O;output W;input clk, rst;input D;assign W = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= D;end endmodule
module DFF(A,P,clk,rst,F);output reg A;output P;input clk, rst;input F;assign P = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= F;end endmodule
module DFF(O,Z,clk,rst,Q);output reg O;output Z;input clk, rst;input Q;assign Z = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= Q;end endmodule
module DFF(C,F,clk,rst,O);output reg C;output F;input clk, rst;input O;assign F = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= O;end endmodule
module DFF(D,I,clk,rst,P);output reg D;output I;input clk, rst;input P;assign I = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= P;end endmodule
module DFF(A,B,clk,rst,Q);output reg A;output B;input clk, rst;input Q;assign B = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= Q;end endmodule
module DFF(Q,W,clk,rst,C);output reg Q;output W;input clk, rst;input C;assign W = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= C;end endmodule
module DFF(L,U,clk,rst,C);output reg L;output U;input clk, rst;input C;assign U = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= C;end endmodule
module DFF(W,J,clk,rst,Z);output reg W;output J;input clk, rst;input Z;assign J = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Z;end endmodule
module DFF(Z,H,clk,rst,J);output reg Z;output H;input clk, rst;input J;assign H = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= J;end endmodule
module DFF(U,K,clk,rst,R);output reg U;output K;input clk, rst;input R;assign K = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= R;end endmodule
module DFF(B,V,clk,rst,I);output reg B;output V;input clk, rst;input I;assign V = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= I;end endmodule
module DFF(Q,W,clk,rst,U);output reg Q;output W;input clk, rst;input U;assign W = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= U;end endmodule
module DFF(X,S,clk,rst,N);output reg X;output S;input clk, rst;input N;assign S = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= N;end endmodule
module DFF(T,Q,clk,rst,A);output reg T;output Q;input clk, rst;input A;assign Q = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= A;end endmodule
module DFF(K,E,clk,rst,V);output reg K;output E;input clk, rst;input V;assign E = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= V;end endmodule
module DFF(N,F,clk,rst,I);output reg N;output F;input clk, rst;input I;assign F = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= I;end endmodule
module DFF(B,Z,clk,rst,E);output reg B;output Z;input clk, rst;input E;assign Z = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= E;end endmodule
module DFF(L,R,clk,rst,V);output reg L;output R;input clk, rst;input V;assign R = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= V;end endmodule
module DFF(K,V,clk,rst,W);output reg K;output V;input clk, rst;input W;assign V = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= W;end endmodule
module DFF(Q,H,clk,rst,N);output reg Q;output H;input clk, rst;input N;assign H = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= N;end endmodule
module DFF(O,Q,clk,rst,M);output reg O;output Q;input clk, rst;input M;assign Q = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= M;end endmodule
module DFF(T,B,clk,rst,V);output reg T;output B;input clk, rst;input V;assign B = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= V;end endmodule
module DFF(Z,N,clk,rst,D);output reg Z;output N;input clk, rst;input D;assign N = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= D;end endmodule
module DFF(I,W,clk,rst,H);output reg I;output W;input clk, rst;input H;assign W = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= H;end endmodule
module DFF(P,H,clk,rst,E);output reg P;output H;input clk, rst;input E;assign H = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= E;end endmodule
module DFF(L,J,clk,rst,E);output reg L;output J;input clk, rst;input E;assign J = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= E;end endmodule
module DFF(M,D,clk,rst,E);output reg M;output D;input clk, rst;input E;assign D = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= E;end endmodule
module DFF(U,T,clk,rst,F);output reg U;output T;input clk, rst;input F;assign T = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= F;end endmodule
module DFF(C,Z,clk,rst,B);output reg C;output Z;input clk, rst;input B;assign Z = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= B;end endmodule
module DFF(O,B,clk,rst,R);output reg O;output B;input clk, rst;input R;assign B = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= R;end endmodule
module DFF(W,N,clk,rst,U);output reg W;output N;input clk, rst;input U;assign N = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= U;end endmodule
module DFF(S,H,clk,rst,C);output reg S;output H;input clk, rst;input C;assign H = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= C;end endmodule
module DFF(Y,S,clk,rst,X);output reg Y;output S;input clk, rst;input X;assign S = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= X;end endmodule
module DFF(C,T,clk,rst,L);output reg C;output T;input clk, rst;input L;assign T = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= L;end endmodule
module DFF(B,J,clk,rst,Q);output reg B;output J;input clk, rst;input Q;assign J = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= Q;end endmodule
module DFF(S,F,clk,rst,K);output reg S;output F;input clk, rst;input K;assign F = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= K;end endmodule
module DFF(V,O,clk,rst,F);output reg V;output O;input clk, rst;input F;assign O = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= F;end endmodule
module DFF(R,X,clk,rst,A);output reg R;output X;input clk, rst;input A;assign X = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= A;end endmodule
module DFF(I,T,clk,rst,B);output reg I;output T;input clk, rst;input B;assign T = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= B;end endmodule
module DFF(P,Y,clk,rst,X);output reg P;output Y;input clk, rst;input X;assign Y = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= X;end endmodule
module DFF(Q,V,clk,rst,M);output reg Q;output V;input clk, rst;input M;assign V = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= M;end endmodule
module DFF(F,L,clk,rst,S);output reg F;output L;input clk, rst;input S;assign L = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= S;end endmodule
module DFF(U,B,clk,rst,E);output reg U;output B;input clk, rst;input E;assign B = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= E;end endmodule
module DFF(P,W,clk,rst,F);output reg P;output W;input clk, rst;input F;assign W = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= F;end endmodule
module DFF(Q,X,clk,rst,F);output reg Q;output X;input clk, rst;input F;assign X = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= F;end endmodule
module DFF(M,N,clk,rst,J);output reg M;output N;input clk, rst;input J;assign N = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= J;end endmodule
module DFF(L,F,clk,rst,Y);output reg L;output F;input clk, rst;input Y;assign F = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= Y;end endmodule
module DFF(R,Z,clk,rst,I);output reg R;output Z;input clk, rst;input I;assign Z = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= I;end endmodule
module DFF(C,R,clk,rst,V);output reg C;output R;input clk, rst;input V;assign R = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= V;end endmodule
module DFF(T,R,clk,rst,F);output reg T;output R;input clk, rst;input F;assign R = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= F;end endmodule
module DFF(Y,E,clk,rst,G);output reg Y;output E;input clk, rst;input G;assign E = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= G;end endmodule
module DFF(R,B,clk,rst,T);output reg R;output B;input clk, rst;input T;assign B = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= T;end endmodule
module DFF(V,L,clk,rst,A);output reg V;output L;input clk, rst;input A;assign L = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= A;end endmodule
module DFF(W,C,clk,rst,L);output reg W;output C;input clk, rst;input L;assign C = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= L;end endmodule
module DFF(Y,E,clk,rst,X);output reg Y;output E;input clk, rst;input X;assign E = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= X;end endmodule
module DFF(Z,W,clk,rst,K);output reg Z;output W;input clk, rst;input K;assign W = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= K;end endmodule
module DFF(Q,R,clk,rst,C);output reg Q;output R;input clk, rst;input C;assign R = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= C;end endmodule
module DFF(W,E,clk,rst,P);output reg W;output E;input clk, rst;input P;assign E = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= P;end endmodule
module DFF(F,K,clk,rst,I);output reg F;output K;input clk, rst;input I;assign K = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= I;end endmodule
module DFF(V,W,clk,rst,Q);output reg V;output W;input clk, rst;input Q;assign W = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= Q;end endmodule
module DFF(U,Q,clk,rst,W);output reg U;output Q;input clk, rst;input W;assign Q = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= W;end endmodule
module DFF(K,W,clk,rst,P);output reg K;output W;input clk, rst;input P;assign W = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= P;end endmodule
module DFF(I,F,clk,rst,R);output reg I;output F;input clk, rst;input R;assign F = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= R;end endmodule
module DFF(L,G,clk,rst,V);output reg L;output G;input clk, rst;input V;assign G = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= V;end endmodule
module DFF(O,G,clk,rst,N);output reg O;output G;input clk, rst;input N;assign G = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= N;end endmodule
module DFF(Q,N,clk,rst,W);output reg Q;output N;input clk, rst;input W;assign N = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= W;end endmodule
module DFF(S,W,clk,rst,N);output reg S;output W;input clk, rst;input N;assign W = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= N;end endmodule
module DFF(X,U,clk,rst,W);output reg X;output U;input clk, rst;input W;assign U = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= W;end endmodule
module DFF(Q,J,clk,rst,E);output reg Q;output J;input clk, rst;input E;assign J = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= E;end endmodule
module DFF(T,B,clk,rst,W);output reg T;output B;input clk, rst;input W;assign B = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= W;end endmodule
module DFF(E,W,clk,rst,F);output reg E;output W;input clk, rst;input F;assign W = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= F;end endmodule
module DFF(H,X,clk,rst,U);output reg H;output X;input clk, rst;input U;assign X = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= U;end endmodule
module DFF(C,N,clk,rst,A);output reg C;output N;input clk, rst;input A;assign N = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= A;end endmodule
module DFF(R,H,clk,rst,G);output reg R;output H;input clk, rst;input G;assign H = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= G;end endmodule
module DFF(W,U,clk,rst,D);output reg W;output U;input clk, rst;input D;assign U = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= D;end endmodule
module DFF(U,X,clk,rst,D);output reg U;output X;input clk, rst;input D;assign X = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(D,M,clk,rst,H);output reg D;output M;input clk, rst;input H;assign M = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= H;end endmodule
module DFF(A,Y,clk,rst,O);output reg A;output Y;input clk, rst;input O;assign Y = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= O;end endmodule
module DFF(Z,X,clk,rst,W);output reg Z;output X;input clk, rst;input W;assign X = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= W;end endmodule
module DFF(Q,B,clk,rst,W);output reg Q;output B;input clk, rst;input W;assign B = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= W;end endmodule
module DFF(X,I,clk,rst,Z);output reg X;output I;input clk, rst;input Z;assign I = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= Z;end endmodule
module DFF(G,S,clk,rst,B);output reg G;output S;input clk, rst;input B;assign S = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= B;end endmodule
module DFF(F,X,clk,rst,E);output reg F;output X;input clk, rst;input E;assign X = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= E;end endmodule
module DFF(X,Z,clk,rst,H);output reg X;output Z;input clk, rst;input H;assign Z = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= H;end endmodule
module DFF(H,N,clk,rst,P);output reg H;output N;input clk, rst;input P;assign N = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= P;end endmodule
module DFF(B,W,clk,rst,R);output reg B;output W;input clk, rst;input R;assign W = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= R;end endmodule
module DFF(T,I,clk,rst,U);output reg T;output I;input clk, rst;input U;assign I = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= U;end endmodule
module DFF(B,O,clk,rst,W);output reg B;output O;input clk, rst;input W;assign O = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= W;end endmodule
module DFF(M,X,clk,rst,E);output reg M;output X;input clk, rst;input E;assign X = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= E;end endmodule
module DFF(W,B,clk,rst,Q);output reg W;output B;input clk, rst;input Q;assign B = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Q;end endmodule
module DFF(X,D,clk,rst,H);output reg X;output D;input clk, rst;input H;assign D = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= H;end endmodule
module DFF(D,G,clk,rst,F);output reg D;output G;input clk, rst;input F;assign G = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= F;end endmodule
module DFF(Y,E,clk,rst,M);output reg Y;output E;input clk, rst;input M;assign E = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= M;end endmodule
module DFF(X,N,clk,rst,G);output reg X;output N;input clk, rst;input G;assign N = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= G;end endmodule
module DFF(N,A,clk,rst,F);output reg N;output A;input clk, rst;input F;assign A = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= F;end endmodule
module DFF(W,F,clk,rst,N);output reg W;output F;input clk, rst;input N;assign F = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= N;end endmodule
module DFF(F,N,clk,rst,W);output reg F;output N;input clk, rst;input W;assign N = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= W;end endmodule
module DFF(B,V,clk,rst,Y);output reg B;output V;input clk, rst;input Y;assign V = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= Y;end endmodule
module DFF(M,V,clk,rst,D);output reg M;output V;input clk, rst;input D;assign V = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= D;end endmodule
module DFF(O,U,clk,rst,F);output reg O;output U;input clk, rst;input F;assign U = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= F;end endmodule
module DFF(O,H,clk,rst,P);output reg O;output H;input clk, rst;input P;assign H = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= P;end endmodule
module DFF(N,S,clk,rst,C);output reg N;output S;input clk, rst;input C;assign S = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= C;end endmodule
module DFF(G,I,clk,rst,S);output reg G;output I;input clk, rst;input S;assign I = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= S;end endmodule
module DFF(L,J,clk,rst,O);output reg L;output J;input clk, rst;input O;assign J = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= O;end endmodule
module DFF(L,F,clk,rst,M);output reg L;output F;input clk, rst;input M;assign F = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= M;end endmodule
module DFF(O,A,clk,rst,M);output reg O;output A;input clk, rst;input M;assign A = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= M;end endmodule
module DFF(S,E,clk,rst,D);output reg S;output E;input clk, rst;input D;assign E = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= D;end endmodule
module DFF(P,X,clk,rst,H);output reg P;output X;input clk, rst;input H;assign X = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= H;end endmodule
module DFF(Y,C,clk,rst,F);output reg Y;output C;input clk, rst;input F;assign C = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= F;end endmodule
module DFF(G,H,clk,rst,I);output reg G;output H;input clk, rst;input I;assign H = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= I;end endmodule
module DFF(Q,G,clk,rst,J);output reg Q;output G;input clk, rst;input J;assign G = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= J;end endmodule
module DFF(E,A,clk,rst,G);output reg E;output A;input clk, rst;input G;assign A = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= G;end endmodule
module DFF(V,P,clk,rst,X);output reg V;output P;input clk, rst;input X;assign P = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= X;end endmodule
module DFF(U,V,clk,rst,N);output reg U;output V;input clk, rst;input N;assign V = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= N;end endmodule
module DFF(V,G,clk,rst,X);output reg V;output G;input clk, rst;input X;assign G = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= X;end endmodule
module DFF(G,Q,clk,rst,S);output reg G;output Q;input clk, rst;input S;assign Q = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= S;end endmodule
module DFF(P,D,clk,rst,W);output reg P;output D;input clk, rst;input W;assign D = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= W;end endmodule
module DFF(S,H,clk,rst,W);output reg S;output H;input clk, rst;input W;assign H = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= W;end endmodule
module DFF(X,U,clk,rst,F);output reg X;output U;input clk, rst;input F;assign U = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= F;end endmodule
module DFF(K,U,clk,rst,E);output reg K;output U;input clk, rst;input E;assign U = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= E;end endmodule
module DFF(W,G,clk,rst,J);output reg W;output G;input clk, rst;input J;assign G = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= J;end endmodule
module DFF(Y,V,clk,rst,T);output reg Y;output V;input clk, rst;input T;assign V = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= T;end endmodule
module DFF(V,W,clk,rst,C);output reg V;output W;input clk, rst;input C;assign W = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= C;end endmodule
module DFF(F,A,clk,rst,Z);output reg F;output A;input clk, rst;input Z;assign A = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= Z;end endmodule
module DFF(Y,Q,clk,rst,F);output reg Y;output Q;input clk, rst;input F;assign Q = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= F;end endmodule
module DFF(Q,S,clk,rst,P);output reg Q;output S;input clk, rst;input P;assign S = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= P;end endmodule
module DFF(O,I,clk,rst,S);output reg O;output I;input clk, rst;input S;assign I = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= S;end endmodule
module DFF(I,I,clk,rst,V);output reg I;output I;input clk, rst;input V;assign I = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= V;end endmodule
module DFF(H,M,clk,rst,X);output reg H;output M;input clk, rst;input X;assign M = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= X;end endmodule
module DFF(F,D,clk,rst,L);output reg F;output D;input clk, rst;input L;assign D = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= L;end endmodule
module DFF(V,L,clk,rst,F);output reg V;output L;input clk, rst;input F;assign L = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= F;end endmodule
module DFF(C,A,clk,rst,D);output reg C;output A;input clk, rst;input D;assign A = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= D;end endmodule
module DFF(F,A,clk,rst,J);output reg F;output A;input clk, rst;input J;assign A = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= J;end endmodule
module DFF(G,J,clk,rst,V);output reg G;output J;input clk, rst;input V;assign J = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= V;end endmodule
module DFF(D,F,clk,rst,Z);output reg D;output F;input clk, rst;input Z;assign F = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Z;end endmodule
module DFF(W,T,clk,rst,Z);output reg W;output T;input clk, rst;input Z;assign T = ~W;always @(posedge clk) begin if (rst) W <= 0;else W <= Z;end endmodule
module DFF(O,U,clk,rst,X);output reg O;output U;input clk, rst;input X;assign U = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= X;end endmodule
module DFF(Z,F,clk,rst,U);output reg Z;output F;input clk, rst;input U;assign F = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= U;end endmodule
module DFF(I,Y,clk,rst,Z);output reg I;output Y;input clk, rst;input Z;assign Y = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= Z;end endmodule
module DFF(A,N,clk,rst,M);output reg A;output N;input clk, rst;input M;assign N = ~A;always @(posedge clk) begin if (rst) A <= 0;else A <= M;end endmodule
module DFF(J,M,clk,rst,Q);output reg J;output M;input clk, rst;input Q;assign M = ~J;always @(posedge clk) begin if (rst) J <= 0;else J <= Q;end endmodule
module DFF(T,G,clk,rst,Y);output reg T;output G;input clk, rst;input Y;assign G = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Y;end endmodule
module DFF(X,C,clk,rst,P);output reg X;output C;input clk, rst;input P;assign C = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= P;end endmodule
module DFF(N,V,clk,rst,D);output reg N;output V;input clk, rst;input D;assign V = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= D;end endmodule
module DFF(S,V,clk,rst,P);output reg S;output V;input clk, rst;input P;assign V = ~S;always @(posedge clk) begin if (rst) S <= 0;else S <= P;end endmodule
module DFF(X,A,clk,rst,T);output reg X;output A;input clk, rst;input T;assign A = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= T;end endmodule
module DFF(N,P,clk,rst,E);output reg N;output P;input clk, rst;input E;assign P = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= E;end endmodule
module DFF(M,Z,clk,rst,S);output reg M;output Z;input clk, rst;input S;assign Z = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= S;end endmodule
module DFF(K,V,clk,rst,M);output reg K;output V;input clk, rst;input M;assign V = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= M;end endmodule
module DFF(O,G,clk,rst,H);output reg O;output G;input clk, rst;input H;assign G = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= H;end endmodule
module DFF(D,C,clk,rst,I);output reg D;output C;input clk, rst;input I;assign C = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= I;end endmodule
module DFF(B,H,clk,rst,P);output reg B;output H;input clk, rst;input P;assign H = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= P;end endmodule
module DFF(E,B,clk,rst,H);output reg E;output B;input clk, rst;input H;assign B = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= H;end endmodule
module DFF(R,O,clk,rst,I);output reg R;output O;input clk, rst;input I;assign O = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= I;end endmodule
module DFF(I,N,clk,rst,G);output reg I;output N;input clk, rst;input G;assign N = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= G;end endmodule
module DFF(Y,W,clk,rst,N);output reg Y;output W;input clk, rst;input N;assign W = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= N;end endmodule
module DFF(I,R,clk,rst,B);output reg I;output R;input clk, rst;input B;assign R = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= B;end endmodule
module DFF(P,A,clk,rst,T);output reg P;output A;input clk, rst;input T;assign A = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= T;end endmodule
module DFF(L,E,clk,rst,Q);output reg L;output E;input clk, rst;input Q;assign E = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= Q;end endmodule
module DFF(H,Z,clk,rst,V);output reg H;output Z;input clk, rst;input V;assign Z = ~H;always @(posedge clk) begin if (rst) H <= 0;else H <= V;end endmodule
module DFF(I,N,clk,rst,R);output reg I;output N;input clk, rst;input R;assign N = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= R;end endmodule
module DFF(I,B,clk,rst,J);output reg I;output B;input clk, rst;input J;assign B = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= J;end endmodule
module DFF(T,C,clk,rst,Z);output reg T;output C;input clk, rst;input Z;assign C = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= Z;end endmodule
module DFF(D,K,clk,rst,R);output reg D;output K;input clk, rst;input R;assign K = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= R;end endmodule
module DFF(X,D,clk,rst,E);output reg X;output D;input clk, rst;input E;assign D = ~X;always @(posedge clk) begin if (rst) X <= 0;else X <= E;end endmodule
module DFF(Z,S,clk,rst,J);output reg Z;output S;input clk, rst;input J;assign S = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= J;end endmodule
module DFF(P,B,clk,rst,X);output reg P;output B;input clk, rst;input X;assign B = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= X;end endmodule
module DFF(M,N,clk,rst,Q);output reg M;output N;input clk, rst;input Q;assign N = ~M;always @(posedge clk) begin if (rst) M <= 0;else M <= Q;end endmodule
module DFF(Q,W,clk,rst,O);output reg Q;output W;input clk, rst;input O;assign W = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= O;end endmodule
module DFF(O,X,clk,rst,J);output reg O;output X;input clk, rst;input J;assign X = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= J;end endmodule
module DFF(P,B,clk,rst,M);output reg P;output B;input clk, rst;input M;assign B = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= M;end endmodule
module DFF(K,F,clk,rst,D);output reg K;output F;input clk, rst;input D;assign F = ~K;always @(posedge clk) begin if (rst) K <= 0;else K <= D;end endmodule
module DFF(Z,H,clk,rst,D);output reg Z;output H;input clk, rst;input D;assign H = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= D;end endmodule
module DFF(O,C,clk,rst,H);output reg O;output C;input clk, rst;input H;assign C = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= H;end endmodule
module DFF(B,D,clk,rst,O);output reg B;output D;input clk, rst;input O;assign D = ~B;always @(posedge clk) begin if (rst) B <= 0;else B <= O;end endmodule
module DFF(P,W,clk,rst,C);output reg P;output W;input clk, rst;input C;assign W = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= C;end endmodule
module DFF(N,D,clk,rst,F);output reg N;output D;input clk, rst;input F;assign D = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= F;end endmodule
module DFF(I,T,clk,rst,S);output reg I;output T;input clk, rst;input S;assign T = ~I;always @(posedge clk) begin if (rst) I <= 0;else I <= S;end endmodule
module DFF(L,W,clk,rst,Y);output reg L;output W;input clk, rst;input Y;assign W = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= Y;end endmodule
module DFF(O,N,clk,rst,X);output reg O;output N;input clk, rst;input X;assign N = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= X;end endmodule
module DFF(U,K,clk,rst,D);output reg U;output K;input clk, rst;input D;assign K = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= D;end endmodule
module DFF(U,I,clk,rst,X);output reg U;output I;input clk, rst;input X;assign I = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= X;end endmodule
module DFF(E,K,clk,rst,S);output reg E;output K;input clk, rst;input S;assign K = ~E;always @(posedge clk) begin if (rst) E <= 0;else E <= S;end endmodule
module DFF(O,R,clk,rst,V);output reg O;output R;input clk, rst;input V;assign R = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= V;end endmodule
module DFF(C,G,clk,rst,M);output reg C;output G;input clk, rst;input M;assign G = ~C;always @(posedge clk) begin if (rst) C <= 0;else C <= M;end endmodule
module DFF(T,M,clk,rst,W);output reg T;output M;input clk, rst;input W;assign M = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= W;end endmodule
module DFF(Z,E,clk,rst,G);output reg Z;output E;input clk, rst;input G;assign E = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= G;end endmodule
module DFF(Q,H,clk,rst,U);output reg Q;output H;input clk, rst;input U;assign H = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= U;end endmodule
module DFF(G,C,clk,rst,N);output reg G;output C;input clk, rst;input N;assign C = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= N;end endmodule
module DFF(P,A,clk,rst,V);output reg P;output A;input clk, rst;input V;assign A = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= V;end endmodule
module DFF(O,I,clk,rst,S);output reg O;output I;input clk, rst;input S;assign I = ~O;always @(posedge clk) begin if (rst) O <= 0;else O <= S;end endmodule
module DFF(V,E,clk,rst,W);output reg V;output E;input clk, rst;input W;assign E = ~V;always @(posedge clk) begin if (rst) V <= 0;else V <= W;end endmodule
module DFF(Z,T,clk,rst,R);output reg Z;output T;input clk, rst;input R;assign T = ~Z;always @(posedge clk) begin if (rst) Z <= 0;else Z <= R;end endmodule
module DFF(D,N,clk,rst,Y);output reg D;output N;input clk, rst;input Y;assign N = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= Y;end endmodule
module DFF(F,Z,clk,rst,T);output reg F;output Z;input clk, rst;input T;assign Z = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= T;end endmodule
module DFF(R,G,clk,rst,D);output reg R;output G;input clk, rst;input D;assign G = ~R;always @(posedge clk) begin if (rst) R <= 0;else R <= D;end endmodule
module DFF(Q,J,clk,rst,G);output reg Q;output J;input clk, rst;input G;assign J = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= G;end endmodule
module DFF(U,Y,clk,rst,F);output reg U;output Y;input clk, rst;input F;assign Y = ~U;always @(posedge clk) begin if (rst) U <= 0;else U <= F;end endmodule
module DFF(G,T,clk,rst,I);output reg G;output T;input clk, rst;input I;assign T = ~G;always @(posedge clk) begin if (rst) G <= 0;else G <= I;end endmodule
module DFF(Q,G,clk,rst,Y);output reg Q;output G;input clk, rst;input Y;assign G = ~Q;always @(posedge clk) begin if (rst) Q <= 0;else Q <= Y;end endmodule
module DFF(L,Z,clk,rst,O);output reg L;output Z;input clk, rst;input O;assign Z = ~L;always @(posedge clk) begin if (rst) L <= 0;else L <= O;end endmodule
module DFF(N,C,clk,rst,Q);output reg N;output C;input clk, rst;input Q;assign C = ~N;always @(posedge clk) begin if (rst) N <= 0;else N <= Q;end endmodule
module DFF(P,B,clk,rst,E);output reg P;output B;input clk, rst;input E;assign B = ~P;always @(posedge clk) begin if (rst) P <= 0;else P <= E;end endmodule
module DFF(T,Y,clk,rst,B);output reg T;output Y;input clk, rst;input B;assign Y = ~T;always @(posedge clk) begin if (rst) T <= 0;else T <= B;end endmodule
module DFF(D,T,clk,rst,S);output reg D;output T;input clk, rst;input S;assign T = ~D;always @(posedge clk) begin if (rst) D <= 0;else D <= S;end endmodule
module DFF(F,N,clk,rst,J);output reg F;output N;input clk, rst;input J;assign N = ~F;always @(posedge clk) begin if (rst) F <= 0;else F <= J;end endmodule
module DFF(Y,T,clk,rst,B);output reg Y;output T;input clk, rst;input B;assign T = ~Y;always @(posedge clk) begin if (rst) Y <= 0;else Y <= B;end endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[23];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[23];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[25];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[7];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[8];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[11];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[23];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[6];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[27];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[5];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[26];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[18];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[15];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[2];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[1];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[2];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[15];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[17];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[18];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[4];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[0];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[10];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[17];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[25];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[17];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[19];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[20];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[25];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[3];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[3];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[24];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[13];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[25];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[19];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[26];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[15];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[10];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[17];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[25];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[25];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[6];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[7];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[19];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[12];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[0];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[18];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[2];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[13];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[14];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[15];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[6];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[18];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[12];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[16];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[6];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[17];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[12];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[18];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[2];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[24];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[7];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[11];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[20];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[0];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[2];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[26];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[16];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[22];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[14];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[2];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[14];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[24];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[15];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[10];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[13];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[9];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[19];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[8];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[27];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[6];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[22];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[5];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[22];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[24];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[10];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[17];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[14];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[12];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[3];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[13];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[20];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[11];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[20];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[27];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[18];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[24];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[12];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[8];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[11];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[1];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[8];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[12];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[16];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[18];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[19];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[17];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[19];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[26];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[23];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[7];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[8];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[5];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[6];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[1];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[3];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[6];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[23];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[14];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[15];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[4];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[16];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[15];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[1];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[25];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[4];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[19];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[6];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[4];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[13];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[5];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[10];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[22];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[9];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[26];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[13];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[24];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[12];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[22];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[14];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[1];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[6];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[7];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[22];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[7];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[12];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[10];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[3];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[26];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[27];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[13];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[1];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[13];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[0];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[0];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[2];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[21];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[24];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[11];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[13];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[17];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[0];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[0];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[0];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[16];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[10];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[25];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[19];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[17];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[10];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[7];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[22];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[22];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[15];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[6];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[11];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[8];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[12];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[11];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[24];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[14];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[6];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[23];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[1];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[26];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[5];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[0];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[8];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[10];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[19];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[7];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[26];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[7];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[18];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[15];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[7];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[24];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[15];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[11];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[21];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[9];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[19];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[8];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[4];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[12];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[2];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[22];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[27];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[8];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[20];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[0];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[6];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[3];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[14];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[24];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[25];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[9];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[23];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[15];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[3];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[24];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[13];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[27];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[22];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[27];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[12];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[6];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[12];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[5];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[3];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[6];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[4];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[2];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[21];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[4];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[13];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[1];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[23];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[27];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[7];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[7];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[9];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[11];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[25];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[6];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[10];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[26];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[9];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[19];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[8];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[3];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[27];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[27];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[15];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[19];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[7];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[22];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[21];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[27];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[11];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[20];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[5];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[27];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[8];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[1];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[5];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[1];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[14];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[12];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[17];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[2];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[14];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[20];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[5];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[11];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[27];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[25];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[24];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[21];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[11];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[22];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[5];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[18];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[7];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[4];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[20];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[7];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[27];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[27];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[19];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[11];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[4];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[25];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[2];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[18];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[9];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[3];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[7];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[8];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[8];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[5];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[7];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[18];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[12];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[24];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[15];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[20];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[13];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[17];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[21];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[6];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[9];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[10];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[21];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[17];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[14];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[11];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[17];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[8];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[21];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[7];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[15];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[14];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[10];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[14];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[6];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[26];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[14];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[24];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[13];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[8];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[2];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[25];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[8];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[3];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[8];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[15];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[13];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[14];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[9];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[25];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[20];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[17];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[18];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[12];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[26];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[13];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[12];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[24];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[11];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[14];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[16];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[7];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[21];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[5];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[13];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[11];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[23];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[23];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[1];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[7];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[21];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[15];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[19];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[3];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[9];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[19];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[11];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[23];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[18];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[2];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[19];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[21];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[25];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[23];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[12];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[11];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[9];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[24];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[11];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[1];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[16];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[1];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[14];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[12];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[7];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[16];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[10];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[20];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[6];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[20];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[16];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[8];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[26];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[7];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[16];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[7];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[2];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[8];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[22];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[11];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[23];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[17];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[21];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[3];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[27];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[15];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[15];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[20];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[10];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[22];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[18];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[9];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[6];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[23];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[17];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[10];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[1];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[8];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[11];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[1];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[0];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[5];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[3];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[15];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[9];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[6];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[21];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[5];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[12];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[15];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[8];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[12];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[20];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[8];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[12];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[15];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[25];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[21];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[14];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[25];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[13];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[0];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[24];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[6];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[10];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[27];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[19];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[3];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[13];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[11];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[19];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[8];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[27];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[0];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[16];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[8];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[14];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[15];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[10];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[21];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[3];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[8];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[27];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[14];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[16];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[21];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[7];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[26];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[13];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[14];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[13];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[6];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[25];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[3];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[7];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[13];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[4];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[12];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[7];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[16];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[3];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[2];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[20];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[14];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[16];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[23];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[3];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[24];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[9];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[21];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[26];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[26];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[16];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[14];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[20];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[11];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[14];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[4];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[16];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[16];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[26];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[5];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[23];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[25];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[3];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[21];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[22];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[16];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[7];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[0];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[19];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[8];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[1];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[0];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[7];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[3];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[17];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[13];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[17];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[15];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[0];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[12];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[21];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[12];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[12];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[10];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[1];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[17];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[14];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[23];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[1];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[9];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[24];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[6];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[2];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[19];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[22];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[13];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[22];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[18];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[27];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[9];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[21];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[6];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[23];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[14];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[10];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[7];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[4];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[17];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[13];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[8];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[23];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[5];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[7];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[8];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[13];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[1];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[21];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[8];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[6];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[11];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[25];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[12];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[9];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[2];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[19];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[6];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[11];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[1];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[23];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[14];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[5];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[18];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[18];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[0];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[8];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[13];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[24];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[12];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[11];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[1];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[25];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[6];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[19];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[3];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[1];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[26];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[23];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[26];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[23];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[19];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[5];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[15];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[0];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[27];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[22];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[23];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[4];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[6];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[13];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[12];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[16];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[25];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[22];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[8];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[9];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[22];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[5];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[3];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[8];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[11];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[19];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[22];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[18];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[11];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[9];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[10];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[13];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[10];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[27];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[21];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[11];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[24];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[20];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[25];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[22];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[24];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[15];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[11];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[27];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[20];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[26];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[7];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[14];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[10];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[16];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[26];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[12];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[2];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[8];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[12];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[21];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[8];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[3];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[25];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[6];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[26];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[25];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[22];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[10];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[21];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[22];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[5];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[11];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[27];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[20];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[4];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[24];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[7];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[0];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[3];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[11];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[19];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[10];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[15];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[17];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[10];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[0];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[23];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[26];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[24];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[7];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[8];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[15];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[2];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[4];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[13];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[1];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[24];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[0];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[25];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[4];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[10];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[1];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[11];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[7];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[7];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[24];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[1];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[14];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[16];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[5];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[27];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[17];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[24];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[14];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[7];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[22];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[5];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[5];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[11];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[21];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[27];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[3];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[15];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[1];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[27];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[27];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[9];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[20];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[25];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[19];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[15];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[3];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[10];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[4];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[20];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[15];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[17];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[13];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[4];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[6];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[16];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[9];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[13];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[19];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[22];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[21];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[16];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[4];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[5];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[5];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[5];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[19];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[11];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[8];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[12];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[10];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[16];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[23];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[13];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[5];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[18];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[5];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[2];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[14];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[23];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[10];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[6];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[21];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[9];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[21];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[18];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[3];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[1];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[22];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[25];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[12];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[20];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[16];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[19];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[19];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[22];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[11];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[0];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[23];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[11];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[14];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[19];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[19];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[11];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[3];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[1];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[21];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[12];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[9];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[4];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[15];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[15];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[0];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[8];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[16];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[5];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[8];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[6];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[22];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[19];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[20];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[16];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[2];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[21];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[15];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[23];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[9];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[21];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[16];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[2];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[22];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[1];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[15];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[9];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[12];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[26];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[15];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[25];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[0];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[0];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[25];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[17];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[6];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[6];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[14];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[26];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[22];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[9];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[10];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[3];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[8];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[23];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[4];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[17];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[27];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[4];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[14];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[27];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[10];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[0];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[11];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[6];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[11];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[27];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[10];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[24];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[15];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[11];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[18];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[1];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[9];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[9];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[26];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[4];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[12];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[27];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[26];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[11];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[12];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[9];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[15];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[18];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[24];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[16];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[23];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[19];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[1];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[2];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[24];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[6];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[27];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[27];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[12];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[8];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[25];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[5];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[1];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[14];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[7];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[23];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[9];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[24];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[12];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[19];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[17];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[22];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[18];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[23];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[6];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[5];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[18];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[3];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[4];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[10];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[1];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[12];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[18];endmodule
module LEDblink(clk, K);input clk; output K; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign K = cnt[16];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[5];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[22];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[10];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[23];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[24];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[10];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[17];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[3];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[10];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[10];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[5];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[15];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[18];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[6];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[4];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[6];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[16];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[19];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[18];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[13];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[25];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[5];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[4];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[1];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[10];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[24];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[19];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[16];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[3];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[12];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[19];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[9];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[16];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[5];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[0];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[24];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[27];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[26];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[7];endmodule
module LEDblink(clk, R);input clk; output R; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign R = cnt[6];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[13];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[8];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[5];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[17];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[6];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[27];endmodule
module LEDblink(clk, Z);input clk; output Z; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Z = cnt[2];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[8];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[4];endmodule
module LEDblink(clk, C);input clk; output C; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign C = cnt[0];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[0];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[20];endmodule
module LEDblink(clk, J);input clk; output J; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign J = cnt[18];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[6];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[2];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[17];endmodule
module LEDblink(clk, F);input clk; output F; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign F = cnt[10];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[22];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[16];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[24];endmodule
module LEDblink(clk, Q);input clk; output Q; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Q = cnt[3];endmodule
module LEDblink(clk, H);input clk; output H; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign H = cnt[20];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[11];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[18];endmodule
module LEDblink(clk, Y);input clk; output Y; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign Y = cnt[17];endmodule
module LEDblink(clk, B);input clk; output B; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign B = cnt[13];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[0];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[8];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[20];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[9];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[15];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[13];endmodule
module LEDblink(clk, W);input clk; output W; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign W = cnt[8];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[23];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[10];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[5];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[24];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[1];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[16];endmodule
module LEDblink(clk, G);input clk; output G; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign G = cnt[18];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[1];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[9];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[21];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[18];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[12];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[14];endmodule
module LEDblink(clk, O);input clk; output O; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign O = cnt[3];endmodule
module LEDblink(clk, I);input clk; output I; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign I = cnt[23];endmodule
module LEDblink(clk, S);input clk; output S; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign S = cnt[5];endmodule
module LEDblink(clk, U);input clk; output U; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign U = cnt[12];endmodule
module LEDblink(clk, L);input clk; output L; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign L = cnt[5];endmodule
module LEDblink(clk, P);input clk; output P; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign P = cnt[24];endmodule
module LEDblink(clk, V);input clk; output V; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign V = cnt[25];endmodule
module LEDblink(clk, T);input clk; output T; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign T = cnt[3];endmodule
module LEDblink(clk, X);input clk; output X; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign X = cnt[7];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[6];endmodule
module LEDblink(clk, A);input clk; output A; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign A = cnt[8];endmodule
module LEDblink(clk, N);input clk; output N; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign N = cnt[22];endmodule
module LEDblink(clk, E);input clk; output E; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign E = cnt[6];endmodule
module LEDblink(clk, D);input clk; output D; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign D = cnt[16];endmodule
module LEDblink(clk, M);input clk; output M; reg [31:0] cnt; always @(posedge clk) cnt <= cnt+1; assign M = cnt[14];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, K);input clk;output K;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign K = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, P);input clk;output P;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign P = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, Y);input clk;output Y;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Y = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, R);input clk;output R;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign R = PWM[4];endmodule
module LEDglow(clk, N);input clk;output N;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign N = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, B);input clk;output B;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign B = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, C);input clk;output C;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign C = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, G);input clk;output G;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign G = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, W);input clk;output W;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign W = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, Z);input clk;output Z;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Z = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, S);input clk;output S;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign S = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
module LEDglow(clk, E);input clk;output E;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign E = PWM[4];endmodule
module LEDglow(clk, M);input clk;output M;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign M = PWM[4];endmodule
module LEDglow(clk, L);input clk;output L;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign L = PWM[4];endmodule
module LEDglow(clk, D);input clk;output D;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign D = PWM[4];endmodule
module LEDglow(clk, T);input clk;output T;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign T = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, V);input clk;output V;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign V = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, J);input clk;output J;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign J = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, Q);input clk;output Q;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign Q = PWM[4];endmodule
module LEDglow(clk, U);input clk;output U;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign U = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, F);input clk;output F;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign F = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, H);input clk;output H;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign H = PWM[4];endmodule
module LEDglow(clk, O);input clk;output O;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign O = PWM[4];endmodule
module LEDglow(clk, A);input clk;output A;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign A = PWM[4];endmodule
module LEDglow(clk, X);input clk;output X;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign X = PWM[4];endmodule
module LEDglow(clk, I);input clk;output I;reg [23:0] cnt;always @(posedge clk) cnt <= cnt+1;reg [4:0] PWM;wire [3:0] intensity = cnt[23] ? cnt[22:19] : ~cnt[22:19];always @(posedge clk) PWM <= PWM[3:0] + intensity;assign I = PWM[4];endmodule
